
C:\Users\Tim King\AppData\Local\Temp\arduino\sketches\5AA0DBD714CC9155A83A0F44ABE2EC65/NuEVI.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:

float FilterOnePoleCascade::output() {
  return Pole2.output();
}

void FilterOnePoleCascade::test() {
       0:	00 80 00 20 bd 01 00 00 75 e6 00 00 31 e6 00 00     ... ....u...1...
  // make a filter, how fast does it run:

  float rise = 1.0;
  FilterOnePoleCascade myFilter( rise );
      10:	31 e6 00 00 31 e6 00 00 31 e6 00 00 31 e6 00 00     1...1...1...1...
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
      20:	31 e6 00 00 31 e6 00 00 31 e6 00 00 75 e6 00 00     1...1...1...u...
	size_t print(const char s[])			{ return write(s); }
      30:	75 e6 00 00 31 e6 00 00 61 da 00 00 65 da 00 00     u...1...a...e...
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
	return ret;
      40:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...

  Serial.print( "\n running filter speed loop ... ");

  float startTime, stopTime;

  startTime = millis()*1e-3;
      50:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  Pole2.input( Pole1.input( inVal ));
      60:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  Serial.print( "\n after reset to 0: "); Serial.print( myFilter.output() );

  Serial.print( "\n testing rise time (10% to 90%) ...");

  bool crossedTenPercent = false;
  while( myFilter.output() < 0.9 ) {
      70:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  stopTime = millis()*1e-3;
      80:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  Serial.print( float(nLoops) / (stopTime - startTime) );
      90:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
      a0:	39 b5 00 00 45 b5 00 00 75 e6 00 00 75 e6 00 00     9...E...u...u...
      b0:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  return Pole2.output();
      c0:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
      d0:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  Y = Ylast = X = newVal;
      e0:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  Serial.print( "\n after reset to 0: "); Serial.print( myFilter.output() );
      f0:	75 e6 00 00 75 e6 00 00 75 e6 00 00 39 f6 00 00     u...u...u...9...
	size_t print(const char s[])			{ return write(s); }
     100:	75 e6 00 00 81 fd 00 00 75 e6 00 00 75 e6 00 00     u.......u...u...
  while( myFilter.output() < 0.9 ) {
     110:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  Pole2.input( Pole1.input( inVal ));
     120:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
    myFilter.input( 1.0 );
    if( myFilter.output() > 0.1 && !crossedTenPercent ) {
     130:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     140:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
      // filter first crossed the 10% point
      startTime = millis()*1e-3;
     150:	fd de 00 00 19 df 00 00 35 df 00 00 51 df 00 00     ........5...Q...
     160:	75 e6 00 00 fd 00 01 00 75 e6 00 00 75 e6 00 00     u.......u...u...
      crossedTenPercent = true;
    }
  }
  stopTime = millis()*1e-3;
     170:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...

  Serial.print( "done, rise time: " ); Serial.print( stopTime-startTime );
     180:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
     190:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
     1a0:	75 e6 00 00 75 e6 00 00 75 e6 00 00 75 e6 00 00     u...u...u...u...
  __unused float lastFilterVal = 0;

  while( true ) {
    float now = 1e-3*millis();

    float currentFilterVal = myFilter.input( sin( TWO_PI*now) );
     1b0:	75 e6 00 00 75 e6 00 00 75 e6 00 00                 u...u...u...

000001bc <ResetHandler>:
  Pole2.input( Pole1.input( inVal ));
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c2:	b510      	push	{r4, lr}
     1c4:	81da      	strh	r2, [r3, #14]
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
  return output();
     1ca:	81da      	strh	r2, [r3, #14]
     1cc:	bf00      	nop
     1ce:	bf00      	nop
     1d0:	f00e fa54 	bl	e67c <startup_early_hook>
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
     1ee:	6153      	str	r3, [r2, #20]
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
     1f8:	789a      	ldrb	r2, [r3, #2]
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
     200:	f042 0208 	orr.w	r2, r2, #8
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
     20a:	222a      	movs	r2, #42	; 0x2a
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
    _swap_int16_t(y0, y1);
    _swap_int16_t(x0, x1);
  }

  startWrite();
  if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
     21a:	4299      	cmp	r1, r3
    a = b = x0;
    if (x1 < a)
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
     222:	f00e f931 	bl	e488 <memcpy>
      a = x1;
    else if (x1 > b)
      b = x1;
    if (x2 < a)
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
      a = x2;
    else if (x2 > b)
      b = x2;
    writeFastHLine(a, y0, b - a + 1, color);
     22a:	1cda      	adds	r2, r3, #3
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
     234:	4299      	cmp	r1, r3
     236:	bf88      	it	hi
  drawFastHLine(x, y, w, color);
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
     23c:	f012 f9a0 	bl	12580 <memset>
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    endWrite();
     248:	f00e f91e 	bl	e488 <memcpy>
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
    */
    if (a > b)
      _swap_int16_t(a, b);
    writeFastHLine(a, y, b - a + 1, color);
  }
  endWrite();
     252:	f803 1b01 	strb.w	r1, [r3], #1
}
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
  endWrite();
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
    _swap_int16_t(x0, x1);
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    else if (x2 > b)
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
  sb = (int32_t)dx02 * (y - y0);
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
    writeFastHLine(a, y0, b - a + 1, color);
     27c:	799a      	ldrb	r2, [r3, #6]
     27e:	06d4      	lsls	r4, r2, #27
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
	SYST_CVR = 0;
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20

	//init_pins();
	__enable_irq();
     2d6:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d8:	f00e fb2c 	bl	e934 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f00e fb19 	bl	e91c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f00e fb0a 	bl	e91c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     30c:	f00e f9bc 	bl	e688 <startup_late_hook>
	__libc_init_array();
     310:	f012 fa18 	bl	12744 <__libc_init_array>

	main();
     314:	f00e f8b0 	bl	e478 <main>
	
	while (1) ;
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c30 	.word	0x1fff8c30
     33c:	1fff98f0 	.word	0x1fff98f0
     340:	00016034 	.word	0x00016034
     344:	1fffa44c 	.word	0x1fffa44c
     348:	1fff98f0 	.word	0x1fff98f0
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	66fc6247 	.word	0x66fc6247
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff98f0 	.word	0x1fff98f0
     42c:	1fff98f0 	.word	0x1fff98f0
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff98f0 	.word	0x1fff98f0
     454:	0001602c 	.word	0x0001602c

00000458 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
     458:	b538      	push	{r3, r4, r5, lr}
     45a:	4604      	mov	r4, r0
     45c:	4608      	mov	r0, r1
  FT = ft;
     45e:	7020      	strb	r0, [r4, #0]
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
     460:	490a      	ldr	r1, [pc, #40]	; (48c <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
     462:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
     464:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
     466:	f011 f939 	bl	116dc <__aeabi_fmul>
     46a:	4601      	mov	r1, r0
     46c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
     470:	f011 f9e8 	bl	11844 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
     474:	4906      	ldr	r1, [pc, #24]	; (490 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
     476:	f011 f931 	bl	116dc <__aeabi_fmul>
  Y = initialValue;
     47a:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
     47c:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
     47e:	6125      	str	r5, [r4, #16]
  X = initialValue;
     480:	6165      	str	r5, [r4, #20]
  LastUS = micros();
     482:	f00e fca3 	bl	edcc <micros>
     486:	61e0      	str	r0, [r4, #28]
}
     488:	4620      	mov	r0, r4
     48a:	bd38      	pop	{r3, r4, r5, pc}
     48c:	40c90fdb 	.word	0x40c90fdb
     490:	49742400 	.word	0x49742400

00000494 <FilterOnePole::setFilter(FILTER_TYPE, float, float)>:
void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
     494:	b538      	push	{r3, r4, r5, lr}
     496:	4604      	mov	r4, r0
     498:	4608      	mov	r0, r1
  FT = ft;
     49a:	7020      	strb	r0, [r4, #0]
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
     49c:	490a      	ldr	r1, [pc, #40]	; (4c8 <FilterOnePole::setFilter(FILTER_TYPE, float, float)+0x34>)
     49e:	4610      	mov	r0, r2
void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
     4a0:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
     4a2:	f011 f91b 	bl	116dc <__aeabi_fmul>
     4a6:	4601      	mov	r1, r0
     4a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
     4ac:	f011 f9ca 	bl	11844 <__aeabi_fdiv>
  TauUS = newTau * 1e6;
     4b0:	4906      	ldr	r1, [pc, #24]	; (4cc <FilterOnePole::setFilter(FILTER_TYPE, float, float)+0x38>)
     4b2:	f011 f913 	bl	116dc <__aeabi_fmul>
  Y = initialValue;
     4b6:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
     4b8:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
     4ba:	6125      	str	r5, [r4, #16]
  X = initialValue;
     4bc:	6165      	str	r5, [r4, #20]
  LastUS = micros();
     4be:	f00e fc85 	bl	edcc <micros>
     4c2:	61e0      	str	r0, [r4, #28]
}
     4c4:	bd38      	pop	{r3, r4, r5, pc}
     4c6:	bf00      	nop
     4c8:	40c90fdb 	.word	0x40c90fdb
     4cc:	49742400 	.word	0x49742400

000004d0 <FilterOnePole::output()>:
  switch (FT) {
     4d0:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
     4d2:	b510      	push	{r4, lr}
     4d4:	4604      	mov	r4, r0
  switch (FT) {
     4d6:	2b03      	cmp	r3, #3
     4d8:	d821      	bhi.n	51e <FilterOnePole::output()+0x4e>
     4da:	e8df f003 	tbb	[pc, r3]
     4de:	1e19      	.short	0x1e19
     4e0:	0211      	.short	0x0211
      return (X-Y)/(TauUS/1.0e6);
     4e2:	68c1      	ldr	r1, [r0, #12]
     4e4:	6940      	ldr	r0, [r0, #20]
     4e6:	f010 ffef 	bl	114c8 <__aeabi_fsub>
     4ea:	490e      	ldr	r1, [pc, #56]	; (524 <FilterOnePole::output()+0x54>)
     4ec:	4603      	mov	r3, r0
     4ee:	6860      	ldr	r0, [r4, #4]
     4f0:	461c      	mov	r4, r3
     4f2:	f011 f9a7 	bl	11844 <__aeabi_fdiv>
     4f6:	4601      	mov	r1, r0
     4f8:	4620      	mov	r0, r4
     4fa:	f011 f9a3 	bl	11844 <__aeabi_fdiv>
}
     4fe:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
     500:	4908      	ldr	r1, [pc, #32]	; (524 <FilterOnePole::output()+0x54>)
     502:	6840      	ldr	r0, [r0, #4]
     504:	f011 f99e 	bl	11844 <__aeabi_fdiv>
     508:	68e1      	ldr	r1, [r4, #12]
     50a:	f011 f8e7 	bl	116dc <__aeabi_fmul>
}
     50e:	bd10      	pop	{r4, pc}
      return X-Y;
     510:	68c1      	ldr	r1, [r0, #12]
     512:	6940      	ldr	r0, [r0, #20]
     514:	f010 ffd8 	bl	114c8 <__aeabi_fsub>
}
     518:	bd10      	pop	{r4, pc}
      return Y;
     51a:	68c0      	ldr	r0, [r0, #12]
}
     51c:	bd10      	pop	{r4, pc}
  switch (FT) {
     51e:	2000      	movs	r0, #0
}
     520:	bd10      	pop	{r4, pc}
     522:	bf00      	nop
     524:	49742400 	.word	0x49742400

00000528 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
     528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     52a:	4604      	mov	r4, r0
     52c:	460e      	mov	r6, r1
  long time = micros();
     52e:	f00e fc4d 	bl	edcc <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
     532:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
     534:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
     536:	1ac0      	subs	r0, r0, r3
     538:	f011 f87c 	bl	11634 <__aeabi_i2f>
  Ylast = Y;
     53c:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
     53e:	61a0      	str	r0, [r4, #24]
     540:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
     542:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
     544:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
     546:	6166      	str	r6, [r4, #20]
  Ylast = Y;
     548:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
     54a:	f011 f97b 	bl	11844 <__aeabi_fdiv>
     54e:	4601      	mov	r1, r0
     550:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
     552:	480e      	ldr	r0, [pc, #56]	; (58c <FilterOnePole::input(float)+0x64>)
     554:	f011 f976 	bl	11844 <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
     558:	f010 fe34 	bl	111c4 <expf>
     55c:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
     55e:	4601      	mov	r1, r0
     560:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
     564:	f010 ffb0 	bl	114c8 <__aeabi_fsub>
     568:	4631      	mov	r1, r6
     56a:	f011 f8b7 	bl	116dc <__aeabi_fmul>
     56e:	4629      	mov	r1, r5
     570:	4606      	mov	r6, r0
     572:	4638      	mov	r0, r7
     574:	f011 f8b2 	bl	116dc <__aeabi_fmul>
     578:	4601      	mov	r1, r0
     57a:	4630      	mov	r0, r6
     57c:	f010 ffa6 	bl	114cc <__addsf3>
     580:	60e0      	str	r0, [r4, #12]
  return output();
     582:	4620      	mov	r0, r4
}
     584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
     588:	f7ff bfa2 	b.w	4d0 <FilterOnePole::output()>
     58c:	bf800000 	.word	0xbf800000

00000590 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
     590:	6803      	ldr	r3, [r0, #0]
     592:	4718      	bx	r3

00000594 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
     594:	680b      	ldr	r3, [r1, #0]
     596:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
     598:	4770      	bx	lr
     59a:	bf00      	nop

0000059c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
     59c:	680b      	ldr	r3, [r1, #0]
     59e:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
     5a0:	4770      	bx	lr
     5a2:	bf00      	nop

000005a4 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
     5a4:	4770      	bx	lr
     5a6:	bf00      	nop

000005a8 <IntervalTimer::~IntervalTimer()>:
public:
	IntervalTimer() {
		channel = NULL;
		nvic_priority = 128;
	}
	~IntervalTimer() {
     5a8:	b510      	push	{r4, lr}
     5aa:	4604      	mov	r4, r0
		end();
     5ac:	f00d fc5a 	bl	de64 <IntervalTimer::end()>
	}
     5b0:	4620      	mov	r0, r4
     5b2:	bd10      	pop	{r4, pc}

000005b4 <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>:
// for Arduino compatibility
#ifdef __cplusplus
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
     5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5b6:	4604      	mov	r4, r0
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
     5b8:	9806      	ldr	r0, [sp, #24]
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
     5ba:	461d      	mov	r5, r3
     5bc:	460f      	mov	r7, r1
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
     5be:	1a56      	subs	r6, r2, r1
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
     5c0:	f011 fa52 	bl	11a68 <__aeabi_f2iz>
	long out_range = out_max - out_min;
     5c4:	1b40      	subs	r0, r0, r5
	if (in_range == 0) return out_min + out_range / 2;
     5c6:	b1f6      	cbz	r6, 606 <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x52>
	long num = (x - in_min) * out_range;
     5c8:	eba4 0c07 	sub.w	ip, r4, r7
	if (out_range >= 0) {
     5cc:	2800      	cmp	r0, #0
	long num = (x - in_min) * out_range;
     5ce:	fb00 fc0c 	mul.w	ip, r0, ip
		num += in_range / 2;
     5d2:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
	if (out_range >= 0) {
     5d6:	db0a      	blt.n	5ee <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x3a>
		num += in_range / 2;
     5d8:	eb0c 0c63 	add.w	ip, ip, r3, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
     5dc:	fb0c f306 	mul.w	r3, ip, r6
     5e0:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
     5e2:	fb9c fcf6 	sdiv	ip, ip, r6
     5e6:	eb0c 0005 	add.w	r0, ip, r5
		if (in_range * num < 0) return result - 1;
     5ea:	db11      	blt.n	610 <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x5c>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
     5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		num -= in_range / 2;
     5ee:	ebac 0c63 	sub.w	ip, ip, r3, asr #1
		if (in_range * num >= 0) return result + 1;
     5f2:	fb0c f306 	mul.w	r3, ip, r6
     5f6:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
     5f8:	fb9c fcf6 	sdiv	ip, ip, r6
     5fc:	eb0c 0005 	add.w	r0, ip, r5
		if (in_range * num >= 0) return result + 1;
     600:	dbf4      	blt.n	5ec <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x38>
     602:	3001      	adds	r0, #1
}
     604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (in_range == 0) return out_min + out_range / 2;
     606:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
     60a:	eb05 0060 	add.w	r0, r5, r0, asr #1
}
     60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (in_range * num < 0) return result - 1;
     610:	3801      	subs	r0, #1
}
     612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000614 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>:
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
     614:	f8bd c000 	ldrh.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
     618:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
     61a:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
     61e:	d01c      	beq.n	65a <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
     620:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
     622:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
     626:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
     62a:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
     62e:	db09      	blt.n	644 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
     630:	eb00 0061 	add.w	r0, r0, r1, asr #1
		if (in_range * num < 0) return result - 1;
     634:	fb00 f102 	mul.w	r1, r0, r2
     638:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
     63a:	fb90 f0f2 	sdiv	r0, r0, r2
     63e:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
     640:	db10      	blt.n	664 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x50>
}
     642:	4770      	bx	lr
		num -= in_range / 2;
     644:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
     648:	fb00 f102 	mul.w	r1, r0, r2
     64c:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
     64e:	fb90 f0f2 	sdiv	r0, r0, r2
     652:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
     654:	dbf5      	blt.n	642 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x2e>
     656:	3001      	adds	r0, #1
}
     658:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
     65a:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
     65e:	eb03 006c 	add.w	r0, r3, ip, asr #1
     662:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
     664:	3801      	subs	r0, #1
     666:	4770      	bx	lr

00000668 <long map<int, unsigned short, unsigned short, int, int>(int, unsigned short, unsigned short, int, int, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>:
	long out_range = out_max - out_min;
     668:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
     66c:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
     66e:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
     672:	d01c      	beq.n	6ae <long map<int, unsigned short, unsigned short, int, int>(int, unsigned short, unsigned short, int, int, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
     674:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
     676:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
     67a:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
     67e:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
     682:	db09      	blt.n	698 <long map<int, unsigned short, unsigned short, int, int>(int, unsigned short, unsigned short, int, int, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
     684:	eb00 0061 	add.w	r0, r0, r1, asr #1
		if (in_range * num < 0) return result - 1;
     688:	fb00 f102 	mul.w	r1, r0, r2
     68c:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
     68e:	fb90 f0f2 	sdiv	r0, r0, r2
     692:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
     694:	db10      	blt.n	6b8 <long map<int, unsigned short, unsigned short, int, int>(int, unsigned short, unsigned short, int, int, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x50>
}
     696:	4770      	bx	lr
		num -= in_range / 2;
     698:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
     69c:	fb00 f102 	mul.w	r1, r0, r2
     6a0:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
     6a2:	fb90 f0f2 	sdiv	r0, r0, r2
     6a6:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
     6a8:	dbf5      	blt.n	696 <long map<int, unsigned short, unsigned short, int, int>(int, unsigned short, unsigned short, int, int, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]+0x2e>
     6aa:	3001      	adds	r0, #1
}
     6ac:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
     6ae:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
     6b2:	eb03 006c 	add.w	r0, r3, ip, asr #1
     6b6:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
     6b8:	3801      	subs	r0, #1
     6ba:	4770      	bx	lr

000006bc <stopRotatorNotes(unsigned char, Rotator const*)>:
  if (rotations[currentRotation]-24) midiSendNoteOn(noteValueCheck(note + rotations[currentRotation]-24), velocitySend); // send Note On message for new note
}

//**************************************************************

static void stopRotatorNotes(byte note, const Rotator *rotator) {
     6bc:	b538      	push	{r3, r4, r5, lr}
  if (rotator->parallel - 24) midiSendNoteOff(noteValueCheck(note + rotator->parallel-24 )); // send Note Off message for old note
     6be:	880b      	ldrh	r3, [r1, #0]
     6c0:	2b18      	cmp	r3, #24
static void stopRotatorNotes(byte note, const Rotator *rotator) {
     6c2:	460d      	mov	r5, r1
     6c4:	4604      	mov	r4, r0
  if (rotator->parallel - 24) midiSendNoteOff(noteValueCheck(note + rotator->parallel-24 )); // send Note Off message for old note
     6c6:	d107      	bne.n	6d8 <stopRotatorNotes(unsigned char, Rotator const*)+0x1c>
  if (rotator->rotations[currentRotation]-24) midiSendNoteOff(noteValueCheck(note + rotator->rotations[currentRotation]-24)); // send Note Off message for old note
     6c8:	4b29      	ldr	r3, [pc, #164]	; (770 <stopRotatorNotes(unsigned char, Rotator const*)+0xb4>)
     6ca:	781b      	ldrb	r3, [r3, #0]
     6cc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
     6d0:	886b      	ldrh	r3, [r5, #2]
     6d2:	2b18      	cmp	r3, #24
     6d4:	d114      	bne.n	700 <stopRotatorNotes(unsigned char, Rotator const*)+0x44>
}
     6d6:	bd38      	pop	{r3, r4, r5, pc}
  if (rotator->parallel - 24) midiSendNoteOff(noteValueCheck(note + rotator->parallel-24 )); // send Note Off message for old note
     6d8:	4403      	add	r3, r0
     6da:	f1a3 0018 	sub.w	r0, r3, #24
  return multiMap(inputVal, curveIn, curves[curve], 17);
}

// MIDI note value check with out of range octave repeat
inline int noteValueCheck(int note) {
  if (note > 127) {
     6de:	287f      	cmp	r0, #127	; 0x7f
     6e0:	dd23      	ble.n	72a <stopRotatorNotes(unsigned char, Rotator const*)+0x6e>
    note = 115 + (note - 127) % 12;
     6e2:	4a24      	ldr	r2, [pc, #144]	; (774 <stopRotatorNotes(unsigned char, Rotator const*)+0xb8>)
     6e4:	3b97      	subs	r3, #151	; 0x97
     6e6:	fba2 1203 	umull	r1, r2, r2, r3
     6ea:	08d2      	lsrs	r2, r2, #3
     6ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     6f0:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
     6f4:	f103 0073 	add.w	r0, r3, #115	; 0x73
  if (rotator->parallel - 24) midiSendNoteOff(noteValueCheck(note + rotator->parallel-24 )); // send Note Off message for old note
     6f8:	b2c0      	uxtb	r0, r0
     6fa:	f008 fbf5 	bl	8ee8 <midiSendNoteOff(unsigned char)>
     6fe:	e7e3      	b.n	6c8 <stopRotatorNotes(unsigned char, Rotator const*)+0xc>
  if (rotator->rotations[currentRotation]-24) midiSendNoteOff(noteValueCheck(note + rotator->rotations[currentRotation]-24)); // send Note Off message for old note
     700:	441c      	add	r4, r3
     702:	f1a4 0018 	sub.w	r0, r4, #24
  if (note > 127) {
     706:	287f      	cmp	r0, #127	; 0x7f
     708:	dd1e      	ble.n	748 <stopRotatorNotes(unsigned char, Rotator const*)+0x8c>
    note = 115 + (note - 127) % 12;
     70a:	4b1a      	ldr	r3, [pc, #104]	; (774 <stopRotatorNotes(unsigned char, Rotator const*)+0xb8>)
     70c:	3c97      	subs	r4, #151	; 0x97
     70e:	fba3 2304 	umull	r2, r3, r3, r4
     712:	08db      	lsrs	r3, r3, #3
     714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     718:	eba4 0483 	sub.w	r4, r4, r3, lsl #2
     71c:	f104 0073 	add.w	r0, r4, #115	; 0x73
}
     720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (rotator->rotations[currentRotation]-24) midiSendNoteOff(noteValueCheck(note + rotator->rotations[currentRotation]-24)); // send Note Off message for old note
     724:	b2c0      	uxtb	r0, r0
     726:	f008 bbdf 	b.w	8ee8 <midiSendNoteOff(unsigned char)>
  } else if (note < 0) {
     72a:	2800      	cmp	r0, #0
     72c:	dae4      	bge.n	6f8 <stopRotatorNotes(unsigned char, Rotator const*)+0x3c>
    note = 12 - abs(note) % 12;
     72e:	4a11      	ldr	r2, [pc, #68]	; (774 <stopRotatorNotes(unsigned char, Rotator const*)+0xb8>)
     730:	f1c3 0318 	rsb	r3, r3, #24
     734:	fba2 1203 	umull	r1, r2, r2, r3
     738:	08d2      	lsrs	r2, r2, #3
     73a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     73e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
     742:	f1c3 000c 	rsb	r0, r3, #12
     746:	e7d7      	b.n	6f8 <stopRotatorNotes(unsigned char, Rotator const*)+0x3c>
  } else if (note < 0) {
     748:	2800      	cmp	r0, #0
     74a:	dae9      	bge.n	720 <stopRotatorNotes(unsigned char, Rotator const*)+0x64>
    note = 12 - abs(note) % 12;
     74c:	4b09      	ldr	r3, [pc, #36]	; (774 <stopRotatorNotes(unsigned char, Rotator const*)+0xb8>)
     74e:	f1c4 0418 	rsb	r4, r4, #24
     752:	fba3 2304 	umull	r2, r3, r3, r4
     756:	08db      	lsrs	r3, r3, #3
     758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     75c:	eba4 0483 	sub.w	r4, r4, r3, lsl #2
     760:	f1c4 000c 	rsb	r0, r4, #12
  if (rotator->rotations[currentRotation]-24) midiSendNoteOff(noteValueCheck(note + rotator->rotations[currentRotation]-24)); // send Note Off message for old note
     764:	b2c0      	uxtb	r0, r0
}
     766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (rotator->rotations[currentRotation]-24) midiSendNoteOff(noteValueCheck(note + rotator->rotations[currentRotation]-24)); // send Note Off message for old note
     76a:	f008 bbbd 	b.w	8ee8 <midiSendNoteOff(unsigned char)>
     76e:	bf00      	nop
     770:	1fff8dbf 	.word	0x1fff8dbf
     774:	aaaaaaab 	.word	0xaaaaaaab

00000778 <updateRotator(unsigned char, Rotator const*)>:
static void updateRotator(byte note, const Rotator *rotator) {
     778:	b538      	push	{r3, r4, r5, lr}
  auto parallel = rotator->parallel;
     77a:	460c      	mov	r4, r1
static void updateRotator(byte note, const Rotator *rotator) {
     77c:	4605      	mov	r5, r0
  auto parallel = rotator->parallel;
     77e:	f834 3b02 	ldrh.w	r3, [r4], #2
  if (parallel-24) {
     782:	2b18      	cmp	r3, #24
     784:	d11d      	bne.n	7c2 <updateRotator(unsigned char, Rotator const*)+0x4a>
  currentRotation = (currentRotation +1) % 4;
     786:	4834      	ldr	r0, [pc, #208]	; (858 <updateRotator(unsigned char, Rotator const*)+0xe0>)
     788:	7803      	ldrb	r3, [r0, #0]
     78a:	3301      	adds	r3, #1
     78c:	f003 0203 	and.w	r2, r3, #3
     790:	7002      	strb	r2, [r0, #0]
     792:	4613      	mov	r3, r2
  while ((0 == rotations[currentRotation]-24) && allCheck){
     794:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
     798:	2a18      	cmp	r2, #24
     79a:	d128      	bne.n	7ee <updateRotator(unsigned char, Rotator const*)+0x76>
     79c:	f04f 0c04 	mov.w	ip, #4
    if (currentRotation < 3) currentRotation++;
     7a0:	1c59      	adds	r1, r3, #1
     7a2:	2b03      	cmp	r3, #3
  while ((0 == rotations[currentRotation]-24) && allCheck){
     7a4:	b2ca      	uxtb	r2, r1
    if (currentRotation < 3) currentRotation++;
     7a6:	bf15      	itete	ne
     7a8:	4613      	movne	r3, r2
     7aa:	4622      	moveq	r2, r4
  while ((0 == rotations[currentRotation]-24) && allCheck){
     7ac:	eb04 0242 	addne.w	r2, r4, r2, lsl #1
    else currentRotation = 0;
     7b0:	2300      	moveq	r3, #0
     7b2:	7003      	strb	r3, [r0, #0]
  while ((0 == rotations[currentRotation]-24) && allCheck){
     7b4:	8812      	ldrh	r2, [r2, #0]
     7b6:	2a18      	cmp	r2, #24
     7b8:	d119      	bne.n	7ee <updateRotator(unsigned char, Rotator const*)+0x76>
     7ba:	f1bc 0c01 	subs.w	ip, ip, #1
     7be:	d1ef      	bne.n	7a0 <updateRotator(unsigned char, Rotator const*)+0x28>
}
     7c0:	bd38      	pop	{r3, r4, r5, pc}
    midiSendNoteOn(noteValueCheck(note + parallel-24), velocitySend); // send Note On message for new note
     7c2:	4403      	add	r3, r0
     7c4:	f1a3 0018 	sub.w	r0, r3, #24
  if (note > 127) {
     7c8:	287f      	cmp	r0, #127	; 0x7f
     7ca:	dd27      	ble.n	81c <updateRotator(unsigned char, Rotator const*)+0xa4>
    note = 115 + (note - 127) % 12;
     7cc:	4a23      	ldr	r2, [pc, #140]	; (85c <updateRotator(unsigned char, Rotator const*)+0xe4>)
     7ce:	3b97      	subs	r3, #151	; 0x97
     7d0:	fba2 1203 	umull	r1, r2, r2, r3
     7d4:	08d2      	lsrs	r2, r2, #3
     7d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     7da:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
     7de:	f103 0073 	add.w	r0, r3, #115	; 0x73
    midiSendNoteOn(noteValueCheck(note + parallel-24), velocitySend); // send Note On message for new note
     7e2:	4b1f      	ldr	r3, [pc, #124]	; (860 <updateRotator(unsigned char, Rotator const*)+0xe8>)
     7e4:	b2c0      	uxtb	r0, r0
     7e6:	7819      	ldrb	r1, [r3, #0]
     7e8:	f008 fb40 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
     7ec:	e7cb      	b.n	786 <updateRotator(unsigned char, Rotator const*)+0xe>
  if (rotations[currentRotation]-24) midiSendNoteOn(noteValueCheck(note + rotations[currentRotation]-24), velocitySend); // send Note On message for new note
     7ee:	4415      	add	r5, r2
     7f0:	f1a5 0018 	sub.w	r0, r5, #24
  if (note > 127) {
     7f4:	287f      	cmp	r0, #127	; 0x7f
     7f6:	dd20      	ble.n	83a <updateRotator(unsigned char, Rotator const*)+0xc2>
    note = 115 + (note - 127) % 12;
     7f8:	4b18      	ldr	r3, [pc, #96]	; (85c <updateRotator(unsigned char, Rotator const*)+0xe4>)
     7fa:	3d97      	subs	r5, #151	; 0x97
     7fc:	fba3 2305 	umull	r2, r3, r3, r5
     800:	08db      	lsrs	r3, r3, #3
     802:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     806:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
     80a:	f105 0073 	add.w	r0, r5, #115	; 0x73
  if (rotations[currentRotation]-24) midiSendNoteOn(noteValueCheck(note + rotations[currentRotation]-24), velocitySend); // send Note On message for new note
     80e:	4b14      	ldr	r3, [pc, #80]	; (860 <updateRotator(unsigned char, Rotator const*)+0xe8>)
     810:	b2c0      	uxtb	r0, r0
     812:	7819      	ldrb	r1, [r3, #0]
}
     814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (rotations[currentRotation]-24) midiSendNoteOn(noteValueCheck(note + rotations[currentRotation]-24), velocitySend); // send Note On message for new note
     818:	f008 bb28 	b.w	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
  } else if (note < 0) {
     81c:	2800      	cmp	r0, #0
     81e:	dae0      	bge.n	7e2 <updateRotator(unsigned char, Rotator const*)+0x6a>
    note = 12 - abs(note) % 12;
     820:	4a0e      	ldr	r2, [pc, #56]	; (85c <updateRotator(unsigned char, Rotator const*)+0xe4>)
     822:	f1c3 0318 	rsb	r3, r3, #24
     826:	fba2 1203 	umull	r1, r2, r2, r3
     82a:	08d2      	lsrs	r2, r2, #3
     82c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     830:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
     834:	f1c3 000c 	rsb	r0, r3, #12
     838:	e7d3      	b.n	7e2 <updateRotator(unsigned char, Rotator const*)+0x6a>
  } else if (note < 0) {
     83a:	2800      	cmp	r0, #0
     83c:	dae7      	bge.n	80e <updateRotator(unsigned char, Rotator const*)+0x96>
    note = 12 - abs(note) % 12;
     83e:	4b07      	ldr	r3, [pc, #28]	; (85c <updateRotator(unsigned char, Rotator const*)+0xe4>)
     840:	f1c5 0518 	rsb	r5, r5, #24
     844:	fba3 2305 	umull	r2, r3, r3, r5
     848:	08db      	lsrs	r3, r3, #3
     84a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     84e:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
     852:	f1c5 000c 	rsb	r0, r5, #12
     856:	e7da      	b.n	80e <updateRotator(unsigned char, Rotator const*)+0x96>
     858:	1fff8dbf 	.word	0x1fff8dbf
     85c:	aaaaaaab 	.word	0xaaaaaaab
     860:	1fff9bf6 	.word	0x1fff9bf6

00000864 <cvUpdate()>:
void cvUpdate(){
     864:	b538      	push	{r3, r4, r5, lr}
  int cvPressure = analogRead(breathSensorPin);
     866:	200e      	movs	r0, #14
  analogWrite(pwmDacPin,map(constrain(cvPressure,breathThrVal,breathMaxVal),breathThrVal,breathMaxVal,0,4095));
     868:	4d2b      	ldr	r5, [pc, #172]	; (918 <cvUpdate()+0xb4>)
  int cvPressure = analogRead(breathSensorPin);
     86a:	f00d fcff 	bl	e26c <analogRead>
  analogWrite(pwmDacPin,map(constrain(cvPressure,breathThrVal,breathMaxVal),breathThrVal,breathMaxVal,0,4095));
     86e:	8829      	ldrh	r1, [r5, #0]
     870:	4b2a      	ldr	r3, [pc, #168]	; (91c <cvUpdate()+0xb8>)
     872:	4281      	cmp	r1, r0
     874:	881b      	ldrh	r3, [r3, #0]
  int cvPressure = analogRead(breathSensorPin);
     876:	4604      	mov	r4, r0
  analogWrite(pwmDacPin,map(constrain(cvPressure,breathThrVal,breathMaxVal),breathThrVal,breathMaxVal,0,4095));
     878:	dd33      	ble.n	8e2 <cvUpdate()+0x7e>
	if (in_range == 0) return out_min + out_range / 2;
     87a:	1a5b      	subs	r3, r3, r1
     87c:	460a      	mov	r2, r1
     87e:	d036      	beq.n	8ee <cvUpdate()+0x8a>
	long num = (x - in_min) * out_range;
     880:	1a52      	subs	r2, r2, r1
     882:	ebc2 3202 	rsb	r2, r2, r2, lsl #12
		num += in_range / 2;
     886:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
     88a:	eb02 0261 	add.w	r2, r2, r1, asr #1
	long result = num / in_range + out_min;
     88e:	fb92 f1f3 	sdiv	r1, r2, r3
		if (in_range * num < 0) return result - 1;
     892:	fb02 f303 	mul.w	r3, r2, r3
     896:	2b00      	cmp	r3, #0
     898:	db3a      	blt.n	910 <cvUpdate()+0xac>
     89a:	2014      	movs	r0, #20
     89c:	f00e f89c 	bl	e9d8 <analogWrite>
  if(dacMode == DAC_MODE_BREATH){
     8a0:	4b1f      	ldr	r3, [pc, #124]	; (920 <cvUpdate()+0xbc>)
     8a2:	881b      	ldrh	r3, [r3, #0]
     8a4:	bb9b      	cbnz	r3, 90e <cvUpdate()+0xaa>
    analogWrite(dacPin,map(constrain(cvPressure,breathThrVal,4095),breathThrVal,4095,0,4095));
     8a6:	882a      	ldrh	r2, [r5, #0]
     8a8:	42a2      	cmp	r2, r4
     8aa:	dc23      	bgt.n	8f4 <cvUpdate()+0x90>
     8ac:	f640 73ff 	movw	r3, #4095	; 0xfff
     8b0:	429c      	cmp	r4, r3
     8b2:	bfa8      	it	ge
     8b4:	461c      	movge	r4, r3
	long in_range = in_max - in_min;
     8b6:	f5c2 637f 	rsb	r3, r2, #4080	; 0xff0
     8ba:	330f      	adds	r3, #15
	if (in_range == 0) return out_min + out_range / 2;
     8bc:	b303      	cbz	r3, 900 <cvUpdate()+0x9c>
	long num = (x - in_min) * out_range;
     8be:	1aa1      	subs	r1, r4, r2
     8c0:	ebc1 3101 	rsb	r1, r1, r1, lsl #12
		num += in_range / 2;
     8c4:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
     8c8:	eb01 0162 	add.w	r1, r1, r2, asr #1
		if (in_range * num < 0) return result - 1;
     8cc:	fb01 f203 	mul.w	r2, r1, r3
     8d0:	2a00      	cmp	r2, #0
	long result = num / in_range + out_min;
     8d2:	fb91 f1f3 	sdiv	r1, r1, r3
		if (in_range * num < 0) return result - 1;
     8d6:	db1d      	blt.n	914 <cvUpdate()+0xb0>
}
     8d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    analogWrite(dacPin,map(constrain(cvPressure,breathThrVal,4095),breathThrVal,4095,0,4095));
     8dc:	2028      	movs	r0, #40	; 0x28
     8de:	f00e b87b 	b.w	e9d8 <analogWrite>
  analogWrite(pwmDacPin,map(constrain(cvPressure,breathThrVal,breathMaxVal),breathThrVal,breathMaxVal,0,4095));
     8e2:	4283      	cmp	r3, r0
     8e4:	461a      	mov	r2, r3
     8e6:	bfa8      	it	ge
     8e8:	4602      	movge	r2, r0
	if (in_range == 0) return out_min + out_range / 2;
     8ea:	1a5b      	subs	r3, r3, r1
     8ec:	d1c8      	bne.n	880 <cvUpdate()+0x1c>
     8ee:	f240 71ff 	movw	r1, #2047	; 0x7ff
     8f2:	e7d2      	b.n	89a <cvUpdate()+0x36>
	long in_range = in_max - in_min;
     8f4:	f5c2 637f 	rsb	r3, r2, #4080	; 0xff0
     8f8:	330f      	adds	r3, #15
     8fa:	4614      	mov	r4, r2
	if (in_range == 0) return out_min + out_range / 2;
     8fc:	2b00      	cmp	r3, #0
     8fe:	d1de      	bne.n	8be <cvUpdate()+0x5a>
}
     900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     904:	f240 71ff 	movw	r1, #2047	; 0x7ff
    analogWrite(dacPin,map(constrain(cvPressure,breathThrVal,4095),breathThrVal,4095,0,4095));
     908:	2028      	movs	r0, #40	; 0x28
     90a:	f00e b865 	b.w	e9d8 <analogWrite>
}
     90e:	bd38      	pop	{r3, r4, r5, pc}
		if (in_range * num < 0) return result - 1;
     910:	3901      	subs	r1, #1
     912:	e7c2      	b.n	89a <cvUpdate()+0x36>
     914:	3901      	subs	r1, #1
     916:	e7df      	b.n	8d8 <cvUpdate()+0x74>
     918:	1fff9a4e 	.word	0x1fff9a4e
     91c:	1fff9a4c 	.word	0x1fff9a4c
     920:	1fff9a84 	.word	0x1fff9a84

00000924 <leverCC_() [clone .part.0]>:
    }
  }
}


void leverCC_() {
     924:	b538      	push	{r3, r4, r5, lr}
  int leverCClevel = 0;
  if (3 == leverControl){
    leverPortRead = touchRead(vibratoPin);
     926:	200f      	movs	r0, #15
     928:	f00f faee 	bl	ff08 <touchRead>
    if (((3000-leverPortRead) >= leverThrVal)) { // we are over the threshold, calculate CC value
     92c:	4b21      	ldr	r3, [pc, #132]	; (9b4 <leverCC_() [clone .part.0]+0x90>)
    leverPortRead = touchRead(vibratoPin);
     92e:	4922      	ldr	r1, [pc, #136]	; (9b8 <leverCC_() [clone .part.0]+0x94>)
    if (((3000-leverPortRead) >= leverThrVal)) { // we are over the threshold, calculate CC value
     930:	881b      	ldrh	r3, [r3, #0]
    leverPortRead = touchRead(vibratoPin);
     932:	6008      	str	r0, [r1, #0]
    if (((3000-leverPortRead) >= leverThrVal)) { // we are over the threshold, calculate CC value
     934:	f5c0 623b 	rsb	r2, r0, #2992	; 0xbb0
     938:	3208      	adds	r2, #8
     93a:	429a      	cmp	r2, r3
     93c:	db18      	blt.n	970 <leverCC_() [clone .part.0]+0x4c>
      leverCClevel = map(constrain((3000-leverPortRead), leverThrVal, leverMaxVal), leverThrVal, leverMaxVal, 0, 127);
     93e:	491f      	ldr	r1, [pc, #124]	; (9bc <leverCC_() [clone .part.0]+0x98>)
     940:	8809      	ldrh	r1, [r1, #0]
	if (in_range == 0) return out_min + out_range / 2;
     942:	1ac8      	subs	r0, r1, r3
     944:	d022      	beq.n	98c <leverCC_() [clone .part.0]+0x68>
	long num = (x - in_min) * out_range;
     946:	428a      	cmp	r2, r1
     948:	bfd4      	ite	le
     94a:	ebc3 0302 	rsble	r3, r3, r2
     94e:	ebc3 0301 	rsbgt	r3, r3, r1
     952:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
		num += in_range / 2;
     956:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
     95a:	eb03 0462 	add.w	r4, r3, r2, asr #1
		if (in_range * num < 0) return result - 1;
     95e:	fb04 f300 	mul.w	r3, r4, r0
     962:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
     964:	fb94 f4f0 	sdiv	r4, r4, r0
		if (in_range * num < 0) return result - 1;
     968:	bfb8      	it	lt
     96a:	f104 34ff 	addlt.w	r4, r4, #4294967295
    }
    if (leverCClevel) { // there is a lever CC level, so go for it
     96e:	b974      	cbnz	r4, 98e <leverCC_() [clone .part.0]+0x6a>
      }
      if (leverCClevel != oldlevercc) {
        midiSendControlChange(leverCC, leverCClevel);
      }
      oldlevercc = leverCClevel;
    } else if (leverIsOn) {
     970:	4c13      	ldr	r4, [pc, #76]	; (9c0 <leverCC_() [clone .part.0]+0x9c>)
     972:	7823      	ldrb	r3, [r4, #0]
     974:	b903      	cbnz	r3, 978 <leverCC_() [clone .part.0]+0x54>
      midiSendControlChange(leverCC, 0);
      leverIsOn = 0;
      oldlevercc = 0;
    }
  }
}
     976:	bd38      	pop	{r3, r4, r5, pc}
      midiSendControlChange(leverCC, 0);
     978:	4b12      	ldr	r3, [pc, #72]	; (9c4 <leverCC_() [clone .part.0]+0xa0>)
     97a:	2100      	movs	r1, #0
     97c:	7818      	ldrb	r0, [r3, #0]
     97e:	f008 fa37 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
      leverIsOn = 0;
     982:	2300      	movs	r3, #0
      oldlevercc = 0;
     984:	4a10      	ldr	r2, [pc, #64]	; (9c8 <leverCC_() [clone .part.0]+0xa4>)
      leverIsOn = 0;
     986:	7023      	strb	r3, [r4, #0]
      oldlevercc = 0;
     988:	6013      	str	r3, [r2, #0]
}
     98a:	bd38      	pop	{r3, r4, r5, pc}
	if (in_range == 0) return out_min + out_range / 2;
     98c:	243f      	movs	r4, #63	; 0x3f
      if (!leverIsOn) {
     98e:	4b0c      	ldr	r3, [pc, #48]	; (9c0 <leverCC_() [clone .part.0]+0x9c>)
     990:	781a      	ldrb	r2, [r3, #0]
     992:	b90a      	cbnz	r2, 998 <leverCC_() [clone .part.0]+0x74>
        leverIsOn = 1;
     994:	2201      	movs	r2, #1
     996:	701a      	strb	r2, [r3, #0]
      if (leverCClevel != oldlevercc) {
     998:	4d0b      	ldr	r5, [pc, #44]	; (9c8 <leverCC_() [clone .part.0]+0xa4>)
     99a:	682b      	ldr	r3, [r5, #0]
     99c:	42a3      	cmp	r3, r4
     99e:	d101      	bne.n	9a4 <leverCC_() [clone .part.0]+0x80>
      oldlevercc = leverCClevel;
     9a0:	602c      	str	r4, [r5, #0]
}
     9a2:	bd38      	pop	{r3, r4, r5, pc}
        midiSendControlChange(leverCC, leverCClevel);
     9a4:	4b07      	ldr	r3, [pc, #28]	; (9c4 <leverCC_() [clone .part.0]+0xa0>)
     9a6:	b2e1      	uxtb	r1, r4
     9a8:	7818      	ldrb	r0, [r3, #0]
     9aa:	f008 fa21 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
      oldlevercc = leverCClevel;
     9ae:	602c      	str	r4, [r5, #0]
     9b0:	e7f7      	b.n	9a2 <leverCC_() [clone .part.0]+0x7e>
     9b2:	bf00      	nop
     9b4:	1fff9b28 	.word	0x1fff9b28
     9b8:	1fff9b20 	.word	0x1fff9b20
     9bc:	1fff9b1c 	.word	0x1fff9b1c
     9c0:	1fff9b1a 	.word	0x1fff9b1a
     9c4:	1fff9b16 	.word	0x1fff9b16
     9c8:	1fff9b54 	.word	0x1fff9b54

000009cc <biteCC_() [clone .part.0]>:
void biteCC_() {
     9cc:	b538      	push	{r3, r4, r5, lr}
    if (biteJumper) { //PBITE (if pulled low with jumper or if on a NuRAD, use pressure sensor instead of capacitive bite sensor)
     9ce:	4b25      	ldr	r3, [pc, #148]	; (a64 <biteCC_() [clone .part.0]+0x98>)
     9d0:	781b      	ldrb	r3, [r3, #0]
     9d2:	b32b      	cbz	r3, a20 <biteCC_() [clone .part.0]+0x54>
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
     9d4:	2015      	movs	r0, #21
     9d6:	f00d fc49 	bl	e26c <analogRead>
    if (biteSensor >= portamThrVal) { // we are over the threshold, calculate CC value
     9da:	4b23      	ldr	r3, [pc, #140]	; (a68 <biteCC_() [clone .part.0]+0x9c>)
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
     9dc:	4a23      	ldr	r2, [pc, #140]	; (a6c <biteCC_() [clone .part.0]+0xa0>)
    if (biteSensor >= portamThrVal) { // we are over the threshold, calculate CC value
     9de:	881b      	ldrh	r3, [r3, #0]
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
     9e0:	6010      	str	r0, [r2, #0]
    if (biteSensor >= portamThrVal) { // we are over the threshold, calculate CC value
     9e2:	4283      	cmp	r3, r0
     9e4:	dc18      	bgt.n	a18 <biteCC_() [clone .part.0]+0x4c>
      biteCClevel = map(constrain(biteSensor, portamThrVal, portamMaxVal), portamThrVal, portamMaxVal, 0, 127);
     9e6:	4a22      	ldr	r2, [pc, #136]	; (a70 <biteCC_() [clone .part.0]+0xa4>)
     9e8:	8812      	ldrh	r2, [r2, #0]
     9ea:	1ad1      	subs	r1, r2, r3
     9ec:	d026      	beq.n	a3c <biteCC_() [clone .part.0]+0x70>
	long num = (x - in_min) * out_range;
     9ee:	4282      	cmp	r2, r0
     9f0:	bfd4      	ite	le
     9f2:	ebc3 0302 	rsble	r3, r3, r2
     9f6:	ebc3 0300 	rsbgt	r3, r3, r0
     9fa:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
		num += in_range / 2;
     9fe:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
     a02:	eb03 0462 	add.w	r4, r3, r2, asr #1
		if (in_range * num < 0) return result - 1;
     a06:	fb04 f301 	mul.w	r3, r4, r1
     a0a:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
     a0c:	fb94 f4f1 	sdiv	r4, r4, r1
		if (in_range * num < 0) return result - 1;
     a10:	bfb8      	it	lt
     a12:	f104 34ff 	addlt.w	r4, r4, #4294967295
    if (biteCClevel) { // there is a bite CC level, so go for it
     a16:	b994      	cbnz	r4, a3e <biteCC_() [clone .part.0]+0x72>
    } else if (biteIsOn) {
     a18:	4c16      	ldr	r4, [pc, #88]	; (a74 <biteCC_() [clone .part.0]+0xa8>)
     a1a:	7823      	ldrb	r3, [r4, #0]
     a1c:	b923      	cbnz	r3, a28 <biteCC_() [clone .part.0]+0x5c>
}
     a1e:	bd38      	pop	{r3, r4, r5, pc}
      biteSensor = touchRead(bitePin);     // get sensor data, do some smoothing - SENSOR PIN 17 - PCB PINS LABELED "BITE" (GND left, sensor pin right)
     a20:	2011      	movs	r0, #17
     a22:	f00f fa71 	bl	ff08 <touchRead>
     a26:	e7d8      	b.n	9da <biteCC_() [clone .part.0]+0xe>
      midiSendControlChange(biteCC, 0);
     a28:	4b13      	ldr	r3, [pc, #76]	; (a78 <biteCC_() [clone .part.0]+0xac>)
     a2a:	2100      	movs	r1, #0
     a2c:	7818      	ldrb	r0, [r3, #0]
     a2e:	f008 f9df 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
      biteIsOn = 0;
     a32:	2300      	movs	r3, #0
      oldbitecc = 0;
     a34:	4a11      	ldr	r2, [pc, #68]	; (a7c <biteCC_() [clone .part.0]+0xb0>)
      biteIsOn = 0;
     a36:	7023      	strb	r3, [r4, #0]
      oldbitecc = 0;
     a38:	6013      	str	r3, [r2, #0]
}
     a3a:	bd38      	pop	{r3, r4, r5, pc}
	if (in_range == 0) return out_min + out_range / 2;
     a3c:	243f      	movs	r4, #63	; 0x3f
      if (!biteIsOn) {
     a3e:	4b0d      	ldr	r3, [pc, #52]	; (a74 <biteCC_() [clone .part.0]+0xa8>)
     a40:	781a      	ldrb	r2, [r3, #0]
     a42:	b90a      	cbnz	r2, a48 <biteCC_() [clone .part.0]+0x7c>
        biteIsOn = 1;
     a44:	2201      	movs	r2, #1
     a46:	701a      	strb	r2, [r3, #0]
      if (biteCClevel != oldbitecc) {
     a48:	4d0c      	ldr	r5, [pc, #48]	; (a7c <biteCC_() [clone .part.0]+0xb0>)
     a4a:	682b      	ldr	r3, [r5, #0]
     a4c:	42a3      	cmp	r3, r4
     a4e:	d101      	bne.n	a54 <biteCC_() [clone .part.0]+0x88>
      oldbitecc = biteCClevel;
     a50:	602c      	str	r4, [r5, #0]
}
     a52:	bd38      	pop	{r3, r4, r5, pc}
        midiSendControlChange(biteCC, biteCClevel);
     a54:	4b08      	ldr	r3, [pc, #32]	; (a78 <biteCC_() [clone .part.0]+0xac>)
     a56:	b2e1      	uxtb	r1, r4
     a58:	7818      	ldrb	r0, [r3, #0]
     a5a:	f008 f9c9 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
      oldbitecc = biteCClevel;
     a5e:	602c      	str	r4, [r5, #0]
     a60:	e7f7      	b.n	a52 <biteCC_() [clone .part.0]+0x86>
     a62:	bf00      	nop
     a64:	1fff9a0d 	.word	0x1fff9a0d
     a68:	1fff9b88 	.word	0x1fff9b88
     a6c:	1fff9a10 	.word	0x1fff9a10
     a70:	1fff9b86 	.word	0x1fff9b86
     a74:	1fff9a0c 	.word	0x1fff9a0c
     a78:	1fff9a08 	.word	0x1fff9a08
     a7c:	1fff9b3c 	.word	0x1fff9b3c

00000a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>:
{
     a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const int* offs = harmony[(note-hmzKey)%12];
     a82:	4b72      	ldr	r3, [pc, #456]	; (c4c <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1cc>)
     a84:	4c72      	ldr	r4, [pc, #456]	; (c50 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d0>)
     a86:	881b      	ldrh	r3, [r3, #0]
     a88:	1ac3      	subs	r3, r0, r3
{
     a8a:	4605      	mov	r5, r0
  const int* offs = harmony[(note-hmzKey)%12];
     a8c:	fb84 0403 	smull	r0, r4, r4, r3
     a90:	17d8      	asrs	r0, r3, #31
     a92:	ebc0 0064 	rsb	r0, r0, r4, asr #1
     a96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     a9a:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
     a9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     aa2:	0098      	lsls	r0, r3, #2
     aa4:	eb01 0483 	add.w	r4, r1, r3, lsl #2
    midiSendNoteOn(noteValueCheck(note+offs[0]), velocitySend);
     aa8:	5808      	ldr	r0, [r1, r0]
     aaa:	4428      	add	r0, r5
  if(sendOn) {
     aac:	b1aa      	cbz	r2, ada <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x5a>
  if (note > 127) {
     aae:	287f      	cmp	r0, #127	; 0x7f
     ab0:	dd5c      	ble.n	b6c <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0xec>
    note = 115 + (note - 127) % 12;
     ab2:	4b68      	ldr	r3, [pc, #416]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     ab4:	387f      	subs	r0, #127	; 0x7f
     ab6:	fba3 2300 	umull	r2, r3, r3, r0
     aba:	08db      	lsrs	r3, r3, #3
     abc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ac0:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     ac4:	3073      	adds	r0, #115	; 0x73
    midiSendNoteOn(noteValueCheck(note+offs[0]), velocitySend);
     ac6:	4f64      	ldr	r7, [pc, #400]	; (c58 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d8>)
    if (hmzLimit>2) midiSendNoteOn(noteValueCheck(note+offs[1]), velocitySend);
     ac8:	4e64      	ldr	r6, [pc, #400]	; (c5c <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1dc>)
    midiSendNoteOn(noteValueCheck(note+offs[0]), velocitySend);
     aca:	7839      	ldrb	r1, [r7, #0]
     acc:	b2c0      	uxtb	r0, r0
     ace:	f008 f9cd 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
    if (hmzLimit>2) midiSendNoteOn(noteValueCheck(note+offs[1]), velocitySend);
     ad2:	8833      	ldrh	r3, [r6, #0]
     ad4:	2b02      	cmp	r3, #2
     ad6:	d857      	bhi.n	b88 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x108>
}
     ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (note > 127) {
     ada:	287f      	cmp	r0, #127	; 0x7f
     adc:	dd38      	ble.n	b50 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0xd0>
    note = 115 + (note - 127) % 12;
     ade:	4b5d      	ldr	r3, [pc, #372]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     ae0:	387f      	subs	r0, #127	; 0x7f
     ae2:	fba3 2300 	umull	r2, r3, r3, r0
     ae6:	08db      	lsrs	r3, r3, #3
     ae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     aec:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     af0:	3073      	adds	r0, #115	; 0x73
    if (hmzLimit>2) midiSendNoteOff(noteValueCheck(note+offs[1]));
     af2:	4e5a      	ldr	r6, [pc, #360]	; (c5c <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1dc>)
    midiSendNoteOff(noteValueCheck(note+offs[0]));
     af4:	b2c0      	uxtb	r0, r0
     af6:	f008 f9f7 	bl	8ee8 <midiSendNoteOff(unsigned char)>
    if (hmzLimit>2) midiSendNoteOff(noteValueCheck(note+offs[1]));
     afa:	8833      	ldrh	r3, [r6, #0]
     afc:	2b02      	cmp	r3, #2
     afe:	d9eb      	bls.n	ad8 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x58>
     b00:	6860      	ldr	r0, [r4, #4]
     b02:	4428      	add	r0, r5
  if (note > 127) {
     b04:	287f      	cmp	r0, #127	; 0x7f
     b06:	f340 8092 	ble.w	c2e <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1ae>
    note = 115 + (note - 127) % 12;
     b0a:	4b52      	ldr	r3, [pc, #328]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     b0c:	387f      	subs	r0, #127	; 0x7f
     b0e:	fba3 2300 	umull	r2, r3, r3, r0
     b12:	08db      	lsrs	r3, r3, #3
     b14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     b18:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     b1c:	3073      	adds	r0, #115	; 0x73
    if (hmzLimit>2) midiSendNoteOff(noteValueCheck(note+offs[1]));
     b1e:	b2c0      	uxtb	r0, r0
     b20:	f008 f9e2 	bl	8ee8 <midiSendNoteOff(unsigned char)>
    if (hmzLimit>3) midiSendNoteOff(noteValueCheck(note+offs[2]));
     b24:	8833      	ldrh	r3, [r6, #0]
     b26:	2b03      	cmp	r3, #3
     b28:	d9d6      	bls.n	ad8 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x58>
     b2a:	68a0      	ldr	r0, [r4, #8]
     b2c:	4428      	add	r0, r5
  if (note > 127) {
     b2e:	287f      	cmp	r0, #127	; 0x7f
     b30:	dd6f      	ble.n	c12 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x192>
    note = 115 + (note - 127) % 12;
     b32:	4b48      	ldr	r3, [pc, #288]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     b34:	387f      	subs	r0, #127	; 0x7f
     b36:	fba3 2300 	umull	r2, r3, r3, r0
     b3a:	08db      	lsrs	r3, r3, #3
     b3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     b40:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     b44:	3073      	adds	r0, #115	; 0x73
}
     b46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (hmzLimit>3) midiSendNoteOff(noteValueCheck(note+offs[2]));
     b4a:	b2c0      	uxtb	r0, r0
     b4c:	f008 b9cc 	b.w	8ee8 <midiSendNoteOff(unsigned char)>
  } else if (note < 0) {
     b50:	2800      	cmp	r0, #0
     b52:	dace      	bge.n	af2 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x72>
    note = 12 - abs(note) % 12;
     b54:	4b3f      	ldr	r3, [pc, #252]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     b56:	4240      	negs	r0, r0
     b58:	fba3 2300 	umull	r2, r3, r3, r0
     b5c:	08db      	lsrs	r3, r3, #3
     b5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     b62:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     b66:	f1c0 000c 	rsb	r0, r0, #12
     b6a:	e7c2      	b.n	af2 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x72>
  } else if (note < 0) {
     b6c:	2800      	cmp	r0, #0
     b6e:	daaa      	bge.n	ac6 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x46>
    note = 12 - abs(note) % 12;
     b70:	4b38      	ldr	r3, [pc, #224]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     b72:	4240      	negs	r0, r0
     b74:	fba3 2300 	umull	r2, r3, r3, r0
     b78:	08db      	lsrs	r3, r3, #3
     b7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     b7e:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     b82:	f1c0 000c 	rsb	r0, r0, #12
     b86:	e79e      	b.n	ac6 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x46>
    if (hmzLimit>2) midiSendNoteOn(noteValueCheck(note+offs[1]), velocitySend);
     b88:	6860      	ldr	r0, [r4, #4]
     b8a:	4428      	add	r0, r5
  if (note > 127) {
     b8c:	287f      	cmp	r0, #127	; 0x7f
     b8e:	dd32      	ble.n	bf6 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x176>
    note = 115 + (note - 127) % 12;
     b90:	4b30      	ldr	r3, [pc, #192]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     b92:	387f      	subs	r0, #127	; 0x7f
     b94:	fba3 2300 	umull	r2, r3, r3, r0
     b98:	08db      	lsrs	r3, r3, #3
     b9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     b9e:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     ba2:	3073      	adds	r0, #115	; 0x73
    if (hmzLimit>2) midiSendNoteOn(noteValueCheck(note+offs[1]), velocitySend);
     ba4:	7839      	ldrb	r1, [r7, #0]
     ba6:	b2c0      	uxtb	r0, r0
     ba8:	f008 f960 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
    if (hmzLimit>3) midiSendNoteOn(noteValueCheck(note+offs[2]), velocitySend);
     bac:	8833      	ldrh	r3, [r6, #0]
     bae:	2b03      	cmp	r3, #3
     bb0:	d992      	bls.n	ad8 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x58>
     bb2:	68a0      	ldr	r0, [r4, #8]
     bb4:	4428      	add	r0, r5
  if (note > 127) {
     bb6:	287f      	cmp	r0, #127	; 0x7f
     bb8:	dd0f      	ble.n	bda <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x15a>
    note = 115 + (note - 127) % 12;
     bba:	4b26      	ldr	r3, [pc, #152]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     bbc:	387f      	subs	r0, #127	; 0x7f
     bbe:	fba3 2300 	umull	r2, r3, r3, r0
     bc2:	08db      	lsrs	r3, r3, #3
     bc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     bc8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     bcc:	3073      	adds	r0, #115	; 0x73
    if (hmzLimit>3) midiSendNoteOn(noteValueCheck(note+offs[2]), velocitySend);
     bce:	7839      	ldrb	r1, [r7, #0]
     bd0:	b2c0      	uxtb	r0, r0
}
     bd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (hmzLimit>3) midiSendNoteOn(noteValueCheck(note+offs[2]), velocitySend);
     bd6:	f008 b949 	b.w	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
  } else if (note < 0) {
     bda:	2800      	cmp	r0, #0
     bdc:	daf7      	bge.n	bce <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x14e>
    note = 12 - abs(note) % 12;
     bde:	4b1d      	ldr	r3, [pc, #116]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     be0:	4240      	negs	r0, r0
     be2:	fba3 2300 	umull	r2, r3, r3, r0
     be6:	08db      	lsrs	r3, r3, #3
     be8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     bec:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     bf0:	f1c0 000c 	rsb	r0, r0, #12
     bf4:	e7eb      	b.n	bce <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x14e>
  } else if (note < 0) {
     bf6:	2800      	cmp	r0, #0
     bf8:	dad4      	bge.n	ba4 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x124>
    note = 12 - abs(note) % 12;
     bfa:	4b16      	ldr	r3, [pc, #88]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     bfc:	4240      	negs	r0, r0
     bfe:	fba3 2300 	umull	r2, r3, r3, r0
     c02:	08db      	lsrs	r3, r3, #3
     c04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     c08:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     c0c:	f1c0 000c 	rsb	r0, r0, #12
     c10:	e7c8      	b.n	ba4 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x124>
  } else if (note < 0) {
     c12:	2800      	cmp	r0, #0
     c14:	da97      	bge.n	b46 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0xc6>
    note = 12 - abs(note) % 12;
     c16:	4b0f      	ldr	r3, [pc, #60]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     c18:	4240      	negs	r0, r0
     c1a:	fba3 2300 	umull	r2, r3, r3, r0
     c1e:	08db      	lsrs	r3, r3, #3
     c20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     c24:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     c28:	f1c0 000c 	rsb	r0, r0, #12
     c2c:	e78b      	b.n	b46 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0xc6>
  } else if (note < 0) {
     c2e:	2800      	cmp	r0, #0
     c30:	f6bf af75 	bge.w	b1e <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x9e>
    note = 12 - abs(note) % 12;
     c34:	4b07      	ldr	r3, [pc, #28]	; (c54 <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x1d4>)
     c36:	4240      	negs	r0, r0
     c38:	fba3 2300 	umull	r2, r3, r3, r0
     c3c:	08db      	lsrs	r3, r3, #3
     c3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     c42:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     c46:	f1c0 000c 	rsb	r0, r0, #12
     c4a:	e768      	b.n	b1e <sendHarmonizerData(unsigned char, int const (*) [3], bool)+0x9e>
     c4c:	1fff9aec 	.word	0x1fff9aec
     c50:	2aaaaaab 	.word	0x2aaaaaab
     c54:	aaaaaaab 	.word	0xaaaaaaab
     c58:	1fff9bf6 	.word	0x1fff9bf6
     c5c:	1fff9aee 	.word	0x1fff9aee

00000c60 <gliss() [clone .part.0]>:
void gliss() {  // ws
     c60:	b508      	push	{r3, lr}
    if (biteJumper) { //PBITE (if pulled low with jumper or if on a NuRAD, use pressure sensor instead of capacitive bite sensor)
     c62:	4b1a      	ldr	r3, [pc, #104]	; (ccc <gliss() [clone .part.0]+0x6c>)
     c64:	781b      	ldrb	r3, [r3, #0]
     c66:	b333      	cbz	r3, cb6 <gliss() [clone .part.0]+0x56>
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
     c68:	2015      	movs	r0, #21
     c6a:	f00d faff 	bl	e26c <analogRead>
    if (glissEnable && (biteSensor >= portamThrVal)  ){
     c6e:	4b18      	ldr	r3, [pc, #96]	; (cd0 <gliss() [clone .part.0]+0x70>)
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
     c70:	4a18      	ldr	r2, [pc, #96]	; (cd4 <gliss() [clone .part.0]+0x74>)
    if (glissEnable && (biteSensor >= portamThrVal)  ){
     c72:	781b      	ldrb	r3, [r3, #0]
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
     c74:	6010      	str	r0, [r2, #0]
    if (glissEnable && (biteSensor >= portamThrVal)  ){
     c76:	b1db      	cbz	r3, cb0 <gliss() [clone .part.0]+0x50>
     c78:	4b17      	ldr	r3, [pc, #92]	; (cd8 <gliss() [clone .part.0]+0x78>)
     c7a:	881b      	ldrh	r3, [r3, #0]
     c7c:	4283      	cmp	r3, r0
     c7e:	dc1e      	bgt.n	cbe <gliss() [clone .part.0]+0x5e>
      glissInterval = map(constrain(biteSensor, portamThrVal, portamMaxVal), portamThrVal, portamMaxVal, 4, 1); // limit gliss Interval to max maj 3rd
     c80:	4a16      	ldr	r2, [pc, #88]	; (cdc <gliss() [clone .part.0]+0x7c>)
     c82:	8812      	ldrh	r2, [r2, #0]
     c84:	1ad1      	subs	r1, r2, r3
     c86:	d01e      	beq.n	cc6 <gliss() [clone .part.0]+0x66>
	long num = (x - in_min) * out_range;
     c88:	4282      	cmp	r2, r0
     c8a:	bfd4      	ite	le
     c8c:	ebc3 0302 	rsble	r3, r3, r2
     c90:	ebc3 0300 	rsbgt	r3, r3, r0
     c94:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
		num -= in_range / 2;
     c98:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
     c9c:	eba3 0362 	sub.w	r3, r3, r2, asr #1
		if (in_range * num >= 0) return result + 1;
     ca0:	fb03 f201 	mul.w	r2, r3, r1
     ca4:	2a00      	cmp	r2, #0
	long result = num / in_range + out_min;
     ca6:	fb93 f3f1 	sdiv	r3, r3, r1
     caa:	bfb4      	ite	lt
     cac:	3304      	addlt	r3, #4
		if (in_range * num >= 0) return result + 1;
     cae:	3305      	addge	r3, #5
     cb0:	4a0b      	ldr	r2, [pc, #44]	; (ce0 <gliss() [clone .part.0]+0x80>)
     cb2:	6013      	str	r3, [r2, #0]
}
     cb4:	bd08      	pop	{r3, pc}
      biteSensor = touchRead(bitePin);     // get sensor data, do some smoothing - SENSOR PIN 17 - PCB PINS LABELED "BITE" (GND left, sensor pin right)
     cb6:	2011      	movs	r0, #17
     cb8:	f00f f926 	bl	ff08 <touchRead>
     cbc:	e7d7      	b.n	c6e <gliss() [clone .part.0]+0xe>
      glissInterval = map(constrain(biteSensor, portamThrVal, portamMaxVal), portamThrVal, portamMaxVal, 4, 1); // limit gliss Interval to max maj 3rd
     cbe:	4a08      	ldr	r2, [pc, #32]	; (ce0 <gliss() [clone .part.0]+0x80>)
     cc0:	2300      	movs	r3, #0
     cc2:	6013      	str	r3, [r2, #0]
}
     cc4:	bd08      	pop	{r3, pc}
	if (in_range == 0) return out_min + out_range / 2;
     cc6:	2303      	movs	r3, #3
    } else {
     cc8:	e7f2      	b.n	cb0 <gliss() [clone .part.0]+0x50>
     cca:	bf00      	nop
     ccc:	1fff9a0d 	.word	0x1fff9a0d
     cd0:	1fff9acc 	.word	0x1fff9acc
     cd4:	1fff9a10 	.word	0x1fff9a10
     cd8:	1fff9b88 	.word	0x1fff9b88
     cdc:	1fff9b86 	.word	0x1fff9b86
     ce0:	1fff9ad0 	.word	0x1fff9ad0

00000ce4 <stopHarmonizerNotes(unsigned char)>:
{
     ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  switch(polySelect) {
     ce8:	4b97      	ldr	r3, [pc, #604]	; (f48 <stopHarmonizerNotes(unsigned char)+0x264>)
     cea:	881b      	ldrh	r3, [r3, #0]
     cec:	3b01      	subs	r3, #1
{
     cee:	4604      	mov	r4, r0
  switch(polySelect) {
     cf0:	2b09      	cmp	r3, #9
     cf2:	d83c      	bhi.n	d6e <stopHarmonizerNotes(unsigned char)+0x8a>
     cf4:	e8df f003 	tbb	[pc, r3]
     cf8:	1c16100a 	.word	0x1c16100a
     cfc:	3d2e2822 	.word	0x3d2e2822
     d00:	0542      	.short	0x0542
}
     d02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ERotatorC: stopRotatorNotes(note, &rotations_c); break;
     d06:	4991      	ldr	r1, [pc, #580]	; (f4c <stopHarmonizerNotes(unsigned char)+0x268>)
     d08:	f7ff bcd8 	b.w	6bc <stopRotatorNotes(unsigned char, Rotator const*)>
}
     d0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ETriadMajorGospelRoot:      sendHarmonizerData(note, majGosRootHmz, false); break;
     d10:	498f      	ldr	r1, [pc, #572]	; (f50 <stopHarmonizerNotes(unsigned char)+0x26c>)
     d12:	2200      	movs	r2, #0
     d14:	f7ff beb4 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     d18:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ETriadMajorGospelDominant:  sendHarmonizerData(note, majGosDomHmz, false);  break;
     d1c:	498d      	ldr	r1, [pc, #564]	; (f54 <stopHarmonizerNotes(unsigned char)+0x270>)
     d1e:	2200      	movs	r2, #0
     d20:	f7ff beae 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     d24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case EMajorAddNine:              sendHarmonizerData(note, majAdd9Hmz, false);    break;
     d28:	498b      	ldr	r1, [pc, #556]	; (f58 <stopHarmonizerNotes(unsigned char)+0x274>)
     d2a:	2200      	movs	r2, #0
     d2c:	f7ff bea8 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     d30:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case EMinorDorian:               sendHarmonizerData(note, minDorHmz, false);     break;
     d34:	4989      	ldr	r1, [pc, #548]	; (f5c <stopHarmonizerNotes(unsigned char)+0x278>)
     d36:	2200      	movs	r2, #0
     d38:	f7ff bea2 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     d3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case EMinorAeolian:              sendHarmonizerData(note, minAeoHmz, false);     break;
     d40:	4987      	ldr	r1, [pc, #540]	; (f60 <stopHarmonizerNotes(unsigned char)+0x27c>)
     d42:	2200      	movs	r2, #0
     d44:	f7ff be9c 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     d48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case EMinorFourVoiceHip:         sendHarmonizerData(note, minHipHmz, false);     break;
     d4c:	4985      	ldr	r1, [pc, #532]	; (f64 <stopHarmonizerNotes(unsigned char)+0x280>)
     d4e:	2200      	movs	r2, #0
     d50:	f7ff be96 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
      if (!fwcDrop2 || (hmzLimit>(3+fwcLockH))) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][0]-12*fwcDrop2));
     d54:	4d84      	ldr	r5, [pc, #528]	; (f68 <stopHarmonizerNotes(unsigned char)+0x284>)
     d56:	4e85      	ldr	r6, [pc, #532]	; (f6c <stopHarmonizerNotes(unsigned char)+0x288>)
     d58:	882b      	ldrh	r3, [r5, #0]
     d5a:	b1a3      	cbz	r3, d86 <stopHarmonizerNotes(unsigned char)+0xa2>
     d5c:	4984      	ldr	r1, [pc, #528]	; (f70 <stopHarmonizerNotes(unsigned char)+0x28c>)
     d5e:	8832      	ldrh	r2, [r6, #0]
     d60:	8809      	ldrh	r1, [r1, #0]
     d62:	3103      	adds	r1, #3
     d64:	428a      	cmp	r2, r1
     d66:	dc0e      	bgt.n	d86 <stopHarmonizerNotes(unsigned char)+0xa2>
      if ((hmzLimit+fwcDrop2)>2) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][1]));
     d68:	4413      	add	r3, r2
     d6a:	2b02      	cmp	r3, #2
     d6c:	dc48      	bgt.n	e00 <stopHarmonizerNotes(unsigned char)+0x11c>
}
     d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ERotatorA: stopRotatorNotes(note, &rotations_a); break;
     d76:	497f      	ldr	r1, [pc, #508]	; (f74 <stopHarmonizerNotes(unsigned char)+0x290>)
     d78:	f7ff bca0 	b.w	6bc <stopRotatorNotes(unsigned char, Rotator const*)>
}
     d7c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ERotatorB: stopRotatorNotes(note, &rotations_b); break;
     d80:	497d      	ldr	r1, [pc, #500]	; (f78 <stopHarmonizerNotes(unsigned char)+0x294>)
     d82:	f7ff bc9b 	b.w	6bc <stopRotatorNotes(unsigned char, Rotator const*)>
      if (!fwcDrop2 || (hmzLimit>(3+fwcLockH))) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][0]-12*fwcDrop2));
     d86:	4a7d      	ldr	r2, [pc, #500]	; (f7c <stopHarmonizerNotes(unsigned char)+0x298>)
     d88:	497d      	ldr	r1, [pc, #500]	; (f80 <stopHarmonizerNotes(unsigned char)+0x29c>)
     d8a:	8812      	ldrh	r2, [r2, #0]
     d8c:	4f7d      	ldr	r7, [pc, #500]	; (f84 <stopHarmonizerNotes(unsigned char)+0x2a0>)
     d8e:	1aa2      	subs	r2, r4, r2
     d90:	fb81 1c02 	smull	r1, ip, r1, r2
     d94:	497c      	ldr	r1, [pc, #496]	; (f88 <stopHarmonizerNotes(unsigned char)+0x2a4>)
     d96:	17d0      	asrs	r0, r2, #31
     d98:	8809      	ldrh	r1, [r1, #0]
     d9a:	ebc0 006c 	rsb	r0, r0, ip, asr #1
     d9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     da2:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
     da6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     daa:	0109      	lsls	r1, r1, #4
     dac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     db0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     db4:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
     db8:	58b8      	ldr	r0, [r7, r2]
     dba:	4420      	add	r0, r4
     dbc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  if (note > 127) {
     dc0:	287f      	cmp	r0, #127	; 0x7f
     dc2:	dc12      	bgt.n	dea <stopHarmonizerNotes(unsigned char)+0x106>
  } else if (note < 0) {
     dc4:	2800      	cmp	r0, #0
     dc6:	da0a      	bge.n	dde <stopHarmonizerNotes(unsigned char)+0xfa>
    note = 12 - abs(note) % 12;
     dc8:	4b70      	ldr	r3, [pc, #448]	; (f8c <stopHarmonizerNotes(unsigned char)+0x2a8>)
     dca:	4240      	negs	r0, r0
     dcc:	fba3 2300 	umull	r2, r3, r3, r0
     dd0:	08db      	lsrs	r3, r3, #3
     dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     dd6:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     dda:	f1c0 000c 	rsb	r0, r0, #12
      if (!fwcDrop2 || (hmzLimit>(3+fwcLockH))) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][0]-12*fwcDrop2));
     dde:	b2c0      	uxtb	r0, r0
     de0:	f008 f882 	bl	8ee8 <midiSendNoteOff(unsigned char)>
      if ((hmzLimit+fwcDrop2)>2) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][1]));
     de4:	8832      	ldrh	r2, [r6, #0]
     de6:	882b      	ldrh	r3, [r5, #0]
     de8:	e7be      	b.n	d68 <stopHarmonizerNotes(unsigned char)+0x84>
    note = 115 + (note - 127) % 12;
     dea:	4b68      	ldr	r3, [pc, #416]	; (f8c <stopHarmonizerNotes(unsigned char)+0x2a8>)
     dec:	387f      	subs	r0, #127	; 0x7f
     dee:	fba3 2300 	umull	r2, r3, r3, r0
     df2:	08db      	lsrs	r3, r3, #3
     df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     df8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     dfc:	3073      	adds	r0, #115	; 0x73
     dfe:	e7ee      	b.n	dde <stopHarmonizerNotes(unsigned char)+0xfa>
      if ((hmzLimit+fwcDrop2)>2) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][1]));
     e00:	f8df 9178 	ldr.w	r9, [pc, #376]	; f7c <stopHarmonizerNotes(unsigned char)+0x298>
     e04:	495e      	ldr	r1, [pc, #376]	; (f80 <stopHarmonizerNotes(unsigned char)+0x29c>)
     e06:	f8b9 3000 	ldrh.w	r3, [r9]
     e0a:	f8df 817c 	ldr.w	r8, [pc, #380]	; f88 <stopHarmonizerNotes(unsigned char)+0x2a4>
     e0e:	4f5d      	ldr	r7, [pc, #372]	; (f84 <stopHarmonizerNotes(unsigned char)+0x2a0>)
     e10:	1ae3      	subs	r3, r4, r3
     e12:	fb81 2103 	smull	r2, r1, r1, r3
     e16:	17da      	asrs	r2, r3, #31
     e18:	ebc2 0261 	rsb	r2, r2, r1, asr #1
     e1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     e20:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
     e24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     e28:	f8b8 3000 	ldrh.w	r3, [r8]
     e2c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     e30:	011b      	lsls	r3, r3, #4
     e32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e36:	443b      	add	r3, r7
     e38:	6858      	ldr	r0, [r3, #4]
     e3a:	4420      	add	r0, r4
  if (note > 127) {
     e3c:	287f      	cmp	r0, #127	; 0x7f
     e3e:	dd58      	ble.n	ef2 <stopHarmonizerNotes(unsigned char)+0x20e>
    note = 115 + (note - 127) % 12;
     e40:	4b52      	ldr	r3, [pc, #328]	; (f8c <stopHarmonizerNotes(unsigned char)+0x2a8>)
     e42:	387f      	subs	r0, #127	; 0x7f
     e44:	fba3 2300 	umull	r2, r3, r3, r0
     e48:	08db      	lsrs	r3, r3, #3
     e4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     e4e:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     e52:	3073      	adds	r0, #115	; 0x73
      if ((hmzLimit+fwcDrop2)>2) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][1]));
     e54:	b2c0      	uxtb	r0, r0
     e56:	f008 f847 	bl	8ee8 <midiSendNoteOff(unsigned char)>
      if ((hmzLimit+fwcDrop2)>3) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][2]));
     e5a:	8833      	ldrh	r3, [r6, #0]
     e5c:	882a      	ldrh	r2, [r5, #0]
     e5e:	4413      	add	r3, r2
     e60:	2b03      	cmp	r3, #3
     e62:	dd84      	ble.n	d6e <stopHarmonizerNotes(unsigned char)+0x8a>
     e64:	f8b9 3000 	ldrh.w	r3, [r9]
     e68:	4845      	ldr	r0, [pc, #276]	; (f80 <stopHarmonizerNotes(unsigned char)+0x29c>)
     e6a:	f8b8 2000 	ldrh.w	r2, [r8]
     e6e:	1ae3      	subs	r3, r4, r3
     e70:	fb80 1003 	smull	r1, r0, r0, r3
     e74:	17d9      	asrs	r1, r3, #31
     e76:	ebc1 0160 	rsb	r1, r1, r0, asr #1
     e7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     e7e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
     e82:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
     e86:	0112      	lsls	r2, r2, #4
     e88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     e8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e90:	441f      	add	r7, r3
     e92:	68b8      	ldr	r0, [r7, #8]
     e94:	4420      	add	r0, r4
  if (note > 127) {
     e96:	287f      	cmp	r0, #127	; 0x7f
     e98:	dd39      	ble.n	f0e <stopHarmonizerNotes(unsigned char)+0x22a>
    note = 115 + (note - 127) % 12;
     e9a:	4b3c      	ldr	r3, [pc, #240]	; (f8c <stopHarmonizerNotes(unsigned char)+0x2a8>)
     e9c:	387f      	subs	r0, #127	; 0x7f
     e9e:	fba3 2300 	umull	r2, r3, r3, r0
     ea2:	08db      	lsrs	r3, r3, #3
     ea4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ea8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     eac:	3073      	adds	r0, #115	; 0x73
      if ((hmzLimit+fwcDrop2)>3) midiSendNoteOff(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][2]));
     eae:	b2c0      	uxtb	r0, r0
     eb0:	f008 f81a 	bl	8ee8 <midiSendNoteOff(unsigned char)>
      if (((hmzLimit+fwcDrop2)>4) && (1 == fwcLockH)) midiSendNoteOff(noteValueCheck(note-12));
     eb4:	8833      	ldrh	r3, [r6, #0]
     eb6:	882a      	ldrh	r2, [r5, #0]
     eb8:	4413      	add	r3, r2
     eba:	2b04      	cmp	r3, #4
     ebc:	f77f af57 	ble.w	d6e <stopHarmonizerNotes(unsigned char)+0x8a>
     ec0:	4b2b      	ldr	r3, [pc, #172]	; (f70 <stopHarmonizerNotes(unsigned char)+0x28c>)
     ec2:	881b      	ldrh	r3, [r3, #0]
     ec4:	2b01      	cmp	r3, #1
     ec6:	f47f af52 	bne.w	d6e <stopHarmonizerNotes(unsigned char)+0x8a>
     eca:	f1a4 030c 	sub.w	r3, r4, #12
  if (note > 127) {
     ece:	2b7f      	cmp	r3, #127	; 0x7f
     ed0:	dd2b      	ble.n	f2a <stopHarmonizerNotes(unsigned char)+0x246>
    note = 115 + (note - 127) % 12;
     ed2:	4a2e      	ldr	r2, [pc, #184]	; (f8c <stopHarmonizerNotes(unsigned char)+0x2a8>)
     ed4:	f1a4 038b 	sub.w	r3, r4, #139	; 0x8b
     ed8:	fba2 1203 	umull	r1, r2, r2, r3
     edc:	08d2      	lsrs	r2, r2, #3
     ede:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     ee2:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
     ee6:	3373      	adds	r3, #115	; 0x73
      if (((hmzLimit+fwcDrop2)>4) && (1 == fwcLockH)) midiSendNoteOff(noteValueCheck(note-12));
     ee8:	b2d8      	uxtb	r0, r3
}
     eea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      if (((hmzLimit+fwcDrop2)>4) && (1 == fwcLockH)) midiSendNoteOff(noteValueCheck(note-12));
     eee:	f007 bffb 	b.w	8ee8 <midiSendNoteOff(unsigned char)>
  } else if (note < 0) {
     ef2:	2800      	cmp	r0, #0
     ef4:	daae      	bge.n	e54 <stopHarmonizerNotes(unsigned char)+0x170>
    note = 12 - abs(note) % 12;
     ef6:	4b25      	ldr	r3, [pc, #148]	; (f8c <stopHarmonizerNotes(unsigned char)+0x2a8>)
     ef8:	4240      	negs	r0, r0
     efa:	fba3 2300 	umull	r2, r3, r3, r0
     efe:	08db      	lsrs	r3, r3, #3
     f00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f04:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     f08:	f1c0 000c 	rsb	r0, r0, #12
     f0c:	e7a2      	b.n	e54 <stopHarmonizerNotes(unsigned char)+0x170>
  } else if (note < 0) {
     f0e:	2800      	cmp	r0, #0
     f10:	dacd      	bge.n	eae <stopHarmonizerNotes(unsigned char)+0x1ca>
    note = 12 - abs(note) % 12;
     f12:	4b1e      	ldr	r3, [pc, #120]	; (f8c <stopHarmonizerNotes(unsigned char)+0x2a8>)
     f14:	4240      	negs	r0, r0
     f16:	fba3 2300 	umull	r2, r3, r3, r0
     f1a:	08db      	lsrs	r3, r3, #3
     f1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f20:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
     f24:	f1c0 000c 	rsb	r0, r0, #12
     f28:	e7c1      	b.n	eae <stopHarmonizerNotes(unsigned char)+0x1ca>
  } else if (note < 0) {
     f2a:	2b00      	cmp	r3, #0
     f2c:	dadc      	bge.n	ee8 <stopHarmonizerNotes(unsigned char)+0x204>
    note = 12 - abs(note) % 12;
     f2e:	4a17      	ldr	r2, [pc, #92]	; (f8c <stopHarmonizerNotes(unsigned char)+0x2a8>)
     f30:	f1c4 030c 	rsb	r3, r4, #12
     f34:	fba2 1203 	umull	r1, r2, r2, r3
     f38:	08d2      	lsrs	r2, r2, #3
     f3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     f3e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
     f42:	f1c3 030c 	rsb	r3, r3, #12
     f46:	e7cf      	b.n	ee8 <stopHarmonizerNotes(unsigned char)+0x204>
     f48:	1fff9b80 	.word	0x1fff9b80
     f4c:	1fff9bb8 	.word	0x1fff9bb8
     f50:	00012d60 	.word	0x00012d60
     f54:	00012cd0 	.word	0x00012cd0
     f58:	00012c28 	.word	0x00012c28
     f5c:	000136b0 	.word	0x000136b0
     f60:	00013620 	.word	0x00013620
     f64:	00013740 	.word	0x00013740
     f68:	1fff9aba 	.word	0x1fff9aba
     f6c:	1fff9aee 	.word	0x1fff9aee
     f70:	1fff9abc 	.word	0x1fff9abc
     f74:	1fff9ba0 	.word	0x1fff9ba0
     f78:	1fff9bac 	.word	0x1fff9bac
     f7c:	1fff9aec 	.word	0x1fff9aec
     f80:	2aaaaaab 	.word	0x2aaaaaab
     f84:	000133b8 	.word	0x000133b8
     f88:	1fff9abe 	.word	0x1fff9abe
     f8c:	aaaaaaab 	.word	0xaaaaaaab

00000f90 <startHarmonizerNotes(unsigned char)>:
{
     f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  switch(polySelect) {
     f94:	4b96      	ldr	r3, [pc, #600]	; (11f0 <startHarmonizerNotes(unsigned char)+0x260>)
     f96:	881b      	ldrh	r3, [r3, #0]
     f98:	3b01      	subs	r3, #1
{
     f9a:	4604      	mov	r4, r0
  switch(polySelect) {
     f9c:	2b09      	cmp	r3, #9
     f9e:	d83c      	bhi.n	101a <startHarmonizerNotes(unsigned char)+0x8a>
     fa0:	e8df f003 	tbb	[pc, r3]
     fa4:	1c16100a 	.word	0x1c16100a
     fa8:	3d2e2822 	.word	0x3d2e2822
     fac:	0542      	.short	0x0542
}
     fae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ERotatorC: updateRotator(note, &rotations_c); break;
     fb2:	4990      	ldr	r1, [pc, #576]	; (11f4 <startHarmonizerNotes(unsigned char)+0x264>)
     fb4:	f7ff bbe0 	b.w	778 <updateRotator(unsigned char, Rotator const*)>
}
     fb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ETriadMajorGospelRoot:      sendHarmonizerData(note, majGosRootHmz, true); break;
     fbc:	498e      	ldr	r1, [pc, #568]	; (11f8 <startHarmonizerNotes(unsigned char)+0x268>)
     fbe:	2201      	movs	r2, #1
     fc0:	f7ff bd5e 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     fc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ETriadMajorGospelDominant:  sendHarmonizerData(note, majGosDomHmz, true);  break;
     fc8:	498c      	ldr	r1, [pc, #560]	; (11fc <startHarmonizerNotes(unsigned char)+0x26c>)
     fca:	2201      	movs	r2, #1
     fcc:	f7ff bd58 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     fd0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case EMajorAddNine:              sendHarmonizerData(note, majAdd9Hmz, true);    break;
     fd4:	498a      	ldr	r1, [pc, #552]	; (1200 <startHarmonizerNotes(unsigned char)+0x270>)
     fd6:	2201      	movs	r2, #1
     fd8:	f7ff bd52 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     fdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case EMinorDorian:               sendHarmonizerData(note, minDorHmz, true);     break;
     fe0:	4988      	ldr	r1, [pc, #544]	; (1204 <startHarmonizerNotes(unsigned char)+0x274>)
     fe2:	2201      	movs	r2, #1
     fe4:	f7ff bd4c 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     fe8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case EMinorAeolian:              sendHarmonizerData(note, minAeoHmz, true);     break;
     fec:	4986      	ldr	r1, [pc, #536]	; (1208 <startHarmonizerNotes(unsigned char)+0x278>)
     fee:	2201      	movs	r2, #1
     ff0:	f7ff bd46 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
}
     ff4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case EMinorFourVoiceHip:         sendHarmonizerData(note, minHipHmz, true);     break;
     ff8:	4984      	ldr	r1, [pc, #528]	; (120c <startHarmonizerNotes(unsigned char)+0x27c>)
     ffa:	2201      	movs	r2, #1
     ffc:	f7ff bd40 	b.w	a80 <sendHarmonizerData(unsigned char, int const (*) [3], bool)>
      int limit = (hmzLimit+fwcDrop2);
    1000:	4a83      	ldr	r2, [pc, #524]	; (1210 <startHarmonizerNotes(unsigned char)+0x280>)
    1002:	4b84      	ldr	r3, [pc, #528]	; (1214 <startHarmonizerNotes(unsigned char)+0x284>)
    1004:	8812      	ldrh	r2, [r2, #0]
    1006:	8819      	ldrh	r1, [r3, #0]
    1008:	1855      	adds	r5, r2, r1
      if (!fwcDrop2 || (hmzLimit>(3+fwcLockH))) midiSendNoteOn(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][0]-12*fwcDrop2), velocitySend);
    100a:	b191      	cbz	r1, 1032 <startHarmonizerNotes(unsigned char)+0xa2>
    100c:	4b82      	ldr	r3, [pc, #520]	; (1218 <startHarmonizerNotes(unsigned char)+0x288>)
    100e:	881b      	ldrh	r3, [r3, #0]
    1010:	3303      	adds	r3, #3
    1012:	429a      	cmp	r2, r3
    1014:	dc0d      	bgt.n	1032 <startHarmonizerNotes(unsigned char)+0xa2>
      if (limit>2)  midiSendNoteOn(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][1]), velocitySend);
    1016:	2d02      	cmp	r5, #2
    1018:	dc48      	bgt.n	10ac <startHarmonizerNotes(unsigned char)+0x11c>
}
    101a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    101e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ERotatorA: updateRotator(note, &rotations_a); break;
    1022:	497e      	ldr	r1, [pc, #504]	; (121c <startHarmonizerNotes(unsigned char)+0x28c>)
    1024:	f7ff bba8 	b.w	778 <updateRotator(unsigned char, Rotator const*)>
}
    1028:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    case ERotatorB: updateRotator(note, &rotations_b); break;
    102c:	497c      	ldr	r1, [pc, #496]	; (1220 <startHarmonizerNotes(unsigned char)+0x290>)
    102e:	f7ff bba3 	b.w	778 <updateRotator(unsigned char, Rotator const*)>
      if (!fwcDrop2 || (hmzLimit>(3+fwcLockH))) midiSendNoteOn(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][0]-12*fwcDrop2), velocitySend);
    1032:	4b7c      	ldr	r3, [pc, #496]	; (1224 <startHarmonizerNotes(unsigned char)+0x294>)
    1034:	4f7c      	ldr	r7, [pc, #496]	; (1228 <startHarmonizerNotes(unsigned char)+0x298>)
    1036:	881b      	ldrh	r3, [r3, #0]
    1038:	4e7c      	ldr	r6, [pc, #496]	; (122c <startHarmonizerNotes(unsigned char)+0x29c>)
    103a:	1ae3      	subs	r3, r4, r3
    103c:	fb87 2703 	smull	r2, r7, r7, r3
    1040:	4a7b      	ldr	r2, [pc, #492]	; (1230 <startHarmonizerNotes(unsigned char)+0x2a0>)
    1042:	17d8      	asrs	r0, r3, #31
    1044:	8812      	ldrh	r2, [r2, #0]
    1046:	ebc0 0067 	rsb	r0, r0, r7, asr #1
    104a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    104e:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
    1052:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    1056:	0112      	lsls	r2, r2, #4
    1058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    105c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1060:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
    1064:	58f0      	ldr	r0, [r6, r3]
    1066:	4420      	add	r0, r4
    1068:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  if (note > 127) {
    106c:	287f      	cmp	r0, #127	; 0x7f
    106e:	dc12      	bgt.n	1096 <startHarmonizerNotes(unsigned char)+0x106>
  } else if (note < 0) {
    1070:	2800      	cmp	r0, #0
    1072:	da0a      	bge.n	108a <startHarmonizerNotes(unsigned char)+0xfa>
    note = 12 - abs(note) % 12;
    1074:	4b6f      	ldr	r3, [pc, #444]	; (1234 <startHarmonizerNotes(unsigned char)+0x2a4>)
    1076:	4240      	negs	r0, r0
    1078:	fba3 2300 	umull	r2, r3, r3, r0
    107c:	08db      	lsrs	r3, r3, #3
    107e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1082:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    1086:	f1c0 000c 	rsb	r0, r0, #12
      if (!fwcDrop2 || (hmzLimit>(3+fwcLockH))) midiSendNoteOn(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][0]-12*fwcDrop2), velocitySend);
    108a:	4b6b      	ldr	r3, [pc, #428]	; (1238 <startHarmonizerNotes(unsigned char)+0x2a8>)
    108c:	b2c0      	uxtb	r0, r0
    108e:	7819      	ldrb	r1, [r3, #0]
    1090:	f007 feec 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
    1094:	e7bf      	b.n	1016 <startHarmonizerNotes(unsigned char)+0x86>
    note = 115 + (note - 127) % 12;
    1096:	4b67      	ldr	r3, [pc, #412]	; (1234 <startHarmonizerNotes(unsigned char)+0x2a4>)
    1098:	387f      	subs	r0, #127	; 0x7f
    109a:	fba3 2300 	umull	r2, r3, r3, r0
    109e:	08db      	lsrs	r3, r3, #3
    10a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    10a4:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    10a8:	3073      	adds	r0, #115	; 0x73
    10aa:	e7ee      	b.n	108a <startHarmonizerNotes(unsigned char)+0xfa>
      if (limit>2)  midiSendNoteOn(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][1]), velocitySend);
    10ac:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1224 <startHarmonizerNotes(unsigned char)+0x294>
    10b0:	495d      	ldr	r1, [pc, #372]	; (1228 <startHarmonizerNotes(unsigned char)+0x298>)
    10b2:	f8b9 3000 	ldrh.w	r3, [r9]
    10b6:	f8df 8178 	ldr.w	r8, [pc, #376]	; 1230 <startHarmonizerNotes(unsigned char)+0x2a0>
    10ba:	4e5c      	ldr	r6, [pc, #368]	; (122c <startHarmonizerNotes(unsigned char)+0x29c>)
    10bc:	1ae3      	subs	r3, r4, r3
    10be:	fb81 2103 	smull	r2, r1, r1, r3
    10c2:	17da      	asrs	r2, r3, #31
    10c4:	ebc2 0261 	rsb	r2, r2, r1, asr #1
    10c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    10cc:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    10d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    10d4:	f8b8 3000 	ldrh.w	r3, [r8]
    10d8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    10dc:	011b      	lsls	r3, r3, #4
    10de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    10e2:	4433      	add	r3, r6
    10e4:	6858      	ldr	r0, [r3, #4]
    10e6:	4420      	add	r0, r4
  if (note > 127) {
    10e8:	287f      	cmp	r0, #127	; 0x7f
    10ea:	dd56      	ble.n	119a <startHarmonizerNotes(unsigned char)+0x20a>
    note = 115 + (note - 127) % 12;
    10ec:	4b51      	ldr	r3, [pc, #324]	; (1234 <startHarmonizerNotes(unsigned char)+0x2a4>)
    10ee:	387f      	subs	r0, #127	; 0x7f
    10f0:	fba3 2300 	umull	r2, r3, r3, r0
    10f4:	08db      	lsrs	r3, r3, #3
    10f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    10fa:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    10fe:	3073      	adds	r0, #115	; 0x73
      if (limit>2)  midiSendNoteOn(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][1]), velocitySend);
    1100:	4f4d      	ldr	r7, [pc, #308]	; (1238 <startHarmonizerNotes(unsigned char)+0x2a8>)
    1102:	b2c0      	uxtb	r0, r0
    1104:	7839      	ldrb	r1, [r7, #0]
    1106:	f007 feb1 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
      if (limit>3)  midiSendNoteOn(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][2]), velocitySend);
    110a:	2d03      	cmp	r5, #3
    110c:	d085      	beq.n	101a <startHarmonizerNotes(unsigned char)+0x8a>
    110e:	f8b9 3000 	ldrh.w	r3, [r9]
    1112:	4845      	ldr	r0, [pc, #276]	; (1228 <startHarmonizerNotes(unsigned char)+0x298>)
    1114:	f8b8 2000 	ldrh.w	r2, [r8]
    1118:	1ae3      	subs	r3, r4, r3
    111a:	fb80 1003 	smull	r1, r0, r0, r3
    111e:	17d9      	asrs	r1, r3, #31
    1120:	ebc1 0160 	rsb	r1, r1, r0, asr #1
    1124:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1128:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    112c:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
    1130:	0112      	lsls	r2, r2, #4
    1132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    113a:	441e      	add	r6, r3
    113c:	68b0      	ldr	r0, [r6, #8]
    113e:	4420      	add	r0, r4
  if (note > 127) {
    1140:	287f      	cmp	r0, #127	; 0x7f
    1142:	dd38      	ble.n	11b6 <startHarmonizerNotes(unsigned char)+0x226>
    note = 115 + (note - 127) % 12;
    1144:	4b3b      	ldr	r3, [pc, #236]	; (1234 <startHarmonizerNotes(unsigned char)+0x2a4>)
    1146:	387f      	subs	r0, #127	; 0x7f
    1148:	fba3 2300 	umull	r2, r3, r3, r0
    114c:	08db      	lsrs	r3, r3, #3
    114e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1152:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    1156:	3073      	adds	r0, #115	; 0x73
      if (limit>3)  midiSendNoteOn(noteValueCheck(note+blockFWC[fwcType][(note-hmzKey)%12][2]), velocitySend);
    1158:	7839      	ldrb	r1, [r7, #0]
    115a:	b2c0      	uxtb	r0, r0
    115c:	f007 fe86 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
      if ((limit>4) && (1 == fwcLockH)) midiSendNoteOn(noteValueCheck(note-12), velocitySend);
    1160:	2d04      	cmp	r5, #4
    1162:	f43f af5a 	beq.w	101a <startHarmonizerNotes(unsigned char)+0x8a>
    1166:	4b2c      	ldr	r3, [pc, #176]	; (1218 <startHarmonizerNotes(unsigned char)+0x288>)
    1168:	881b      	ldrh	r3, [r3, #0]
    116a:	2b01      	cmp	r3, #1
    116c:	f47f af55 	bne.w	101a <startHarmonizerNotes(unsigned char)+0x8a>
    1170:	f1a4 030c 	sub.w	r3, r4, #12
  if (note > 127) {
    1174:	2b7f      	cmp	r3, #127	; 0x7f
    1176:	dd2c      	ble.n	11d2 <startHarmonizerNotes(unsigned char)+0x242>
    note = 115 + (note - 127) % 12;
    1178:	4a2e      	ldr	r2, [pc, #184]	; (1234 <startHarmonizerNotes(unsigned char)+0x2a4>)
    117a:	f1a4 038b 	sub.w	r3, r4, #139	; 0x8b
    117e:	fba2 1203 	umull	r1, r2, r2, r3
    1182:	08d2      	lsrs	r2, r2, #3
    1184:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1188:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    118c:	3373      	adds	r3, #115	; 0x73
      if ((limit>4) && (1 == fwcLockH)) midiSendNoteOn(noteValueCheck(note-12), velocitySend);
    118e:	7839      	ldrb	r1, [r7, #0]
    1190:	b2d8      	uxtb	r0, r3
}
    1192:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      if ((limit>4) && (1 == fwcLockH)) midiSendNoteOn(noteValueCheck(note-12), velocitySend);
    1196:	f007 be69 	b.w	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
  } else if (note < 0) {
    119a:	2800      	cmp	r0, #0
    119c:	dab0      	bge.n	1100 <startHarmonizerNotes(unsigned char)+0x170>
    note = 12 - abs(note) % 12;
    119e:	4b25      	ldr	r3, [pc, #148]	; (1234 <startHarmonizerNotes(unsigned char)+0x2a4>)
    11a0:	4240      	negs	r0, r0
    11a2:	fba3 2300 	umull	r2, r3, r3, r0
    11a6:	08db      	lsrs	r3, r3, #3
    11a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11ac:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    11b0:	f1c0 000c 	rsb	r0, r0, #12
    11b4:	e7a4      	b.n	1100 <startHarmonizerNotes(unsigned char)+0x170>
  } else if (note < 0) {
    11b6:	2800      	cmp	r0, #0
    11b8:	dace      	bge.n	1158 <startHarmonizerNotes(unsigned char)+0x1c8>
    note = 12 - abs(note) % 12;
    11ba:	4b1e      	ldr	r3, [pc, #120]	; (1234 <startHarmonizerNotes(unsigned char)+0x2a4>)
    11bc:	4240      	negs	r0, r0
    11be:	fba3 2300 	umull	r2, r3, r3, r0
    11c2:	08db      	lsrs	r3, r3, #3
    11c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11c8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    11cc:	f1c0 000c 	rsb	r0, r0, #12
    11d0:	e7c2      	b.n	1158 <startHarmonizerNotes(unsigned char)+0x1c8>
  } else if (note < 0) {
    11d2:	2b00      	cmp	r3, #0
    11d4:	dadb      	bge.n	118e <startHarmonizerNotes(unsigned char)+0x1fe>
    note = 12 - abs(note) % 12;
    11d6:	4a17      	ldr	r2, [pc, #92]	; (1234 <startHarmonizerNotes(unsigned char)+0x2a4>)
    11d8:	f1c4 030c 	rsb	r3, r4, #12
    11dc:	fba2 1203 	umull	r1, r2, r2, r3
    11e0:	08d2      	lsrs	r2, r2, #3
    11e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    11e6:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    11ea:	f1c3 030c 	rsb	r3, r3, #12
    11ee:	e7ce      	b.n	118e <startHarmonizerNotes(unsigned char)+0x1fe>
    11f0:	1fff9b80 	.word	0x1fff9b80
    11f4:	1fff9bb8 	.word	0x1fff9bb8
    11f8:	00012d60 	.word	0x00012d60
    11fc:	00012cd0 	.word	0x00012cd0
    1200:	00012c28 	.word	0x00012c28
    1204:	000136b0 	.word	0x000136b0
    1208:	00013620 	.word	0x00013620
    120c:	00013740 	.word	0x00013740
    1210:	1fff9aee 	.word	0x1fff9aee
    1214:	1fff9aba 	.word	0x1fff9aba
    1218:	1fff9abc 	.word	0x1fff9abc
    121c:	1fff9ba0 	.word	0x1fff9ba0
    1220:	1fff9bac 	.word	0x1fff9bac
    1224:	1fff9aec 	.word	0x1fff9aec
    1228:	2aaaaaab 	.word	0x2aaaaaab
    122c:	000133b8 	.word	0x000133b8
    1230:	1fff9abe 	.word	0x1fff9abe
    1234:	aaaaaaab 	.word	0xaaaaaaab
    1238:	1fff9bf6 	.word	0x1fff9bf6

0000123c <multiMap(unsigned short, unsigned short const*, unsigned short const*, unsigned char)>:
unsigned int multiMap(unsigned short val, const unsigned short * _in, const unsigned short * _out, uint8_t size) {
    123c:	b510      	push	{r4, lr}
  if (val <= _in[0]) return _out[0];
    123e:	880c      	ldrh	r4, [r1, #0]
    1240:	4284      	cmp	r4, r0
    1242:	d22d      	bcs.n	12a0 <multiMap(unsigned short, unsigned short const*, unsigned short const*, unsigned char)+0x64>
  if (val >= _in[size - 1]) return _out[size - 1];
    1244:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    1248:	3b01      	subs	r3, #1
    124a:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
    124e:	4284      	cmp	r4, r0
    1250:	d923      	bls.n	129a <multiMap(unsigned short, unsigned short const*, unsigned short const*, unsigned char)+0x5e>
  while (val > _in[pos]) pos++;
    1252:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    1256:	4584      	cmp	ip, r0
  uint8_t pos = 1; // _in[0] allready tested
    1258:	bf38      	it	cc
    125a:	2301      	movcc	r3, #1
  while (val > _in[pos]) pos++;
    125c:	d224      	bcs.n	12a8 <multiMap(unsigned short, unsigned short const*, unsigned short const*, unsigned char)+0x6c>
    125e:	3301      	adds	r3, #1
    1260:	b2db      	uxtb	r3, r3
    1262:	469e      	mov	lr, r3
    1264:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
    1268:	4560      	cmp	r0, ip
    126a:	ea4f 0443 	mov.w	r4, r3, lsl #1
    126e:	d8f6      	bhi.n	125e <multiMap(unsigned short, unsigned short const*, unsigned short const*, unsigned char)+0x22>
  if (val == _in[pos]) return _out[pos];
    1270:	4560      	cmp	r0, ip
    1272:	d017      	beq.n	12a4 <multiMap(unsigned short, unsigned short const*, unsigned short const*, unsigned char)+0x68>
  return (val - _in[pos - 1]) * (_out[pos] - _out[pos - 1]) / (_in[pos] - _in[pos - 1]) + _out[pos - 1];
    1274:	f10e 4e00 	add.w	lr, lr, #2147483648	; 0x80000000
    1278:	f10e 3eff 	add.w	lr, lr, #4294967295
    127c:	5b13      	ldrh	r3, [r2, r4]
    127e:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    1282:	f832 201e 	ldrh.w	r2, [r2, lr, lsl #1]
    1286:	1a40      	subs	r0, r0, r1
    1288:	1a9b      	subs	r3, r3, r2
    128a:	fb03 f000 	mul.w	r0, r3, r0
    128e:	ebac 0c01 	sub.w	ip, ip, r1
    1292:	fb90 f0fc 	sdiv	r0, r0, ip
    1296:	4410      	add	r0, r2
}
    1298:	bd10      	pop	{r4, pc}
  if (val >= _in[size - 1]) return _out[size - 1];
    129a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
}
    129e:	bd10      	pop	{r4, pc}
  if (val <= _in[0]) return _out[0];
    12a0:	8810      	ldrh	r0, [r2, #0]
}
    12a2:	bd10      	pop	{r4, pc}
  if (val == _in[pos]) return _out[pos];
    12a4:	5b10      	ldrh	r0, [r2, r4]
}
    12a6:	bd10      	pop	{r4, pc}
  while (val > _in[pos]) pos++;
    12a8:	2402      	movs	r4, #2
    12aa:	f04f 0e01 	mov.w	lr, #1
    12ae:	e7df      	b.n	1270 <multiMap(unsigned short, unsigned short const*, unsigned short const*, unsigned char)+0x34>

000012b0 <breathCurve(unsigned int)>:
  if(curve >= ARR_LEN(curves)) return inputVal;
    12b0:	4b20      	ldr	r3, [pc, #128]	; (1334 <breathCurve(unsigned int)+0x84>)
    12b2:	881b      	ldrh	r3, [r3, #0]
    12b4:	2b0c      	cmp	r3, #12
    12b6:	d830      	bhi.n	131a <breathCurve(unsigned int)+0x6a>
  return multiMap(inputVal, curveIn, curves[curve], 17);
    12b8:	491f      	ldr	r1, [pc, #124]	; (1338 <breathCurve(unsigned int)+0x88>)
    12ba:	b282      	uxth	r2, r0
unsigned int breathCurve(unsigned int inputVal) {
    12bc:	b530      	push	{r4, r5, lr}
  return multiMap(inputVal, curveIn, curves[curve], 17);
    12be:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  if (val <= _in[0]) return _out[0];
    12c2:	b342      	cbz	r2, 1316 <breathCurve(unsigned int)+0x66>
  if (val >= _in[size - 1]) return _out[size - 1];
    12c4:	f643 73fe 	movw	r3, #16382	; 0x3ffe
    12c8:	429a      	cmp	r2, r3
    12ca:	d827      	bhi.n	131c <breathCurve(unsigned int)+0x6c>
  while (val > _in[pos]) pos++;
    12cc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    12d0:	d329      	bcc.n	1326 <breathCurve(unsigned int)+0x76>
    12d2:	4c1a      	ldr	r4, [pc, #104]	; (133c <breathCurve(unsigned int)+0x8c>)
  uint8_t pos = 1; // _in[0] allready tested
    12d4:	2301      	movs	r3, #1
  while (val > _in[pos]) pos++;
    12d6:	3301      	adds	r3, #1
    12d8:	b2db      	uxtb	r3, r3
    12da:	4619      	mov	r1, r3
    12dc:	f834 e013 	ldrh.w	lr, [r4, r3, lsl #1]
    12e0:	4572      	cmp	r2, lr
    12e2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    12e6:	d8f6      	bhi.n	12d6 <breathCurve(unsigned int)+0x26>
  if (val == _in[pos]) return _out[pos];
    12e8:	4572      	cmp	r2, lr
    12ea:	d019      	beq.n	1320 <breathCurve(unsigned int)+0x70>
  return (val - _in[pos - 1]) * (_out[pos] - _out[pos - 1]) / (_in[pos] - _in[pos - 1]) + _out[pos - 1];
    12ec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    12f0:	3901      	subs	r1, #1
    12f2:	4b12      	ldr	r3, [pc, #72]	; (133c <breathCurve(unsigned int)+0x8c>)
    12f4:	f835 4011 	ldrh.w	r4, [r5, r1, lsl #1]
    12f8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    12fc:	f835 200c 	ldrh.w	r2, [r5, ip]
    1300:	b280      	uxth	r0, r0
    1302:	1ac0      	subs	r0, r0, r3
    1304:	1b12      	subs	r2, r2, r4
    1306:	fb00 f202 	mul.w	r2, r0, r2
    130a:	ebae 0303 	sub.w	r3, lr, r3
    130e:	fb92 f3f3 	sdiv	r3, r2, r3
    1312:	1918      	adds	r0, r3, r4
}
    1314:	bd30      	pop	{r4, r5, pc}
  if (val <= _in[0]) return _out[0];
    1316:	8828      	ldrh	r0, [r5, #0]
}
    1318:	bd30      	pop	{r4, r5, pc}
    131a:	4770      	bx	lr
  if (val >= _in[size - 1]) return _out[size - 1];
    131c:	8c28      	ldrh	r0, [r5, #32]
}
    131e:	bd30      	pop	{r4, r5, pc}
  if (val == _in[pos]) return _out[pos];
    1320:	f835 000c 	ldrh.w	r0, [r5, ip]
}
    1324:	bd30      	pop	{r4, r5, pc}
  while (val > _in[pos]) pos++;
    1326:	f240 3eff 	movw	lr, #1023	; 0x3ff
    132a:	f04f 0c02 	mov.w	ip, #2
    132e:	2101      	movs	r1, #1
    1330:	e7da      	b.n	12e8 <breathCurve(unsigned int)+0x38>
    1332:	bf00      	nop
    1334:	1fff9a6c 	.word	0x1fff9a6c
    1338:	000137f4 	.word	0x000137f4
    133c:	000137d0 	.word	0x000137d0

00001340 <breath()>:
void breath() {
    1340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int breathFromVib = (int)(((float)vibSignal)*(float)vib2BreathAmount/10.0f); 
    1344:	4b5c      	ldr	r3, [pc, #368]	; (14b8 <breath()+0x178>)
void breath() {
    1346:	b083      	sub	sp, #12
  int breathFromVib = (int)(((float)vibSignal)*(float)vib2BreathAmount/10.0f); 
    1348:	6818      	ldr	r0, [r3, #0]
    134a:	f010 f973 	bl	11634 <__aeabi_i2f>
    134e:	4b5b      	ldr	r3, [pc, #364]	; (14bc <breath()+0x17c>)
    1350:	4604      	mov	r4, r0
    1352:	8818      	ldrh	r0, [r3, #0]
    1354:	f010 f96a 	bl	1162c <__aeabi_ui2f>
    1358:	4601      	mov	r1, r0
    135a:	4620      	mov	r0, r4
    135c:	f010 f9be 	bl	116dc <__aeabi_fmul>
    1360:	4957      	ldr	r1, [pc, #348]	; (14c0 <breath()+0x180>)
    1362:	f010 fa6f 	bl	11844 <__aeabi_fdiv>
    1366:	f010 fb7f 	bl	11a68 <__aeabi_f2iz>
  if ((bool)vib2BrDirection) {
    136a:	4b56      	ldr	r3, [pc, #344]	; (14c4 <breath()+0x184>)
    136c:	881a      	ldrh	r2, [r3, #0]
    136e:	2a00      	cmp	r2, #0
    1370:	d073      	beq.n	145a <breath()+0x11a>
    breathFromVib = -breathFromVib;
    1372:	4240      	negs	r0, r0
  breathLevel = constrain(pressureSensor, breathThrVal, breathMaxVal);
    1374:	4b54      	ldr	r3, [pc, #336]	; (14c8 <breath()+0x188>)
    1376:	4955      	ldr	r1, [pc, #340]	; (14cc <breath()+0x18c>)
    1378:	681b      	ldr	r3, [r3, #0]
    137a:	880c      	ldrh	r4, [r1, #0]
    137c:	4a54      	ldr	r2, [pc, #336]	; (14d0 <breath()+0x190>)
    137e:	429c      	cmp	r4, r3
    1380:	8816      	ldrh	r6, [r2, #0]
    1382:	4625      	mov	r5, r4
    1384:	dc5c      	bgt.n	1440 <breath()+0x100>
    1386:	42b3      	cmp	r3, r6
    1388:	bfa8      	it	ge
    138a:	4633      	movge	r3, r6
  breathLevel = constrain(breathLevel + breathFromVib, breathThrVal, breathMaxVal); // ws 
    138c:	4418      	add	r0, r3
    138e:	42a0      	cmp	r0, r4
    1390:	da5a      	bge.n	1448 <breath()+0x108>
    1392:	4b50      	ldr	r3, [pc, #320]	; (14d4 <breath()+0x194>)
    1394:	601c      	str	r4, [r3, #0]
  breathCCvalHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    1396:	42b5      	cmp	r5, r6
    1398:	bfa8      	it	ge
    139a:	4635      	movge	r5, r6
    139c:	1b33      	subs	r3, r6, r4
    139e:	d06b      	beq.n	1478 <breath()+0x138>
	long num = (x - in_min) * out_range;
    13a0:	1b28      	subs	r0, r5, r4
		num += in_range / 2;
    13a2:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
	long num = (x - in_min) * out_range;
    13a6:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
		num += in_range / 2;
    13aa:	eb00 0062 	add.w	r0, r0, r2, asr #1
		if (in_range * num < 0) return result - 1;
    13ae:	fb00 f203 	mul.w	r2, r0, r3
    13b2:	2a00      	cmp	r2, #0
	long result = num / in_range + out_min;
    13b4:	fb90 f0f3 	sdiv	r0, r0, r3
		if (in_range * num < 0) return result - 1;
    13b8:	db7b      	blt.n	14b2 <breath()+0x172>
    13ba:	f7ff ff79 	bl	12b0 <breathCurve(unsigned int)>
  breathCC2val = constrain(breathCCval*breathCC2Rise,0,127);
    13be:	4b46      	ldr	r3, [pc, #280]	; (14d8 <breath()+0x198>)
    13c0:	881f      	ldrh	r7, [r3, #0]
  if (brHarmSetting) brHarmonics = map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, brHarmSetting); else brHarmonics = 0;
    13c2:	4b46      	ldr	r3, [pc, #280]	; (14dc <breath()+0x19c>)
  breathCCval = (breathCCvalHires >> 7) & 0x007F;
    13c4:	f3c0 19c6 	ubfx	r9, r0, #7, #7
  breathCC2val = constrain(breathCCval*breathCC2Rise,0,127);
    13c8:	fb09 f707 	mul.w	r7, r9, r7
  if (brHarmSetting) brHarmonics = map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, brHarmSetting); else brHarmonics = 0;
    13cc:	881b      	ldrh	r3, [r3, #0]
    13ce:	2f7f      	cmp	r7, #127	; 0x7f
  breathCCvalHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    13d0:	4680      	mov	r8, r0
  breathCC2val = constrain(breathCCval*breathCC2Rise,0,127);
    13d2:	bfa8      	it	ge
    13d4:	277f      	movge	r7, #127	; 0x7f
  if (brHarmSetting) brHarmonics = map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, brHarmSetting); else brHarmonics = 0;
    13d6:	b13b      	cbz	r3, 13e8 <breath()+0xa8>
    13d8:	9300      	str	r3, [sp, #0]
    13da:	4632      	mov	r2, r6
    13dc:	2300      	movs	r3, #0
    13de:	4621      	mov	r1, r4
    13e0:	4628      	mov	r0, r5
    13e2:	f7ff f917 	bl	614 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
    13e6:	4603      	mov	r3, r0
    13e8:	4a3d      	ldr	r2, [pc, #244]	; (14e0 <breath()+0x1a0>)
  if (breathCCval != oldbreath) { // only send midi data if breath has changed from previous value
    13ea:	4c3e      	ldr	r4, [pc, #248]	; (14e4 <breath()+0x1a4>)
    13ec:	6013      	str	r3, [r2, #0]
    13ee:	6823      	ldr	r3, [r4, #0]
    13f0:	454b      	cmp	r3, r9
    13f2:	d009      	beq.n	1408 <breath()+0xc8>
    if (breathCC) {
    13f4:	4b3c      	ldr	r3, [pc, #240]	; (14e8 <breath()+0x1a8>)
    13f6:	881b      	ldrh	r3, [r3, #0]
    13f8:	2b00      	cmp	r3, #0
    13fa:	d14d      	bne.n	1498 <breath()+0x158>
    if (breathAT) {
    13fc:	4b3b      	ldr	r3, [pc, #236]	; (14ec <breath()+0x1ac>)
    13fe:	881b      	ldrh	r3, [r3, #0]
    1400:	2b00      	cmp	r3, #0
    1402:	d145      	bne.n	1490 <breath()+0x150>
    oldbreath = breathCCval;
    1404:	f8c4 9000 	str.w	r9, [r4]
  if (breathCCvalHires != oldbreathhires) {
    1408:	4c39      	ldr	r4, [pc, #228]	; (14f0 <breath()+0x1b0>)
    140a:	6823      	ldr	r3, [r4, #0]
    140c:	4543      	cmp	r3, r8
    140e:	d006      	beq.n	141e <breath()+0xde>
    if ((breathCC > 4) && (breathCC < 9)) { // send high resolution midi
    1410:	4b35      	ldr	r3, [pc, #212]	; (14e8 <breath()+0x1a8>)
    1412:	881b      	ldrh	r3, [r3, #0]
    1414:	1f5a      	subs	r2, r3, #5
    1416:	2a03      	cmp	r2, #3
    1418:	d931      	bls.n	147e <breath()+0x13e>
    oldbreathhires = breathCCvalHires;
    141a:	f8c4 8000 	str.w	r8, [r4]
  if (breathCC2val != oldbreathcc2){
    141e:	4c35      	ldr	r4, [pc, #212]	; (14f4 <breath()+0x1b4>)
    1420:	6823      	ldr	r3, [r4, #0]
    1422:	429f      	cmp	r7, r3
    1424:	d009      	beq.n	143a <breath()+0xfa>
    if (breathCC2 && (breathCC2 != ccList[breathCC])){
    1426:	4b34      	ldr	r3, [pc, #208]	; (14f8 <breath()+0x1b8>)
    1428:	8818      	ldrh	r0, [r3, #0]
    142a:	b128      	cbz	r0, 1438 <breath()+0xf8>
    142c:	4b2e      	ldr	r3, [pc, #184]	; (14e8 <breath()+0x1a8>)
    142e:	4a33      	ldr	r2, [pc, #204]	; (14fc <breath()+0x1bc>)
    1430:	881b      	ldrh	r3, [r3, #0]
    1432:	5cd3      	ldrb	r3, [r2, r3]
    1434:	4283      	cmp	r3, r0
    1436:	d137      	bne.n	14a8 <breath()+0x168>
    oldbreathcc2 = breathCC2val;
    1438:	6027      	str	r7, [r4, #0]
}
    143a:	b003      	add	sp, #12
    143c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  breathLevel = constrain(pressureSensor, breathThrVal, breathMaxVal);
    1440:	4623      	mov	r3, r4
  breathLevel = constrain(breathLevel + breathFromVib, breathThrVal, breathMaxVal); // ws 
    1442:	4418      	add	r0, r3
    1444:	42a0      	cmp	r0, r4
    1446:	dba4      	blt.n	1392 <breath()+0x52>
    1448:	42b0      	cmp	r0, r6
    144a:	bfa8      	it	ge
    144c:	4630      	movge	r0, r6
    144e:	4b21      	ldr	r3, [pc, #132]	; (14d4 <breath()+0x194>)
  breathCCvalHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    1450:	42a0      	cmp	r0, r4
  breathLevel = constrain(breathLevel + breathFromVib, breathThrVal, breathMaxVal); // ws 
    1452:	6018      	str	r0, [r3, #0]
  breathCCvalHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    1454:	dba2      	blt.n	139c <breath()+0x5c>
    1456:	4605      	mov	r5, r0
    1458:	e79d      	b.n	1396 <breath()+0x56>
  } else if (mainState != NOTE_ON) {
    145a:	4b29      	ldr	r3, [pc, #164]	; (1500 <breath()+0x1c0>)
    145c:	681b      	ldr	r3, [r3, #0]
    145e:	2b03      	cmp	r3, #3
    1460:	d088      	beq.n	1374 <breath()+0x34>
  breathLevel = constrain(pressureSensor, breathThrVal, breathMaxVal);
    1462:	4b19      	ldr	r3, [pc, #100]	; (14c8 <breath()+0x188>)
    1464:	4819      	ldr	r0, [pc, #100]	; (14cc <breath()+0x18c>)
    1466:	681b      	ldr	r3, [r3, #0]
    1468:	8804      	ldrh	r4, [r0, #0]
    146a:	4919      	ldr	r1, [pc, #100]	; (14d0 <breath()+0x190>)
    146c:	42a3      	cmp	r3, r4
    146e:	880e      	ldrh	r6, [r1, #0]
    1470:	4625      	mov	r5, r4
    1472:	da17      	bge.n	14a4 <breath()+0x164>
    1474:	4620      	mov	r0, r4
    1476:	e7e7      	b.n	1448 <breath()+0x108>
    1478:	f641 70ff 	movw	r0, #8191	; 0x1fff
    147c:	e79d      	b.n	13ba <breath()+0x7a>
      midiSendControlChange(ccList[breathCC] + 32, breathCCvalFine);
    147e:	4a1f      	ldr	r2, [pc, #124]	; (14fc <breath()+0x1bc>)
    1480:	5cd0      	ldrb	r0, [r2, r3]
    1482:	3020      	adds	r0, #32
    1484:	f008 017f 	and.w	r1, r8, #127	; 0x7f
    1488:	b2c0      	uxtb	r0, r0
    148a:	f007 fcb1 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    148e:	e7c4      	b.n	141a <breath()+0xda>
      midiSendAfterTouch(breathCCval);
    1490:	4648      	mov	r0, r9
    1492:	f007 fd61 	bl	8f58 <midiSendAfterTouch(unsigned char)>
    1496:	e7b5      	b.n	1404 <breath()+0xc4>
      midiSendControlChange(ccList[breathCC], breathCCval);
    1498:	4a18      	ldr	r2, [pc, #96]	; (14fc <breath()+0x1bc>)
    149a:	4649      	mov	r1, r9
    149c:	5cd0      	ldrb	r0, [r2, r3]
    149e:	f007 fca7 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    14a2:	e7ab      	b.n	13fc <breath()+0xbc>
    breathFromVib = 0;
    14a4:	4610      	mov	r0, r2
    14a6:	e76e      	b.n	1386 <breath()+0x46>
      midiSendControlChange(breathCC2, breathCC2val);
    14a8:	b2f9      	uxtb	r1, r7
    14aa:	b2c0      	uxtb	r0, r0
    14ac:	f007 fca0 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    14b0:	e7c2      	b.n	1438 <breath()+0xf8>
    14b2:	3801      	subs	r0, #1
    14b4:	e781      	b.n	13ba <breath()+0x7a>
    14b6:	bf00      	nop
    14b8:	1fff9c00 	.word	0x1fff9c00
    14bc:	1fff8e74 	.word	0x1fff8e74
    14c0:	41200000 	.word	0x41200000
    14c4:	1fff9bf8 	.word	0x1fff9bf8
    14c8:	1fff9b8c 	.word	0x1fff9b8c
    14cc:	1fff9a4e 	.word	0x1fff9a4e
    14d0:	1fff9a4c 	.word	0x1fff9a4c
    14d4:	1fff9a48 	.word	0x1fff9a48
    14d8:	1fff9a22 	.word	0x1fff9a22
    14dc:	1fff9a16 	.word	0x1fff9a16
    14e0:	1fff9a18 	.word	0x1fff9a18
    14e4:	1fff9b40 	.word	0x1fff9b40
    14e8:	1fff9a1e 	.word	0x1fff9a1e
    14ec:	1fff9a1c 	.word	0x1fff9a1c
    14f0:	1fff9b48 	.word	0x1fff9b48
    14f4:	1fff9b44 	.word	0x1fff9b44
    14f8:	1fff9a20 	.word	0x1fff9a20
    14fc:	1fff8db4 	.word	0x1fff8db4
    1500:	1fff9b30 	.word	0x1fff9b30

00001504 <pitch_bend()>:
void pitch_bend() {
    1504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbUp = touchRead(pbUpPin); // PCB PIN "Pu"
    1508:	2001      	movs	r0, #1
void pitch_bend() {
    150a:	b08b      	sub	sp, #44	; 0x2c
  pbUp = touchRead(pbUpPin); // PCB PIN "Pu"
    150c:	f00e fcfc 	bl	ff08 <touchRead>
    1510:	4aad      	ldr	r2, [pc, #692]	; (17c8 <pitch_bend()+0x2c4>)
    1512:	4603      	mov	r3, r0
  pbDn = touchRead(pbDnPin); // PCB PIN "Pd"
    1514:	2000      	movs	r0, #0
  pbUp = touchRead(pbUpPin); // PCB PIN "Pu"
    1516:	6013      	str	r3, [r2, #0]
  pbDn = touchRead(pbDnPin); // PCB PIN "Pd"
    1518:	f00e fcf6 	bl	ff08 <touchRead>
  halfPitchBendKey = (pinkySetting == PBD) && pinkyKey; // hold pinky key for 1/2 pitchbend value
    151c:	4bab      	ldr	r3, [pc, #684]	; (17cc <pitch_bend()+0x2c8>)
  pbDn = touchRead(pbDnPin); // PCB PIN "Pd"
    151e:	4aac      	ldr	r2, [pc, #688]	; (17d0 <pitch_bend()+0x2cc>)
  halfPitchBendKey = (pinkySetting == PBD) && pinkyKey; // hold pinky key for 1/2 pitchbend value
    1520:	881b      	ldrh	r3, [r3, #0]
  pbDn = touchRead(pbDnPin); // PCB PIN "Pd"
    1522:	6010      	str	r0, [r2, #0]
  halfPitchBendKey = (pinkySetting == PBD) && pinkyKey; // hold pinky key for 1/2 pitchbend value
    1524:	2b0c      	cmp	r3, #12
    1526:	d043      	beq.n	15b0 <pitch_bend()+0xac>
    1528:	4aaa      	ldr	r2, [pc, #680]	; (17d4 <pitch_bend()+0x2d0>)
    152a:	2100      	movs	r1, #0
  quarterToneTrigger = (pinkySetting == QTN) && pinkyKey; // pinky key for a quarter tone down using pitch bend (assuming PB range on synth is set to 2 semitones)
    152c:	2b1f      	cmp	r3, #31
  halfPitchBendKey = (pinkySetting == PBD) && pinkyKey; // hold pinky key for 1/2 pitchbend value
    152e:	7011      	strb	r1, [r2, #0]
  quarterToneTrigger = (pinkySetting == QTN) && pinkyKey; // pinky key for a quarter tone down using pitch bend (assuming PB range on synth is set to 2 semitones)
    1530:	d145      	bne.n	15be <pitch_bend()+0xba>
    1532:	4ba9      	ldr	r3, [pc, #676]	; (17d8 <pitch_bend()+0x2d4>)
  calculatedPBdepth = pbDepthList[PBdepth];
    1534:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 17dc <pitch_bend()+0x2d8>
  quarterToneTrigger = (pinkySetting == QTN) && pinkyKey; // pinky key for a quarter tone down using pitch bend (assuming PB range on synth is set to 2 semitones)
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 17e0 <pitch_bend()+0x2dc>
  calculatedPBdepth = pbDepthList[PBdepth];
    153e:	4aa9      	ldr	r2, [pc, #676]	; (17e4 <pitch_bend()+0x2e0>)
  quarterToneTrigger = (pinkySetting == QTN) && pinkyKey; // pinky key for a quarter tone down using pitch bend (assuming PB range on synth is set to 2 semitones)
    1540:	3b00      	subs	r3, #0
    1542:	bf18      	it	ne
    1544:	2301      	movne	r3, #1
    1546:	f888 3000 	strb.w	r3, [r8]
  calculatedPBdepth = pbDepthList[PBdepth];
    154a:	f8bb 3000 	ldrh.w	r3, [fp]
    154e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  vibMax = vibMaxList[vibSens - 1];
    1552:	4ba5      	ldr	r3, [pc, #660]	; (17e8 <pitch_bend()+0x2e4>)
  if (1 == biteControl){ //bite vibrato
    1554:	4aa5      	ldr	r2, [pc, #660]	; (17ec <pitch_bend()+0x2e8>)
  vibMax = vibMaxList[vibSens - 1];
    1556:	881b      	ldrh	r3, [r3, #0]
  if (1 == biteControl){ //bite vibrato
    1558:	8812      	ldrh	r2, [r2, #0]
  vibMax = vibMaxList[vibSens - 1];
    155a:	49a5      	ldr	r1, [pc, #660]	; (17f0 <pitch_bend()+0x2ec>)
    155c:	3b01      	subs	r3, #1
  if (1 == biteControl){ //bite vibrato
    155e:	2a01      	cmp	r2, #1
  vibMax = vibMaxList[vibSens - 1];
    1560:	f931 a013 	ldrsh.w	sl, [r1, r3, lsl #1]
  if (1 == biteControl){ //bite vibrato
    1564:	f000 81e0 	beq.w	1928 <pitch_bend()+0x424>
    1568:	4ba2      	ldr	r3, [pc, #648]	; (17f4 <pitch_bend()+0x2f0>)
    156a:	9302      	str	r3, [sp, #8]
    156c:	4ba2      	ldr	r3, [pc, #648]	; (17f8 <pitch_bend()+0x2f4>)
    156e:	9306      	str	r3, [sp, #24]
    1570:	4fa2      	ldr	r7, [pc, #648]	; (17fc <pitch_bend()+0x2f8>)
    1572:	4ba3      	ldr	r3, [pc, #652]	; (1800 <pitch_bend()+0x2fc>)
    1574:	9303      	str	r3, [sp, #12]
  int vibReadBite = 0;
    1576:	2600      	movs	r6, #0
  if (1 == leverControl) { //lever vibrato
    1578:	4ba2      	ldr	r3, [pc, #648]	; (1804 <pitch_bend()+0x300>)
    157a:	881b      	ldrh	r3, [r3, #0]
    157c:	2b01      	cmp	r3, #1
    157e:	f000 8219 	beq.w	19b4 <pitch_bend()+0x4b0>
    vibZero = vibZero * 0.95 + vibRead * 0.05;
    1582:	4ba1      	ldr	r3, [pc, #644]	; (1808 <pitch_bend()+0x304>)
    1584:	4aa1      	ldr	r2, [pc, #644]	; (180c <pitch_bend()+0x308>)
    1586:	681c      	ldr	r4, [r3, #0]
    1588:	9307      	str	r3, [sp, #28]
  pitchBend = pitchBend + vibSignal;
    158a:	f8d7 a000 	ldr.w	sl, [r7]
    158e:	4ba0      	ldr	r3, [pc, #640]	; (1810 <pitch_bend()+0x30c>)
    1590:	9204      	str	r2, [sp, #16]
    1592:	9305      	str	r3, [sp, #20]
  int vibRead = 0;
    1594:	f04f 0900 	mov.w	r9, #0
  switch (vibRetn) { // moving baseline
    1598:	4b9e      	ldr	r3, [pc, #632]	; (1814 <pitch_bend()+0x310>)
    159a:	881b      	ldrh	r3, [r3, #0]
    159c:	3b01      	subs	r3, #1
    159e:	2b03      	cmp	r3, #3
    15a0:	f200 833e 	bhi.w	1c20 <pitch_bend()+0x71c>
    15a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    15a8:	00eb0158 	.word	0x00eb0158
    15ac:	001800c7 	.word	0x001800c7
  halfPitchBendKey = (pinkySetting == PBD) && pinkyKey; // hold pinky key for 1/2 pitchbend value
    15b0:	4b89      	ldr	r3, [pc, #548]	; (17d8 <pitch_bend()+0x2d4>)
    15b2:	781b      	ldrb	r3, [r3, #0]
    15b4:	2b00      	cmp	r3, #0
    15b6:	f040 819e 	bne.w	18f6 <pitch_bend()+0x3f2>
    15ba:	4a86      	ldr	r2, [pc, #536]	; (17d4 <pitch_bend()+0x2d0>)
    15bc:	7013      	strb	r3, [r2, #0]
  calculatedPBdepth = pbDepthList[PBdepth];
    15be:	f8df b21c 	ldr.w	fp, [pc, #540]	; 17dc <pitch_bend()+0x2d8>
  quarterToneTrigger = (pinkySetting == QTN) && pinkyKey; // pinky key for a quarter tone down using pitch bend (assuming PB range on synth is set to 2 semitones)
    15c2:	f8df 821c 	ldr.w	r8, [pc, #540]	; 17e0 <pitch_bend()+0x2dc>
  calculatedPBdepth = pbDepthList[PBdepth];
    15c6:	f8bb 2000 	ldrh.w	r2, [fp]
  quarterToneTrigger = (pinkySetting == QTN) && pinkyKey; // pinky key for a quarter tone down using pitch bend (assuming PB range on synth is set to 2 semitones)
    15ca:	2300      	movs	r3, #0
    15cc:	f888 3000 	strb.w	r3, [r8]
  calculatedPBdepth = pbDepthList[PBdepth];
    15d0:	4b84      	ldr	r3, [pc, #528]	; (17e4 <pitch_bend()+0x2e0>)
    15d2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
  if (halfPitchBendKey) calculatedPBdepth = calculatedPBdepth * 0.5;
    15d6:	e7bc      	b.n	1552 <pitch_bend()+0x4e>
    vibZero = vibZero * 0.6 + vibRead * 0.4;
    15d8:	4620      	mov	r0, r4
    15da:	f010 f82b 	bl	11634 <__aeabi_i2f>
    15de:	498e      	ldr	r1, [pc, #568]	; (1818 <pitch_bend()+0x314>)
    15e0:	f010 f87c 	bl	116dc <__aeabi_fmul>
    15e4:	4604      	mov	r4, r0
    15e6:	4648      	mov	r0, r9
    15e8:	f010 f824 	bl	11634 <__aeabi_i2f>
    15ec:	498b      	ldr	r1, [pc, #556]	; (181c <pitch_bend()+0x318>)
    15ee:	f010 f875 	bl	116dc <__aeabi_fmul>
    15f2:	4601      	mov	r1, r0
    15f4:	4620      	mov	r0, r4
    15f6:	f00f ff69 	bl	114cc <__addsf3>
    15fa:	f010 fa35 	bl	11a68 <__aeabi_f2iz>
    15fe:	9b07      	ldr	r3, [sp, #28]
    vibZeroBite = vibZeroBite * 0.6 + vibReadBite * 0.4;
    1600:	9f06      	ldr	r7, [sp, #24]
    vibZero = vibZero * 0.6 + vibRead * 0.4;
    1602:	6018      	str	r0, [r3, #0]
    1604:	4604      	mov	r4, r0
    vibZeroBite = vibZeroBite * 0.6 + vibReadBite * 0.4;
    1606:	6838      	ldr	r0, [r7, #0]
    1608:	f010 f814 	bl	11634 <__aeabi_i2f>
    160c:	4982      	ldr	r1, [pc, #520]	; (1818 <pitch_bend()+0x314>)
    160e:	f010 f865 	bl	116dc <__aeabi_fmul>
    1612:	4603      	mov	r3, r0
    1614:	4630      	mov	r0, r6
    1616:	461e      	mov	r6, r3
    1618:	f010 f80c 	bl	11634 <__aeabi_i2f>
    161c:	497f      	ldr	r1, [pc, #508]	; (181c <pitch_bend()+0x318>)
    161e:	f010 f85d 	bl	116dc <__aeabi_fmul>
    1622:	4601      	mov	r1, r0
    1624:	4630      	mov	r0, r6
    1626:	f00f ff51 	bl	114cc <__addsf3>
    162a:	f010 fa1d 	bl	11a68 <__aeabi_f2iz>
    162e:	6038      	str	r0, [r7, #0]
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    1630:	4b65      	ldr	r3, [pc, #404]	; (17c8 <pitch_bend()+0x2c4>)
    1632:	4e7b      	ldr	r6, [pc, #492]	; (1820 <pitch_bend()+0x31c>)
    1634:	6819      	ldr	r1, [r3, #0]
  vibThr = vibZero - vibSquelch;
    1636:	4b7b      	ldr	r3, [pc, #492]	; (1824 <pitch_bend()+0x320>)
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    1638:	8836      	ldrh	r6, [r6, #0]
  vibThr = vibZero - vibSquelch;
    163a:	881a      	ldrh	r2, [r3, #0]
  vibThrBite = vibZeroBite - vibSquelchBite;
    163c:	4b7a      	ldr	r3, [pc, #488]	; (1828 <pitch_bend()+0x324>)
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    163e:	4f7b      	ldr	r7, [pc, #492]	; (182c <pitch_bend()+0x328>)
  vibThrBite = vibZeroBite - vibSquelchBite;
    1640:	881b      	ldrh	r3, [r3, #0]
  vibThr = vibZero - vibSquelch;
    1642:	f8dd e010 	ldr.w	lr, [sp, #16]
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    1646:	883f      	ldrh	r7, [r7, #0]
  vibThr = vibZero - vibSquelch;
    1648:	eba4 0c02 	sub.w	ip, r4, r2
  vibThrLo = vibZero + vibSquelch;
    164c:	4422      	add	r2, r4
    164e:	9c05      	ldr	r4, [sp, #20]
  vibThr = vibZero - vibSquelch;
    1650:	f8ce c000 	str.w	ip, [lr]
  vibThrLo = vibZero + vibSquelch;
    1654:	6022      	str	r2, [r4, #0]
  vibThrBite = vibZeroBite - vibSquelchBite;
    1656:	9c02      	ldr	r4, [sp, #8]
    1658:	1ac2      	subs	r2, r0, r3
    165a:	6022      	str	r2, [r4, #0]
  vibThrBiteLo = vibZeroBite + vibSquelchBite;
    165c:	9a03      	ldr	r2, [sp, #12]
    165e:	4403      	add	r3, r0
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    1660:	428e      	cmp	r6, r1
  vibThrBiteLo = vibZeroBite + vibSquelchBite;
    1662:	6013      	str	r3, [r2, #0]
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    1664:	f300 8145 	bgt.w	18f2 <pitch_bend()+0x3ee>
    1668:	428f      	cmp	r7, r1
    166a:	4638      	mov	r0, r7
    166c:	bfa8      	it	ge
    166e:	4608      	movge	r0, r1
  int pbNeg = map(constrain(pbDn, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    1670:	4b57      	ldr	r3, [pc, #348]	; (17d0 <pitch_bend()+0x2cc>)
    1672:	681b      	ldr	r3, [r3, #0]
    1674:	429e      	cmp	r6, r3
    1676:	f300 813a 	bgt.w	18ee <pitch_bend()+0x3ea>
    167a:	429f      	cmp	r7, r3
    167c:	463c      	mov	r4, r7
    167e:	bfa8      	it	ge
    1680:	461c      	movge	r4, r3
  if (((pbUp > pitchbThrVal) && PBdepth) || ((pbDn > pitchbThrVal) && PBdepth)) {
    1682:	428e      	cmp	r6, r1
    1684:	f2c0 8117 	blt.w	18b6 <pitch_bend()+0x3b2>
    1688:	429e      	cmp	r6, r3
    168a:	f2c0 8114 	blt.w	18b6 <pitch_bend()+0x3b2>
    pitchBend = pitchBend * 0.6 + 8192 * 0.4; // released, so smooth your way back to zero
    168e:	4e68      	ldr	r6, [pc, #416]	; (1830 <pitch_bend()+0x32c>)
    1690:	6830      	ldr	r0, [r6, #0]
    1692:	f00f ffcf 	bl	11634 <__aeabi_i2f>
    1696:	4960      	ldr	r1, [pc, #384]	; (1818 <pitch_bend()+0x314>)
    1698:	f010 f820 	bl	116dc <__aeabi_fmul>
    169c:	4965      	ldr	r1, [pc, #404]	; (1834 <pitch_bend()+0x330>)
    169e:	f00f ff15 	bl	114cc <__addsf3>
    16a2:	f010 f9e1 	bl	11a68 <__aeabi_f2iz>
    if ((pitchBend > 8187) && (pitchBend < 8197)) pitchBend = 8192; // 8192 is 0 pitch bend, don't miss it bc of smoothing
    16a6:	f5a0 53ff 	sub.w	r3, r0, #8160	; 0x1fe0
    16aa:	3b1c      	subs	r3, #28
    16ac:	2b08      	cmp	r3, #8
    pitchBend = pitchBend * 0.6 + 8192 * 0.4; // released, so smooth your way back to zero
    16ae:	6030      	str	r0, [r6, #0]
    if ((pitchBend > 8187) && (pitchBend < 8197)) pitchBend = 8192; // 8192 is 0 pitch bend, don't miss it bc of smoothing
    16b0:	d801      	bhi.n	16b6 <pitch_bend()+0x1b2>
      pitchBend = 8192;
    16b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  pitchBend = pitchBend + vibSignal;
    16b6:	f643 77ff 	movw	r7, #16383	; 0x3fff
    16ba:	4482      	add	sl, r0
  pitchBend = constrain(pitchBend, 0, 16383);
    16bc:	45ba      	cmp	sl, r7
    16be:	4650      	mov	r0, sl
    16c0:	bfa8      	it	ge
    16c2:	4638      	movge	r0, r7
    16c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    16c8:	6030      	str	r0, [r6, #0]
  pbSend = pitchBend - quarterToneTrigger*calculatedPBdepth*0.25;
    16ca:	f00f ffb3 	bl	11634 <__aeabi_i2f>
    16ce:	4603      	mov	r3, r0
    16d0:	f898 0000 	ldrb.w	r0, [r8]
    16d4:	fb05 f000 	mul.w	r0, r5, r0
    16d8:	461d      	mov	r5, r3
    16da:	f00f ffab 	bl	11634 <__aeabi_i2f>
    16de:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    16e2:	f00f fffb 	bl	116dc <__aeabi_fmul>
    16e6:	4601      	mov	r1, r0
    16e8:	4628      	mov	r0, r5
    16ea:	f00f feed 	bl	114c8 <__aeabi_fsub>
    16ee:	f010 f9bb 	bl	11a68 <__aeabi_f2iz>
  if (subVibSquelch && (8192 != pitchBend)) {
    16f2:	4b51      	ldr	r3, [pc, #324]	; (1838 <pitch_bend()+0x334>)
  pbSend = constrain(pbSend, 0, 16383);
    16f4:	4d51      	ldr	r5, [pc, #324]	; (183c <pitch_bend()+0x338>)
  if (subVibSquelch && (8192 != pitchBend)) {
    16f6:	781b      	ldrb	r3, [r3, #0]
    16f8:	42b8      	cmp	r0, r7
    16fa:	bfa8      	it	ge
    16fc:	4638      	movge	r0, r7
    16fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  pbSend = constrain(pbSend, 0, 16383);
    1702:	6028      	str	r0, [r5, #0]
  if (subVibSquelch && (8192 != pitchBend)) {
    1704:	2b00      	cmp	r3, #0
    1706:	f000 80cb 	beq.w	18a0 <pitch_bend()+0x39c>
    170a:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
    170e:	f000 80c7 	beq.w	18a0 <pitch_bend()+0x39c>
    statusLedOff();
    1712:	f004 fc5b 	bl	5fcc <statusLedOff()>
    vibLedOff = 1;
    1716:	4b4a      	ldr	r3, [pc, #296]	; (1840 <pitch_bend()+0x33c>)
  if (pbSend != oldpb) { // only send midi data if pitch bend has changed from previous value
    1718:	6828      	ldr	r0, [r5, #0]
    vibLedOff = 1;
    171a:	2201      	movs	r2, #1
    171c:	701a      	strb	r2, [r3, #0]
  if (pbSend != oldpb) { // only send midi data if pitch bend has changed from previous value
    171e:	4c49      	ldr	r4, [pc, #292]	; (1844 <pitch_bend()+0x340>)
    1720:	6823      	ldr	r3, [r4, #0]
    1722:	4283      	cmp	r3, r0
    1724:	d004      	beq.n	1730 <pitch_bend()+0x22c>
    midiSendPitchBend(pbSend);
    1726:	b280      	uxth	r0, r0
    1728:	f007 fc48 	bl	8fbc <midiSendPitchBend(unsigned short)>
    oldpb = pbSend;
    172c:	682b      	ldr	r3, [r5, #0]
    172e:	6023      	str	r3, [r4, #0]
}
    1730:	b00b      	add	sp, #44	; 0x2c
    1732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    vibZero = vibZero * 0.8 + vibRead * 0.2;
    1736:	4620      	mov	r0, r4
    1738:	f00f ff7c 	bl	11634 <__aeabi_i2f>
    173c:	4942      	ldr	r1, [pc, #264]	; (1848 <pitch_bend()+0x344>)
    173e:	f00f ffcd 	bl	116dc <__aeabi_fmul>
    1742:	4604      	mov	r4, r0
    1744:	4648      	mov	r0, r9
    1746:	f00f ff75 	bl	11634 <__aeabi_i2f>
    174a:	4940      	ldr	r1, [pc, #256]	; (184c <pitch_bend()+0x348>)
    174c:	f00f ffc6 	bl	116dc <__aeabi_fmul>
    1750:	4601      	mov	r1, r0
    1752:	4620      	mov	r0, r4
    1754:	f00f feba 	bl	114cc <__addsf3>
    1758:	f010 f986 	bl	11a68 <__aeabi_f2iz>
    175c:	9b07      	ldr	r3, [sp, #28]
    vibZeroBite = vibZeroBite * 0.8 + vibReadBite * 0.2;
    175e:	9f06      	ldr	r7, [sp, #24]
    vibZero = vibZero * 0.8 + vibRead * 0.2;
    1760:	6018      	str	r0, [r3, #0]
    1762:	4604      	mov	r4, r0
    vibZeroBite = vibZeroBite * 0.8 + vibReadBite * 0.2;
    1764:	6838      	ldr	r0, [r7, #0]
    1766:	f00f ff65 	bl	11634 <__aeabi_i2f>
    176a:	4937      	ldr	r1, [pc, #220]	; (1848 <pitch_bend()+0x344>)
    176c:	f00f ffb6 	bl	116dc <__aeabi_fmul>
    1770:	4603      	mov	r3, r0
    1772:	4630      	mov	r0, r6
    1774:	461e      	mov	r6, r3
    1776:	f00f ff5d 	bl	11634 <__aeabi_i2f>
    177a:	4934      	ldr	r1, [pc, #208]	; (184c <pitch_bend()+0x348>)
    177c:	e74f      	b.n	161e <pitch_bend()+0x11a>
    vibZero = vibZero * 0.9 + vibRead * 0.1;
    177e:	4620      	mov	r0, r4
    1780:	f00f ff58 	bl	11634 <__aeabi_i2f>
    1784:	4932      	ldr	r1, [pc, #200]	; (1850 <pitch_bend()+0x34c>)
    1786:	f00f ffa9 	bl	116dc <__aeabi_fmul>
    178a:	4604      	mov	r4, r0
    178c:	4648      	mov	r0, r9
    178e:	f00f ff51 	bl	11634 <__aeabi_i2f>
    1792:	4930      	ldr	r1, [pc, #192]	; (1854 <pitch_bend()+0x350>)
    1794:	f00f ffa2 	bl	116dc <__aeabi_fmul>
    1798:	4601      	mov	r1, r0
    179a:	4620      	mov	r0, r4
    179c:	f00f fe96 	bl	114cc <__addsf3>
    17a0:	f010 f962 	bl	11a68 <__aeabi_f2iz>
    17a4:	9b07      	ldr	r3, [sp, #28]
    vibZeroBite = vibZeroBite * 0.9 + vibReadBite * 0.1;
    17a6:	9f06      	ldr	r7, [sp, #24]
    vibZero = vibZero * 0.9 + vibRead * 0.1;
    17a8:	6018      	str	r0, [r3, #0]
    17aa:	4604      	mov	r4, r0
    vibZeroBite = vibZeroBite * 0.9 + vibReadBite * 0.1;
    17ac:	6838      	ldr	r0, [r7, #0]
    17ae:	f00f ff41 	bl	11634 <__aeabi_i2f>
    17b2:	4927      	ldr	r1, [pc, #156]	; (1850 <pitch_bend()+0x34c>)
    17b4:	f00f ff92 	bl	116dc <__aeabi_fmul>
    17b8:	4603      	mov	r3, r0
    17ba:	4630      	mov	r0, r6
    17bc:	461e      	mov	r6, r3
    17be:	f00f ff39 	bl	11634 <__aeabi_i2f>
    17c2:	4924      	ldr	r1, [pc, #144]	; (1854 <pitch_bend()+0x350>)
    17c4:	e72b      	b.n	161e <pitch_bend()+0x11a>
    17c6:	bf00      	nop
    17c8:	1fff9b6c 	.word	0x1fff9b6c
    17cc:	1fff9b74 	.word	0x1fff9b74
    17d0:	1fff9b68 	.word	0x1fff9b68
    17d4:	1fff9ae0 	.word	0x1fff9ae0
    17d8:	1fff9b72 	.word	0x1fff9b72
    17dc:	1fff991a 	.word	0x1fff991a
    17e0:	1fff9b93 	.word	0x1fff9b93
    17e4:	1fff8dcc 	.word	0x1fff8dcc
    17e8:	1fff8e78 	.word	0x1fff8e78
    17ec:	1fff9a0a 	.word	0x1fff9a0a
    17f0:	00012cb8 	.word	0x00012cb8
    17f4:	1fff9c08 	.word	0x1fff9c08
    17f8:	1fff9c18 	.word	0x1fff9c18
    17fc:	1fff9c00 	.word	0x1fff9c00
    1800:	1fff9c0c 	.word	0x1fff9c0c
    1804:	1fff9b18 	.word	0x1fff9b18
    1808:	1fff9c14 	.word	0x1fff9c14
    180c:	1fff9c04 	.word	0x1fff9c04
    1810:	1fff9c10 	.word	0x1fff9c10
    1814:	1fff8e76 	.word	0x1fff8e76
    1818:	3f19999a 	.word	0x3f19999a
    181c:	3ecccccd 	.word	0x3ecccccd
    1820:	1fff9b78 	.word	0x1fff9b78
    1824:	1fff8e7c 	.word	0x1fff8e7c
    1828:	1fff8e7e 	.word	0x1fff8e7e
    182c:	1fff9b76 	.word	0x1fff9b76
    1830:	1fff8e04 	.word	0x1fff8e04
    1834:	454ccccd 	.word	0x454ccccd
    1838:	1fff9cdc 	.word	0x1fff9cdc
    183c:	1fff8e00 	.word	0x1fff8e00
    1840:	1fff9bfe 	.word	0x1fff9bfe
    1844:	1fff8dc8 	.word	0x1fff8dc8
    1848:	3f4ccccd 	.word	0x3f4ccccd
    184c:	3e4ccccd 	.word	0x3e4ccccd
    1850:	3f666666 	.word	0x3f666666
    1854:	3dcccccd 	.word	0x3dcccccd
    vibZero = vibZero * 0.95 + vibRead * 0.05;
    1858:	4620      	mov	r0, r4
    185a:	f00f feeb 	bl	11634 <__aeabi_i2f>
    185e:	49b5      	ldr	r1, [pc, #724]	; (1b34 <pitch_bend()+0x630>)
    1860:	f00f ff3c 	bl	116dc <__aeabi_fmul>
    1864:	4604      	mov	r4, r0
    1866:	4648      	mov	r0, r9
    1868:	f00f fee4 	bl	11634 <__aeabi_i2f>
    186c:	49b2      	ldr	r1, [pc, #712]	; (1b38 <pitch_bend()+0x634>)
    186e:	f00f ff35 	bl	116dc <__aeabi_fmul>
    1872:	4601      	mov	r1, r0
    1874:	4620      	mov	r0, r4
    1876:	f00f fe29 	bl	114cc <__addsf3>
    187a:	f010 f8f5 	bl	11a68 <__aeabi_f2iz>
    187e:	9b07      	ldr	r3, [sp, #28]
    vibZeroBite = vibZeroBite * 0.95 + vibReadBite * 0.05;
    1880:	9f06      	ldr	r7, [sp, #24]
    vibZero = vibZero * 0.95 + vibRead * 0.05;
    1882:	6018      	str	r0, [r3, #0]
    1884:	4604      	mov	r4, r0
    vibZeroBite = vibZeroBite * 0.95 + vibReadBite * 0.05;
    1886:	6838      	ldr	r0, [r7, #0]
    1888:	f00f fed4 	bl	11634 <__aeabi_i2f>
    188c:	49a9      	ldr	r1, [pc, #676]	; (1b34 <pitch_bend()+0x630>)
    188e:	f00f ff25 	bl	116dc <__aeabi_fmul>
    1892:	4603      	mov	r3, r0
    1894:	4630      	mov	r0, r6
    1896:	461e      	mov	r6, r3
    1898:	f00f fecc 	bl	11634 <__aeabi_i2f>
    189c:	49a6      	ldr	r1, [pc, #664]	; (1b38 <pitch_bend()+0x634>)
    189e:	e6be      	b.n	161e <pitch_bend()+0x11a>
  } else if (vibLedOff) {
    18a0:	4ca6      	ldr	r4, [pc, #664]	; (1b3c <pitch_bend()+0x638>)
    18a2:	7823      	ldrb	r3, [r4, #0]
    18a4:	2b00      	cmp	r3, #0
    18a6:	f43f af3a 	beq.w	171e <pitch_bend()+0x21a>
    statusLedOn();
    18aa:	f004 fb8b 	bl	5fc4 <statusLedOn()>
    vibLedOff = 0;
    18ae:	2300      	movs	r3, #0
  if (pbSend != oldpb) { // only send midi data if pitch bend has changed from previous value
    18b0:	6828      	ldr	r0, [r5, #0]
    vibLedOff = 0;
    18b2:	7023      	strb	r3, [r4, #0]
    18b4:	e733      	b.n	171e <pitch_bend()+0x21a>
  if (((pbUp > pitchbThrVal) && PBdepth) || ((pbDn > pitchbThrVal) && PBdepth)) {
    18b6:	f8bb 3000 	ldrh.w	r3, [fp]
    18ba:	2b00      	cmp	r3, #0
    18bc:	f43f aee7 	beq.w	168e <pitch_bend()+0x18a>
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    18c0:	2300      	movs	r3, #0
    18c2:	463a      	mov	r2, r7
    18c4:	4631      	mov	r1, r6
    18c6:	9500      	str	r5, [sp, #0]
    18c8:	f7fe fece 	bl	668 <long map<int, unsigned short, unsigned short, int, int>(int, unsigned short, unsigned short, int, int, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
  int pbNeg = map(constrain(pbDn, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    18cc:	9500      	str	r5, [sp, #0]
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    18ce:	4684      	mov	ip, r0
  int pbNeg = map(constrain(pbDn, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    18d0:	463a      	mov	r2, r7
    18d2:	4620      	mov	r0, r4
    18d4:	4631      	mov	r1, r6
  int pbPos = map(constrain(pbUp, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    18d6:	4664      	mov	r4, ip
  int pbNeg = map(constrain(pbDn, pitchbThrVal, pitchbMaxVal), pitchbThrVal, pitchbMaxVal, 0, calculatedPBdepth);
    18d8:	f7fe fec6 	bl	668 <long map<int, unsigned short, unsigned short, int, int>(int, unsigned short, unsigned short, int, int, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
  int pbDif = abs(pbPos - pbNeg);
    18dc:	1a23      	subs	r3, r4, r0
    18de:	2b00      	cmp	r3, #0
    18e0:	bfb8      	it	lt
    18e2:	425b      	neglt	r3, r3
    if (pbDif < 10) {
    18e4:	2b09      	cmp	r3, #9
    18e6:	f300 809f 	bgt.w	1a28 <pitch_bend()+0x524>
    18ea:	4e95      	ldr	r6, [pc, #596]	; (1b40 <pitch_bend()+0x63c>)
    18ec:	e6e1      	b.n	16b2 <pitch_bend()+0x1ae>
    18ee:	4634      	mov	r4, r6
    18f0:	e6c7      	b.n	1682 <pitch_bend()+0x17e>
    18f2:	4630      	mov	r0, r6
    18f4:	e6bc      	b.n	1670 <pitch_bend()+0x16c>
  calculatedPBdepth = pbDepthList[PBdepth];
    18f6:	f8df b24c 	ldr.w	fp, [pc, #588]	; 1b44 <pitch_bend()+0x640>
    18fa:	4a93      	ldr	r2, [pc, #588]	; (1b48 <pitch_bend()+0x644>)
    18fc:	f8bb 1000 	ldrh.w	r1, [fp]
  halfPitchBendKey = (pinkySetting == PBD) && pinkyKey; // hold pinky key for 1/2 pitchbend value
    1900:	4b92      	ldr	r3, [pc, #584]	; (1b4c <pitch_bend()+0x648>)
  if (halfPitchBendKey) calculatedPBdepth = calculatedPBdepth * 0.5;
    1902:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  quarterToneTrigger = (pinkySetting == QTN) && pinkyKey; // pinky key for a quarter tone down using pitch bend (assuming PB range on synth is set to 2 semitones)
    1906:	f8df 8248 	ldr.w	r8, [pc, #584]	; 1b50 <pitch_bend()+0x64c>
  halfPitchBendKey = (pinkySetting == PBD) && pinkyKey; // hold pinky key for 1/2 pitchbend value
    190a:	2201      	movs	r2, #1
    190c:	701a      	strb	r2, [r3, #0]
  quarterToneTrigger = (pinkySetting == QTN) && pinkyKey; // pinky key for a quarter tone down using pitch bend (assuming PB range on synth is set to 2 semitones)
    190e:	2300      	movs	r3, #0
    1910:	f888 3000 	strb.w	r3, [r8]
  if (halfPitchBendKey) calculatedPBdepth = calculatedPBdepth * 0.5;
    1914:	f00f fe8e 	bl	11634 <__aeabi_i2f>
    1918:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    191c:	f00f fede 	bl	116dc <__aeabi_fmul>
    1920:	f010 f8a2 	bl	11a68 <__aeabi_f2iz>
    1924:	4605      	mov	r5, r0
    1926:	e614      	b.n	1552 <pitch_bend()+0x4e>
  vibMaxBite = vibMaxBiteList[vibSensBite - 1];
    1928:	4b8a      	ldr	r3, [pc, #552]	; (1b54 <pitch_bend()+0x650>)
    if (biteJumper){ //PBITE (if pulled low with jumper, or NuRAD compile, use pressure sensor instead of capacitive bite sensor)
    192a:	4a8b      	ldr	r2, [pc, #556]	; (1b58 <pitch_bend()+0x654>)
  vibMaxBite = vibMaxBiteList[vibSensBite - 1];
    192c:	881b      	ldrh	r3, [r3, #0]
    192e:	498b      	ldr	r1, [pc, #556]	; (1b5c <pitch_bend()+0x658>)
    if (biteJumper){ //PBITE (if pulled low with jumper, or NuRAD compile, use pressure sensor instead of capacitive bite sensor)
    1930:	7812      	ldrb	r2, [r2, #0]
  vibMaxBite = vibMaxBiteList[vibSensBite - 1];
    1932:	3b01      	subs	r3, #1
    1934:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
    if (biteJumper){ //PBITE (if pulled low with jumper, or NuRAD compile, use pressure sensor instead of capacitive bite sensor)
    1938:	2a00      	cmp	r2, #0
    193a:	f040 808d 	bne.w	1a58 <pitch_bend()+0x554>
      vibReadBite = touchRead(bitePin);     // get sensor data, do some smoothing - SENSOR PIN 17 - PCB PINS LABELED "BITE" (GND left, sensor pin right)
    193e:	2011      	movs	r0, #17
    1940:	f00e fae2 	bl	ff08 <touchRead>
    if (vibReadBite < vibThrBite) {
    1944:	4b86      	ldr	r3, [pc, #536]	; (1b60 <pitch_bend()+0x65c>)
    1946:	9302      	str	r3, [sp, #8]
    1948:	681f      	ldr	r7, [r3, #0]
      vibReadBite = touchRead(bitePin);     // get sensor data, do some smoothing - SENSOR PIN 17 - PCB PINS LABELED "BITE" (GND left, sensor pin right)
    194a:	4606      	mov	r6, r0
    if (vibReadBite < vibThrBite) {
    194c:	42b7      	cmp	r7, r6
    194e:	f340 808d 	ble.w	1a6c <pitch_bend()+0x568>
      if (UPWD == vibDirection) {
    1952:	4b84      	ldr	r3, [pc, #528]	; (1b64 <pitch_bend()+0x660>)
        vibSignal = (vibSignal + map(constrain(vibReadBite, (vibZeroBite - vibMaxBite), vibThrBite), vibThrBite, (vibZeroBite - vibMaxBite), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    1954:	4a84      	ldr	r2, [pc, #528]	; (1b68 <pitch_bend()+0x664>)
      if (UPWD == vibDirection) {
    1956:	881b      	ldrh	r3, [r3, #0]
        vibSignal = (vibSignal + map(constrain(vibReadBite, (vibZeroBite - vibMaxBite), vibThrBite), vibThrBite, (vibZeroBite - vibMaxBite), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    1958:	9206      	str	r2, [sp, #24]
      if (UPWD == vibDirection) {
    195a:	2b01      	cmp	r3, #1
        vibSignal = (vibSignal + map(constrain(vibReadBite, (vibZeroBite - vibMaxBite), vibThrBite), vibThrBite, (vibZeroBite - vibMaxBite), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    195c:	4b83      	ldr	r3, [pc, #524]	; (1b6c <pitch_bend()+0x668>)
    195e:	f8b3 9000 	ldrh.w	r9, [r3]
    1962:	6813      	ldr	r3, [r2, #0]
    1964:	4628      	mov	r0, r5
    1966:	eba3 0404 	sub.w	r4, r3, r4
      if (UPWD == vibDirection) {
    196a:	f000 8113 	beq.w	1b94 <pitch_bend()+0x690>
        vibSignal = (vibSignal + map(constrain(vibReadBite, (vibZeroBite - vibMaxBite), vibThrBite), vibThrBite, (vibZeroBite - vibMaxBite), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    196e:	f00f fe61 	bl	11634 <__aeabi_i2f>
    1972:	4b7f      	ldr	r3, [pc, #508]	; (1b70 <pitch_bend()+0x66c>)
    1974:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    1978:	f00f feb0 	bl	116dc <__aeabi_fmul>
    197c:	4601      	mov	r1, r0
    197e:	2000      	movs	r0, #0
    1980:	f00f fda2 	bl	114c8 <__aeabi_fsub>
    1984:	42a6      	cmp	r6, r4
    1986:	9000      	str	r0, [sp, #0]
    1988:	4639      	mov	r1, r7
    198a:	4630      	mov	r0, r6
    198c:	4f79      	ldr	r7, [pc, #484]	; (1b74 <pitch_bend()+0x670>)
    198e:	bfb8      	it	lt
    1990:	4620      	movlt	r0, r4
    1992:	2300      	movs	r3, #0
    1994:	4622      	mov	r2, r4
    1996:	f7fe fe0d 	bl	5b4 <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
    199a:	683b      	ldr	r3, [r7, #0]
    199c:	4418      	add	r0, r3
    199e:	4b76      	ldr	r3, [pc, #472]	; (1b78 <pitch_bend()+0x674>)
    19a0:	9303      	str	r3, [sp, #12]
  if (1 == leverControl) { //lever vibrato
    19a2:	4b76      	ldr	r3, [pc, #472]	; (1b7c <pitch_bend()+0x678>)
    19a4:	881b      	ldrh	r3, [r3, #0]
        vibSignal = (vibSignal + map(constrain(vibReadBite, (vibZeroBite - vibMaxBite), vibThrBite), vibThrBite, (vibZeroBite - vibMaxBite), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    19a6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    19aa:	1040      	asrs	r0, r0, #1
  if (1 == leverControl) { //lever vibrato
    19ac:	2b01      	cmp	r3, #1
        vibSignal = (vibSignal + map(constrain(vibReadBite, (vibZeroBite - vibMaxBite), vibThrBite), vibThrBite, (vibZeroBite - vibMaxBite), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    19ae:	6038      	str	r0, [r7, #0]
  if (1 == leverControl) { //lever vibrato
    19b0:	f47f ade7 	bne.w	1582 <pitch_bend()+0x7e>
    if (vibRead < vibThr) {
    19b4:	4c72      	ldr	r4, [pc, #456]	; (1b80 <pitch_bend()+0x67c>)
    19b6:	9404      	str	r4, [sp, #16]
    vibRead = touchRead(vibratoPin); // SENSOR PIN 15 - built in var cap
    19b8:	200f      	movs	r0, #15
    19ba:	f00e faa5 	bl	ff08 <touchRead>
    if (vibRead < vibThr) {
    19be:	6822      	ldr	r2, [r4, #0]
    19c0:	4282      	cmp	r2, r0
    vibRead = touchRead(vibratoPin); // SENSOR PIN 15 - built in var cap
    19c2:	4681      	mov	r9, r0
    if (vibRead < vibThr) {
    19c4:	dd7e      	ble.n	1ac4 <pitch_bend()+0x5c0>
      if (UPWD == vibDirection) {
    19c6:	4b67      	ldr	r3, [pc, #412]	; (1b64 <pitch_bend()+0x660>)
    19c8:	9208      	str	r2, [sp, #32]
    19ca:	881b      	ldrh	r3, [r3, #0]
    19cc:	2b01      	cmp	r3, #1
    19ce:	f000 8109 	beq.w	1be4 <pitch_bend()+0x6e0>
        vibSignal = (vibSignal + map(constrain(vibRead, (vibZero - vibMax), vibThr), vibThr, (vibZero - vibMax), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    19d2:	4b66      	ldr	r3, [pc, #408]	; (1b6c <pitch_bend()+0x668>)
    19d4:	4a6b      	ldr	r2, [pc, #428]	; (1b84 <pitch_bend()+0x680>)
    19d6:	8819      	ldrh	r1, [r3, #0]
    19d8:	6814      	ldr	r4, [r2, #0]
    19da:	9105      	str	r1, [sp, #20]
    19dc:	4628      	mov	r0, r5
    19de:	9207      	str	r2, [sp, #28]
    19e0:	f00f fe28 	bl	11634 <__aeabi_i2f>
    19e4:	4b62      	ldr	r3, [pc, #392]	; (1b70 <pitch_bend()+0x66c>)
    19e6:	9905      	ldr	r1, [sp, #20]
    19e8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    19ec:	f00f fe76 	bl	116dc <__aeabi_fmul>
    19f0:	4601      	mov	r1, r0
    19f2:	2000      	movs	r0, #0
    19f4:	eba4 0a0a 	sub.w	sl, r4, sl
    19f8:	f00f fd66 	bl	114c8 <__aeabi_fsub>
    19fc:	9a08      	ldr	r2, [sp, #32]
    19fe:	9000      	str	r0, [sp, #0]
    1a00:	45d1      	cmp	r9, sl
    1a02:	4611      	mov	r1, r2
    1a04:	4648      	mov	r0, r9
    1a06:	4652      	mov	r2, sl
    1a08:	bfb8      	it	lt
    1a0a:	4650      	movlt	r0, sl
    1a0c:	2300      	movs	r3, #0
    1a0e:	f7fe fdd1 	bl	5b4 <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
    1a12:	683b      	ldr	r3, [r7, #0]
    1a14:	4418      	add	r0, r3
    1a16:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    1a1a:	4b5b      	ldr	r3, [pc, #364]	; (1b88 <pitch_bend()+0x684>)
    1a1c:	9305      	str	r3, [sp, #20]
    1a1e:	ea4f 0a60 	mov.w	sl, r0, asr #1
    1a22:	f8c7 a000 	str.w	sl, [r7]
    1a26:	e5b7      	b.n	1598 <pitch_bend()+0x94>
  int pbSum = 8193 + pbPos - pbNeg;
    1a28:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1a2c:	3401      	adds	r4, #1
      pitchBend = pitchBend * 0.6 + 0.4 * pbSum;
    1a2e:	1a20      	subs	r0, r4, r0
    1a30:	f00f fe00 	bl	11634 <__aeabi_i2f>
    1a34:	4955      	ldr	r1, [pc, #340]	; (1b8c <pitch_bend()+0x688>)
    1a36:	4e42      	ldr	r6, [pc, #264]	; (1b40 <pitch_bend()+0x63c>)
    1a38:	f00f fe50 	bl	116dc <__aeabi_fmul>
    1a3c:	4604      	mov	r4, r0
    1a3e:	6830      	ldr	r0, [r6, #0]
    1a40:	f00f fdf8 	bl	11634 <__aeabi_i2f>
    1a44:	4952      	ldr	r1, [pc, #328]	; (1b90 <pitch_bend()+0x68c>)
    1a46:	f00f fe49 	bl	116dc <__aeabi_fmul>
    1a4a:	4601      	mov	r1, r0
    1a4c:	4620      	mov	r0, r4
    1a4e:	f00f fd3d 	bl	114cc <__addsf3>
    1a52:	f010 f809 	bl	11a68 <__aeabi_f2iz>
    1a56:	e62e      	b.n	16b6 <pitch_bend()+0x1b2>
      vibReadBite = analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
    1a58:	2015      	movs	r0, #21
    1a5a:	f00c fc07 	bl	e26c <analogRead>
    if (vibReadBite < vibThrBite) {
    1a5e:	4b40      	ldr	r3, [pc, #256]	; (1b60 <pitch_bend()+0x65c>)
    1a60:	9302      	str	r3, [sp, #8]
    1a62:	681f      	ldr	r7, [r3, #0]
      vibReadBite = analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
    1a64:	4606      	mov	r6, r0
    if (vibReadBite < vibThrBite) {
    1a66:	42b7      	cmp	r7, r6
    1a68:	f73f af73 	bgt.w	1952 <pitch_bend()+0x44e>
    } else if (vibReadBite > vibThrBiteLo) {
    1a6c:	4b42      	ldr	r3, [pc, #264]	; (1b78 <pitch_bend()+0x674>)
    1a6e:	9303      	str	r3, [sp, #12]
    1a70:	681f      	ldr	r7, [r3, #0]
    1a72:	42b7      	cmp	r7, r6
    1a74:	da54      	bge.n	1b20 <pitch_bend()+0x61c>
      if (UPWD == vibDirection) {
    1a76:	4b3b      	ldr	r3, [pc, #236]	; (1b64 <pitch_bend()+0x660>)
        vibSignal = (vibSignal + map(constrain(vibReadBite, vibThrBiteLo, (vibZeroBite + vibMaxBite)), vibThrBiteLo, (vibZeroBite + vibMaxBite), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    1a78:	4a3b      	ldr	r2, [pc, #236]	; (1b68 <pitch_bend()+0x664>)
      if (UPWD == vibDirection) {
    1a7a:	881b      	ldrh	r3, [r3, #0]
        vibSignal = (vibSignal + map(constrain(vibReadBite, vibThrBiteLo, (vibZeroBite + vibMaxBite)), vibThrBiteLo, (vibZeroBite + vibMaxBite), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    1a7c:	9206      	str	r2, [sp, #24]
      if (UPWD == vibDirection) {
    1a7e:	2b01      	cmp	r3, #1
        vibSignal = (vibSignal + map(constrain(vibReadBite, vibThrBiteLo, (vibZeroBite + vibMaxBite)), vibThrBiteLo, (vibZeroBite + vibMaxBite), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    1a80:	4b3a      	ldr	r3, [pc, #232]	; (1b6c <pitch_bend()+0x668>)
    1a82:	f8b3 9000 	ldrh.w	r9, [r3]
    1a86:	6813      	ldr	r3, [r2, #0]
    1a88:	4628      	mov	r0, r5
    1a8a:	441c      	add	r4, r3
      if (UPWD == vibDirection) {
    1a8c:	f000 80bc 	beq.w	1c08 <pitch_bend()+0x704>
        vibSignal = (vibSignal + map(constrain(vibReadBite, vibThrBiteLo, (vibZeroBite + vibMaxBite)), vibThrBiteLo, (vibZeroBite + vibMaxBite), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    1a90:	f00f fdd0 	bl	11634 <__aeabi_i2f>
    1a94:	4b36      	ldr	r3, [pc, #216]	; (1b70 <pitch_bend()+0x66c>)
    1a96:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    1a9a:	f00f fe1f 	bl	116dc <__aeabi_fmul>
    1a9e:	42a6      	cmp	r6, r4
    1aa0:	9000      	str	r0, [sp, #0]
    1aa2:	4639      	mov	r1, r7
    1aa4:	4630      	mov	r0, r6
    1aa6:	4f33      	ldr	r7, [pc, #204]	; (1b74 <pitch_bend()+0x670>)
    1aa8:	f04f 0300 	mov.w	r3, #0
    1aac:	bfa8      	it	ge
    1aae:	4620      	movge	r0, r4
    1ab0:	4622      	mov	r2, r4
    1ab2:	f7fe fd7f 	bl	5b4 <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
    1ab6:	683b      	ldr	r3, [r7, #0]
    1ab8:	4418      	add	r0, r3
    1aba:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    1abe:	1040      	asrs	r0, r0, #1
    1ac0:	6038      	str	r0, [r7, #0]
    1ac2:	e559      	b.n	1578 <pitch_bend()+0x74>
    } else if (vibRead > vibThrLo) {
    1ac4:	4b30      	ldr	r3, [pc, #192]	; (1b88 <pitch_bend()+0x684>)
    1ac6:	9305      	str	r3, [sp, #20]
    1ac8:	681a      	ldr	r2, [r3, #0]
    1aca:	4282      	cmp	r2, r0
    1acc:	da6a      	bge.n	1ba4 <pitch_bend()+0x6a0>
      if (UPWD == vibDirection) {
    1ace:	4b25      	ldr	r3, [pc, #148]	; (1b64 <pitch_bend()+0x660>)
    1ad0:	9209      	str	r2, [sp, #36]	; 0x24
    1ad2:	881b      	ldrh	r3, [r3, #0]
    1ad4:	2b01      	cmp	r3, #1
    1ad6:	d070      	beq.n	1bba <pitch_bend()+0x6b6>
        vibSignal = (vibSignal + map(constrain(vibRead, vibThrLo, (vibZero + vibMax)), vibThrLo, (vibZero + vibMax), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    1ad8:	4b24      	ldr	r3, [pc, #144]	; (1b6c <pitch_bend()+0x668>)
    1ada:	4a2a      	ldr	r2, [pc, #168]	; (1b84 <pitch_bend()+0x680>)
    1adc:	8819      	ldrh	r1, [r3, #0]
    1ade:	6814      	ldr	r4, [r2, #0]
    1ae0:	9108      	str	r1, [sp, #32]
    1ae2:	4628      	mov	r0, r5
    1ae4:	9207      	str	r2, [sp, #28]
    1ae6:	f00f fda5 	bl	11634 <__aeabi_i2f>
    1aea:	4b21      	ldr	r3, [pc, #132]	; (1b70 <pitch_bend()+0x66c>)
    1aec:	9908      	ldr	r1, [sp, #32]
    1aee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    1af2:	44a2      	add	sl, r4
    1af4:	f00f fdf2 	bl	116dc <__aeabi_fmul>
    1af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1afa:	9000      	str	r0, [sp, #0]
    1afc:	45d1      	cmp	r9, sl
    1afe:	4611      	mov	r1, r2
    1b00:	4648      	mov	r0, r9
    1b02:	4652      	mov	r2, sl
    1b04:	bfa8      	it	ge
    1b06:	4650      	movge	r0, sl
    1b08:	2300      	movs	r3, #0
    1b0a:	f7fe fd53 	bl	5b4 <long map<int, int, int, int, float>(int, int, int, int, float, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
    1b0e:	683b      	ldr	r3, [r7, #0]
    1b10:	4418      	add	r0, r3
    1b12:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    1b16:	ea4f 0a60 	mov.w	sl, r0, asr #1
    1b1a:	f8c7 a000 	str.w	sl, [r7]
    1b1e:	e53b      	b.n	1598 <pitch_bend()+0x94>
      vibSignal = vibSignal / 2;
    1b20:	4f14      	ldr	r7, [pc, #80]	; (1b74 <pitch_bend()+0x670>)
    1b22:	4b11      	ldr	r3, [pc, #68]	; (1b68 <pitch_bend()+0x664>)
    1b24:	9306      	str	r3, [sp, #24]
    1b26:	683b      	ldr	r3, [r7, #0]
    1b28:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    1b2c:	105b      	asrs	r3, r3, #1
    1b2e:	603b      	str	r3, [r7, #0]
    1b30:	e522      	b.n	1578 <pitch_bend()+0x74>
    1b32:	bf00      	nop
    1b34:	3f733333 	.word	0x3f733333
    1b38:	3d4ccccd 	.word	0x3d4ccccd
    1b3c:	1fff9bfe 	.word	0x1fff9bfe
    1b40:	1fff8e04 	.word	0x1fff8e04
    1b44:	1fff991a 	.word	0x1fff991a
    1b48:	1fff8dcc 	.word	0x1fff8dcc
    1b4c:	1fff9ae0 	.word	0x1fff9ae0
    1b50:	1fff9b93 	.word	0x1fff9b93
    1b54:	1fff8e7a 	.word	0x1fff8e7a
    1b58:	1fff9a0d 	.word	0x1fff9a0d
    1b5c:	00012f70 	.word	0x00012f70
    1b60:	1fff9c08 	.word	0x1fff9c08
    1b64:	1fff9bfc 	.word	0x1fff9bfc
    1b68:	1fff9c18 	.word	0x1fff9c18
    1b6c:	1fff9c1c 	.word	0x1fff9c1c
    1b70:	000135f8 	.word	0x000135f8
    1b74:	1fff9c00 	.word	0x1fff9c00
    1b78:	1fff9c0c 	.word	0x1fff9c0c
    1b7c:	1fff9b18 	.word	0x1fff9b18
    1b80:	1fff9c04 	.word	0x1fff9c04
    1b84:	1fff9c14 	.word	0x1fff9c14
    1b88:	1fff9c10 	.word	0x1fff9c10
    1b8c:	3ecccccd 	.word	0x3ecccccd
    1b90:	3f19999a 	.word	0x3f19999a
        vibSignal = (vibSignal + map(constrain(vibReadBite, (vibZeroBite - vibMaxBite), vibThrBite), vibThrBite, (vibZeroBite - vibMaxBite), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    1b94:	f00f fd4e 	bl	11634 <__aeabi_i2f>
    1b98:	4b23      	ldr	r3, [pc, #140]	; (1c28 <pitch_bend()+0x724>)
    1b9a:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    1b9e:	f00f fd9d 	bl	116dc <__aeabi_fmul>
    1ba2:	e6ef      	b.n	1984 <pitch_bend()+0x480>
      vibSignal = vibSignal / 2;
    1ba4:	683b      	ldr	r3, [r7, #0]
    1ba6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    1baa:	ea4f 0a63 	mov.w	sl, r3, asr #1
        vibSignal = (vibSignal + map(constrain(vibRead, (vibZero - vibMax), vibThr), vibThr, (vibZero - vibMax), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    1bae:	4b1f      	ldr	r3, [pc, #124]	; (1c2c <pitch_bend()+0x728>)
      vibSignal = vibSignal / 2;
    1bb0:	f8c7 a000 	str.w	sl, [r7]
        vibSignal = (vibSignal + map(constrain(vibRead, (vibZero - vibMax), vibThr), vibThr, (vibZero - vibMax), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    1bb4:	681c      	ldr	r4, [r3, #0]
    1bb6:	9307      	str	r3, [sp, #28]
    1bb8:	e4ee      	b.n	1598 <pitch_bend()+0x94>
        vibSignal = (vibSignal + map(constrain(vibRead, vibThrLo, (vibZero + vibMax)), vibThrLo, (vibZero + vibMax), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    1bba:	4b1d      	ldr	r3, [pc, #116]	; (1c30 <pitch_bend()+0x72c>)
    1bbc:	4a1b      	ldr	r2, [pc, #108]	; (1c2c <pitch_bend()+0x728>)
    1bbe:	8819      	ldrh	r1, [r3, #0]
    1bc0:	6814      	ldr	r4, [r2, #0]
    1bc2:	9108      	str	r1, [sp, #32]
    1bc4:	4628      	mov	r0, r5
    1bc6:	9207      	str	r2, [sp, #28]
    1bc8:	f00f fd34 	bl	11634 <__aeabi_i2f>
    1bcc:	4b16      	ldr	r3, [pc, #88]	; (1c28 <pitch_bend()+0x724>)
    1bce:	9908      	ldr	r1, [sp, #32]
    1bd0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    1bd4:	f00f fd82 	bl	116dc <__aeabi_fmul>
    1bd8:	4601      	mov	r1, r0
    1bda:	2000      	movs	r0, #0
    1bdc:	44a2      	add	sl, r4
    1bde:	f00f fc73 	bl	114c8 <__aeabi_fsub>
    1be2:	e789      	b.n	1af8 <pitch_bend()+0x5f4>
        vibSignal = (vibSignal + map(constrain(vibRead, (vibZero - vibMax), vibThr), vibThr, (vibZero - vibMax), 0, calculatedPBdepth * vibDepth[vibrato]))/2;
    1be4:	4b12      	ldr	r3, [pc, #72]	; (1c30 <pitch_bend()+0x72c>)
    1be6:	4a11      	ldr	r2, [pc, #68]	; (1c2c <pitch_bend()+0x728>)
    1be8:	8819      	ldrh	r1, [r3, #0]
    1bea:	6814      	ldr	r4, [r2, #0]
    1bec:	9105      	str	r1, [sp, #20]
    1bee:	4628      	mov	r0, r5
    1bf0:	9207      	str	r2, [sp, #28]
    1bf2:	f00f fd1f 	bl	11634 <__aeabi_i2f>
    1bf6:	4b0c      	ldr	r3, [pc, #48]	; (1c28 <pitch_bend()+0x724>)
    1bf8:	9905      	ldr	r1, [sp, #20]
    1bfa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    1bfe:	eba4 0a0a 	sub.w	sl, r4, sl
    1c02:	f00f fd6b 	bl	116dc <__aeabi_fmul>
    1c06:	e6f9      	b.n	19fc <pitch_bend()+0x4f8>
        vibSignal = (vibSignal + map(constrain(vibReadBite, vibThrBiteLo, (vibZeroBite + vibMaxBite)), vibThrBiteLo, (vibZeroBite + vibMaxBite), 0, (0 - calculatedPBdepth * vibDepth[vibrato])))/2;
    1c08:	f00f fd14 	bl	11634 <__aeabi_i2f>
    1c0c:	4b06      	ldr	r3, [pc, #24]	; (1c28 <pitch_bend()+0x724>)
    1c0e:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    1c12:	f00f fd63 	bl	116dc <__aeabi_fmul>
    1c16:	4601      	mov	r1, r0
    1c18:	2000      	movs	r0, #0
    1c1a:	f00f fc55 	bl	114c8 <__aeabi_fsub>
    1c1e:	e73e      	b.n	1a9e <pitch_bend()+0x59a>
    vibZeroBite = vibZeroBite * 0.95 + vibReadBite * 0.05;
    1c20:	9b06      	ldr	r3, [sp, #24]
    1c22:	6818      	ldr	r0, [r3, #0]
    1c24:	e504      	b.n	1630 <pitch_bend()+0x12c>
    1c26:	bf00      	nop
    1c28:	000135f8 	.word	0x000135f8
    1c2c:	1fff9c14 	.word	0x1fff9c14
    1c30:	1fff9c1c 	.word	0x1fff9c1c

00001c34 <doorKnobCheck()>:
void doorKnobCheck() {
    1c34:	b508      	push	{r3, lr}
  if (gateOpenEnable){
    1c36:	4b24      	ldr	r3, [pc, #144]	; (1cc8 <doorKnobCheck()+0x94>)
    1c38:	881b      	ldrh	r3, [r3, #0]
    1c3a:	b35b      	cbz	r3, 1c94 <doorKnobCheck()+0x60>
    if (R2 && R3 && R4 && R5) { // fold thumb in to cover R2 through R5
    1c3c:	4b23      	ldr	r3, [pc, #140]	; (1ccc <doorKnobCheck()+0x98>)
    1c3e:	781b      	ldrb	r3, [r3, #0]
    1c40:	b35b      	cbz	r3, 1c9a <doorKnobCheck()+0x66>
    1c42:	4b23      	ldr	r3, [pc, #140]	; (1cd0 <doorKnobCheck()+0x9c>)
    1c44:	781b      	ldrb	r3, [r3, #0]
    1c46:	b343      	cbz	r3, 1c9a <doorKnobCheck()+0x66>
    1c48:	4b22      	ldr	r3, [pc, #136]	; (1cd4 <doorKnobCheck()+0xa0>)
    1c4a:	781b      	ldrb	r3, [r3, #0]
    1c4c:	b32b      	cbz	r3, 1c9a <doorKnobCheck()+0x66>
    1c4e:	4b22      	ldr	r3, [pc, #136]	; (1cd8 <doorKnobCheck()+0xa4>)
    1c50:	781b      	ldrb	r3, [r3, #0]
    1c52:	b313      	cbz	r3, 1c9a <doorKnobCheck()+0x66>
      if (!gateOpen && (pbUp > ((pitchbMaxVal + pitchbThrVal) / 2))) {
    1c54:	4b21      	ldr	r3, [pc, #132]	; (1cdc <doorKnobCheck()+0xa8>)
    1c56:	781a      	ldrb	r2, [r3, #0]
    1c58:	b32a      	cbz	r2, 1ca6 <doorKnobCheck()+0x72>
      } else if (gateOpen && (pbDn > ((pitchbMaxVal + pitchbThrVal) / 2))) {
    1c5a:	4a21      	ldr	r2, [pc, #132]	; (1ce0 <doorKnobCheck()+0xac>)
    1c5c:	4821      	ldr	r0, [pc, #132]	; (1ce4 <doorKnobCheck()+0xb0>)
    1c5e:	4922      	ldr	r1, [pc, #136]	; (1ce8 <doorKnobCheck()+0xb4>)
    1c60:	8812      	ldrh	r2, [r2, #0]
    1c62:	8800      	ldrh	r0, [r0, #0]
    1c64:	6809      	ldr	r1, [r1, #0]
    1c66:	4402      	add	r2, r0
    1c68:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
    1c6c:	dd15      	ble.n	1c9a <doorKnobCheck()+0x66>
        gateOpen = 0;
    1c6e:	2200      	movs	r2, #0
    1c70:	701a      	strb	r2, [r3, #0]
        midiPanic();
    1c72:	f007 fa4f 	bl	9114 <midiPanic()>
        statusLedFlash(100);
    1c76:	2064      	movs	r0, #100	; 0x64
    1c78:	f004 f9bc 	bl	5ff4 <statusLedFlash(unsigned short)>
        statusLedFlash(100);
    1c7c:	2064      	movs	r0, #100	; 0x64
    1c7e:	f004 f9b9 	bl	5ff4 <statusLedFlash(unsigned short)>
        statusLedFlash(100);
    1c82:	2064      	movs	r0, #100	; 0x64
    1c84:	f004 f9b6 	bl	5ff4 <statusLedFlash(unsigned short)>
}
    1c88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        delay(600);
    1c8c:	f44f 7016 	mov.w	r0, #600	; 0x258
    1c90:	f00d b8bc 	b.w	ee0c <delay>
  } else if (gateOpen) {
    1c94:	4a11      	ldr	r2, [pc, #68]	; (1cdc <doorKnobCheck()+0xa8>)
    1c96:	7811      	ldrb	r1, [r2, #0]
    1c98:	b901      	cbnz	r1, 1c9c <doorKnobCheck()+0x68>
}
    1c9a:	bd08      	pop	{r3, pc}
    gateOpen = 0;
    1c9c:	7013      	strb	r3, [r2, #0]
}
    1c9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    midiPanic();
    1ca2:	f007 ba37 	b.w	9114 <midiPanic()>
      if (!gateOpen && (pbUp > ((pitchbMaxVal + pitchbThrVal) / 2))) {
    1ca6:	4a0e      	ldr	r2, [pc, #56]	; (1ce0 <doorKnobCheck()+0xac>)
    1ca8:	480e      	ldr	r0, [pc, #56]	; (1ce4 <doorKnobCheck()+0xb0>)
    1caa:	4910      	ldr	r1, [pc, #64]	; (1cec <doorKnobCheck()+0xb8>)
    1cac:	8812      	ldrh	r2, [r2, #0]
    1cae:	8800      	ldrh	r0, [r0, #0]
    1cb0:	6809      	ldr	r1, [r1, #0]
    1cb2:	4402      	add	r2, r0
    1cb4:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
    1cb8:	ddef      	ble.n	1c9a <doorKnobCheck()+0x66>
        gateOpen = 1;
    1cba:	2201      	movs	r2, #1
    1cbc:	701a      	strb	r2, [r3, #0]
}
    1cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        statusLedFlash(100);
    1cc2:	2064      	movs	r0, #100	; 0x64
    1cc4:	f004 b996 	b.w	5ff4 <statusLedFlash(unsigned short)>
    1cc8:	1fff9ac2 	.word	0x1fff9ac2
    1ccc:	1fff991d 	.word	0x1fff991d
    1cd0:	1fff991e 	.word	0x1fff991e
    1cd4:	1fff991f 	.word	0x1fff991f
    1cd8:	1fff9920 	.word	0x1fff9920
    1cdc:	1fff9ac0 	.word	0x1fff9ac0
    1ce0:	1fff9b76 	.word	0x1fff9b76
    1ce4:	1fff9b78 	.word	0x1fff9b78
    1ce8:	1fff9b68 	.word	0x1fff9b68
    1cec:	1fff9b6c 	.word	0x1fff9b6c

00001cf0 <battCheck()>:
void battCheck(){
    1cf0:	b538      	push	{r3, r4, r5, lr}
    battMeasured[battCheckPos] = analogRead(vMeterPin);
    1cf2:	4c11      	ldr	r4, [pc, #68]	; (1d38 <battCheck()+0x48>)
    1cf4:	2023      	movs	r0, #35	; 0x23
    1cf6:	7825      	ldrb	r5, [r4, #0]
    1cf8:	f00c fab8 	bl	e26c <analogRead>
    1cfc:	490f      	ldr	r1, [pc, #60]	; (1d3c <battCheck()+0x4c>)
    1cfe:	2200      	movs	r2, #0
    1d00:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    for (int i=0; i<50; i++){
    1d04:	1f0b      	subs	r3, r1, #4
    1d06:	f101 00c4 	add.w	r0, r1, #196	; 0xc4
      battAvg += battMeasured[i];
    1d0a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    for (int i=0; i<50; i++){
    1d0e:	4283      	cmp	r3, r0
      battAvg += battMeasured[i];
    1d10:	440a      	add	r2, r1
    for (int i=0; i<50; i++){
    1d12:	d1fa      	bne.n	1d0a <battCheck()+0x1a>
    battCheckPos++;
    1d14:	7823      	ldrb	r3, [r4, #0]
    battAvg /= 50;
    1d16:	490a      	ldr	r1, [pc, #40]	; (1d40 <battCheck()+0x50>)
    1d18:	480a      	ldr	r0, [pc, #40]	; (1d44 <battCheck()+0x54>)
    battCheckPos++;
    1d1a:	3301      	adds	r3, #1
    1d1c:	b2db      	uxtb	r3, r3
    battAvg /= 50;
    1d1e:	fb81 5102 	smull	r5, r1, r1, r2
    if (battCheckPos == 50) battCheckPos = 0;
    1d22:	2b32      	cmp	r3, #50	; 0x32
    battAvg /= 50;
    1d24:	ea4f 72e2 	mov.w	r2, r2, asr #31
    1d28:	ebc2 1221 	rsb	r2, r2, r1, asr #4
    if (battCheckPos == 50) battCheckPos = 0;
    1d2c:	bf08      	it	eq
    1d2e:	2300      	moveq	r3, #0
    battAvg /= 50;
    1d30:	6002      	str	r2, [r0, #0]
    if (battCheckPos == 50) battCheckPos = 0;
    1d32:	7023      	strb	r3, [r4, #0]
}
    1d34:	bd38      	pop	{r3, r4, r5, pc}
    1d36:	bf00      	nop
    1d38:	1fff9938 	.word	0x1fff9938
    1d3c:	1fff993c 	.word	0x1fff993c
    1d40:	51eb851f 	.word	0x51eb851f
    1d44:	1fff9934 	.word	0x1fff9934

00001d48 <extraController()>:
void extraController() {
    1d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  exSensor = exSensor * 0.6 + 0.4 * touchRead(extraPin); // get sensor data, do some smoothing - SENSOR PIN 16 - PCB PIN "EC" (marked K4 on some prototype boards)
    1d4c:	4c9f      	ldr	r4, [pc, #636]	; (1fcc <extraController()+0x284>)
  exSensorIndicator = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, 127);
    1d4e:	4da0      	ldr	r5, [pc, #640]	; (1fd0 <extraController()+0x288>)
  exSensor = exSensor * 0.6 + 0.4 * touchRead(extraPin); // get sensor data, do some smoothing - SENSOR PIN 16 - PCB PIN "EC" (marked K4 on some prototype boards)
    1d50:	6820      	ldr	r0, [r4, #0]
  exSensorIndicator = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, 127);
    1d52:	f8df 8280 	ldr.w	r8, [pc, #640]	; 1fd4 <extraController()+0x28c>
void extraController() {
    1d56:	b085      	sub	sp, #20
  exSensor = exSensor * 0.6 + 0.4 * touchRead(extraPin); // get sensor data, do some smoothing - SENSOR PIN 16 - PCB PIN "EC" (marked K4 on some prototype boards)
    1d58:	f00f fc6c 	bl	11634 <__aeabi_i2f>
    1d5c:	499e      	ldr	r1, [pc, #632]	; (1fd8 <extraController()+0x290>)
    1d5e:	f00f fcbd 	bl	116dc <__aeabi_fmul>
    1d62:	4606      	mov	r6, r0
    1d64:	2010      	movs	r0, #16
    1d66:	f00e f8cf 	bl	ff08 <touchRead>
    1d6a:	f00f fc63 	bl	11634 <__aeabi_i2f>
    1d6e:	499b      	ldr	r1, [pc, #620]	; (1fdc <extraController()+0x294>)
    1d70:	f00f fcb4 	bl	116dc <__aeabi_fmul>
    1d74:	4631      	mov	r1, r6
    1d76:	f00f fba9 	bl	114cc <__addsf3>
    1d7a:	f00f fe75 	bl	11a68 <__aeabi_f2iz>
  exSensorIndicator = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, 127);
    1d7e:	882b      	ldrh	r3, [r5, #0]
  exSensor = exSensor * 0.6 + 0.4 * touchRead(extraPin); // get sensor data, do some smoothing - SENSOR PIN 16 - PCB PIN "EC" (marked K4 on some prototype boards)
    1d80:	6020      	str	r0, [r4, #0]
    1d82:	4602      	mov	r2, r0
  exSensorIndicator = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, 127);
    1d84:	429a      	cmp	r2, r3
    1d86:	f8b8 1000 	ldrh.w	r1, [r8]
    1d8a:	4618      	mov	r0, r3
    1d8c:	f280 80d0 	bge.w	1f30 <extraController()+0x1e8>
	if (in_range == 0) return out_min + out_range / 2;
    1d90:	1acf      	subs	r7, r1, r3
    1d92:	461e      	mov	r6, r3
    1d94:	f000 80d3 	beq.w	1f3e <extraController()+0x1f6>
	long num = (x - in_min) * out_range;
    1d98:	1af6      	subs	r6, r6, r3
		num += in_range / 2;
    1d9a:	eb07 7cd7 	add.w	ip, r7, r7, lsr #31
	long num = (x - in_min) * out_range;
    1d9e:	ebc6 16c6 	rsb	r6, r6, r6, lsl #7
		num += in_range / 2;
    1da2:	eb06 066c 	add.w	r6, r6, ip, asr #1
		if (in_range * num < 0) return result - 1;
    1da6:	fb06 fc07 	mul.w	ip, r6, r7
    1daa:	f1bc 0f00 	cmp.w	ip, #0
	long result = num / in_range + out_min;
    1dae:	fb96 f6f7 	sdiv	r6, r6, r7
		if (in_range * num < 0) return result - 1;
    1db2:	f2c0 8167 	blt.w	2084 <extraController()+0x33c>
  if (pinkySetting == EC2){
    1db6:	4f8a      	ldr	r7, [pc, #552]	; (1fe0 <extraController()+0x298>)
  exSensorIndicator = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, 127);
    1db8:	f8df c228 	ldr.w	ip, [pc, #552]	; 1fe4 <extraController()+0x29c>
    1dbc:	f8cc 6000 	str.w	r6, [ip]
  if (pinkySetting == EC2){
    1dc0:	883e      	ldrh	r6, [r7, #0]
    1dc2:	2e19      	cmp	r6, #25
    1dc4:	f000 80ea 	beq.w	1f9c <extraController()+0x254>
  } else if (pinkySetting == ECSW){
    1dc8:	2e1a      	cmp	r6, #26
    1dca:	d02e      	beq.n	1e2a <extraController()+0xe2>
  } else if (pinkySetting == ECH){
    1dcc:	2e1e      	cmp	r6, #30
    1dce:	f000 81a4 	beq.w	211a <extraController()+0x3d2>
    CC1sw = true;
    1dd2:	2701      	movs	r7, #1
    1dd4:	4e84      	ldr	r6, [pc, #528]	; (1fe8 <extraController()+0x2a0>)
    CC2sw = true;
    1dd6:	46b9      	mov	r9, r7
  if ((harmSetting && (pinkySetting != ECH)) || ((pinkySetting == ECH) && pinkyKey)){
    1dd8:	f8df c210 	ldr.w	ip, [pc, #528]	; 1fec <extraController()+0x2a4>
    1ddc:	f8bc c000 	ldrh.w	ip, [ip]
    1de0:	f1bc 0f00 	cmp.w	ip, #0
    1de4:	d013      	beq.n	1e0e <extraController()+0xc6>
    if (harmSelect < 4){
    1de6:	f8df e208 	ldr.w	lr, [pc, #520]	; 1ff0 <extraController()+0x2a8>
    1dea:	f8be e000 	ldrh.w	lr, [lr]
    1dee:	f1be 0f03 	cmp.w	lr, #3
    1df2:	f200 813c 	bhi.w	206e <extraController()+0x326>
      harmonics = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, harmSetting);
    1df6:	429a      	cmp	r2, r3
    1df8:	f280 8146 	bge.w	2088 <extraController()+0x340>
    1dfc:	460a      	mov	r2, r1
    1dfe:	f8cd c000 	str.w	ip, [sp]
    1e02:	4619      	mov	r1, r3
    1e04:	2300      	movs	r3, #0
    1e06:	f7fe fc05 	bl	614 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
    1e0a:	4b7a      	ldr	r3, [pc, #488]	; (1ff4 <extraController()+0x2ac>)
    1e0c:	6018      	str	r0, [r3, #0]
  if ((extraCT || extraCT2) && (exSensor >= extracThrVal)) { // if we are enabled and over the threshold, send data
    1e0e:	4a7a      	ldr	r2, [pc, #488]	; (1ff8 <extraController()+0x2b0>)
    1e10:	8833      	ldrh	r3, [r6, #0]
    1e12:	8810      	ldrh	r0, [r2, #0]
    1e14:	ea50 0103 	orrs.w	r1, r0, r3
    1e18:	d114      	bne.n	1e44 <extraController()+0xfc>
  } else if (extracIsOn) { // we have just gone below threshold, so send zero value
    1e1a:	4b78      	ldr	r3, [pc, #480]	; (1ffc <extraController()+0x2b4>)
    1e1c:	781a      	ldrb	r2, [r3, #0]
    1e1e:	2a00      	cmp	r2, #0
    1e20:	f040 821d 	bne.w	225e <extraController()+0x516>
}
    1e24:	b005      	add	sp, #20
    1e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pinkyKey){
    1e2a:	4e75      	ldr	r6, [pc, #468]	; (2000 <extraController()+0x2b8>)
    1e2c:	7836      	ldrb	r6, [r6, #0]
      CC1sw = false;
    1e2e:	2e00      	cmp	r6, #0
    1e30:	bf08      	it	eq
    1e32:	2701      	moveq	r7, #1
    1e34:	4e6c      	ldr	r6, [pc, #432]	; (1fe8 <extraController()+0x2a0>)
    1e36:	bf16      	itet	ne
    1e38:	2700      	movne	r7, #0
    1e3a:	f04f 0900 	moveq.w	r9, #0
    1e3e:	f04f 0901 	movne.w	r9, #1
    1e42:	e7c9      	b.n	1dd8 <extraController()+0x90>
  if ((extraCT || extraCT2) && (exSensor >= extracThrVal)) { // if we are enabled and over the threshold, send data
    1e44:	8829      	ldrh	r1, [r5, #0]
    1e46:	f8d4 c000 	ldr.w	ip, [r4]
    1e4a:	4561      	cmp	r1, ip
    1e4c:	dc79      	bgt.n	1f42 <extraController()+0x1fa>
    if (!extracIsOn) {
    1e4e:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 1ffc <extraController()+0x2b4>
    1e52:	f89e a000 	ldrb.w	sl, [lr]
    1e56:	f1ba 0f00 	cmp.w	sl, #0
    1e5a:	d134      	bne.n	1ec6 <extraController()+0x17e>
      extracIsOn = 1;
    1e5c:	f04f 0a01 	mov.w	sl, #1
      if ((extraCT == 4) && CC1sw) { //Sustain ON
    1e60:	2804      	cmp	r0, #4
      extracIsOn = 1;
    1e62:	f88e a000 	strb.w	sl, [lr]
      if ((extraCT == 4) && CC1sw) { //Sustain ON
    1e66:	d12e      	bne.n	1ec6 <extraController()+0x17e>
    1e68:	2f00      	cmp	r7, #0
    1e6a:	f040 81c6 	bne.w	21fa <extraController()+0x4b2>
    if ((extraCT2 ) && CC2sw){ //Send extra controller CC2
    1e6e:	8833      	ldrh	r3, [r6, #0]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d0d7      	beq.n	1e24 <extraController()+0xdc>
    1e74:	f1b9 0f00 	cmp.w	r9, #0
    1e78:	d0d4      	beq.n	1e24 <extraController()+0xdc>
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    1e7a:	6822      	ldr	r2, [r4, #0]
    1e7c:	8828      	ldrh	r0, [r5, #0]
    1e7e:	f8b8 1000 	ldrh.w	r1, [r8]
    1e82:	4290      	cmp	r0, r2
    1e84:	f300 81ac 	bgt.w	21e0 <extraController()+0x498>
    1e88:	428a      	cmp	r2, r1
    1e8a:	bfa8      	it	ge
    1e8c:	460a      	movge	r2, r1
	if (in_range == 0) return out_min + out_range / 2;
    1e8e:	1a09      	subs	r1, r1, r0
    1e90:	f000 81c6 	beq.w	2220 <extraController()+0x4d8>
	long num = (x - in_min) * out_range;
    1e94:	1a12      	subs	r2, r2, r0
		num += in_range / 2;
    1e96:	eb01 74d1 	add.w	r4, r1, r1, lsr #31
	long num = (x - in_min) * out_range;
    1e9a:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
		num += in_range / 2;
    1e9e:	1064      	asrs	r4, r4, #1
    1ea0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
		if (in_range * num < 0) return result - 1;
    1ea4:	fb04 f201 	mul.w	r2, r4, r1
    1ea8:	2a00      	cmp	r2, #0
	long result = num / in_range + out_min;
    1eaa:	fb94 f4f1 	sdiv	r4, r4, r1
		if (in_range * num < 0) return result - 1;
    1eae:	db00      	blt.n	1eb2 <extraController()+0x16a>
	long result = num / in_range + out_min;
    1eb0:	3401      	adds	r4, #1
      if (extracCC != oldextrac2) {
    1eb2:	4d54      	ldr	r5, [pc, #336]	; (2004 <extraController()+0x2bc>)
    1eb4:	682a      	ldr	r2, [r5, #0]
    1eb6:	42a2      	cmp	r2, r4
    1eb8:	d003      	beq.n	1ec2 <extraController()+0x17a>
        midiSendControlChange(extraCT2, extracCC);
    1eba:	b2e1      	uxtb	r1, r4
    1ebc:	b2d8      	uxtb	r0, r3
    1ebe:	f006 ff97 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
      oldextrac2 = extracCC;
    1ec2:	602c      	str	r4, [r5, #0]
    1ec4:	e7ae      	b.n	1e24 <extraController()+0xdc>
    if ((extraCT == 1) && CC1sw) { //Send modulation
    1ec6:	2801      	cmp	r0, #1
    1ec8:	f000 8141 	beq.w	214e <extraController()+0x406>
    if ((extraCT == 2) && CC1sw) { //Send foot pedal (CC#4)
    1ecc:	2802      	cmp	r0, #2
    1ece:	f000 80f4 	beq.w	20ba <extraController()+0x372>
    if ((extraCT == 3) && (breathCC != 9) && CC1sw) { //Send filter cutoff (CC#74)
    1ed2:	2803      	cmp	r0, #3
    1ed4:	d1cb      	bne.n	1e6e <extraController()+0x126>
    1ed6:	4b4c      	ldr	r3, [pc, #304]	; (2008 <extraController()+0x2c0>)
    1ed8:	881b      	ldrh	r3, [r3, #0]
    1eda:	2b09      	cmp	r3, #9
    1edc:	d0c7      	beq.n	1e6e <extraController()+0x126>
    1ede:	2f00      	cmp	r7, #0
    1ee0:	d0c5      	beq.n	1e6e <extraController()+0x126>
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    1ee2:	6823      	ldr	r3, [r4, #0]
    1ee4:	8829      	ldrh	r1, [r5, #0]
    1ee6:	f8b8 2000 	ldrh.w	r2, [r8]
    1eea:	4299      	cmp	r1, r3
    1eec:	f340 81a8 	ble.w	2240 <extraController()+0x4f8>
    1ef0:	460b      	mov	r3, r1
	if (in_range == 0) return out_min + out_range / 2;
    1ef2:	1a52      	subs	r2, r2, r1
    1ef4:	f000 81a8 	beq.w	2248 <extraController()+0x500>
	long num = (x - in_min) * out_range;
    1ef8:	1a5b      	subs	r3, r3, r1
		num += in_range / 2;
    1efa:	eb02 77d2 	add.w	r7, r2, r2, lsr #31
	long num = (x - in_min) * out_range;
    1efe:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
		num += in_range / 2;
    1f02:	107f      	asrs	r7, r7, #1
    1f04:	eb07 0743 	add.w	r7, r7, r3, lsl #1
		if (in_range * num < 0) return result - 1;
    1f08:	fb07 f302 	mul.w	r3, r7, r2
    1f0c:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    1f0e:	fb97 f7f2 	sdiv	r7, r7, r2
		if (in_range * num < 0) return result - 1;
    1f12:	db00      	blt.n	1f16 <extraController()+0x1ce>
	long result = num / in_range + out_min;
    1f14:	3701      	adds	r7, #1
      if (extracCC != oldextrac) {
    1f16:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 200c <extraController()+0x2c4>
    1f1a:	f8db 3000 	ldr.w	r3, [fp]
    1f1e:	42bb      	cmp	r3, r7
    1f20:	d003      	beq.n	1f2a <extraController()+0x1e2>
        midiSendControlChange(74, extracCC);
    1f22:	b2f9      	uxtb	r1, r7
    1f24:	204a      	movs	r0, #74	; 0x4a
    1f26:	f006 ff63 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
      oldextrac = extracCC;
    1f2a:	f8cb 7000 	str.w	r7, [fp]
    1f2e:	e79e      	b.n	1e6e <extraController()+0x126>
  exSensorIndicator = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, 127);
    1f30:	428a      	cmp	r2, r1
    1f32:	4616      	mov	r6, r2
    1f34:	bfa8      	it	ge
    1f36:	460e      	movge	r6, r1
	if (in_range == 0) return out_min + out_range / 2;
    1f38:	1acf      	subs	r7, r1, r3
    1f3a:	f47f af2d 	bne.w	1d98 <extraController()+0x50>
    1f3e:	263f      	movs	r6, #63	; 0x3f
    1f40:	e739      	b.n	1db6 <extraController()+0x6e>
  } else if (extracIsOn) { // we have just gone below threshold, so send zero value
    1f42:	4a2e      	ldr	r2, [pc, #184]	; (1ffc <extraController()+0x2b4>)
    1f44:	7811      	ldrb	r1, [r2, #0]
    1f46:	2900      	cmp	r1, #0
    1f48:	f43f af6c 	beq.w	1e24 <extraController()+0xdc>
    extracIsOn = 0;
    1f4c:	2400      	movs	r4, #0
    if ((extraCT == 1) && CC1sw) { //MW
    1f4e:	2801      	cmp	r0, #1
    extracIsOn = 0;
    1f50:	7014      	strb	r4, [r2, #0]
    if ((extraCT == 1) && CC1sw) { //MW
    1f52:	f000 80ee 	beq.w	2132 <extraController()+0x3ea>
    } else if ((extraCT == 2) && CC1sw) { //FP
    1f56:	2802      	cmp	r0, #2
    1f58:	f000 80a0 	beq.w	209c <extraController()+0x354>
    } else if ((extraCT == 3) && (breathCC != 9) && CC1sw) { //CF
    1f5c:	2803      	cmp	r0, #3
    1f5e:	f040 8133 	bne.w	21c8 <extraController()+0x480>
    1f62:	4a29      	ldr	r2, [pc, #164]	; (2008 <extraController()+0x2c0>)
    1f64:	8812      	ldrh	r2, [r2, #0]
    1f66:	2a09      	cmp	r2, #9
    1f68:	d009      	beq.n	1f7e <extraController()+0x236>
    1f6a:	b147      	cbz	r7, 1f7e <extraController()+0x236>
      if (oldextrac != 0) {
    1f6c:	4d27      	ldr	r5, [pc, #156]	; (200c <extraController()+0x2c4>)
    1f6e:	682a      	ldr	r2, [r5, #0]
    1f70:	b12a      	cbz	r2, 1f7e <extraController()+0x236>
        midiSendControlChange(74, 0);
    1f72:	4621      	mov	r1, r4
    1f74:	204a      	movs	r0, #74	; 0x4a
    1f76:	f006 ff3b 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    if ((extraCT2 ) && CC2sw){ //CC2
    1f7a:	8833      	ldrh	r3, [r6, #0]
        oldextrac = 0;
    1f7c:	602c      	str	r4, [r5, #0]
    if ((extraCT2 ) && CC2sw){ //CC2
    1f7e:	2b00      	cmp	r3, #0
    1f80:	f43f af50 	beq.w	1e24 <extraController()+0xdc>
    1f84:	f1b9 0f00 	cmp.w	r9, #0
    1f88:	f43f af4c 	beq.w	1e24 <extraController()+0xdc>
      midiSendControlChange(extraCT2, 0);
    1f8c:	b2d8      	uxtb	r0, r3
    1f8e:	2100      	movs	r1, #0
    1f90:	f006 ff2e 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
      oldextrac2 = 0;
    1f94:	4b1b      	ldr	r3, [pc, #108]	; (2004 <extraController()+0x2bc>)
    1f96:	2200      	movs	r2, #0
    1f98:	601a      	str	r2, [r3, #0]
}
    1f9a:	e743      	b.n	1e24 <extraController()+0xdc>
    if (pinkyKey && extraCT2) {
    1f9c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2000 <extraController()+0x2b8>
    1fa0:	4e11      	ldr	r6, [pc, #68]	; (1fe8 <extraController()+0x2a0>)
    1fa2:	f899 c000 	ldrb.w	ip, [r9]
    1fa6:	f1bc 0f00 	cmp.w	ip, #0
    1faa:	d033      	beq.n	2014 <extraController()+0x2cc>
    1fac:	f8b6 e000 	ldrh.w	lr, [r6]
    1fb0:	f1be 0f00 	cmp.w	lr, #0
    1fb4:	d02e      	beq.n	2014 <extraController()+0x2cc>
      if (lastPinkyKey != pinkyKey){
    1fb6:	f8df a058 	ldr.w	sl, [pc, #88]	; 2010 <extraController()+0x2c8>
    1fba:	f89a b000 	ldrb.w	fp, [sl]
    1fbe:	45e3      	cmp	fp, ip
    1fc0:	f040 8110 	bne.w	21e4 <extraController()+0x49c>
    CC1sw = true;
    1fc4:	2701      	movs	r7, #1
  bool CC2sw = false;
    1fc6:	f04f 0900 	mov.w	r9, #0
    1fca:	e705      	b.n	1dd8 <extraController()+0x90>
    1fcc:	1fff9a8c 	.word	0x1fff9a8c
    1fd0:	1fff9a9c 	.word	0x1fff9a9c
    1fd4:	1fff9a9a 	.word	0x1fff9a9a
    1fd8:	3f19999a 	.word	0x3f19999a
    1fdc:	3ecccccd 	.word	0x3ecccccd
    1fe0:	1fff9b74 	.word	0x1fff9b74
    1fe4:	1fff9a90 	.word	0x1fff9a90
    1fe8:	1fff9a96 	.word	0x1fff9a96
    1fec:	1fff9ae4 	.word	0x1fff9ae4
    1ff0:	1fff9ae2 	.word	0x1fff9ae2
    1ff4:	1fff9ae8 	.word	0x1fff9ae8
    1ff8:	1fff9a94 	.word	0x1fff9a94
    1ffc:	1fff9a98 	.word	0x1fff9a98
    2000:	1fff9b72 	.word	0x1fff9b72
    2004:	1fff9b50 	.word	0x1fff9b50
    2008:	1fff9a1e 	.word	0x1fff9a1e
    200c:	1fff9b4c 	.word	0x1fff9b4c
    2010:	1fff9b09 	.word	0x1fff9b09
      if (lastPinkyKey != pinkyKey){
    2014:	f8df a24c 	ldr.w	sl, [pc, #588]	; 2264 <extraController()+0x51c>
    2018:	f89a e000 	ldrb.w	lr, [sl]
    201c:	45e6      	cmp	lr, ip
    201e:	d0d1      	beq.n	1fc4 <extraController()+0x27c>
        midiSendControlChange(extraCT2, 0);
    2020:	7830      	ldrb	r0, [r6, #0]
    2022:	2100      	movs	r1, #0
    2024:	f006 fee4 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
        lastPinkyKey = pinkyKey;
    2028:	f899 3000 	ldrb.w	r3, [r9]
  if ((harmSetting && (pinkySetting != ECH)) || ((pinkySetting == ECH) && pinkyKey)){
    202c:	883a      	ldrh	r2, [r7, #0]
        lastPinkyKey = pinkyKey;
    202e:	f88a 3000 	strb.w	r3, [sl]
  if ((harmSetting && (pinkySetting != ECH)) || ((pinkySetting == ECH) && pinkyKey)){
    2032:	4b8d      	ldr	r3, [pc, #564]	; (2268 <extraController()+0x520>)
    2034:	f8b3 c000 	ldrh.w	ip, [r3]
    2038:	f1bc 0f00 	cmp.w	ip, #0
    203c:	f000 80be 	beq.w	21bc <extraController()+0x474>
    2040:	2a1e      	cmp	r2, #30
    2042:	f040 8103 	bne.w	224c <extraController()+0x504>
    2046:	2701      	movs	r7, #1
    2048:	f899 3000 	ldrb.w	r3, [r9]
    204c:	2b00      	cmp	r3, #0
    204e:	d060      	beq.n	2112 <extraController()+0x3ca>
    if (harmSelect < 4){
    2050:	f8df e218 	ldr.w	lr, [pc, #536]	; 226c <extraController()+0x524>
      harmonics = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, harmSetting);
    2054:	882b      	ldrh	r3, [r5, #0]
    if (harmSelect < 4){
    2056:	f8be e000 	ldrh.w	lr, [lr]
      harmonics = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, harmSetting);
    205a:	6822      	ldr	r2, [r4, #0]
    205c:	f8b8 1000 	ldrh.w	r1, [r8]
    if (harmSelect < 4){
    2060:	f1be 0f03 	cmp.w	lr, #3
      harmonics = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, harmSetting);
    2064:	4618      	mov	r0, r3
    2066:	f04f 0900 	mov.w	r9, #0
    if (harmSelect < 4){
    206a:	f67f aec4 	bls.w	1df6 <extraController()+0xae>
      harmonics = map(constrain(exSensor, extracThrVal, extracMaxVal), extracMaxVal, extracThrVal, 0, harmSetting);
    206e:	429a      	cmp	r2, r3
    2070:	da0f      	bge.n	2092 <extraController()+0x34a>
    2072:	461a      	mov	r2, r3
    2074:	f8cd c000 	str.w	ip, [sp]
    2078:	2300      	movs	r3, #0
    207a:	f7fe facb 	bl	614 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
    207e:	4b7c      	ldr	r3, [pc, #496]	; (2270 <extraController()+0x528>)
    2080:	6018      	str	r0, [r3, #0]
    2082:	e6c4      	b.n	1e0e <extraController()+0xc6>
		if (in_range * num < 0) return result - 1;
    2084:	3e01      	subs	r6, #1
    2086:	e696      	b.n	1db6 <extraController()+0x6e>
      harmonics = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, harmSetting);
    2088:	428a      	cmp	r2, r1
    208a:	bfa8      	it	ge
    208c:	460a      	movge	r2, r1
    208e:	4610      	mov	r0, r2
    2090:	e6b4      	b.n	1dfc <extraController()+0xb4>
      harmonics = map(constrain(exSensor, extracThrVal, extracMaxVal), extracMaxVal, extracThrVal, 0, harmSetting);
    2092:	428a      	cmp	r2, r1
    2094:	bfa8      	it	ge
    2096:	460a      	movge	r2, r1
    2098:	4610      	mov	r0, r2
    209a:	e7ea      	b.n	2072 <extraController()+0x32a>
    } else if ((extraCT == 2) && CC1sw) { //FP
    209c:	2f00      	cmp	r7, #0
    209e:	f43f af6e 	beq.w	1f7e <extraController()+0x236>
      if (oldextrac != 0) {
    20a2:	4d74      	ldr	r5, [pc, #464]	; (2274 <extraController()+0x52c>)
    20a4:	682a      	ldr	r2, [r5, #0]
    20a6:	2a00      	cmp	r2, #0
    20a8:	f43f af69 	beq.w	1f7e <extraController()+0x236>
        midiSendControlChange(4, 0);
    20ac:	4621      	mov	r1, r4
    20ae:	2004      	movs	r0, #4
    20b0:	f006 fe9e 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    if ((extraCT2 ) && CC2sw){ //CC2
    20b4:	8833      	ldrh	r3, [r6, #0]
        oldextrac = 0;
    20b6:	602c      	str	r4, [r5, #0]
    20b8:	e761      	b.n	1f7e <extraController()+0x236>
    if ((extraCT == 2) && CC1sw) { //Send foot pedal (CC#4)
    20ba:	2f00      	cmp	r7, #0
    20bc:	f43f aed8 	beq.w	1e70 <extraController()+0x128>
      if (oldextrac != 0) {
    20c0:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 2274 <extraController()+0x52c>
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    20c4:	f8b8 0000 	ldrh.w	r0, [r8]
      if (oldextrac != 0) {
    20c8:	f8db a000 	ldr.w	sl, [fp]
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    20cc:	4584      	cmp	ip, r0
    20ce:	4663      	mov	r3, ip
    20d0:	bfa8      	it	ge
    20d2:	4603      	movge	r3, r0
	if (in_range == 0) return out_min + out_range / 2;
    20d4:	1a40      	subs	r0, r0, r1
    20d6:	f000 80ae 	beq.w	2236 <extraController()+0x4ee>
	long num = (x - in_min) * out_range;
    20da:	1a5b      	subs	r3, r3, r1
		num += in_range / 2;
    20dc:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
    20e0:	1049      	asrs	r1, r1, #1
	long num = (x - in_min) * out_range;
    20e2:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
		num += in_range / 2;
    20e6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		if (in_range * num < 0) return result - 1;
    20ea:	fb03 f100 	mul.w	r1, r3, r0
    20ee:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    20f0:	fb93 f3f0 	sdiv	r3, r3, r0
		if (in_range * num < 0) return result - 1;
    20f4:	db00      	blt.n	20f8 <extraController()+0x3b0>
	long result = num / in_range + out_min;
    20f6:	3301      	adds	r3, #1
      if (extracCC != oldextrac) {
    20f8:	4553      	cmp	r3, sl
    20fa:	d006      	beq.n	210a <extraController()+0x3c2>
        midiSendControlChange(4, extracCC);
    20fc:	b2d9      	uxtb	r1, r3
    20fe:	2004      	movs	r0, #4
    2100:	9303      	str	r3, [sp, #12]
    2102:	f006 fe75 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    2106:	4a5c      	ldr	r2, [pc, #368]	; (2278 <extraController()+0x530>)
    2108:	9b03      	ldr	r3, [sp, #12]
    if ((extraCT == 3) && (breathCC != 9) && CC1sw) { //Send filter cutoff (CC#74)
    210a:	8810      	ldrh	r0, [r2, #0]
      oldextrac = extracCC;
    210c:	f8cb 3000 	str.w	r3, [fp]
    2110:	e6df      	b.n	1ed2 <extraController()+0x18a>
    harmonics = 0;
    2112:	4a57      	ldr	r2, [pc, #348]	; (2270 <extraController()+0x528>)
    2114:	4699      	mov	r9, r3
    2116:	6013      	str	r3, [r2, #0]
    2118:	e679      	b.n	1e0e <extraController()+0xc6>
    if (pinkyKey){
    211a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 227c <extraController()+0x534>
  if ((harmSetting && (pinkySetting != ECH)) || ((pinkySetting == ECH) && pinkyKey)){
    211e:	4b52      	ldr	r3, [pc, #328]	; (2268 <extraController()+0x520>)
    if (pinkyKey){
    2120:	f899 7000 	ldrb.w	r7, [r9]
  if ((harmSetting && (pinkySetting != ECH)) || ((pinkySetting == ECH) && pinkyKey)){
    2124:	f8b3 c000 	ldrh.w	ip, [r3]
    2128:	4e55      	ldr	r6, [pc, #340]	; (2280 <extraController()+0x538>)
    if (pinkyKey){
    212a:	fab7 f787 	clz	r7, r7
    212e:	097f      	lsrs	r7, r7, #5
  if ((harmSetting && (pinkySetting != ECH)) || ((pinkySetting == ECH) && pinkyKey)){
    2130:	e78a      	b.n	2048 <extraController()+0x300>
    if ((extraCT == 1) && CC1sw) { //MW
    2132:	2f00      	cmp	r7, #0
    2134:	f43f af23 	beq.w	1f7e <extraController()+0x236>
      if (oldextrac != 0) {
    2138:	4d4e      	ldr	r5, [pc, #312]	; (2274 <extraController()+0x52c>)
    213a:	682a      	ldr	r2, [r5, #0]
    213c:	2a00      	cmp	r2, #0
    213e:	f43f af1e 	beq.w	1f7e <extraController()+0x236>
        midiSendControlChange(1, 0);
    2142:	4621      	mov	r1, r4
    2144:	f006 fe54 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    if ((extraCT2 ) && CC2sw){ //CC2
    2148:	8833      	ldrh	r3, [r6, #0]
        oldextrac = 0;
    214a:	602c      	str	r4, [r5, #0]
    214c:	e717      	b.n	1f7e <extraController()+0x236>
    if ((extraCT == 1) && CC1sw) { //Send modulation
    214e:	2f00      	cmp	r7, #0
    2150:	f43f ae8d 	beq.w	1e6e <extraController()+0x126>
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    2154:	f8b8 3000 	ldrh.w	r3, [r8]
    2158:	459c      	cmp	ip, r3
    215a:	4660      	mov	r0, ip
    215c:	bfa8      	it	ge
    215e:	4618      	movge	r0, r3
	if (in_range == 0) return out_min + out_range / 2;
    2160:	1a5b      	subs	r3, r3, r1
    2162:	d06a      	beq.n	223a <extraController()+0x4f2>
	long num = (x - in_min) * out_range;
    2164:	1a40      	subs	r0, r0, r1
		num += in_range / 2;
    2166:	eb03 7ad3 	add.w	sl, r3, r3, lsr #31
	long num = (x - in_min) * out_range;
    216a:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
		num += in_range / 2;
    216e:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    2172:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
		if (in_range * num < 0) return result - 1;
    2176:	fb0a f103 	mul.w	r1, sl, r3
    217a:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    217c:	fb9a faf3 	sdiv	sl, sl, r3
		if (in_range * num < 0) return result - 1;
    2180:	db01      	blt.n	2186 <extraController()+0x43e>
	long result = num / in_range + out_min;
    2182:	f10a 0a01 	add.w	sl, sl, #1
      if (extracCC != oldextrac) {
    2186:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 2274 <extraController()+0x52c>
    218a:	f8db 3000 	ldr.w	r3, [fp]
    218e:	4553      	cmp	r3, sl
    2190:	d005      	beq.n	219e <extraController()+0x456>
        midiSendControlChange(1, extracCC);
    2192:	fa5f f18a 	uxtb.w	r1, sl
    2196:	2001      	movs	r0, #1
    2198:	f006 fe2a 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    219c:	4a36      	ldr	r2, [pc, #216]	; (2278 <extraController()+0x530>)
    if ((extraCT == 2) && CC1sw) { //Send foot pedal (CC#4)
    219e:	8810      	ldrh	r0, [r2, #0]
      oldextrac = extracCC;
    21a0:	f8cb a000 	str.w	sl, [fp]
    if ((extraCT == 2) && CC1sw) { //Send foot pedal (CC#4)
    21a4:	2802      	cmp	r0, #2
    21a6:	f47f ae94 	bne.w	1ed2 <extraController()+0x18a>
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    21aa:	882b      	ldrh	r3, [r5, #0]
    21ac:	f8d4 c000 	ldr.w	ip, [r4]
    21b0:	f8b8 0000 	ldrh.w	r0, [r8]
    21b4:	4563      	cmp	r3, ip
    21b6:	4619      	mov	r1, r3
    21b8:	dc8c      	bgt.n	20d4 <extraController()+0x38c>
    21ba:	e787      	b.n	20cc <extraController()+0x384>
  if ((harmSetting && (pinkySetting != ECH)) || ((pinkySetting == ECH) && pinkyKey)){
    21bc:	2a1e      	cmp	r2, #30
    21be:	f43f af42 	beq.w	2046 <extraController()+0x2fe>
    21c2:	46e1      	mov	r9, ip
    21c4:	2701      	movs	r7, #1
    21c6:	e622      	b.n	1e0e <extraController()+0xc6>
    } else if ((extraCT == 4) && CC1sw) { //SP
    21c8:	2804      	cmp	r0, #4
    21ca:	f47f aed8 	bne.w	1f7e <extraController()+0x236>
    21ce:	2f00      	cmp	r7, #0
    21d0:	f43f aed5 	beq.w	1f7e <extraController()+0x236>
      midiSendControlChange(64, 0);
    21d4:	4621      	mov	r1, r4
    21d6:	2040      	movs	r0, #64	; 0x40
    21d8:	f006 fe0a 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    if ((extraCT2 ) && CC2sw){ //CC2
    21dc:	8833      	ldrh	r3, [r6, #0]
    21de:	e6ce      	b.n	1f7e <extraController()+0x236>
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    21e0:	4602      	mov	r2, r0
    21e2:	e654      	b.n	1e8e <extraController()+0x146>
        midiSendControlChange(extraCT2, 127);
    21e4:	fa5f f08e 	uxtb.w	r0, lr
    21e8:	217f      	movs	r1, #127	; 0x7f
    21ea:	f006 fe01 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
        lastPinkyKey = pinkyKey;
    21ee:	f899 3000 	ldrb.w	r3, [r9]
  if ((harmSetting && (pinkySetting != ECH)) || ((pinkySetting == ECH) && pinkyKey)){
    21f2:	883a      	ldrh	r2, [r7, #0]
        lastPinkyKey = pinkyKey;
    21f4:	f88a 3000 	strb.w	r3, [sl]
    21f8:	e71b      	b.n	2032 <extraController()+0x2ea>
        midiSendControlChange(64, 127);
    21fa:	2040      	movs	r0, #64	; 0x40
    21fc:	217f      	movs	r1, #127	; 0x7f
    21fe:	f006 fdf7 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    if ((extraCT == 1) && CC1sw) { //Send modulation
    2202:	4a1d      	ldr	r2, [pc, #116]	; (2278 <extraController()+0x530>)
    2204:	8810      	ldrh	r0, [r2, #0]
    2206:	4550      	cmp	r0, sl
    2208:	d00c      	beq.n	2224 <extraController()+0x4dc>
    if ((extraCT == 2) && CC1sw) { //Send foot pedal (CC#4)
    220a:	2802      	cmp	r0, #2
    220c:	f47f ae61 	bne.w	1ed2 <extraController()+0x18a>
      if (extracCC != oldextrac) {
    2210:	f8df b060 	ldr.w	fp, [pc, #96]	; 2274 <extraController()+0x52c>
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    2214:	882b      	ldrh	r3, [r5, #0]
      if (extracCC != oldextrac) {
    2216:	f8db a000 	ldr.w	sl, [fp]
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    221a:	f8d4 c000 	ldr.w	ip, [r4]
    221e:	e7c7      	b.n	21b0 <extraController()+0x468>
	if (in_range == 0) return out_min + out_range / 2;
    2220:	2440      	movs	r4, #64	; 0x40
    2222:	e646      	b.n	1eb2 <extraController()+0x16a>
    2224:	8828      	ldrh	r0, [r5, #0]
    2226:	f8d4 c000 	ldr.w	ip, [r4]
    222a:	f8b8 3000 	ldrh.w	r3, [r8]
    222e:	4560      	cmp	r0, ip
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    2230:	4601      	mov	r1, r0
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    2232:	dc95      	bgt.n	2160 <extraController()+0x418>
    2234:	e790      	b.n	2158 <extraController()+0x410>
    2236:	2340      	movs	r3, #64	; 0x40
    2238:	e75e      	b.n	20f8 <extraController()+0x3b0>
    223a:	f04f 0a40 	mov.w	sl, #64	; 0x40
    223e:	e7a2      	b.n	2186 <extraController()+0x43e>
      extracCC = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 1, 127);
    2240:	4293      	cmp	r3, r2
    2242:	bfa8      	it	ge
    2244:	4613      	movge	r3, r2
    2246:	e654      	b.n	1ef2 <extraController()+0x1aa>
    2248:	2740      	movs	r7, #64	; 0x40
    224a:	e664      	b.n	1f16 <extraController()+0x1ce>
      harmonics = map(constrain(exSensor, extracThrVal, extracMaxVal), extracThrVal, extracMaxVal, 0, harmSetting);
    224c:	882b      	ldrh	r3, [r5, #0]
    224e:	6822      	ldr	r2, [r4, #0]
    2250:	f8b8 1000 	ldrh.w	r1, [r8]
    2254:	4618      	mov	r0, r3
    2256:	2701      	movs	r7, #1
    2258:	f04f 0900 	mov.w	r9, #0
    225c:	e5c3      	b.n	1de6 <extraController()+0x9e>
    extracIsOn = 0;
    225e:	7019      	strb	r1, [r3, #0]
    if ((extraCT2 ) && CC2sw){ //CC2
    2260:	e5e0      	b.n	1e24 <extraController()+0xdc>
    2262:	bf00      	nop
    2264:	1fff9b09 	.word	0x1fff9b09
    2268:	1fff9ae4 	.word	0x1fff9ae4
    226c:	1fff9ae2 	.word	0x1fff9ae2
    2270:	1fff9ae8 	.word	0x1fff9ae8
    2274:	1fff9b4c 	.word	0x1fff9b4c
    2278:	1fff9a94 	.word	0x1fff9a94
    227c:	1fff9b72 	.word	0x1fff9b72
    2280:	1fff9a96 	.word	0x1fff9a96

00002284 <portOn()>:
void portOn() {
    2284:	b508      	push	{r3, lr}
  if ((portamento == 2) || (portamento == 5)) { // if portamento midi switching is enabled
    2286:	4b11      	ldr	r3, [pc, #68]	; (22cc <portOn()+0x48>)
    2288:	881b      	ldrh	r3, [r3, #0]
    228a:	2b02      	cmp	r3, #2
    228c:	d009      	beq.n	22a2 <portOn()+0x1e>
    228e:	2b05      	cmp	r3, #5
    2290:	d007      	beq.n	22a2 <portOn()+0x1e>
  } else if (portamento == 3) { // if portamento midi switching is enabled - SE02 OFF/LIN
    2292:	2b03      	cmp	r3, #3
    2294:	d00d      	beq.n	22b2 <portOn()+0x2e>
  } else if (portamento == 4) { // if portamento midi switching is enabled - SE02 OFF/EXP
    2296:	2b04      	cmp	r3, #4
    2298:	d013      	beq.n	22c2 <portOn()+0x3e>
  portIsOn = 1;
    229a:	4b0d      	ldr	r3, [pc, #52]	; (22d0 <portOn()+0x4c>)
    229c:	2201      	movs	r2, #1
    229e:	701a      	strb	r2, [r3, #0]
}
    22a0:	bd08      	pop	{r3, pc}
    midiSendControlChange(CCN_PortOnOff, 127);
    22a2:	217f      	movs	r1, #127	; 0x7f
    22a4:	2041      	movs	r0, #65	; 0x41
    22a6:	f006 fda3 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
  portIsOn = 1;
    22aa:	4b09      	ldr	r3, [pc, #36]	; (22d0 <portOn()+0x4c>)
    22ac:	2201      	movs	r2, #1
    22ae:	701a      	strb	r2, [r3, #0]
}
    22b0:	bd08      	pop	{r3, pc}
    midiSendControlChange(CCN_PortSE02, 64);
    22b2:	2140      	movs	r1, #64	; 0x40
    22b4:	2009      	movs	r0, #9
    22b6:	f006 fd9b 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
  portIsOn = 1;
    22ba:	4b05      	ldr	r3, [pc, #20]	; (22d0 <portOn()+0x4c>)
    22bc:	2201      	movs	r2, #1
    22be:	701a      	strb	r2, [r3, #0]
}
    22c0:	bd08      	pop	{r3, pc}
    midiSendControlChange(CCN_PortSE02, 127);
    22c2:	217f      	movs	r1, #127	; 0x7f
    22c4:	2009      	movs	r0, #9
    22c6:	f006 fd93 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    22ca:	e7e6      	b.n	229a <portOn()+0x16>
    22cc:	1fff9b8a 	.word	0x1fff9b8a
    22d0:	1fff9b82 	.word	0x1fff9b82

000022d4 <portOff()>:
void portOff() {
    22d4:	b538      	push	{r3, r4, r5, lr}
  if ((portamento != 5) && (oldport != 0)) { //did a zero get sent? if not, then send one (unless portamento is switch only)
    22d6:	4d13      	ldr	r5, [pc, #76]	; (2324 <portOff()+0x50>)
    22d8:	4c13      	ldr	r4, [pc, #76]	; (2328 <portOff()+0x54>)
    22da:	882b      	ldrh	r3, [r5, #0]
    22dc:	2b05      	cmp	r3, #5
    22de:	d018      	beq.n	2312 <portOff()+0x3e>
    22e0:	6822      	ldr	r2, [r4, #0]
    22e2:	b96a      	cbnz	r2, 2300 <portOff()+0x2c>
  if ((portamento == 2) || (portamento == 5)) { // if portamento midi switching is enabled
    22e4:	2b02      	cmp	r3, #2
    22e6:	d014      	beq.n	2312 <portOff()+0x3e>
  } else if (portamento == 3) { // if portamento midi switching is enabled - SE02 OFF/LIN
    22e8:	3b03      	subs	r3, #3
    22ea:	2b01      	cmp	r3, #1
    22ec:	d815      	bhi.n	231a <portOff()+0x46>
    midiSendControlChange(CCN_PortSE02, 0);
    22ee:	2100      	movs	r1, #0
    22f0:	2009      	movs	r0, #9
    22f2:	f006 fd7d 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
  portIsOn = 0;
    22f6:	4a0d      	ldr	r2, [pc, #52]	; (232c <portOff()+0x58>)
    22f8:	2300      	movs	r3, #0
    22fa:	7013      	strb	r3, [r2, #0]
  oldport = 0;
    22fc:	6023      	str	r3, [r4, #0]
}
    22fe:	bd38      	pop	{r3, r4, r5, pc}
    midiSendControlChange(CCN_Port, 0);
    2300:	2100      	movs	r1, #0
    2302:	2005      	movs	r0, #5
    2304:	f006 fd74 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
  if ((portamento == 2) || (portamento == 5)) { // if portamento midi switching is enabled
    2308:	882b      	ldrh	r3, [r5, #0]
    230a:	2b02      	cmp	r3, #2
    230c:	d001      	beq.n	2312 <portOff()+0x3e>
    230e:	2b05      	cmp	r3, #5
    2310:	d1ea      	bne.n	22e8 <portOff()+0x14>
    midiSendControlChange(CCN_PortOnOff, 0);
    2312:	2100      	movs	r1, #0
    2314:	2041      	movs	r0, #65	; 0x41
    2316:	f006 fd6b 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
  portIsOn = 0;
    231a:	4a04      	ldr	r2, [pc, #16]	; (232c <portOff()+0x58>)
    231c:	2300      	movs	r3, #0
    231e:	7013      	strb	r3, [r2, #0]
  oldport = 0;
    2320:	6023      	str	r3, [r4, #0]
}
    2322:	bd38      	pop	{r3, r4, r5, pc}
    2324:	1fff9b8a 	.word	0x1fff9b8a
    2328:	1fff9b58 	.word	0x1fff9b58
    232c:	1fff9b82 	.word	0x1fff9b82

00002330 <portamento_()>:
void portamento_() {
    2330:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pinkySetting == GLD){
    2332:	4b5a      	ldr	r3, [pc, #360]	; (249c <portamento_()+0x16c>)
    2334:	881b      	ldrh	r3, [r3, #0]
    2336:	2b1d      	cmp	r3, #29
void portamento_() {
    2338:	b083      	sub	sp, #12
  if (pinkySetting == GLD){
    233a:	d048      	beq.n	23ce <portamento_()+0x9e>
  if (2 == biteControl) {
    233c:	4b58      	ldr	r3, [pc, #352]	; (24a0 <portamento_()+0x170>)
    233e:	881b      	ldrh	r3, [r3, #0]
    2340:	2b02      	cmp	r3, #2
    2342:	d009      	beq.n	2358 <portamento_()+0x28>
  if (2 == leverControl) {
    2344:	4b57      	ldr	r3, [pc, #348]	; (24a4 <portamento_()+0x174>)
    2346:	881b      	ldrh	r3, [r3, #0]
    2348:	2b02      	cmp	r3, #2
    234a:	d073      	beq.n	2434 <portamento_()+0x104>
  }else if (portIsOn) {
    234c:	4b56      	ldr	r3, [pc, #344]	; (24a8 <portamento_()+0x178>)
    234e:	781b      	ldrb	r3, [r3, #0]
    2350:	2b00      	cmp	r3, #0
    2352:	d148      	bne.n	23e6 <portamento_()+0xb6>
}
    2354:	b003      	add	sp, #12
    2356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2358:	4d54      	ldr	r5, [pc, #336]	; (24ac <portamento_()+0x17c>)
    235a:	4e55      	ldr	r6, [pc, #340]	; (24b0 <portamento_()+0x180>)
  int portSumCC = 0;
    235c:	2400      	movs	r4, #0
    if (biteJumper) { //PBITE (if pulled low with jumper or if on a NuRAD, use pressure sensor instead of capacitive bite sensor)
    235e:	4b55      	ldr	r3, [pc, #340]	; (24b4 <portamento_()+0x184>)
    2360:	781b      	ldrb	r3, [r3, #0]
    2362:	2b00      	cmp	r3, #0
    2364:	d14a      	bne.n	23fc <portamento_()+0xcc>
      biteSensor = touchRead(bitePin);     // get sensor data, do some smoothing - SENSOR PIN 17 - PCB PINS LABELED "BITE" (GND left, sensor pin right)
    2366:	2011      	movs	r0, #17
    2368:	f00d fdce 	bl	ff08 <touchRead>
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
    236c:	4b52      	ldr	r3, [pc, #328]	; (24b8 <portamento_()+0x188>)
    236e:	6018      	str	r0, [r3, #0]
    if (portamento && (biteSensor >= portamThrVal)) { // if we are enabled and over the threshold, send portamento
    2370:	882b      	ldrh	r3, [r5, #0]
    2372:	2b00      	cmp	r3, #0
    2374:	d04a      	beq.n	240c <portamento_()+0xdc>
    2376:	4b51      	ldr	r3, [pc, #324]	; (24bc <portamento_()+0x18c>)
    2378:	8819      	ldrh	r1, [r3, #0]
    237a:	4281      	cmp	r1, r0
    237c:	dc46      	bgt.n	240c <portamento_()+0xdc>
      portSumCC += map(constrain(biteSensor, portamThrVal, portamMaxVal), portamThrVal, portamMaxVal, 0, portLimit);
    237e:	4b50      	ldr	r3, [pc, #320]	; (24c0 <portamento_()+0x190>)
    2380:	8837      	ldrh	r7, [r6, #0]
    2382:	881a      	ldrh	r2, [r3, #0]
    2384:	9700      	str	r7, [sp, #0]
    2386:	4290      	cmp	r0, r2
    2388:	bfa8      	it	ge
    238a:	4610      	movge	r0, r2
    238c:	2300      	movs	r3, #0
    238e:	f7fe f941 	bl	614 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
  if (2 == leverControl) {
    2392:	4b44      	ldr	r3, [pc, #272]	; (24a4 <portamento_()+0x174>)
    2394:	881b      	ldrh	r3, [r3, #0]
    2396:	2b02      	cmp	r3, #2
      portSumCC += map(constrain(biteSensor, portamThrVal, portamMaxVal), portamThrVal, portamMaxVal, 0, portLimit);
    2398:	4404      	add	r4, r0
  if (2 == leverControl) {
    239a:	d073      	beq.n	2484 <portamento_()+0x154>
  portSumCC = constrain(portSumCC, 0, portLimit); // Total output glide rate limited to glide max setting
    239c:	2c00      	cmp	r4, #0
    239e:	dbd5      	blt.n	234c <portamento_()+0x1c>
    23a0:	42bc      	cmp	r4, r7
    23a2:	bfa8      	it	ge
    23a4:	463c      	movge	r4, r7
  if (portSumCC) { // there is a portamento level, so go for it
    23a6:	2c00      	cmp	r4, #0
    23a8:	d0d0      	beq.n	234c <portamento_()+0x1c>
    if (!portIsOn) {
    23aa:	4b3f      	ldr	r3, [pc, #252]	; (24a8 <portamento_()+0x178>)
    23ac:	781b      	ldrb	r3, [r3, #0]
    23ae:	2b00      	cmp	r3, #0
    23b0:	d05f      	beq.n	2472 <portamento_()+0x142>
  if ((portamento != 5) && (portCC != oldport)) { // portamento setting 5 is switch only, do not transmit glide rate
    23b2:	882b      	ldrh	r3, [r5, #0]
    23b4:	4d43      	ldr	r5, [pc, #268]	; (24c4 <portamento_()+0x194>)
    23b6:	2b05      	cmp	r3, #5
    23b8:	d006      	beq.n	23c8 <portamento_()+0x98>
    23ba:	682b      	ldr	r3, [r5, #0]
    23bc:	429c      	cmp	r4, r3
    23be:	d003      	beq.n	23c8 <portamento_()+0x98>
    midiSendControlChange(CCN_Port, portCC);
    23c0:	b2e1      	uxtb	r1, r4
    23c2:	2005      	movs	r0, #5
    23c4:	f006 fd14 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
  oldport = portCC;
    23c8:	602c      	str	r4, [r5, #0]
}
    23ca:	b003      	add	sp, #12
    23cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (portamento && pinkyKey){
    23ce:	4d37      	ldr	r5, [pc, #220]	; (24ac <portamento_()+0x17c>)
    23d0:	882c      	ldrh	r4, [r5, #0]
    23d2:	b16c      	cbz	r4, 23f0 <portamento_()+0xc0>
    23d4:	4b3c      	ldr	r3, [pc, #240]	; (24c8 <portamento_()+0x198>)
    23d6:	781c      	ldrb	r4, [r3, #0]
  if (2 == biteControl) {
    23d8:	4b31      	ldr	r3, [pc, #196]	; (24a0 <portamento_()+0x170>)
    if (portamento && pinkyKey){
    23da:	2c00      	cmp	r4, #0
    23dc:	d14c      	bne.n	2478 <portamento_()+0x148>
  if (2 == biteControl) {
    23de:	881b      	ldrh	r3, [r3, #0]
    23e0:	2b02      	cmp	r3, #2
    23e2:	d1af      	bne.n	2344 <portamento_()+0x14>
    23e4:	e008      	b.n	23f8 <portamento_()+0xc8>
}
    23e6:	b003      	add	sp, #12
    23e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    portOff();
    23ec:	f7ff bf72 	b.w	22d4 <portOff()>
  if (2 == biteControl) {
    23f0:	4b2b      	ldr	r3, [pc, #172]	; (24a0 <portamento_()+0x170>)
    23f2:	881b      	ldrh	r3, [r3, #0]
    23f4:	2b02      	cmp	r3, #2
    23f6:	d1a5      	bne.n	2344 <portamento_()+0x14>
    23f8:	4e2d      	ldr	r6, [pc, #180]	; (24b0 <portamento_()+0x180>)
    23fa:	e7b0      	b.n	235e <portamento_()+0x2e>
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
    23fc:	2015      	movs	r0, #21
    23fe:	f00b ff35 	bl	e26c <analogRead>
    2402:	4b2d      	ldr	r3, [pc, #180]	; (24b8 <portamento_()+0x188>)
    2404:	6018      	str	r0, [r3, #0]
    if (portamento && (biteSensor >= portamThrVal)) { // if we are enabled and over the threshold, send portamento
    2406:	882b      	ldrh	r3, [r5, #0]
    2408:	2b00      	cmp	r3, #0
    240a:	d1b4      	bne.n	2376 <portamento_()+0x46>
  if (2 == leverControl) {
    240c:	4b25      	ldr	r3, [pc, #148]	; (24a4 <portamento_()+0x174>)
    240e:	881b      	ldrh	r3, [r3, #0]
    2410:	2b02      	cmp	r3, #2
    2412:	d141      	bne.n	2498 <portamento_()+0x168>
    leverPortRead = touchRead(vibratoPin);
    2414:	200f      	movs	r0, #15
    2416:	f00d fd77 	bl	ff08 <touchRead>
    241a:	4b2c      	ldr	r3, [pc, #176]	; (24cc <portamento_()+0x19c>)
    241c:	6018      	str	r0, [r3, #0]
    if (portamento && ((3000-leverPortRead) >= leverThrVal)) { // if we are enabled and over the threshold, send portamento
    241e:	882b      	ldrh	r3, [r5, #0]
    2420:	2b00      	cmp	r3, #0
    2422:	d039      	beq.n	2498 <portamento_()+0x168>
    2424:	4b2a      	ldr	r3, [pc, #168]	; (24d0 <portamento_()+0x1a0>)
    2426:	f5c0 603b 	rsb	r0, r0, #2992	; 0xbb0
    242a:	8819      	ldrh	r1, [r3, #0]
    242c:	3008      	adds	r0, #8
    242e:	4288      	cmp	r0, r1
    2430:	da13      	bge.n	245a <portamento_()+0x12a>
    2432:	e02f      	b.n	2494 <portamento_()+0x164>
    2434:	4d1d      	ldr	r5, [pc, #116]	; (24ac <portamento_()+0x17c>)
    leverPortRead = touchRead(vibratoPin);
    2436:	200f      	movs	r0, #15
    2438:	f00d fd66 	bl	ff08 <touchRead>
    243c:	4a23      	ldr	r2, [pc, #140]	; (24cc <portamento_()+0x19c>)
    if (portamento && ((3000-leverPortRead) >= leverThrVal)) { // if we are enabled and over the threshold, send portamento
    243e:	882b      	ldrh	r3, [r5, #0]
    leverPortRead = touchRead(vibratoPin);
    2440:	6010      	str	r0, [r2, #0]
    if (portamento && ((3000-leverPortRead) >= leverThrVal)) { // if we are enabled and over the threshold, send portamento
    2442:	2b00      	cmp	r3, #0
    2444:	d082      	beq.n	234c <portamento_()+0x1c>
    2446:	4b22      	ldr	r3, [pc, #136]	; (24d0 <portamento_()+0x1a0>)
    2448:	f5c0 603b 	rsb	r0, r0, #2992	; 0xbb0
    244c:	8819      	ldrh	r1, [r3, #0]
    244e:	3008      	adds	r0, #8
    2450:	4281      	cmp	r1, r0
    2452:	f73f af7b 	bgt.w	234c <portamento_()+0x1c>
    2456:	4e16      	ldr	r6, [pc, #88]	; (24b0 <portamento_()+0x180>)
    2458:	2400      	movs	r4, #0
      portSumCC += map(constrain((3000-leverPortRead), leverThrVal, leverMaxVal), leverThrVal, leverMaxVal, 0, portLimit);
    245a:	4b1e      	ldr	r3, [pc, #120]	; (24d4 <portamento_()+0x1a4>)
    245c:	8837      	ldrh	r7, [r6, #0]
    245e:	9700      	str	r7, [sp, #0]
    2460:	881a      	ldrh	r2, [r3, #0]
    2462:	4290      	cmp	r0, r2
    2464:	bfa8      	it	ge
    2466:	4610      	movge	r0, r2
    2468:	2300      	movs	r3, #0
    246a:	f7fe f8d3 	bl	614 <long map<int, unsigned short, unsigned short, int, unsigned short>(int, unsigned short, unsigned short, int, unsigned short, std::enable_if<std::is_integral<int>::value, void>::type*) [clone .isra.0]>
    246e:	4404      	add	r4, r0
    2470:	e794      	b.n	239c <portamento_()+0x6c>
      portOn();
    2472:	f7ff ff07 	bl	2284 <portOn()>
    2476:	e79c      	b.n	23b2 <portamento_()+0x82>
  if (2 == biteControl) {
    2478:	881b      	ldrh	r3, [r3, #0]
      portSumCC += portLimit;
    247a:	4e0d      	ldr	r6, [pc, #52]	; (24b0 <portamento_()+0x180>)
  if (2 == biteControl) {
    247c:	2b02      	cmp	r3, #2
      portSumCC += portLimit;
    247e:	8834      	ldrh	r4, [r6, #0]
  if (2 == biteControl) {
    2480:	d1c4      	bne.n	240c <portamento_()+0xdc>
    2482:	e76c      	b.n	235e <portamento_()+0x2e>
    leverPortRead = touchRead(vibratoPin);
    2484:	200f      	movs	r0, #15
    2486:	f00d fd3f 	bl	ff08 <touchRead>
    248a:	4b10      	ldr	r3, [pc, #64]	; (24cc <portamento_()+0x19c>)
    248c:	6018      	str	r0, [r3, #0]
    if (portamento && ((3000-leverPortRead) >= leverThrVal)) { // if we are enabled and over the threshold, send portamento
    248e:	882b      	ldrh	r3, [r5, #0]
    2490:	2b00      	cmp	r3, #0
    2492:	d1c7      	bne.n	2424 <portamento_()+0xf4>
      portSumCC += map(constrain((3000-leverPortRead), leverThrVal, leverMaxVal), leverThrVal, leverMaxVal, 0, portLimit);
    2494:	8837      	ldrh	r7, [r6, #0]
    2496:	e781      	b.n	239c <portamento_()+0x6c>
  portSumCC = constrain(portSumCC, 0, portLimit); // Total output glide rate limited to glide max setting
    2498:	8837      	ldrh	r7, [r6, #0]
    249a:	e781      	b.n	23a0 <portamento_()+0x70>
    249c:	1fff9b74 	.word	0x1fff9b74
    24a0:	1fff9a0a 	.word	0x1fff9a0a
    24a4:	1fff9b18 	.word	0x1fff9b18
    24a8:	1fff9b82 	.word	0x1fff9b82
    24ac:	1fff9b8a 	.word	0x1fff9b8a
    24b0:	1fff9b84 	.word	0x1fff9b84
    24b4:	1fff9a0d 	.word	0x1fff9a0d
    24b8:	1fff9a10 	.word	0x1fff9a10
    24bc:	1fff9b88 	.word	0x1fff9b88
    24c0:	1fff9b86 	.word	0x1fff9b86
    24c4:	1fff9b58 	.word	0x1fff9b58
    24c8:	1fff9b72 	.word	0x1fff9b72
    24cc:	1fff9b20 	.word	0x1fff9b20
    24d0:	1fff9b28 	.word	0x1fff9b28
    24d4:	1fff9b1c 	.word	0x1fff9b1c

000024d8 <autoCal()>:

void autoCal() {
    24d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int calRead;
  int calReadNext;
// NuRAD/NuEVI sensor calibration
  // Extra Controller
  calRead = touchRead(extraPin);
    24dc:	2010      	movs	r0, #16
    24de:	f00d fd13 	bl	ff08 <touchRead>
  extracThrVal = constrain(calRead+200, extracLoLimit, extracHiLimit);
    24e2:	30c8      	adds	r0, #200	; 0xc8
    24e4:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
    24e8:	bfa8      	it	ge
    24ea:	f44f 607a 	movge.w	r0, #4000	; 0xfa0
    24ee:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    24f2:	bfb8      	it	lt
    24f4:	f44f 70fa 	movlt.w	r0, #500	; 0x1f4
  extracMaxVal = constrain(extracThrVal+600, extracLoLimit, extracHiLimit);
    24f8:	f500 7316 	add.w	r3, r0, #600	; 0x258
    24fc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
  extracThrVal = constrain(calRead+200, extracLoLimit, extracHiLimit);
    2500:	4a84      	ldr	r2, [pc, #528]	; (2714 <autoCal()+0x23c>)
  extracMaxVal = constrain(extracThrVal+600, extracLoLimit, extracHiLimit);
    2502:	4c85      	ldr	r4, [pc, #532]	; (2718 <autoCal()+0x240>)
    2504:	f8df 8214 	ldr.w	r8, [pc, #532]	; 271c <autoCal()+0x244>
  writeSetting(PORTAM_THR_ADDR, portamThrVal);
  writeSetting(PORTAM_MAX_ADDR, portamMaxVal);
  // Touch sensors
  calRead = ctouchHiLimit;
  for (byte i = 0; i < 6; i++) {
    calReadNext = touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300;
    2508:	4e85      	ldr	r6, [pc, #532]	; (2720 <autoCal()+0x248>)
    250a:	4d86      	ldr	r5, [pc, #536]	; (2724 <autoCal()+0x24c>)
  extracMaxVal = constrain(extracThrVal+600, extracLoLimit, extracHiLimit);
    250c:	bfa8      	it	ge
    250e:	f44f 637a 	movge.w	r3, #4000	; 0xfa0
  extracThrVal = constrain(calRead+200, extracLoLimit, extracHiLimit);
    2512:	b281      	uxth	r1, r0
  writeSetting(EXTRAC_THR_ADDR, extracThrVal);
    2514:	2022      	movs	r0, #34	; 0x22
  extracThrVal = constrain(calRead+200, extracLoLimit, extracHiLimit);
    2516:	8011      	strh	r1, [r2, #0]
  extracMaxVal = constrain(extracThrVal+600, extracLoLimit, extracHiLimit);
    2518:	8023      	strh	r3, [r4, #0]
  writeSetting(EXTRAC_THR_ADDR, extracThrVal);
    251a:	f006 fedd 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(EXTRAC_MAX_ADDR, extracMaxVal);
    251e:	8821      	ldrh	r1, [r4, #0]
  breathMaxVal = constrain(breathThrVal+1500, breathLoLimit, breathHiLimit);
    2520:	4c81      	ldr	r4, [pc, #516]	; (2728 <autoCal()+0x250>)
  writeSetting(EXTRAC_MAX_ADDR, extracMaxVal);
    2522:	2024      	movs	r0, #36	; 0x24
    2524:	f006 fed8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  calRead = analogRead(breathSensorPin);
    2528:	200e      	movs	r0, #14
    252a:	f00b fe9f 	bl	e26c <analogRead>
  breathThrVal = constrain(calRead+200, breathLoLimit, breathHiLimit);
    252e:	f640 72ff 	movw	r2, #4095	; 0xfff
    2532:	30c8      	adds	r0, #200	; 0xc8
    2534:	4290      	cmp	r0, r2
    2536:	bfa8      	it	ge
    2538:	4610      	movge	r0, r2
    253a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  breathMaxVal = constrain(breathThrVal+1500, breathLoLimit, breathHiLimit);
    253e:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
  breathThrVal = constrain(calRead+200, breathLoLimit, breathHiLimit);
    2542:	b281      	uxth	r1, r0
    2544:	4879      	ldr	r0, [pc, #484]	; (272c <autoCal()+0x254>)
  breathMaxVal = constrain(breathThrVal+1500, breathLoLimit, breathHiLimit);
    2546:	4293      	cmp	r3, r2
    2548:	bfa8      	it	ge
    254a:	4613      	movge	r3, r2
  breathThrVal = constrain(calRead+200, breathLoLimit, breathHiLimit);
    254c:	8001      	strh	r1, [r0, #0]
  writeSetting(BREATH_THR_ADDR, breathThrVal);
    254e:	2002      	movs	r0, #2
  breathMaxVal = constrain(breathThrVal+1500, breathLoLimit, breathHiLimit);
    2550:	8023      	strh	r3, [r4, #0]
  writeSetting(BREATH_THR_ADDR, breathThrVal);
    2552:	f006 fec1 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(BREATH_MAX_ADDR, breathMaxVal);
    2556:	8821      	ldrh	r1, [r4, #0]
    2558:	2004      	movs	r0, #4
    255a:	f006 febd 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  calRead = touchRead(pbUpPin);
    255e:	2001      	movs	r0, #1
    2560:	f00d fcd2 	bl	ff08 <touchRead>
    2564:	4604      	mov	r4, r0
  calReadNext = touchRead(pbDnPin);
    2566:	2000      	movs	r0, #0
    2568:	f00d fcce 	bl	ff08 <touchRead>
  pitchbThrVal = constrain(calRead+200, pitchbLoLimit, pitchbHiLimit);
    256c:	4284      	cmp	r4, r0
    256e:	bfb8      	it	lt
    2570:	4604      	movlt	r4, r0
    2572:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    2576:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
    257a:	bfa8      	it	ge
    257c:	f44f 607a 	movge.w	r0, #4000	; 0xfa0
    2580:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    2584:	bfb8      	it	lt
    2586:	f44f 70fa 	movlt.w	r0, #500	; 0x1f4
  pitchbMaxVal = constrain(pitchbThrVal+800, pitchbLoLimit, pitchbHiLimit);
    258a:	f500 7348 	add.w	r3, r0, #800	; 0x320
    258e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
  pitchbThrVal = constrain(calRead+200, pitchbLoLimit, pitchbHiLimit);
    2592:	4a67      	ldr	r2, [pc, #412]	; (2730 <autoCal()+0x258>)
  pitchbMaxVal = constrain(pitchbThrVal+800, pitchbLoLimit, pitchbHiLimit);
    2594:	4c67      	ldr	r4, [pc, #412]	; (2734 <autoCal()+0x25c>)
    2596:	bfa8      	it	ge
    2598:	f44f 637a 	movge.w	r3, #4000	; 0xfa0
  pitchbThrVal = constrain(calRead+200, pitchbLoLimit, pitchbHiLimit);
    259c:	b281      	uxth	r1, r0
  writeSetting(PITCHB_THR_ADDR, pitchbThrVal);
    259e:	200a      	movs	r0, #10
  pitchbThrVal = constrain(calRead+200, pitchbLoLimit, pitchbHiLimit);
    25a0:	8011      	strh	r1, [r2, #0]
  pitchbMaxVal = constrain(pitchbThrVal+800, pitchbLoLimit, pitchbHiLimit);
    25a2:	8023      	strh	r3, [r4, #0]
  writeSetting(PITCHB_THR_ADDR, pitchbThrVal);
    25a4:	f006 fe98 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(PITCHB_MAX_ADDR, pitchbMaxVal);
    25a8:	8821      	ldrh	r1, [r4, #0]
  leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    25aa:	4c63      	ldr	r4, [pc, #396]	; (2738 <autoCal()+0x260>)
  writeSetting(PITCHB_MAX_ADDR, pitchbMaxVal);
    25ac:	200c      	movs	r0, #12
    25ae:	f006 fe93 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  calRead = 3000-touchRead(vibratoPin);
    25b2:	200f      	movs	r0, #15
    25b4:	f00d fca8 	bl	ff08 <touchRead>
  leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    25b8:	f5c0 613f 	rsb	r1, r0, #3056	; 0xbf0
    25bc:	3104      	adds	r1, #4
    25be:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
    25c2:	bfa8      	it	ge
    25c4:	f44f 61fa 	movge.w	r1, #2000	; 0x7d0
  leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    25c8:	f5c0 6343 	rsb	r3, r0, #3120	; 0xc30
  leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    25cc:	f5b1 6faf 	cmp.w	r1, #1400	; 0x578
    25d0:	bfb8      	it	lt
    25d2:	f44f 61af 	movlt.w	r1, #1400	; 0x578
  leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    25d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    25da:	bfa8      	it	ge
    25dc:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
    25e0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
  leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    25e4:	4a55      	ldr	r2, [pc, #340]	; (273c <autoCal()+0x264>)
  leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    25e6:	bfb8      	it	lt
    25e8:	f44f 63af 	movlt.w	r3, #1400	; 0x578
  leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    25ec:	b289      	uxth	r1, r1
  writeSetting(LEVER_THR_ADDR, leverThrVal);
    25ee:	20a4      	movs	r0, #164	; 0xa4
  leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    25f0:	8011      	strh	r1, [r2, #0]
  leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    25f2:	8023      	strh	r3, [r4, #0]
  writeSetting(LEVER_THR_ADDR, leverThrVal);
    25f4:	f006 fe70 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(LEVER_MAX_ADDR, leverMaxVal);
    25f8:	8821      	ldrh	r1, [r4, #0]
  portamMaxVal = constrain(portamThrVal+600, portamLoLimit, portamHiLimit);
    25fa:	4c51      	ldr	r4, [pc, #324]	; (2740 <autoCal()+0x268>)
  writeSetting(LEVER_MAX_ADDR, leverMaxVal);
    25fc:	20a6      	movs	r0, #166	; 0xa6
    25fe:	f006 fe6b 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  calRead = analogRead(bitePressurePin);
    2602:	2015      	movs	r0, #21
    2604:	f00b fe32 	bl	e26c <analogRead>
  portamThrVal = constrain(calRead+300, portamLoLimit, portamHiLimit);
    2608:	f241 225c 	movw	r2, #4700	; 0x125c
    260c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    2610:	4290      	cmp	r0, r2
    2612:	bfa8      	it	ge
    2614:	4610      	movge	r0, r2
    2616:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
    261a:	bfb8      	it	lt
    261c:	f44f 702f 	movlt.w	r0, #700	; 0x2bc
  portamMaxVal = constrain(portamThrVal+600, portamLoLimit, portamHiLimit);
    2620:	f500 7316 	add.w	r3, r0, #600	; 0x258
  portamThrVal = constrain(calRead+300, portamLoLimit, portamHiLimit);
    2624:	b281      	uxth	r1, r0
    2626:	4847      	ldr	r0, [pc, #284]	; (2744 <autoCal()+0x26c>)
  portamMaxVal = constrain(portamThrVal+600, portamLoLimit, portamHiLimit);
    2628:	4293      	cmp	r3, r2
    262a:	bfa8      	it	ge
    262c:	4613      	movge	r3, r2
  portamThrVal = constrain(calRead+300, portamLoLimit, portamHiLimit);
    262e:	8001      	strh	r1, [r0, #0]
  writeSetting(PORTAM_THR_ADDR, portamThrVal);
    2630:	2006      	movs	r0, #6
  portamMaxVal = constrain(portamThrVal+600, portamLoLimit, portamHiLimit);
    2632:	8023      	strh	r3, [r4, #0]
  writeSetting(PORTAM_THR_ADDR, portamThrVal);
    2634:	f006 fe50 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(PORTAM_MAX_ADDR, portamMaxVal);
    2638:	8821      	ldrh	r1, [r4, #0]
    263a:	2008      	movs	r0, #8
    263c:	f006 fe4c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    2640:	2700      	movs	r7, #0
  calRead = ctouchHiLimit;
    2642:	f44f 74af 	mov.w	r4, #350	; 0x15e
    calReadNext = touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300;
    2646:	b2f9      	uxtb	r1, r7
    2648:	4630      	mov	r0, r6
    264a:	f008 ff85 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    264e:	f858 3b04 	ldr.w	r3, [r8], #4
    2652:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    2656:	fb03 f000 	mul.w	r0, r3, r0
    265a:	fb85 2300 	smull	r2, r3, r5, r0
    265e:	17c0      	asrs	r0, r0, #31
    2660:	ebc0 1063 	rsb	r0, r0, r3, asr #5
    2664:	4284      	cmp	r4, r0
  for (byte i = 0; i < 6; i++) {
    2666:	f107 0701 	add.w	r7, r7, #1
    266a:	bfa8      	it	ge
    266c:	4604      	movge	r4, r0
    266e:	2f06      	cmp	r7, #6
    2670:	d1e9      	bne.n	2646 <autoCal()+0x16e>
    2672:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 2748 <autoCal()+0x270>
    if (calReadNext < calRead) calRead = calReadNext; //use lowest value
  }
  for (byte i = 0; i < 12; i++) {
    calReadNext = touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300;
    2676:	4e35      	ldr	r6, [pc, #212]	; (274c <autoCal()+0x274>)
    2678:	4d2a      	ldr	r5, [pc, #168]	; (2724 <autoCal()+0x24c>)
  for (byte i = 0; i < 6; i++) {
    267a:	2700      	movs	r7, #0
    calReadNext = touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300;
    267c:	b2f9      	uxtb	r1, r7
    267e:	4630      	mov	r0, r6
    2680:	f008 ff6a 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    2684:	f858 3b04 	ldr.w	r3, [r8], #4
    2688:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    268c:	fb03 f000 	mul.w	r0, r3, r0
    2690:	fb85 2300 	smull	r2, r3, r5, r0
    2694:	17c0      	asrs	r0, r0, #31
    2696:	ebc0 1063 	rsb	r0, r0, r3, asr #5
    269a:	4284      	cmp	r4, r0
  for (byte i = 0; i < 12; i++) {
    269c:	f107 0701 	add.w	r7, r7, #1
    26a0:	bfa8      	it	ge
    26a2:	4604      	movge	r4, r0
    26a4:	2f0c      	cmp	r7, #12
    26a6:	d1e9      	bne.n	267c <autoCal()+0x1a4>
    26a8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2750 <autoCal()+0x278>
    if (calReadNext < calRead) calRead = calReadNext; //use lowest value
  }
  for (byte i = 0; i < 12; i++) {
    calReadNext = touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300;
    26ac:	4e29      	ldr	r6, [pc, #164]	; (2754 <autoCal()+0x27c>)
    26ae:	4d1d      	ldr	r5, [pc, #116]	; (2724 <autoCal()+0x24c>)
  for (byte i = 0; i < 12; i++) {
    26b0:	2700      	movs	r7, #0
    calReadNext = touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300;
    26b2:	b2f9      	uxtb	r1, r7
    26b4:	4630      	mov	r0, r6
    26b6:	f008 ff4f 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    26ba:	f858 3b04 	ldr.w	r3, [r8], #4
    26be:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    26c2:	fb03 f000 	mul.w	r0, r3, r0
    26c6:	fb85 2300 	smull	r2, r3, r5, r0
    26ca:	17c0      	asrs	r0, r0, #31
    26cc:	ebc0 1063 	rsb	r0, r0, r3, asr #5
    26d0:	4284      	cmp	r4, r0
  for (byte i = 0; i < 12; i++) {
    26d2:	f107 0701 	add.w	r7, r7, #1
    26d6:	bfa8      	it	ge
    26d8:	4604      	movge	r4, r0
    26da:	2f0c      	cmp	r7, #12
    26dc:	d1e9      	bne.n	26b2 <autoCal()+0x1da>
    if (calReadNext < calRead) calRead = calReadNext; //use lowest value
  }
  ctouchThrVal = constrain(calRead-20, ctouchLoLimit, ctouchHiLimit);
    26de:	3c14      	subs	r4, #20
    26e0:	2c32      	cmp	r4, #50	; 0x32
    26e2:	bfb8      	it	lt
    26e4:	2432      	movlt	r4, #50	; 0x32
	long num = (x - in_min) * out_range;
    26e6:	f240 723a 	movw	r2, #1850	; 0x73a
    26ea:	f5a4 73af 	sub.w	r3, r4, #350	; 0x15e
    26ee:	fb02 f303 	mul.w	r3, r2, r3
		num += in_range / 2;
    26f2:	3b96      	subs	r3, #150	; 0x96
	long result = num / in_range + out_min;
    26f4:	fb85 2503 	smull	r2, r5, r5, r3
    26f8:	4817      	ldr	r0, [pc, #92]	; (2758 <autoCal()+0x280>)
  touch_Thr = map(ctouchThrVal,ctouchHiLimit,ctouchLoLimit,ttouchLoLimit,ttouchHiLimit);
    26fa:	4a18      	ldr	r2, [pc, #96]	; (275c <autoCal()+0x284>)
    26fc:	17db      	asrs	r3, r3, #31
  ctouchThrVal = constrain(calRead-20, ctouchLoLimit, ctouchHiLimit);
    26fe:	b2a1      	uxth	r1, r4
    2700:	eba3 1365 	sub.w	r3, r3, r5, asr #5
    2704:	3332      	adds	r3, #50	; 0x32
    2706:	8001      	strh	r1, [r0, #0]
  if (calReadNext < calRead) calRead = calReadNext; //use lowest value
  ctouchThrVal = constrain(calRead-20, ctouchLoLimit, ctouchHiLimit);
  touch_Thr = map(ctouchThrVal,ctouchHiLimit,ctouchLoLimit,ttouchLoLimit,ttouchHiLimit);
  writeSetting(CTOUCH_THR_ADDR, ctouchThrVal);
#endif
}
    2708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeSetting(CTOUCH_THR_ADDR, ctouchThrVal);
    270c:	202a      	movs	r0, #42	; 0x2a
  touch_Thr = map(ctouchThrVal,ctouchHiLimit,ctouchLoLimit,ttouchLoLimit,ttouchHiLimit);
    270e:	6013      	str	r3, [r2, #0]
  writeSetting(CTOUCH_THR_ADDR, ctouchThrVal);
    2710:	f006 bde2 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    2714:	1fff9a9c 	.word	0x1fff9a9c
    2718:	1fff9a9a 	.word	0x1fff9a9a
    271c:	1fff8d9c 	.word	0x1fff8d9c
    2720:	1fff9be8 	.word	0x1fff9be8
    2724:	1b4e81b5 	.word	0x1b4e81b5
    2728:	1fff9a4c 	.word	0x1fff9a4c
    272c:	1fff9a4e 	.word	0x1fff9a4e
    2730:	1fff9b78 	.word	0x1fff9b78
    2734:	1fff9b76 	.word	0x1fff9b76
    2738:	1fff9b1c 	.word	0x1fff9b1c
    273c:	1fff9b28 	.word	0x1fff9b28
    2740:	1fff9b86 	.word	0x1fff9b86
    2744:	1fff9b88 	.word	0x1fff9b88
    2748:	1fff8d6c 	.word	0x1fff8d6c
    274c:	1fff9be4 	.word	0x1fff9be4
    2750:	1fff8d3c 	.word	0x1fff8d3c
    2754:	1fff9be0 	.word	0x1fff9be0
    2758:	1fff9a66 	.word	0x1fff9a66
    275c:	1fff8e70 	.word	0x1fff8e70

00002760 <setup>:
void setup() {
    2760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
    2764:	200c      	movs	r0, #12
    2766:	b095      	sub	sp, #84	; 0x54
    2768:	f00b fd4c 	bl	e204 <analogReadRes>
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    276c:	200c      	movs	r0, #12
    276e:	f00c fa45 	bl	ebfc <analogWriteRes>
  analogWriteFrequency(pwmDacPin,11718.75);
    2772:	49ca      	ldr	r1, [pc, #808]	; (2a9c <setup+0x33c>)
  widiJumper = !digitalRead(widiJumperPin); //WIDI
    2774:	f8df a328 	ldr.w	sl, [pc, #808]	; 2aa0 <setup+0x340>
  analogWriteFrequency(pwmDacPin,11718.75);
    2778:	2014      	movs	r0, #20
    277a:	f00c fa4d 	bl	ec18 <analogWriteFrequency>
  Wire.setClock(1000000);
    277e:	49c9      	ldr	r1, [pc, #804]	; (2aa4 <setup+0x344>)
    2780:	48c9      	ldr	r0, [pc, #804]	; (2aa8 <setup+0x348>)
    2782:	f008 fc45 	bl	b010 <TwoWire::setClock(unsigned long)>
  pinMode(dPin, INPUT_PULLUP);
    2786:	2102      	movs	r1, #2
    2788:	2003      	movs	r0, #3
    278a:	f00c fae3 	bl	ed54 <pinMode>
  pinMode(ePin, INPUT_PULLUP);
    278e:	2102      	movs	r1, #2
    2790:	2004      	movs	r0, #4
    2792:	f00c fadf 	bl	ed54 <pinMode>
  pinMode(uPin, INPUT_PULLUP);
    2796:	2102      	movs	r1, #2
    2798:	2005      	movs	r0, #5
    279a:	f00c fadb 	bl	ed54 <pinMode>
  pinMode(mPin, INPUT_PULLUP);
    279e:	2102      	movs	r1, #2
    27a0:	2006      	movs	r0, #6
    27a2:	f00c fad7 	bl	ed54 <pinMode>
  pinMode(bLedPin, OUTPUT);        // breath indicator LED
    27a6:	2101      	movs	r1, #1
    27a8:	200a      	movs	r0, #10
    27aa:	f00c fad3 	bl	ed54 <pinMode>
  pinMode(pLedPin, OUTPUT);        // portam indicator LED
    27ae:	2101      	movs	r1, #1
    27b0:	2009      	movs	r0, #9
    27b2:	f00c facf 	bl	ed54 <pinMode>
  pinMode(statusLedPin,OUTPUT);    // Teensy onboard LED
    27b6:	2101      	movs	r1, #1
    27b8:	200d      	movs	r0, #13
    27ba:	f00c facb 	bl	ed54 <pinMode>
  pinMode(dacPin, OUTPUT);         //DAC output for analog signal
    27be:	2101      	movs	r1, #1
    27c0:	2028      	movs	r0, #40	; 0x28
    27c2:	f00c fac7 	bl	ed54 <pinMode>
  pinMode(pwmDacPin, OUTPUT);      //PWMed DAC output for analog signal
    27c6:	2101      	movs	r1, #1
    27c8:	2014      	movs	r0, #20
    27ca:	f00c fac3 	bl	ed54 <pinMode>
  pinMode(eLedPin, OUTPUT);        // breath indicator LED
    27ce:	2101      	movs	r1, #1
    27d0:	2016      	movs	r0, #22
    27d2:	f00c fabf 	bl	ed54 <pinMode>
  pinMode(sLedPin, OUTPUT);        // portam indicator LED
    27d6:	2101      	movs	r1, #1
    27d8:	2017      	movs	r0, #23
    27da:	f00c fabb 	bl	ed54 <pinMode>
  pinMode(widiPowerPin, OUTPUT);        //WIDI
    27de:	2101      	movs	r1, #1
    27e0:	2021      	movs	r0, #33	; 0x21
    27e2:	f00c fab7 	bl	ed54 <pinMode>
  pinMode(widiJumperPin, INPUT_PULLUP); //WIDI
    27e6:	2102      	movs	r1, #2
    27e8:	201c      	movs	r0, #28
    27ea:	f00c fab3 	bl	ed54 <pinMode>
  pinMode(widiJumperGndPin, OUTPUT);    //WIDI
    27ee:	2101      	movs	r1, #1
    27f0:	201b      	movs	r0, #27
    27f2:	f00c faaf 	bl	ed54 <pinMode>
  digitalWrite(widiJumperGndPin, LOW);  //WIDI
    27f6:	2100      	movs	r1, #0
    27f8:	201b      	movs	r0, #27
    27fa:	f00c fa77 	bl	ecec <digitalWrite>
  widiJumper = !digitalRead(widiJumperPin); //WIDI
    27fe:	201c      	movs	r0, #28
    2800:	f00c fa9a 	bl	ed38 <digitalRead>
    2804:	fab0 f380 	clz	r3, r0
    2808:	095b      	lsrs	r3, r3, #5
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial2_begin(BAUD2DIV2(baud));
					  serial2_format(format); }
	virtual void end(void)		{ serial2_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    280a:	201a      	movs	r0, #26
    280c:	f88a 3000 	strb.w	r3, [sl]
    2810:	f00c fcd6 	bl	f1c0 <serial2_set_rx>
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    2814:	201f      	movs	r0, #31
    2816:	2100      	movs	r1, #0
    2818:	f00c fc94 	bl	f144 <serial2_set_tx>
  bool factoryReset = !digitalRead(ePin) && !digitalRead(mPin);
    281c:	2004      	movs	r0, #4
    281e:	f00c fa8b 	bl	ed38 <digitalRead>
    2822:	b930      	cbnz	r0, 2832 <setup+0xd2>
    2824:	2006      	movs	r0, #6
    2826:	f00c fa87 	bl	ed38 <digitalRead>
    282a:	4603      	mov	r3, r0
    282c:	2800      	cmp	r0, #0
    282e:	f000 81d4 	beq.w	2bda <setup+0x47a>
  configManagementMode = !factoryReset && !digitalRead(uPin) && !digitalRead(dPin);
    2832:	2005      	movs	r0, #5
    2834:	f00c fa80 	bl	ed38 <digitalRead>
    2838:	2800      	cmp	r0, #0
    283a:	f000 81ff 	beq.w	2c3c <setup+0x4dc>
void setup() {
    283e:	2300      	movs	r3, #0
  configManagementMode = !factoryReset && !digitalRead(uPin) && !digitalRead(dPin);
    2840:	4c9a      	ldr	r4, [pc, #616]	; (2aac <setup+0x34c>)
  i2cScan = !factoryReset && !digitalRead(mPin);
    2842:	2006      	movs	r0, #6
  configManagementMode = !factoryReset && !digitalRead(uPin) && !digitalRead(dPin);
    2844:	7023      	strb	r3, [r4, #0]
  i2cScan = !factoryReset && !digitalRead(mPin);
    2846:	f00c fa77 	bl	ed38 <digitalRead>
    284a:	4a99      	ldr	r2, [pc, #612]	; (2ab0 <setup+0x350>)
    284c:	fab0 f380 	clz	r3, r0
    2850:	095b      	lsrs	r3, r3, #5
    2852:	7013      	strb	r3, [r2, #0]
  initDisplay(); //Start up display and show logo
    2854:	f005 f9ca 	bl	7bec <initDisplay()>
  if(configManagementMode) {
    2858:	7823      	ldrb	r3, [r4, #0]
    285a:	f04f 0b00 	mov.w	fp, #0
    285e:	2b00      	cmp	r3, #0
    2860:	f040 81c7 	bne.w	2bf2 <setup+0x492>
  readEEPROM(factoryReset);
    2864:	4658      	mov	r0, fp
    2866:	f006 fd51 	bl	930c <readEEPROM(bool)>
  touch_Thr = map(ctouchThrVal,ctouchHiLimit,ctouchLoLimit,ttouchLoLimit,ttouchHiLimit);
    286a:	4b92      	ldr	r3, [pc, #584]	; (2ab4 <setup+0x354>)
    286c:	4992      	ldr	r1, [pc, #584]	; (2ab8 <setup+0x358>)
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    286e:	881b      	ldrh	r3, [r3, #0]
	long num = (x - in_min) * out_range;
    2870:	f240 723a 	movw	r2, #1850	; 0x73a
    2874:	f5a3 73af 	sub.w	r3, r3, #350	; 0x15e
    2878:	fb02 f303 	mul.w	r3, r2, r3
		num += in_range / 2;
    287c:	3b96      	subs	r3, #150	; 0x96
	long result = num / in_range + out_min;
    287e:	fb81 2103 	smull	r2, r1, r1, r3
    2882:	17da      	asrs	r2, r3, #31
		if (in_range * num < 0) return result - 1;
    2884:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    2886:	eba2 1261 	sub.w	r2, r2, r1, asr #5
    288a:	498c      	ldr	r1, [pc, #560]	; (2abc <setup+0x35c>)
    288c:	bfd4      	ite	le
    288e:	f102 0332 	addle.w	r3, r2, #50	; 0x32
		if (in_range * num < 0) return result - 1;
    2892:	f102 0331 	addgt.w	r3, r2, #49	; 0x31
  activePatch = patch;
    2896:	4a8a      	ldr	r2, [pc, #552]	; (2ac0 <setup+0x360>)
  touch_Thr = map(ctouchThrVal,ctouchHiLimit,ctouchLoLimit,ttouchLoLimit,ttouchHiLimit);
    2898:	600b      	str	r3, [r1, #0]
  activePatch = patch;
    289a:	4b8a      	ldr	r3, [pc, #552]	; (2ac4 <setup+0x364>)
    289c:	8812      	ldrh	r2, [r2, #0]
    289e:	701a      	strb	r2, [r3, #0]
  digitalWrite(statusLedPin,HIGH);
    28a0:	2101      	movs	r1, #1
    28a2:	200d      	movs	r0, #13
    28a4:	f00c fa22 	bl	ecec <digitalWrite>
  delay(100);
    28a8:	2064      	movs	r0, #100	; 0x64
    28aa:	f00c faaf 	bl	ee0c <delay>
  if (!touchSensorRollers.begin(0x5D)) {  //should be D
    28ae:	2406      	movs	r4, #6
  analogWrite(bLedPin, BREATH_LED_BRIGHTNESS);
    28b0:	f44f 7116 	mov.w	r1, #600	; 0x258
    28b4:	200a      	movs	r0, #10
    28b6:	f00c f88f 	bl	e9d8 <analogWrite>
  if (!touchSensorRollers.begin(0x5D)) {  //should be D
    28ba:	4a7b      	ldr	r2, [pc, #492]	; (2aa8 <setup+0x348>)
    28bc:	4882      	ldr	r0, [pc, #520]	; (2ac8 <setup+0x368>)
    28be:	9400      	str	r4, [sp, #0]
    28c0:	230c      	movs	r3, #12
    28c2:	215d      	movs	r1, #93	; 0x5d
    28c4:	f008 feac 	bl	b620 <Adafruit_MPR121::begin(unsigned char, TwoWire*, unsigned char, unsigned char)>
    28c8:	2800      	cmp	r0, #0
    28ca:	f000 8155 	beq.w	2b78 <setup+0x418>
  delay(100);
    28ce:	2064      	movs	r0, #100	; 0x64
    28d0:	f00c fa9c 	bl	ee0c <delay>
  analogWrite(bLedPin, 0);
    28d4:	2100      	movs	r1, #0
    28d6:	200a      	movs	r0, #10
    28d8:	f00c f87e 	bl	e9d8 <analogWrite>
  analogWrite(pLedPin, PORTAM_LED_BRIGHTNESS);
    28dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
    28e0:	2009      	movs	r0, #9
    28e2:	f00c f879 	bl	e9d8 <analogWrite>
  if (!touchSensorLH.begin(0x5C)) {
    28e6:	4a70      	ldr	r2, [pc, #448]	; (2aa8 <setup+0x348>)
    28e8:	4878      	ldr	r0, [pc, #480]	; (2acc <setup+0x36c>)
    28ea:	9400      	str	r4, [sp, #0]
    28ec:	230c      	movs	r3, #12
    28ee:	215c      	movs	r1, #92	; 0x5c
    28f0:	f008 fe96 	bl	b620 <Adafruit_MPR121::begin(unsigned char, TwoWire*, unsigned char, unsigned char)>
    28f4:	2800      	cmp	r0, #0
    28f6:	f000 815f 	beq.w	2bb8 <setup+0x458>
  delay(100);
    28fa:	2064      	movs	r0, #100	; 0x64
    28fc:	f00c fa86 	bl	ee0c <delay>
  analogWrite(pLedPin, 0);
    2900:	2100      	movs	r1, #0
    2902:	2009      	movs	r0, #9
    2904:	f00c f868 	bl	e9d8 <analogWrite>
  analogWrite(eLedPin, PORTAM_LED_BRIGHTNESS);
    2908:	f44f 7196 	mov.w	r1, #300	; 0x12c
    290c:	2016      	movs	r0, #22
    290e:	f00c f863 	bl	e9d8 <analogWrite>
  if (!touchSensorRH.begin(0x5B)) {
    2912:	4a65      	ldr	r2, [pc, #404]	; (2aa8 <setup+0x348>)
    2914:	486e      	ldr	r0, [pc, #440]	; (2ad0 <setup+0x370>)
    2916:	9400      	str	r4, [sp, #0]
    2918:	230c      	movs	r3, #12
    291a:	215b      	movs	r1, #91	; 0x5b
    291c:	f008 fe80 	bl	b620 <Adafruit_MPR121::begin(unsigned char, TwoWire*, unsigned char, unsigned char)>
    2920:	2800      	cmp	r0, #0
    2922:	f000 8139 	beq.w	2b98 <setup+0x438>
  delay(100);
    2926:	2064      	movs	r0, #100	; 0x64
    2928:	f00c fa70 	bl	ee0c <delay>
  analogWrite(eLedPin, 0);
    292c:	2100      	movs	r1, #0
    292e:	2016      	movs	r0, #22
    2930:	f00c f852 	bl	e9d8 <analogWrite>
  analogWrite(sLedPin, PORTAM_LED_BRIGHTNESS);
    2934:	f44f 7196 	mov.w	r1, #300	; 0x12c
    2938:	2017      	movs	r0, #23
    293a:	f00c f84d 	bl	e9d8 <analogWrite>
  delay(100);
    293e:	2064      	movs	r0, #100	; 0x64
    2940:	f00c fa64 	bl	ee0c <delay>
  analogWrite(sLedPin, 0);
    2944:	2100      	movs	r1, #0
    2946:	2017      	movs	r0, #23
    2948:	f00c f846 	bl	e9d8 <analogWrite>
  delay(100);
    294c:	2064      	movs	r0, #100	; 0x64
    294e:	f00c fa5d 	bl	ee0c <delay>
  digitalWrite(statusLedPin,LOW);
    2952:	2100      	movs	r1, #0
    2954:	200d      	movs	r0, #13
    2956:	f00c f9c9 	bl	ecec <digitalWrite>
  breathFilter.setFilter(LOWPASS, filterFreq, 0.0);   // create a one pole (RC) lowpass filter
    295a:	4a5e      	ldr	r2, [pc, #376]	; (2ad4 <setup+0x374>)
    295c:	485e      	ldr	r0, [pc, #376]	; (2ad8 <setup+0x378>)
    295e:	6812      	ldr	r2, [r2, #0]
  biteJumper = true;
    2960:	f8df 9178 	ldr.w	r9, [pc, #376]	; 2adc <setup+0x37c>
  vibZero = vibZeroBite = breathCalZero = 0;
    2964:	4e5e      	ldr	r6, [pc, #376]	; (2ae0 <setup+0x380>)
    2966:	4d5f      	ldr	r5, [pc, #380]	; (2ae4 <setup+0x384>)
    2968:	4f5f      	ldr	r7, [pc, #380]	; (2ae8 <setup+0x388>)
    296a:	f8df 8180 	ldr.w	r8, [pc, #384]	; 2aec <setup+0x38c>
  breathFilter.setFilter(LOWPASS, filterFreq, 0.0);   // create a one pole (RC) lowpass filter
    296e:	2300      	movs	r3, #0
    2970:	2101      	movs	r1, #1
    2972:	f7fd fd8f 	bl	494 <FilterOnePole::setFilter(FILTER_TYPE, float, float)>
  biteJumper = true;
    2976:	2401      	movs	r4, #1
  vibZero = vibZeroBite = breathCalZero = 0;
    2978:	2300      	movs	r3, #0
    297a:	6033      	str	r3, [r6, #0]
    297c:	602b      	str	r3, [r5, #0]
    297e:	603b      	str	r3, [r7, #0]
  biteJumper = true;
    2980:	f889 4000 	strb.w	r4, [r9]
    vibZero += touchRead(vibratoPin);
    2984:	200f      	movs	r0, #15
    2986:	f00d fabf 	bl	ff08 <touchRead>
    298a:	683b      	ldr	r3, [r7, #0]
    298c:	4403      	add	r3, r0
    breathCalZero += analogRead(breathSensorPin);
    298e:	200e      	movs	r0, #14
    vibZero += touchRead(vibratoPin);
    2990:	603b      	str	r3, [r7, #0]
    breathCalZero += analogRead(breathSensorPin);
    2992:	f00b fc6b 	bl	e26c <analogRead>
    2996:	6833      	ldr	r3, [r6, #0]
    2998:	4403      	add	r3, r0
    299a:	6033      	str	r3, [r6, #0]
    if (biteJumper) vibZeroBite += analogRead(bitePressurePin); else vibZeroBite += touchRead(bitePin);
    299c:	f899 3000 	ldrb.w	r3, [r9]
    29a0:	2b00      	cmp	r3, #0
    29a2:	f000 8114 	beq.w	2bce <setup+0x46e>
    29a6:	2015      	movs	r0, #21
    29a8:	f00b fc60 	bl	e26c <analogRead>
    29ac:	682b      	ldr	r3, [r5, #0]
    29ae:	4418      	add	r0, r3
    29b0:	6028      	str	r0, [r5, #0]
    statusLed(i&1);
    29b2:	f004 0001 	and.w	r0, r4, #1
    29b6:	f003 fb0d 	bl	5fd4 <statusLed(bool)>
    delay(fastBoot?75:220); //Shorter delay for fastboot
    29ba:	f8b8 3000 	ldrh.w	r3, [r8]
    29be:	2b00      	cmp	r3, #0
    29c0:	bf14      	ite	ne
    29c2:	204b      	movne	r0, #75	; 0x4b
    29c4:	20dc      	moveq	r0, #220	; 0xdc
  for(int i = 1 ; i <= sampleCount; ++i) {
    29c6:	3401      	adds	r4, #1
    delay(fastBoot?75:220); //Shorter delay for fastboot
    29c8:	f00c fa20 	bl	ee0c <delay>
  for(int i = 1 ; i <= sampleCount; ++i) {
    29cc:	2c05      	cmp	r4, #5
    29ce:	d1d9      	bne.n	2984 <setup+0x224>
  vibZero /= sampleCount;
    29d0:	683b      	ldr	r3, [r7, #0]
  breathCalZero /= sampleCount;
    29d2:	6832      	ldr	r2, [r6, #0]
  vibThr = vibZero - vibSquelch;
    29d4:	4946      	ldr	r1, [pc, #280]	; (2af0 <setup+0x390>)
  leverPortZero = vibZero;
    29d6:	4c47      	ldr	r4, [pc, #284]	; (2af4 <setup+0x394>)
  vibThr = vibZero - vibSquelch;
    29d8:	8808      	ldrh	r0, [r1, #0]
  vibThrBite = vibZeroBite - vibSquelchBite;
    29da:	4947      	ldr	r1, [pc, #284]	; (2af8 <setup+0x398>)
  vibZero /= sampleCount;
    29dc:	2b00      	cmp	r3, #0
    29de:	bfb8      	it	lt
    29e0:	3303      	addlt	r3, #3
  breathCalZero /= sampleCount;
    29e2:	2a00      	cmp	r2, #0
    29e4:	bfb8      	it	lt
    29e6:	3203      	addlt	r2, #3
    29e8:	1092      	asrs	r2, r2, #2
    29ea:	6032      	str	r2, [r6, #0]
  vibZeroBite /= sampleCount;
    29ec:	682a      	ldr	r2, [r5, #0]
  vibThrBite = vibZeroBite - vibSquelchBite;
    29ee:	8809      	ldrh	r1, [r1, #0]
  vibThrLo = vibZero + vibSquelch;
    29f0:	4e42      	ldr	r6, [pc, #264]	; (2afc <setup+0x39c>)
  vibZeroBite /= sampleCount;
    29f2:	2a00      	cmp	r2, #0
    29f4:	bfb8      	it	lt
    29f6:	3203      	addlt	r2, #3
  vibZero /= sampleCount;
    29f8:	109b      	asrs	r3, r3, #2
  vibZeroBite /= sampleCount;
    29fa:	1092      	asrs	r2, r2, #2
  vibZero /= sampleCount;
    29fc:	603b      	str	r3, [r7, #0]
  vibZeroBite /= sampleCount;
    29fe:	602a      	str	r2, [r5, #0]
  leverPortZero = vibZero;
    2a00:	6023      	str	r3, [r4, #0]
  vibThr = vibZero - vibSquelch;
    2a02:	eba3 0c00 	sub.w	ip, r3, r0
    2a06:	4f3e      	ldr	r7, [pc, #248]	; (2b00 <setup+0x3a0>)
  vibThrBite = vibZeroBite - vibSquelchBite;
    2a08:	4d3e      	ldr	r5, [pc, #248]	; (2b04 <setup+0x3a4>)
  vibThrBiteLo = vibZeroBite + vibSquelchBite;
    2a0a:	4c3f      	ldr	r4, [pc, #252]	; (2b08 <setup+0x3a8>)
  vibThr = vibZero - vibSquelch;
    2a0c:	f8c7 c000 	str.w	ip, [r7]
  vibThrLo = vibZero + vibSquelch;
    2a10:	4403      	add	r3, r0
    2a12:	6033      	str	r3, [r6, #0]
  vibThrBite = vibZeroBite - vibSquelchBite;
    2a14:	1a53      	subs	r3, r2, r1
  vibThrBiteLo = vibZeroBite + vibSquelchBite;
    2a16:	440a      	add	r2, r1
  vibThrBite = vibZeroBite - vibSquelchBite;
    2a18:	602b      	str	r3, [r5, #0]
  vibThrBiteLo = vibZeroBite + vibSquelchBite;
    2a1a:	6022      	str	r2, [r4, #0]
  if (factoryReset) autoCal();
    2a1c:	f1bb 0f00 	cmp.w	fp, #0
    2a20:	f040 8104 	bne.w	2c2c <setup+0x4cc>
  if(!fastBoot) {
    2a24:	f8b8 3000 	ldrh.w	r3, [r8]
    2a28:	2b00      	cmp	r3, #0
    2a2a:	f000 80f2 	beq.w	2c12 <setup+0x4b2>
  mainState = NOTE_OFF;       // initialize main state machine
    2a2e:	4b37      	ldr	r3, [pc, #220]	; (2b0c <setup+0x3ac>)
    2a30:	2401      	movs	r4, #1
  if (!digitalRead(ePin)) {
    2a32:	2004      	movs	r0, #4
  mainState = NOTE_OFF;       // initialize main state machine
    2a34:	601c      	str	r4, [r3, #0]
  if (!digitalRead(ePin)) {
    2a36:	f00c f97f 	bl	ed38 <digitalRead>
    2a3a:	b918      	cbnz	r0, 2a44 <setup+0x2e4>
    doPatchUpdate=1;
    2a3c:	4b34      	ldr	r3, [pc, #208]	; (2b10 <setup+0x3b0>)
    activePatch=0;
    2a3e:	4a21      	ldr	r2, [pc, #132]	; (2ac4 <setup+0x364>)
    doPatchUpdate=1;
    2a40:	701c      	strb	r4, [r3, #0]
    activePatch=0;
    2a42:	7010      	strb	r0, [r2, #0]
  if ((pinkySetting == LVLP) && levelCC){
    2a44:	4b33      	ldr	r3, [pc, #204]	; (2b14 <setup+0x3b4>)
    2a46:	881b      	ldrh	r3, [r3, #0]
    2a48:	2b1c      	cmp	r3, #28
    2a4a:	f000 80d7 	beq.w	2bfc <setup+0x49c>
    2a4e:	4c32      	ldr	r4, [pc, #200]	; (2b18 <setup+0x3b8>)
    2a50:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    battMeasured[i] = analogRead(vMeterPin);
    2a54:	2023      	movs	r0, #35	; 0x23
    2a56:	f00b fc09 	bl	e26c <analogRead>
    2a5a:	f844 0f04 	str.w	r0, [r4, #4]!
    delay(1);
    2a5e:	2001      	movs	r0, #1
    2a60:	f00c f9d4 	bl	ee0c <delay>
  for (int i=0; i<50; i++){
    2a64:	42a5      	cmp	r5, r4
    2a66:	d1f5      	bne.n	2a54 <setup+0x2f4>
  if (widiJumper && widiOn) digitalWrite(widiPowerPin, HIGH); else digitalWrite(widiPowerPin, LOW);
    2a68:	f89a 3000 	ldrb.w	r3, [sl]
    2a6c:	b123      	cbz	r3, 2a78 <setup+0x318>
    2a6e:	4b2b      	ldr	r3, [pc, #172]	; (2b1c <setup+0x3bc>)
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	2b00      	cmp	r3, #0
    2a74:	f040 80ea 	bne.w	2c4c <setup+0x4ec>
    2a78:	2100      	movs	r1, #0
    2a7a:	2021      	movs	r0, #33	; 0x21
    2a7c:	f00c f936 	bl	ecec <digitalWrite>
  activeMIDIchannel = MIDIchannel;
    2a80:	4a27      	ldr	r2, [pc, #156]	; (2b20 <setup+0x3c0>)
    2a82:	4b28      	ldr	r3, [pc, #160]	; (2b24 <setup+0x3c4>)
    2a84:	7810      	ldrb	r0, [r2, #0]
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
    2a86:	4c28      	ldr	r4, [pc, #160]	; (2b28 <setup+0x3c8>)
    2a88:	7018      	strb	r0, [r3, #0]
  midiInitialize(MIDIchannel);
    2a8a:	f006 fbed 	bl	9268 <midiInitialize(unsigned char)>
  statusLedOn();    // Switch on the onboard LED to indicate power on/ready
    2a8e:	f003 fa99 	bl	5fc4 <statusLedOn()>

        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    2a92:	4b26      	ldr	r3, [pc, #152]	; (2b2c <setup+0x3cc>)
    2a94:	9304      	str	r3, [sp, #16]
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
    2a96:	a904      	add	r1, sp, #16
    2a98:	a80a      	add	r0, sp, #40	; 0x28
    2a9a:	e049      	b.n	2b30 <setup+0x3d0>
    2a9c:	46371b00 	.word	0x46371b00
    2aa0:	1fff9c1e 	.word	0x1fff9c1e
    2aa4:	000f4240 	.word	0x000f4240
    2aa8:	1fff9004 	.word	0x1fff9004
    2aac:	1fff9a64 	.word	0x1fff9a64
    2ab0:	1fff9af0 	.word	0x1fff9af0
    2ab4:	1fff9a66 	.word	0x1fff9a66
    2ab8:	1b4e81b5 	.word	0x1b4e81b5
    2abc:	1fff8e70 	.word	0x1fff8e70
    2ac0:	1fff9b62 	.word	0x1fff9b62
    2ac4:	1fff9932 	.word	0x1fff9932
    2ac8:	1fff9be8 	.word	0x1fff9be8
    2acc:	1fff9be0 	.word	0x1fff9be0
    2ad0:	1fff9be4 	.word	0x1fff9be4
    2ad4:	1fff8dc0 	.word	0x1fff8dc0
    2ad8:	1fff9a28 	.word	0x1fff9a28
    2adc:	1fff9a0d 	.word	0x1fff9a0d
    2ae0:	1fff9a24 	.word	0x1fff9a24
    2ae4:	1fff9c18 	.word	0x1fff9c18
    2ae8:	1fff9c14 	.word	0x1fff9c14
    2aec:	1fff9a9e 	.word	0x1fff9a9e
    2af0:	1fff8e7c 	.word	0x1fff8e7c
    2af4:	1fff9b24 	.word	0x1fff9b24
    2af8:	1fff8e7e 	.word	0x1fff8e7e
    2afc:	1fff9c10 	.word	0x1fff9c10
    2b00:	1fff9c04 	.word	0x1fff9c04
    2b04:	1fff9c08 	.word	0x1fff9c08
    2b08:	1fff9c0c 	.word	0x1fff9c0c
    2b0c:	1fff9b30 	.word	0x1fff9b30
    2b10:	1fff9a8a 	.word	0x1fff9a8a
    2b14:	1fff9b74 	.word	0x1fff9b74
    2b18:	1fff9938 	.word	0x1fff9938
    2b1c:	1fff9c1f 	.word	0x1fff9c1f
    2b20:	1fff9918 	.word	0x1fff9918
    2b24:	1fff9930 	.word	0x1fff9930
    2b28:	00012c18 	.word	0x00012c18
    2b2c:	00000865 	.word	0x00000865
        vtable_ptr_ = std::addressof(vt);
    2b30:	9402      	str	r4, [sp, #8]
        vtable_ptr_{other.vtable_ptr_}
    2b32:	9408      	str	r4, [sp, #32]
        vtable_ptr_->copy_ptr(
    2b34:	f7fd fd2e 	bl	594 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
    2b38:	a90a      	add	r1, sp, #40	; 0x28
    2b3a:	a810      	add	r0, sp, #64	; 0x40
        vtable_ptr_{other.vtable_ptr_}
    2b3c:	940e      	str	r4, [sp, #56]	; 0x38
        vtable_ptr_->copy_ptr(
    2b3e:	f7fd fd29 	bl	594 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
#endif
	bool begin(callback_t funct, unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (F_BUS / 1000000) * microseconds - 1;
		if (cycles < 36) return false;
		return beginCycles(funct, cycles);
    2b42:	f645 52bf 	movw	r2, #23999	; 0x5dbf
    2b46:	a90e      	add	r1, sp, #56	; 0x38
    2b48:	4855      	ldr	r0, [pc, #340]	; (2ca0 <setup+0x540>)
    2b4a:	f00b f91d 	bl	dd88 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    2b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2b50:	a810      	add	r0, sp, #64	; 0x40
    2b52:	68db      	ldr	r3, [r3, #12]
    2b54:	4798      	blx	r3
    2b56:	9b08      	ldr	r3, [sp, #32]
    2b58:	a80a      	add	r0, sp, #40	; 0x28
    2b5a:	68db      	ldr	r3, [r3, #12]
    2b5c:	4798      	blx	r3
    2b5e:	9b02      	ldr	r3, [sp, #8]
    2b60:	a804      	add	r0, sp, #16
    2b62:	68db      	ldr	r3, [r3, #12]
    2b64:	4798      	blx	r3
}
    2b66:	b015      	add	sp, #84	; 0x54
    2b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!digitalRead(dPin) && !digitalRead(ePin) && !digitalRead(uPin) && !digitalRead(mPin)) _reboot_Teensyduino_(); // reboot to program mode if all buttons pressed
    2b6c:	2004      	movs	r0, #4
    2b6e:	f00c f8e3 	bl	ed38 <digitalRead>
    2b72:	2800      	cmp	r0, #0
    2b74:	f000 8086 	beq.w	2c84 <setup+0x524>
    2b78:	2003      	movs	r0, #3
    2b7a:	f00c f8dd 	bl	ed38 <digitalRead>
    2b7e:	2800      	cmp	r0, #0
    2b80:	d0f4      	beq.n	2b6c <setup+0x40c>
    2b82:	2003      	movs	r0, #3
    2b84:	f00c f8d8 	bl	ed38 <digitalRead>
    2b88:	2800      	cmp	r0, #0
    2b8a:	d1f5      	bne.n	2b78 <setup+0x418>
    2b8c:	e7ee      	b.n	2b6c <setup+0x40c>
      if (!digitalRead(dPin) && !digitalRead(ePin) && !digitalRead(uPin) && !digitalRead(mPin)) _reboot_Teensyduino_(); // reboot to program mode if all buttons pressed
    2b8e:	2004      	movs	r0, #4
    2b90:	f00c f8d2 	bl	ed38 <digitalRead>
    2b94:	2800      	cmp	r0, #0
    2b96:	d06a      	beq.n	2c6e <setup+0x50e>
    2b98:	2003      	movs	r0, #3
    2b9a:	f00c f8cd 	bl	ed38 <digitalRead>
    2b9e:	2800      	cmp	r0, #0
    2ba0:	d0f5      	beq.n	2b8e <setup+0x42e>
    2ba2:	2003      	movs	r0, #3
    2ba4:	f00c f8c8 	bl	ed38 <digitalRead>
    2ba8:	2800      	cmp	r0, #0
    2baa:	d1f5      	bne.n	2b98 <setup+0x438>
    2bac:	e7ef      	b.n	2b8e <setup+0x42e>
      if (!digitalRead(dPin) && !digitalRead(ePin) && !digitalRead(uPin) && !digitalRead(mPin)) _reboot_Teensyduino_(); // reboot to program mode if all buttons pressed
    2bae:	2004      	movs	r0, #4
    2bb0:	f00c f8c2 	bl	ed38 <digitalRead>
    2bb4:	2800      	cmp	r0, #0
    2bb6:	d04e      	beq.n	2c56 <setup+0x4f6>
    2bb8:	2003      	movs	r0, #3
    2bba:	f00c f8bd 	bl	ed38 <digitalRead>
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d0f5      	beq.n	2bae <setup+0x44e>
    2bc2:	2003      	movs	r0, #3
    2bc4:	f00c f8b8 	bl	ed38 <digitalRead>
    2bc8:	2800      	cmp	r0, #0
    2bca:	d1f5      	bne.n	2bb8 <setup+0x458>
    2bcc:	e7ef      	b.n	2bae <setup+0x44e>
    if (biteJumper) vibZeroBite += analogRead(bitePressurePin); else vibZeroBite += touchRead(bitePin);
    2bce:	2011      	movs	r0, #17
    2bd0:	f00d f99a 	bl	ff08 <touchRead>
    2bd4:	682b      	ldr	r3, [r5, #0]
    2bd6:	4418      	add	r0, r3
    2bd8:	e6ea      	b.n	29b0 <setup+0x250>
  configManagementMode = !factoryReset && !digitalRead(uPin) && !digitalRead(dPin);
    2bda:	4c32      	ldr	r4, [pc, #200]	; (2ca4 <setup+0x544>)
  i2cScan = !factoryReset && !digitalRead(mPin);
    2bdc:	4a32      	ldr	r2, [pc, #200]	; (2ca8 <setup+0x548>)
  configManagementMode = !factoryReset && !digitalRead(uPin) && !digitalRead(dPin);
    2bde:	7020      	strb	r0, [r4, #0]
  i2cScan = !factoryReset && !digitalRead(mPin);
    2be0:	7013      	strb	r3, [r2, #0]
  initDisplay(); //Start up display and show logo
    2be2:	f005 f803 	bl	7bec <initDisplay()>
  if(configManagementMode) {
    2be6:	7823      	ldrb	r3, [r4, #0]
  bool factoryReset = !digitalRead(ePin) && !digitalRead(mPin);
    2be8:	f04f 0b01 	mov.w	fp, #1
  if(configManagementMode) {
    2bec:	2b00      	cmp	r3, #0
    2bee:	f43f ae39 	beq.w	2864 <setup+0x104>
}
    2bf2:	b015      	add	sp, #84	; 0x54
    2bf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    configModeSetup();
    2bf8:	f008 b8c4 	b.w	ad84 <configModeSetup()>
  if ((pinkySetting == LVLP) && levelCC){
    2bfc:	4b2b      	ldr	r3, [pc, #172]	; (2cac <setup+0x54c>)
    2bfe:	8818      	ldrh	r0, [r3, #0]
    2c00:	2800      	cmp	r0, #0
    2c02:	f43f af24 	beq.w	2a4e <setup+0x2ee>
    midiSendControlChange(levelCC, levelVal);
    2c06:	4b2a      	ldr	r3, [pc, #168]	; (2cb0 <setup+0x550>)
    2c08:	b2c0      	uxtb	r0, r0
    2c0a:	7819      	ldrb	r1, [r3, #0]
    2c0c:	f006 f8f0 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    2c10:	e71d      	b.n	2a4e <setup+0x2ee>
    statusLedFlash(500);
    2c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2c16:	f003 f9ed 	bl	5ff4 <statusLedFlash(unsigned short)>
    statusLedOff();
    2c1a:	f003 f9d7 	bl	5fcc <statusLedOff()>
    showVersion();
    2c1e:	f005 f95b 	bl	7ed8 <showVersion()>
    delay(1400);
    2c22:	f44f 60af 	mov.w	r0, #1400	; 0x578
    2c26:	f00c f8f1 	bl	ee0c <delay>
    2c2a:	e700      	b.n	2a2e <setup+0x2ce>
  if (factoryReset) autoCal();
    2c2c:	f7ff fc54 	bl	24d8 <autoCal()>
  if(!fastBoot) {
    2c30:	f8b8 3000 	ldrh.w	r3, [r8]
    2c34:	2b00      	cmp	r3, #0
    2c36:	f47f aefa 	bne.w	2a2e <setup+0x2ce>
    2c3a:	e7ea      	b.n	2c12 <setup+0x4b2>
  configManagementMode = !factoryReset && !digitalRead(uPin) && !digitalRead(dPin);
    2c3c:	2003      	movs	r0, #3
    2c3e:	f00c f87b 	bl	ed38 <digitalRead>
    2c42:	2800      	cmp	r0, #0
    2c44:	f47f adfb 	bne.w	283e <setup+0xde>
    2c48:	2301      	movs	r3, #1
    2c4a:	e5f9      	b.n	2840 <setup+0xe0>
  if (widiJumper && widiOn) digitalWrite(widiPowerPin, HIGH); else digitalWrite(widiPowerPin, LOW);
    2c4c:	2101      	movs	r1, #1
    2c4e:	2021      	movs	r0, #33	; 0x21
    2c50:	f00c f84c 	bl	ecec <digitalWrite>
    2c54:	e714      	b.n	2a80 <setup+0x320>
      if (!digitalRead(dPin) && !digitalRead(ePin) && !digitalRead(uPin) && !digitalRead(mPin)) _reboot_Teensyduino_(); // reboot to program mode if all buttons pressed
    2c56:	2005      	movs	r0, #5
    2c58:	f00c f86e 	bl	ed38 <digitalRead>
    2c5c:	2800      	cmp	r0, #0
    2c5e:	d1ab      	bne.n	2bb8 <setup+0x458>
    2c60:	2006      	movs	r0, #6
    2c62:	f00c f869 	bl	ed38 <digitalRead>
    2c66:	2800      	cmp	r0, #0
    2c68:	d1a6      	bne.n	2bb8 <setup+0x458>
      if (!digitalRead(dPin) && !digitalRead(ePin) && !digitalRead(uPin) && !digitalRead(mPin)) _reboot_Teensyduino_(); // reboot to program mode if all buttons pressed
    2c6a:	f00d fa45 	bl	100f8 <_reboot_Teensyduino_>
      if (!digitalRead(dPin) && !digitalRead(ePin) && !digitalRead(uPin) && !digitalRead(mPin)) _reboot_Teensyduino_(); // reboot to program mode if all buttons pressed
    2c6e:	2005      	movs	r0, #5
    2c70:	f00c f862 	bl	ed38 <digitalRead>
    2c74:	2800      	cmp	r0, #0
    2c76:	d18f      	bne.n	2b98 <setup+0x438>
    2c78:	2006      	movs	r0, #6
    2c7a:	f00c f85d 	bl	ed38 <digitalRead>
    2c7e:	2800      	cmp	r0, #0
    2c80:	d18a      	bne.n	2b98 <setup+0x438>
    2c82:	e7f2      	b.n	2c6a <setup+0x50a>
      if (!digitalRead(dPin) && !digitalRead(ePin) && !digitalRead(uPin) && !digitalRead(mPin)) _reboot_Teensyduino_(); // reboot to program mode if all buttons pressed
    2c84:	2005      	movs	r0, #5
    2c86:	f00c f857 	bl	ed38 <digitalRead>
    2c8a:	2800      	cmp	r0, #0
    2c8c:	f47f af74 	bne.w	2b78 <setup+0x418>
    2c90:	2006      	movs	r0, #6
    2c92:	f00c f851 	bl	ed38 <digitalRead>
    2c96:	2800      	cmp	r0, #0
    2c98:	f47f af6e 	bne.w	2b78 <setup+0x418>
    2c9c:	e7e5      	b.n	2c6a <setup+0x50a>
    2c9e:	bf00      	nop
    2ca0:	1fff9a78 	.word	0x1fff9a78
    2ca4:	1fff9a64 	.word	0x1fff9a64
    2ca8:	1fff9af0 	.word	0x1fff9af0
    2cac:	1fff9b12 	.word	0x1fff9b12
    2cb0:	1fff9b14 	.word	0x1fff9b14

00002cb4 <readSwitches()>:


//***********************************************************

void readSwitches() {
    2cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 int glissNoteDiff = 0; // ws: glissTargetNote - glissCurrentNote
#if defined(NURAD)

  switch (lap){
    2cb8:	4da1      	ldr	r5, [pc, #644]	; (2f40 <readSwitches()+0x28c>)
    2cba:	782c      	ldrb	r4, [r5, #0]
    2cbc:	2c01      	cmp	r4, #1
void readSwitches() {
    2cbe:	b097      	sub	sp, #92	; 0x5c
  switch (lap){
    2cc0:	f000 8235 	beq.w	312e <readSwitches()+0x47a>
    2cc4:	2c02      	cmp	r4, #2
    2cc6:	f000 81b5 	beq.w	3034 <readSwitches()+0x380>
    2cca:	2c00      	cmp	r4, #0
    2ccc:	f000 82ea 	beq.w	32a4 <readSwitches()+0x5f0>
  K4=LHp1;
  K5=RHp1;
  K6=RHp2;
  K7=RHp3;
#endif
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    2cd0:	4c9c      	ldr	r4, [pc, #624]	; (2f44 <readSwitches()+0x290>)
  K2=LHp2;
    2cd2:	499d      	ldr	r1, [pc, #628]	; (2f48 <readSwitches()+0x294>)
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    2cd4:	7826      	ldrb	r6, [r4, #0]
  // Calculate midi note number from pressed keys

  if (0==fingering){ //EWI standard fingering
    //fingeredNote=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12+(octave-3)*12+transpose-12+qTransp;

    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2cd6:	4c9d      	ldr	r4, [pc, #628]	; (2f4c <readSwitches()+0x298>)
    2cd8:	4f9d      	ldr	r7, [pc, #628]	; (2f50 <readSwitches()+0x29c>)
    2cda:	f894 8000 	ldrb.w	r8, [r4]
    2cde:	4c9d      	ldr	r4, [pc, #628]	; (2f54 <readSwitches()+0x2a0>)
  K1=RHp2;
    2ce0:	489d      	ldr	r0, [pc, #628]	; (2f58 <readSwitches()+0x2a4>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2ce2:	7824      	ldrb	r4, [r4, #0]
    2ce4:	9401      	str	r4, [sp, #4]
    2ce6:	4c9d      	ldr	r4, [pc, #628]	; (2f5c <readSwitches()+0x2a8>)
    2ce8:	783f      	ldrb	r7, [r7, #0]
  K2=LHp2;
    2cea:	f891 a000 	ldrb.w	sl, [r1]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2cee:	f894 b000 	ldrb.w	fp, [r4]
  K5=RHp1;
    2cf2:	499b      	ldr	r1, [pc, #620]	; (2f60 <readSwitches()+0x2ac>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2cf4:	4c9b      	ldr	r4, [pc, #620]	; (2f64 <readSwitches()+0x2b0>)
    2cf6:	9704      	str	r7, [sp, #16]
    2cf8:	4f9b      	ldr	r7, [pc, #620]	; (2f68 <readSwitches()+0x2b4>)
  K3=LHp3;
    2cfa:	4b9c      	ldr	r3, [pc, #624]	; (2f6c <readSwitches()+0x2b8>)
  K4=LHp1;
    2cfc:	4a9c      	ldr	r2, [pc, #624]	; (2f70 <readSwitches()+0x2bc>)
  K1=RHp2;
    2cfe:	f890 c000 	ldrb.w	ip, [r0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2d02:	f894 e000 	ldrb.w	lr, [r4]
  K5=RHp1;
    2d06:	7808      	ldrb	r0, [r1, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2d08:	4c9a      	ldr	r4, [pc, #616]	; (2f74 <readSwitches()+0x2c0>)
  K7=RHp3;
    2d0a:	499b      	ldr	r1, [pc, #620]	; (2f78 <readSwitches()+0x2c4>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2d0c:	783f      	ldrb	r7, [r7, #0]
    2d0e:	9703      	str	r7, [sp, #12]
  K3=LHp3;
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	4f9a      	ldr	r7, [pc, #616]	; (2f7c <readSwitches()+0x2c8>)
  K4=LHp1;
    2d14:	7812      	ldrb	r2, [r2, #0]
  K7=RHp3;
    2d16:	7809      	ldrb	r1, [r1, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2d18:	7824      	ldrb	r4, [r4, #0]
    2d1a:	9702      	str	r7, [sp, #8]
  if (lap<2) lap++; else lap=0;
    2d1c:	2700      	movs	r7, #0
    2d1e:	702f      	strb	r7, [r5, #0]
  K1=RHp2;
    2d20:	4d97      	ldr	r5, [pc, #604]	; (2f80 <readSwitches()+0x2cc>)
    2d22:	f885 c000 	strb.w	ip, [r5]
  K2=LHp2;
    2d26:	4d97      	ldr	r5, [pc, #604]	; (2f84 <readSwitches()+0x2d0>)
    2d28:	f885 a000 	strb.w	sl, [r5]
  K3=LHp3;
    2d2c:	4d96      	ldr	r5, [pc, #600]	; (2f88 <readSwitches()+0x2d4>)
    2d2e:	702b      	strb	r3, [r5, #0]
  K4=LHp1;
    2d30:	4d96      	ldr	r5, [pc, #600]	; (2f8c <readSwitches()+0x2d8>)
    2d32:	702a      	strb	r2, [r5, #0]
  K5=RHp1;
    2d34:	4d96      	ldr	r5, [pc, #600]	; (2f90 <readSwitches()+0x2dc>)
    2d36:	7028      	strb	r0, [r5, #0]
  K6=RHp2;
    2d38:	4d96      	ldr	r5, [pc, #600]	; (2f94 <readSwitches()+0x2e0>)
    2d3a:	f885 c000 	strb.w	ip, [r5]
  K7=RHp3;
    2d3e:	4d96      	ldr	r5, [pc, #600]	; (2f98 <readSwitches()+0x2e4>)
    2d40:	7029      	strb	r1, [r5, #0]
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    2d42:	2e00      	cmp	r6, #0
    2d44:	f000 80d0 	beq.w	2ee8 <readSwitches()+0x234>
  int qTransp = ((pinkyKey && (pinkySetting < 25)) ? pinkySetting-12 : 0) + ((LHp3 && lpinky3) ? lpinky3-13 : 0);
    2d48:	4d94      	ldr	r5, [pc, #592]	; (2f9c <readSwitches()+0x2e8>)
    2d4a:	882d      	ldrh	r5, [r5, #0]
    2d4c:	9505      	str	r5, [sp, #20]
    2d4e:	462e      	mov	r6, r5
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    2d50:	4d93      	ldr	r5, [pc, #588]	; (2fa0 <readSwitches()+0x2ec>)
    2d52:	2701      	movs	r7, #1
  int qTransp = ((pinkyKey && (pinkySetting < 25)) ? pinkySetting-12 : 0) + ((LHp3 && lpinky3) ? lpinky3-13 : 0);
    2d54:	2e18      	cmp	r6, #24
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    2d56:	702f      	strb	r7, [r5, #0]
  int qTransp = ((pinkyKey && (pinkySetting < 25)) ? pinkySetting-12 : 0) + ((LHp3 && lpinky3) ? lpinky3-13 : 0);
    2d58:	f200 80d0 	bhi.w	2efc <readSwitches()+0x248>
    2d5c:	9d05      	ldr	r5, [sp, #20]
    2d5e:	2701      	movs	r7, #1
    2d60:	f1a5 060c 	sub.w	r6, r5, #12
    2d64:	b123      	cbz	r3, 2d70 <readSwitches()+0xbc>
    2d66:	4b8f      	ldr	r3, [pc, #572]	; (2fa4 <readSwitches()+0x2f0>)
    2d68:	881d      	ldrh	r5, [r3, #0]
    2d6a:	2d00      	cmp	r5, #0
    2d6c:	f040 8331 	bne.w	33d2 <readSwitches()+0x71e>
  if (0==fingering){ //EWI standard fingering
    2d70:	4b8d      	ldr	r3, [pc, #564]	; (2fa8 <readSwitches()+0x2f4>)
    2d72:	881b      	ldrh	r3, [r3, #0]
    2d74:	2b00      	cmp	r3, #0
    2d76:	f040 80c3 	bne.w	2f00 <readSwitches()+0x24c>
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2d7a:	4b8c      	ldr	r3, [pc, #560]	; (2fac <readSwitches()+0x2f8>)
    2d7c:	4d8c      	ldr	r5, [pc, #560]	; (2fb0 <readSwitches()+0x2fc>)
    2d7e:	781b      	ldrb	r3, [r3, #0]
    2d80:	782d      	ldrb	r5, [r5, #0]
    2d82:	3301      	adds	r3, #1
    2d84:	eba3 034e 	sub.w	r3, r3, lr, lsl #1
    2d88:	2d00      	cmp	r5, #0
    2d8a:	f000 80c4 	beq.w	2f16 <readSwitches()+0x262>
    2d8e:	f1be 0f00 	cmp.w	lr, #0
    2d92:	f000 8330 	beq.w	33f6 <readSwitches()+0x742>
    2d96:	2c00      	cmp	r4, #0
    2d98:	f040 84f1 	bne.w	377e <readSwitches()+0xaca>
    2d9c:	3b01      	subs	r3, #1
    2d9e:	4c85      	ldr	r4, [pc, #532]	; (2fb4 <readSwitches()+0x300>)
    2da0:	9d04      	ldr	r5, [sp, #16]
    2da2:	7824      	ldrb	r4, [r4, #0]
    2da4:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
    2da8:	4413      	add	r3, r2
    2daa:	eba3 030a 	sub.w	r3, r3, sl
    2dae:	b115      	cbz	r5, 2db6 <readSwitches()+0x102>
    2db0:	2a00      	cmp	r2, #0
    2db2:	f000 8345 	beq.w	3440 <readSwitches()+0x78c>
    2db6:	eba3 0308 	sub.w	r3, r3, r8
    2dba:	f1b8 0f00 	cmp.w	r8, #0
    2dbe:	d002      	beq.n	2dc6 <readSwitches()+0x112>
    2dc0:	2c00      	cmp	r4, #0
    2dc2:	f040 8339 	bne.w	3438 <readSwitches()+0x784>
    2dc6:	9a01      	ldr	r2, [sp, #4]
    2dc8:	1a9b      	subs	r3, r3, r2
    2dca:	eba3 034b 	sub.w	r3, r3, fp, lsl #1
    2dce:	9a03      	ldr	r2, [sp, #12]
    2dd0:	4403      	add	r3, r0
    2dd2:	eba3 030c 	sub.w	r3, r3, ip
    2dd6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    2dda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2dde:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    2de2:	4b75      	ldr	r3, [pc, #468]	; (2fb8 <readSwitches()+0x304>)
      - LHp2 - 2*RHp2               // Trill keys -1 and -2 
      + (6-octaveR)*12;       //Octave rollers, reversed    
  }
  

  int fingeredNoteRead = fingeredNoteUntransposed + (octave - 3) * 12 + transpose - 12 + qTransp + harmonicResult[harmSelect][harmonics] + brHarmonicResult[brHarmSelect][brHarmonics]; //lip sensor and breath harmonics
    2de4:	4875      	ldr	r0, [pc, #468]	; (2fbc <readSwitches()+0x308>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2de6:	6019      	str	r1, [r3, #0]
  int fingeredNoteRead = fingeredNoteUntransposed + (octave - 3) * 12 + transpose - 12 + qTransp + harmonicResult[harmSelect][harmonics] + brHarmonicResult[brHarmSelect][brHarmonics]; //lip sensor and breath harmonics
    2de8:	4b75      	ldr	r3, [pc, #468]	; (2fc0 <readSwitches()+0x30c>)
    2dea:	4c76      	ldr	r4, [pc, #472]	; (2fc4 <readSwitches()+0x310>)
    2dec:	881a      	ldrh	r2, [r3, #0]
    2dee:	6800      	ldr	r0, [r0, #0]
    2df0:	8824      	ldrh	r4, [r4, #0]
    2df2:	3a03      	subs	r2, #3
    2df4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    2df8:	4a73      	ldr	r2, [pc, #460]	; (2fc8 <readSwitches()+0x314>)
    2dfa:	8812      	ldrh	r2, [r2, #0]
    2dfc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    2e00:	4410      	add	r0, r2
    2e02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2e06:	4a71      	ldr	r2, [pc, #452]	; (2fcc <readSwitches()+0x318>)
    2e08:	4423      	add	r3, r4
    2e0a:	4c71      	ldr	r4, [pc, #452]	; (2fd0 <readSwitches()+0x31c>)
    2e0c:	8812      	ldrh	r2, [r2, #0]
    2e0e:	6824      	ldr	r4, [r4, #0]
    2e10:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    2e14:	4422      	add	r2, r4
    2e16:	4c6f      	ldr	r4, [pc, #444]	; (2fd4 <readSwitches()+0x320>)
    2e18:	3b0c      	subs	r3, #12
    2e1a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    2e1e:	4433      	add	r3, r6
    2e20:	4403      	add	r3, r0
    2e22:	486d      	ldr	r0, [pc, #436]	; (2fd8 <readSwitches()+0x324>)
    2e24:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    2e28:	4413      	add	r3, r2

  if (pinkyKey) pitchlatch = fingeredNoteUntransposed;  //use pitchlatch to make settings based on note fingered
    2e2a:	b10f      	cbz	r7, 2e30 <readSwitches()+0x17c>
    2e2c:	4a6b      	ldr	r2, [pc, #428]	; (2fdc <readSwitches()+0x328>)
    2e2e:	6011      	str	r1, [r2, #0]

#endif
 
  /* ws: inserted Glissando feature between fingeredNoteRead and fingeredNote  */
  // create glissando notes between previous note and current one if not chording and still blowing
  glissEnable = (glissSetting > 7);
    2e30:	496b      	ldr	r1, [pc, #428]	; (2fe0 <readSwitches()+0x32c>)
    2e32:	4a6c      	ldr	r2, [pc, #432]	; (2fe4 <readSwitches()+0x330>)
    2e34:	8809      	ldrh	r1, [r1, #0]
    2e36:	2907      	cmp	r1, #7
    2e38:	bf8c      	ite	hi
    2e3a:	2001      	movhi	r0, #1
    2e3c:	2000      	movls	r0, #0
    2e3e:	7010      	strb	r0, [r2, #0]
  glissTime = glissEnable ? glissSetting : 0;
    2e40:	f240 80ec 	bls.w	301c <readSwitches()+0x368>
  //glissActive = glissEnable&&(mainState == NOTE_ON)&&(glissInterval>0)&&(slurSustain == 0)&&(parallelChord == 0)&&(subOctaveDouble == 0)&&(slurSostenuto==0);
  glissActive = glissEnable&&(mainState == NOTE_ON)&&(glissInterval>0)&&(slurSustain == 0)&&(slurSostenuto==0);
    2e44:	4a68      	ldr	r2, [pc, #416]	; (2fe8 <readSwitches()+0x334>)
  glissTime = glissEnable ? glissSetting : 0;
    2e46:	4869      	ldr	r0, [pc, #420]	; (2fec <readSwitches()+0x338>)
  glissActive = glissEnable&&(mainState == NOTE_ON)&&(glissInterval>0)&&(slurSustain == 0)&&(slurSostenuto==0);
    2e48:	6812      	ldr	r2, [r2, #0]
  glissTime = glissEnable ? glissSetting : 0;
    2e4a:	8001      	strh	r1, [r0, #0]
  glissActive = glissEnable&&(mainState == NOTE_ON)&&(glissInterval>0)&&(slurSustain == 0)&&(slurSostenuto==0);
    2e4c:	2a03      	cmp	r2, #3
    2e4e:	f000 846c 	beq.w	372a <readSwitches()+0xa76>
    2e52:	2500      	movs	r5, #0
    2e54:	4a66      	ldr	r2, [pc, #408]	; (2ff0 <readSwitches()+0x33c>)

  if (fingeredNoteRead != lastFingering) { //
    2e56:	4c67      	ldr	r4, [pc, #412]	; (2ff4 <readSwitches()+0x340>)
  glissActive = glissEnable&&(mainState == NOTE_ON)&&(glissInterval>0)&&(slurSustain == 0)&&(slurSostenuto==0);
    2e58:	7015      	strb	r5, [r2, #0]
  if (fingeredNoteRead != lastFingering) { //
    2e5a:	6822      	ldr	r2, [r4, #0]
    2e5c:	429a      	cmp	r2, r3
    2e5e:	f000 80e3 	beq.w	3028 <readSwitches()+0x374>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e62:	4865      	ldr	r0, [pc, #404]	; (2ff8 <readSwitches()+0x344>)
    // reset the debouncing timer
    lastDeglitchTime = millis();
    2e64:	4f65      	ldr	r7, [pc, #404]	; (2ffc <readSwitches()+0x348>)
    2e66:	6802      	ldr	r2, [r0, #0]
    2e68:	9206      	str	r2, [sp, #24]
	return ret;
    2e6a:	9e06      	ldr	r6, [sp, #24]
    newFingeringFirstTimeFlag = true;  //ws
    2e6c:	4a64      	ldr	r2, [pc, #400]	; (3000 <readSwitches()+0x34c>)
    lastDeglitchTime = millis();
    2e6e:	603e      	str	r6, [r7, #0]
    newFingeringFirstTimeFlag = true;  //ws
    2e70:	2701      	movs	r7, #1
    2e72:	7017      	strb	r7, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e74:	6802      	ldr	r2, [r0, #0]
    2e76:	9207      	str	r2, [sp, #28]
  }
  if ((millis() - lastDeglitchTime) > deglitch) {
    2e78:	4a62      	ldr	r2, [pc, #392]	; (3004 <readSwitches()+0x350>)
    2e7a:	8817      	ldrh	r7, [r2, #0]
	return ret;
    2e7c:	9a07      	ldr	r2, [sp, #28]
    2e7e:	1b92      	subs	r2, r2, r6
    2e80:	42ba      	cmp	r2, r7
    2e82:	d951      	bls.n	2f28 <readSwitches()+0x274>
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state
    // fingeredNote = fingeredNoteRead; //ws
    glissTargetInterval = fingeredNoteRead - glissTargetNote; //ws measure inteval between new fingered note and last target note
    2e84:	4e60      	ldr	r6, [pc, #384]	; (3008 <readSwitches()+0x354>)
    2e86:	4f61      	ldr	r7, [pc, #388]	; (300c <readSwitches()+0x358>)
    2e88:	6832      	ldr	r2, [r6, #0]
    glissTargetNote = fingeredNoteRead;
    2e8a:	6033      	str	r3, [r6, #0]
    glissTargetInterval = fingeredNoteRead - glissTargetNote; //ws measure inteval between new fingered note and last target note
    2e8c:	1a9a      	subs	r2, r3, r2
    2e8e:	603a      	str	r2, [r7, #0]
    if (glissActive && newFingeringFirstTimeFlag) {
    2e90:	2d00      	cmp	r5, #0
    2e92:	f000 80cd 	beq.w	3030 <readSwitches()+0x37c>
    2e96:	4a5a      	ldr	r2, [pc, #360]	; (3000 <readSwitches()+0x34c>)
    2e98:	7815      	ldrb	r5, [r2, #0]
    2e9a:	2d00      	cmp	r5, #0
    2e9c:	f040 82a2 	bne.w	33e4 <readSwitches()+0x730>
      lastGlissTime = millis() + glissTime; // ensure new start of gliss
      newFingeringFirstTimeFlag = false;
    }
  }
  lastFingering = fingeredNoteRead;
    2ea0:	6023      	str	r3, [r4, #0]
   * if glissTargetInterval is bigger than glissInterval gliss toward target at 
   * glissInterval unless too close, then gliss by 1 semitone. 
   * If gliss started closer than glissInterval, don't gliss
  */
  if (glissActive) {
    glissNoteDiff = glissTargetNote - glissCurrentNote;
    2ea2:	4d5b      	ldr	r5, [pc, #364]	; (3010 <readSwitches()+0x35c>)
    2ea4:	682a      	ldr	r2, [r5, #0]
    if (glissTargetNote != glissCurrentNote){
    2ea6:	429a      	cmp	r2, r3
    2ea8:	d045      	beq.n	2f36 <readSwitches()+0x282>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2eaa:	6804      	ldr	r4, [r0, #0]
      if ((millis() - lastGlissTime) >= glissTime) {
    2eac:	4f59      	ldr	r7, [pc, #356]	; (3014 <readSwitches()+0x360>)
    2eae:	9409      	str	r4, [sp, #36]	; 0x24
	return ret;
    2eb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    2eb2:	683e      	ldr	r6, [r7, #0]
    2eb4:	1ba4      	subs	r4, r4, r6
    2eb6:	428c      	cmp	r4, r1
    2eb8:	f0c0 828e 	bcc.w	33d8 <readSwitches()+0x724>
        if( glissNoteDiff < 0 ) //current higher than target
    2ebc:	1a99      	subs	r1, r3, r2
    2ebe:	f100 8443 	bmi.w	3748 <readSwitches()+0xa94>
            glissCurrentNote -= (abs(glissNoteDiff) >= abs(glissInterval)) 
                            ? glissInterval : abs(glissTargetInterval) > abs(glissInterval) ? 1 : abs(glissNoteDiff);
        }
        else if ( glissNoteDiff > 0)  // target higher than current
        {
            glissCurrentNote += (abs(glissNoteDiff) >= abs(glissInterval)) 
    2ec2:	4c55      	ldr	r4, [pc, #340]	; (3018 <readSwitches()+0x364>)
    2ec4:	6826      	ldr	r6, [r4, #0]
    2ec6:	ea86 74e6 	eor.w	r4, r6, r6, asr #31
    2eca:	eba4 74e6 	sub.w	r4, r4, r6, asr #31
                            ? glissInterval : abs(glissTargetInterval) > abs(glissInterval) ? 1 : abs(glissNoteDiff);                             
    2ece:	428c      	cmp	r4, r1
    2ed0:	f340 8480 	ble.w	37d4 <readSwitches()+0xb20>
    2ed4:	494d      	ldr	r1, [pc, #308]	; (300c <readSwitches()+0x358>)
    2ed6:	6809      	ldr	r1, [r1, #0]
    2ed8:	2900      	cmp	r1, #0
    2eda:	bfb8      	it	lt
    2edc:	4249      	neglt	r1, r1
    2ede:	428c      	cmp	r4, r1
            glissCurrentNote += (abs(glissNoteDiff) >= abs(glissInterval)) 
    2ee0:	bfb8      	it	lt
    2ee2:	1c53      	addlt	r3, r2, #1
    2ee4:	f000 bc41 	b.w	376a <readSwitches()+0xab6>
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    2ee8:	4d2e      	ldr	r5, [pc, #184]	; (2fa4 <readSwitches()+0x2f0>)
    2eea:	882d      	ldrh	r5, [r5, #0]
    2eec:	2d0d      	cmp	r5, #13
    2eee:	f000 8260 	beq.w	33b2 <readSwitches()+0x6fe>
    2ef2:	4d2b      	ldr	r5, [pc, #172]	; (2fa0 <readSwitches()+0x2ec>)
    2ef4:	2700      	movs	r7, #0
    2ef6:	702f      	strb	r7, [r5, #0]
  int qTransp = ((pinkyKey && (pinkySetting < 25)) ? pinkySetting-12 : 0) + ((LHp3 && lpinky3) ? lpinky3-13 : 0);
    2ef8:	463e      	mov	r6, r7
    2efa:	e733      	b.n	2d64 <readSwitches()+0xb0>
    2efc:	2600      	movs	r6, #0
    2efe:	e731      	b.n	2d64 <readSwitches()+0xb0>
  } else if (1==fingering) { //EWX extended EWI fingering - lift LH1 for extended range up, touch RHp3 for extended range down
    2f00:	3b01      	subs	r3, #1
    2f02:	2b04      	cmp	r3, #4
    2f04:	f200 84f8 	bhi.w	38f8 <readSwitches()+0xc44>
    2f08:	e8df f013 	tbh	[pc, r3, lsl #1]
    2f0c:	036a0305 	.word	0x036a0305
    2f10:	02c702e7 	.word	0x02c702e7
    2f14:	029c      	.short	0x029c
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    2f16:	1b1b      	subs	r3, r3, r4
    2f18:	2c00      	cmp	r4, #0
    2f1a:	f43f af40 	beq.w	2d9e <readSwitches()+0xea>
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+9*(!LH1 && LH2 && LH3)-10*(!RH3 && RHp3)+octaveR*12;
    2f1e:	f1be 0f00 	cmp.w	lr, #0
    2f22:	bf18      	it	ne
    2f24:	3b01      	subne	r3, #1
    2f26:	e73a      	b.n	2d9e <readSwitches()+0xea>
  lastFingering = fingeredNoteRead;
    2f28:	6023      	str	r3, [r4, #0]
    glissTargetInterval = fingeredNoteRead - glissTargetNote; //ws measure inteval between new fingered note and last target note
    2f2a:	4b37      	ldr	r3, [pc, #220]	; (3008 <readSwitches()+0x354>)
    2f2c:	681b      	ldr	r3, [r3, #0]
  if (glissActive) {
    2f2e:	2d00      	cmp	r5, #0
    2f30:	d1b7      	bne.n	2ea2 <readSwitches()+0x1ee>
        lastGlissTime = millis();
      }
    }
  }
  else{
    glissCurrentNote = glissTargetNote; // pass thru the fingeredNoteRead
    2f32:	4a37      	ldr	r2, [pc, #220]	; (3010 <readSwitches()+0x35c>)
    2f34:	6013      	str	r3, [r2, #0]
  }
  fingeredNote = glissCurrentNote;
    2f36:	9a02      	ldr	r2, [sp, #8]
    2f38:	6013      	str	r3, [r2, #0]


}
    2f3a:	b017      	add	sp, #92	; 0x5c
    2f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f40:	1fff9af8 	.word	0x1fff9af8
    2f44:	1fff9916 	.word	0x1fff9916
    2f48:	1fff9914 	.word	0x1fff9914
    2f4c:	1fff9922 	.word	0x1fff9922
    2f50:	1fff9928 	.word	0x1fff9928
    2f54:	1fff9923 	.word	0x1fff9923
    2f58:	1fff9926 	.word	0x1fff9926
    2f5c:	1fff9924 	.word	0x1fff9924
    2f60:	1fff9925 	.word	0x1fff9925
    2f64:	1fff990f 	.word	0x1fff990f
    2f68:	1fff9b38 	.word	0x1fff9b38
    2f6c:	1fff9915 	.word	0x1fff9915
    2f70:	1fff9913 	.word	0x1fff9913
    2f74:	1fff9910 	.word	0x1fff9910
    2f78:	1fff9927 	.word	0x1fff9927
    2f7c:	1fff9ab0 	.word	0x1fff9ab0
    2f80:	1fff9908 	.word	0x1fff9908
    2f84:	1fff9909 	.word	0x1fff9909
    2f88:	1fff990a 	.word	0x1fff990a
    2f8c:	1fff990b 	.word	0x1fff990b
    2f90:	1fff990c 	.word	0x1fff990c
    2f94:	1fff990d 	.word	0x1fff990d
    2f98:	1fff990e 	.word	0x1fff990e
    2f9c:	1fff9b74 	.word	0x1fff9b74
    2fa0:	1fff9b72 	.word	0x1fff9b72
    2fa4:	1fff9b2a 	.word	0x1fff9b2a
    2fa8:	1fff9ab8 	.word	0x1fff9ab8
    2fac:	1fff8e6c 	.word	0x1fff8e6c
    2fb0:	1fff9912 	.word	0x1fff9912
    2fb4:	1fff9911 	.word	0x1fff9911
    2fb8:	1fff9ab4 	.word	0x1fff9ab4
    2fbc:	1fff9ae8 	.word	0x1fff9ae8
    2fc0:	1fff9b36 	.word	0x1fff9b36
    2fc4:	1fff9bec 	.word	0x1fff9bec
    2fc8:	1fff9ae2 	.word	0x1fff9ae2
    2fcc:	1fff9a14 	.word	0x1fff9a14
    2fd0:	1fff9a18 	.word	0x1fff9a18
    2fd4:	00012df0 	.word	0x00012df0
    2fd8:	00013198 	.word	0x00013198
    2fdc:	1fff9b7c 	.word	0x1fff9b7c
    2fe0:	1fff9ad4 	.word	0x1fff9ad4
    2fe4:	1fff9acc 	.word	0x1fff9acc
    2fe8:	1fff9b30 	.word	0x1fff9b30
    2fec:	1fff8dc4 	.word	0x1fff8dc4
    2ff0:	1fff9ac4 	.word	0x1fff9ac4
    2ff4:	1fff9b00 	.word	0x1fff9b00
    2ff8:	1fff9d70 	.word	0x1fff9d70
    2ffc:	1fff9afc 	.word	0x1fff9afc
    3000:	1fff9b34 	.word	0x1fff9b34
    3004:	1fff9a86 	.word	0x1fff9a86
    3008:	1fff9adc 	.word	0x1fff9adc
    300c:	1fff9ad8 	.word	0x1fff9ad8
    3010:	1fff9ac8 	.word	0x1fff9ac8
    3014:	1fff9b04 	.word	0x1fff9b04
    3018:	1fff9ad0 	.word	0x1fff9ad0
  glissTime = glissEnable ? glissSetting : 0;
    301c:	4885      	ldr	r0, [pc, #532]	; (3234 <readSwitches()+0x580>)
    301e:	2200      	movs	r2, #0
    3020:	4611      	mov	r1, r2
    3022:	8002      	strh	r2, [r0, #0]
  glissActive = glissEnable&&(mainState == NOTE_ON)&&(glissInterval>0)&&(slurSustain == 0)&&(slurSostenuto==0);
    3024:	4615      	mov	r5, r2
    3026:	e715      	b.n	2e54 <readSwitches()+0x1a0>
  if ((millis() - lastDeglitchTime) > deglitch) {
    3028:	4a83      	ldr	r2, [pc, #524]	; (3238 <readSwitches()+0x584>)
    302a:	4884      	ldr	r0, [pc, #528]	; (323c <readSwitches()+0x588>)
    302c:	6816      	ldr	r6, [r2, #0]
    302e:	e721      	b.n	2e74 <readSwitches()+0x1c0>
  lastFingering = fingeredNoteRead;
    3030:	6023      	str	r3, [r4, #0]
  if (glissActive) {
    3032:	e77e      	b.n	2f32 <readSwitches()+0x27e>
    3034:	f8df 9208 	ldr.w	r9, [pc, #520]	; 3240 <readSwitches()+0x58c>
        touchValueLH[i]=touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300;
    3038:	4f82      	ldr	r7, [pc, #520]	; (3244 <readSwitches()+0x590>)
    303a:	4e83      	ldr	r6, [pc, #524]	; (3248 <readSwitches()+0x594>)
    303c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
  switch (lap){
    3040:	2400      	movs	r4, #0
        touchValueLH[i]=touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300;
    3042:	b2e1      	uxtb	r1, r4
    3044:	4638      	mov	r0, r7
    3046:	f008 fa87 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    304a:	f859 3b04 	ldr.w	r3, [r9], #4
    304e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    3052:	fb03 f000 	mul.w	r0, r3, r0
    3056:	fb86 2300 	smull	r2, r3, r6, r0
      for (byte i=0; i<12; i++){
    305a:	3401      	adds	r4, #1
        touchValueLH[i]=touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300;
    305c:	17c0      	asrs	r0, r0, #31
    305e:	ebc0 1063 	rsb	r0, r0, r3, asr #5
      for (byte i=0; i<12; i++){
    3062:	2c0c      	cmp	r4, #12
        touchValueLH[i]=touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300;
    3064:	f848 0b04 	str.w	r0, [r8], #4
      for (byte i=0; i<12; i++){
    3068:	d1eb      	bne.n	3042 <readSwitches()+0x38e>
      LHs=(touchValueLH[LHsPin] < ctouchThrVal);
    306a:	4b78      	ldr	r3, [pc, #480]	; (324c <readSwitches()+0x598>)
    306c:	9e12      	ldr	r6, [sp, #72]	; 0x48
    306e:	881b      	ldrh	r3, [r3, #0]
      LHb=(touchValueLH[LHbPin] < ctouchThrVal);
    3070:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      LH1=(touchValueLH[LH1Pin] < ctouchThrVal);
    3072:	9a11      	ldr	r2, [sp, #68]	; 0x44
      LH2=(touchValueLH[LH2Pin] < ctouchThrVal);
    3074:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      LH3=(touchValueLH[LH3Pin] < ctouchThrVal);
    3076:	9814      	ldr	r0, [sp, #80]	; 0x50
      LHs=(touchValueLH[LHsPin] < ctouchThrVal);
    3078:	4975      	ldr	r1, [pc, #468]	; (3250 <readSwitches()+0x59c>)
    307a:	429e      	cmp	r6, r3
    307c:	bfac      	ite	ge
    307e:	2600      	movge	r6, #0
    3080:	2601      	movlt	r6, #1
      LHb=(touchValueLH[LHbPin] < ctouchThrVal);
    3082:	42bb      	cmp	r3, r7
    3084:	bfd4      	ite	le
    3086:	2700      	movle	r7, #0
    3088:	2701      	movgt	r7, #1
      LH1=(touchValueLH[LH1Pin] < ctouchThrVal);
    308a:	4293      	cmp	r3, r2
    308c:	bfd8      	it	le
    308e:	f04f 0e00 	movle.w	lr, #0
      LHp1=(touchValueLH[LHp1Pin] < ctouchThrVal);
    3092:	9a15      	ldr	r2, [sp, #84]	; 0x54
      LHs=(touchValueLH[LHsPin] < ctouchThrVal);
    3094:	700e      	strb	r6, [r1, #0]
      LH1=(touchValueLH[LH1Pin] < ctouchThrVal);
    3096:	bfc8      	it	gt
    3098:	f04f 0e01 	movgt.w	lr, #1
      LH2=(touchValueLH[LH2Pin] < ctouchThrVal);
    309c:	42a3      	cmp	r3, r4
      LHp2=(touchValueLH[LHp2Pin] < ctouchThrVal);
    309e:	990d      	ldr	r1, [sp, #52]	; 0x34
      LH2=(touchValueLH[LH2Pin] < ctouchThrVal);
    30a0:	bfd4      	ite	le
    30a2:	2400      	movle	r4, #0
    30a4:	2401      	movgt	r4, #1
      LH3=(touchValueLH[LH3Pin] < ctouchThrVal);
    30a6:	4283      	cmp	r3, r0
    30a8:	bfd4      	ite	le
    30aa:	2000      	movle	r0, #0
    30ac:	2001      	movgt	r0, #1
      LHp1=(touchValueLH[LHp1Pin] < ctouchThrVal);
    30ae:	4293      	cmp	r3, r2
    30b0:	bfd4      	ite	le
    30b2:	2200      	movle	r2, #0
    30b4:	2201      	movgt	r2, #1
      LHp2=(touchValueLH[LHp2Pin] < ctouchThrVal);
    30b6:	428b      	cmp	r3, r1
      LHp3=(touchValueLH[LHp3Pin] < ctouchThrVal);
    30b8:	990e      	ldr	r1, [sp, #56]	; 0x38
      LHp2=(touchValueLH[LHp2Pin] < ctouchThrVal);
    30ba:	bfd4      	ite	le
    30bc:	f04f 0a00 	movle.w	sl, #0
    30c0:	f04f 0a01 	movgt.w	sl, #1
      LHp3=(touchValueLH[LHp3Pin] < ctouchThrVal);
    30c4:	428b      	cmp	r3, r1
      LHb=(touchValueLH[LHbPin] < ctouchThrVal);
    30c6:	4963      	ldr	r1, [pc, #396]	; (3254 <readSwitches()+0x5a0>)
    30c8:	700f      	strb	r7, [r1, #0]
      LH1=(touchValueLH[LH1Pin] < ctouchThrVal);
    30ca:	4963      	ldr	r1, [pc, #396]	; (3258 <readSwitches()+0x5a4>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    30cc:	4f63      	ldr	r7, [pc, #396]	; (325c <readSwitches()+0x5a8>)
      LH1=(touchValueLH[LH1Pin] < ctouchThrVal);
    30ce:	f881 e000 	strb.w	lr, [r1]
      LH2=(touchValueLH[LH2Pin] < ctouchThrVal);
    30d2:	4963      	ldr	r1, [pc, #396]	; (3260 <readSwitches()+0x5ac>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    30d4:	f897 8000 	ldrb.w	r8, [r7]
      LH2=(touchValueLH[LH2Pin] < ctouchThrVal);
    30d8:	700c      	strb	r4, [r1, #0]
      LH3=(touchValueLH[LH3Pin] < ctouchThrVal);
    30da:	4962      	ldr	r1, [pc, #392]	; (3264 <readSwitches()+0x5b0>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    30dc:	4f62      	ldr	r7, [pc, #392]	; (3268 <readSwitches()+0x5b4>)
      LH3=(touchValueLH[LH3Pin] < ctouchThrVal);
    30de:	7008      	strb	r0, [r1, #0]
      LHp1=(touchValueLH[LHp1Pin] < ctouchThrVal);
    30e0:	4962      	ldr	r1, [pc, #392]	; (326c <readSwitches()+0x5b8>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    30e2:	783f      	ldrb	r7, [r7, #0]
      LHp1=(touchValueLH[LHp1Pin] < ctouchThrVal);
    30e4:	700a      	strb	r2, [r1, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    30e6:	9701      	str	r7, [sp, #4]
      LHp2=(touchValueLH[LHp2Pin] < ctouchThrVal);
    30e8:	4961      	ldr	r1, [pc, #388]	; (3270 <readSwitches()+0x5bc>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    30ea:	4f62      	ldr	r7, [pc, #392]	; (3274 <readSwitches()+0x5c0>)
      LHp2=(touchValueLH[LHp2Pin] < ctouchThrVal);
    30ec:	f881 a000 	strb.w	sl, [r1]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    30f0:	f897 b000 	ldrb.w	fp, [r7]
      LHp3=(touchValueLH[LHp3Pin] < ctouchThrVal);
    30f4:	4960      	ldr	r1, [pc, #384]	; (3278 <readSwitches()+0x5c4>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    30f6:	4f61      	ldr	r7, [pc, #388]	; (327c <readSwitches()+0x5c8>)
      LHp3=(touchValueLH[LHp3Pin] < ctouchThrVal);
    30f8:	bfd4      	ite	le
    30fa:	2300      	movle	r3, #0
    30fc:	2301      	movgt	r3, #1
    30fe:	700b      	strb	r3, [r1, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3100:	783f      	ldrb	r7, [r7, #0]
  K1=RHp2;
    3102:	495f      	ldr	r1, [pc, #380]	; (3280 <readSwitches()+0x5cc>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3104:	9704      	str	r7, [sp, #16]
    3106:	4f5f      	ldr	r7, [pc, #380]	; (3284 <readSwitches()+0x5d0>)
  K1=RHp2;
    3108:	f891 c000 	ldrb.w	ip, [r1]
  K5=RHp1;
    310c:	495e      	ldr	r1, [pc, #376]	; (3288 <readSwitches()+0x5d4>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    310e:	783f      	ldrb	r7, [r7, #0]
  K5=RHp1;
    3110:	7808      	ldrb	r0, [r1, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3112:	9703      	str	r7, [sp, #12]
  K7=RHp3;
    3114:	495d      	ldr	r1, [pc, #372]	; (328c <readSwitches()+0x5d8>)
  if (lap<2) lap++; else lap=0;
    3116:	782f      	ldrb	r7, [r5, #0]
  K7=RHp3;
    3118:	7809      	ldrb	r1, [r1, #0]
  if (lap<2) lap++; else lap=0;
    311a:	46b9      	mov	r9, r7
    311c:	4f5c      	ldr	r7, [pc, #368]	; (3290 <readSwitches()+0x5dc>)
    311e:	9702      	str	r7, [sp, #8]
    3120:	464f      	mov	r7, r9
    3122:	2f01      	cmp	r7, #1
    3124:	bf9a      	itte	ls
    3126:	3701      	addls	r7, #1
    3128:	b2ff      	uxtbls	r7, r7
    312a:	2700      	movhi	r7, #0
    312c:	e5f7      	b.n	2d1e <readSwitches()+0x6a>
    312e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 3294 <readSwitches()+0x5e0>
        touchValueRH[i]=touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300;
    3132:	4f59      	ldr	r7, [pc, #356]	; (3298 <readSwitches()+0x5e4>)
    3134:	4e44      	ldr	r6, [pc, #272]	; (3248 <readSwitches()+0x594>)
    3136:	f10d 0828 	add.w	r8, sp, #40	; 0x28
  switch (lap){
    313a:	2400      	movs	r4, #0
        touchValueRH[i]=touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300;
    313c:	b2e1      	uxtb	r1, r4
    313e:	4638      	mov	r0, r7
    3140:	f008 fa0a 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    3144:	f859 3b04 	ldr.w	r3, [r9], #4
    3148:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    314c:	fb03 f000 	mul.w	r0, r3, r0
    3150:	fb86 2300 	smull	r2, r3, r6, r0
      for (byte i=0; i<12; i++){
    3154:	3401      	adds	r4, #1
        touchValueRH[i]=touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300;
    3156:	17c0      	asrs	r0, r0, #31
    3158:	ebc0 1063 	rsb	r0, r0, r3, asr #5
      for (byte i=0; i<12; i++){
    315c:	2c0c      	cmp	r4, #12
        touchValueRH[i]=touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300;
    315e:	f848 0b04 	str.w	r0, [r8], #4
      for (byte i=0; i<12; i++){
    3162:	d1eb      	bne.n	313c <readSwitches()+0x488>
      RHs=(touchValueRH[RHsPin] < ctouchThrVal);
    3164:	4b39      	ldr	r3, [pc, #228]	; (324c <readSwitches()+0x598>)
    3166:	990d      	ldr	r1, [sp, #52]	; 0x34
    3168:	881c      	ldrh	r4, [r3, #0]
    316a:	4b44      	ldr	r3, [pc, #272]	; (327c <readSwitches()+0x5c8>)
      RH1=(touchValueRH[RH1Pin] < ctouchThrVal);
    316c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      RHp1=(touchValueRH[RHp1Pin] < ctouchThrVal);
    316e:	980a      	ldr	r0, [sp, #40]	; 0x28
      RHs=(touchValueRH[RHsPin] < ctouchThrVal);
    3170:	42a1      	cmp	r1, r4
    3172:	bfac      	ite	ge
    3174:	2100      	movge	r1, #0
    3176:	2101      	movlt	r1, #1
    3178:	7019      	strb	r1, [r3, #0]
      RH2=(touchValueRH[RH2Pin] < ctouchThrVal);
    317a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      RHs=(touchValueRH[RHsPin] < ctouchThrVal);
    317c:	9104      	str	r1, [sp, #16]
      RH1=(touchValueRH[RH1Pin] < ctouchThrVal);
    317e:	4294      	cmp	r4, r2
    3180:	bfd4      	ite	le
    3182:	f04f 0800 	movle.w	r8, #0
    3186:	f04f 0801 	movgt.w	r8, #1
      RH2=(touchValueRH[RH2Pin] < ctouchThrVal);
    318a:	429c      	cmp	r4, r3
    318c:	bfd4      	ite	le
    318e:	2300      	movle	r3, #0
    3190:	2301      	movgt	r3, #1
    3192:	9301      	str	r3, [sp, #4]
      RH3=(touchValueRH[RH3Pin] < ctouchThrVal);
    3194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      RH2=(touchValueRH[RH2Pin] < ctouchThrVal);
    3196:	9a01      	ldr	r2, [sp, #4]
      RHp3=(touchValueRH[RHp3Pin] < ctouchThrVal);
    3198:	9911      	ldr	r1, [sp, #68]	; 0x44
      RH3=(touchValueRH[RH3Pin] < ctouchThrVal);
    319a:	429c      	cmp	r4, r3
      RHp2=(touchValueRH[RHp2Pin] < ctouchThrVal);
    319c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      RH3=(touchValueRH[RH3Pin] < ctouchThrVal);
    319e:	bfd4      	ite	le
    31a0:	f04f 0b00 	movle.w	fp, #0
    31a4:	f04f 0b01 	movgt.w	fp, #1
      RHp1=(touchValueRH[RHp1Pin] < ctouchThrVal);
    31a8:	4284      	cmp	r4, r0
    31aa:	bfd4      	ite	le
    31ac:	2000      	movle	r0, #0
    31ae:	2001      	movgt	r0, #1
      RHp2=(touchValueRH[RHp2Pin] < ctouchThrVal);
    31b0:	429c      	cmp	r4, r3
      RH1=(touchValueRH[RH1Pin] < ctouchThrVal);
    31b2:	4b2a      	ldr	r3, [pc, #168]	; (325c <readSwitches()+0x5a8>)
    31b4:	f883 8000 	strb.w	r8, [r3]
      RH2=(touchValueRH[RH2Pin] < ctouchThrVal);
    31b8:	4b2b      	ldr	r3, [pc, #172]	; (3268 <readSwitches()+0x5b4>)
    31ba:	701a      	strb	r2, [r3, #0]
      RH3=(touchValueRH[RH3Pin] < ctouchThrVal);
    31bc:	4b2d      	ldr	r3, [pc, #180]	; (3274 <readSwitches()+0x5c0>)
    31be:	f883 b000 	strb.w	fp, [r3]
      RHp1=(touchValueRH[RHp1Pin] < ctouchThrVal);
    31c2:	4b31      	ldr	r3, [pc, #196]	; (3288 <readSwitches()+0x5d4>)
    31c4:	7018      	strb	r0, [r3, #0]
      RHp2=(touchValueRH[RHp2Pin] < ctouchThrVal);
    31c6:	4b2e      	ldr	r3, [pc, #184]	; (3280 <readSwitches()+0x5cc>)
    31c8:	bfd4      	ite	le
    31ca:	f04f 0c00 	movle.w	ip, #0
    31ce:	f04f 0c01 	movgt.w	ip, #1
    31d2:	f883 c000 	strb.w	ip, [r3]
      RHp3=(touchValueRH[RHp3Pin] < ctouchThrVal);
    31d6:	428c      	cmp	r4, r1
    31d8:	4b2c      	ldr	r3, [pc, #176]	; (328c <readSwitches()+0x5d8>)
    31da:	bfd4      	ite	le
    31dc:	2100      	movle	r1, #0
    31de:	2101      	movgt	r1, #1
    31e0:	7019      	strb	r1, [r3, #0]
      specialKey=(touchValueRH[spec1Pin] < ctouchThrVal) && (touchValueRH[spec2Pin] < ctouchThrVal);
    31e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    31e4:	429c      	cmp	r4, r3
    31e6:	f340 8129 	ble.w	343c <readSwitches()+0x788>
    31ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    31ec:	429c      	cmp	r4, r3
    31ee:	bfd4      	ite	le
    31f0:	2300      	movle	r3, #0
    31f2:	2301      	movgt	r3, #1
      patchKey=(touchValueRH[patchPin] < ctouchThrVal);
    31f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    31f6:	4294      	cmp	r4, r2
      specialKey=(touchValueRH[spec1Pin] < ctouchThrVal) && (touchValueRH[spec2Pin] < ctouchThrVal);
    31f8:	4a28      	ldr	r2, [pc, #160]	; (329c <readSwitches()+0x5e8>)
    31fa:	7013      	strb	r3, [r2, #0]
      patchKey=(touchValueRH[patchPin] < ctouchThrVal);
    31fc:	4b28      	ldr	r3, [pc, #160]	; (32a0 <readSwitches()+0x5ec>)
    31fe:	bfd4      	ite	le
    3200:	2400      	movle	r4, #0
    3202:	2401      	movgt	r4, #1
    3204:	701c      	strb	r4, [r3, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3206:	4b1f      	ldr	r3, [pc, #124]	; (3284 <readSwitches()+0x5d0>)
    3208:	781b      	ldrb	r3, [r3, #0]
    320a:	9303      	str	r3, [sp, #12]
    320c:	4b20      	ldr	r3, [pc, #128]	; (3290 <readSwitches()+0x5dc>)
    320e:	9302      	str	r3, [sp, #8]
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    3210:	4c0f      	ldr	r4, [pc, #60]	; (3250 <readSwitches()+0x59c>)
  K2=LHp2;
    3212:	4b17      	ldr	r3, [pc, #92]	; (3270 <readSwitches()+0x5bc>)
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    3214:	7826      	ldrb	r6, [r4, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3216:	4c10      	ldr	r4, [pc, #64]	; (3258 <readSwitches()+0x5a4>)
  K2=LHp2;
    3218:	f893 a000 	ldrb.w	sl, [r3]
  K4=LHp1;
    321c:	4a13      	ldr	r2, [pc, #76]	; (326c <readSwitches()+0x5b8>)
  K3=LHp3;
    321e:	4b16      	ldr	r3, [pc, #88]	; (3278 <readSwitches()+0x5c4>)
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3220:	f894 e000 	ldrb.w	lr, [r4]
  if (lap<2) lap++; else lap=0;
    3224:	782f      	ldrb	r7, [r5, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3226:	4c0e      	ldr	r4, [pc, #56]	; (3260 <readSwitches()+0x5ac>)
  K3=LHp3;
    3228:	781b      	ldrb	r3, [r3, #0]
  K4=LHp1;
    322a:	7812      	ldrb	r2, [r2, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    322c:	7824      	ldrb	r4, [r4, #0]
  if (lap<2) lap++; else lap=0;
    322e:	46b9      	mov	r9, r7
    3230:	e776      	b.n	3120 <readSwitches()+0x46c>
    3232:	bf00      	nop
    3234:	1fff8dc4 	.word	0x1fff8dc4
    3238:	1fff9afc 	.word	0x1fff9afc
    323c:	1fff9d70 	.word	0x1fff9d70
    3240:	1fff8d3c 	.word	0x1fff8d3c
    3244:	1fff9be0 	.word	0x1fff9be0
    3248:	1b4e81b5 	.word	0x1b4e81b5
    324c:	1fff9a66 	.word	0x1fff9a66
    3250:	1fff9916 	.word	0x1fff9916
    3254:	1fff9912 	.word	0x1fff9912
    3258:	1fff990f 	.word	0x1fff990f
    325c:	1fff9922 	.word	0x1fff9922
    3260:	1fff9910 	.word	0x1fff9910
    3264:	1fff9911 	.word	0x1fff9911
    3268:	1fff9923 	.word	0x1fff9923
    326c:	1fff9913 	.word	0x1fff9913
    3270:	1fff9914 	.word	0x1fff9914
    3274:	1fff9924 	.word	0x1fff9924
    3278:	1fff9915 	.word	0x1fff9915
    327c:	1fff9928 	.word	0x1fff9928
    3280:	1fff9926 	.word	0x1fff9926
    3284:	1fff9b38 	.word	0x1fff9b38
    3288:	1fff9925 	.word	0x1fff9925
    328c:	1fff9927 	.word	0x1fff9927
    3290:	1fff9ab0 	.word	0x1fff9ab0
    3294:	1fff8d6c 	.word	0x1fff8d6c
    3298:	1fff9be4 	.word	0x1fff9be4
    329c:	1fff9bd6 	.word	0x1fff9bd6
    32a0:	1fff9b64 	.word	0x1fff9b64
    32a4:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 3588 <readSwitches()+0x8d4>
        touchValueRollers[i]=touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300;
    32a8:	4fb8      	ldr	r7, [pc, #736]	; (358c <readSwitches()+0x8d8>)
    32aa:	4eb9      	ldr	r6, [pc, #740]	; (3590 <readSwitches()+0x8dc>)
    32ac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    32b0:	b2e1      	uxtb	r1, r4
    32b2:	4638      	mov	r0, r7
    32b4:	f008 f950 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    32b8:	f859 3b04 	ldr.w	r3, [r9], #4
    32bc:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    32c0:	fb03 f000 	mul.w	r0, r3, r0
    32c4:	fb86 2300 	smull	r2, r3, r6, r0
      for (byte i=0; i<6; i++){
    32c8:	3401      	adds	r4, #1
        touchValueRollers[i]=touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300;
    32ca:	17c0      	asrs	r0, r0, #31
    32cc:	ebc0 1063 	rsb	r0, r0, r3, asr #5
      for (byte i=0; i<6; i++){
    32d0:	2c06      	cmp	r4, #6
        touchValueRollers[i]=touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300;
    32d2:	f848 0b04 	str.w	r0, [r8], #4
      for (byte i=0; i<6; i++){
    32d6:	d1eb      	bne.n	32b0 <readSwitches()+0x5fc>
      R1=(touchValueRollers[rPin1] < ctouchThrVal);
    32d8:	4bae      	ldr	r3, [pc, #696]	; (3594 <readSwitches()+0x8e0>)
    32da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    32dc:	881b      	ldrh	r3, [r3, #0]
    32de:	9204      	str	r2, [sp, #16]
    32e0:	429a      	cmp	r2, r3
      R2=(touchValueRollers[rPin2] < ctouchThrVal);
    32e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      R3=(touchValueRollers[rPin3] < ctouchThrVal);
    32e4:	990c      	ldr	r1, [sp, #48]	; 0x30
      R4=(touchValueRollers[rPin4] < ctouchThrVal);
    32e6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
      R2=(touchValueRollers[rPin2] < ctouchThrVal);
    32ea:	9203      	str	r2, [sp, #12]
      R1=(touchValueRollers[rPin1] < ctouchThrVal);
    32ec:	bfac      	ite	ge
    32ee:	f04f 0a00 	movge.w	sl, #0
    32f2:	f04f 0a01 	movlt.w	sl, #1
      R2=(touchValueRollers[rPin2] < ctouchThrVal);
    32f6:	4293      	cmp	r3, r2
      oneroll = (rollerMode < 2);
    32f8:	4aa7      	ldr	r2, [pc, #668]	; (3598 <readSwitches()+0x8e4>)
      R5=(touchValueRollers[rPin5] < ctouchThrVal);
    32fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
      R6=(touchValueRollers[rPin6] < ctouchThrVal);
    32fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
      R3=(touchValueRollers[rPin3] < ctouchThrVal);
    32fe:	9102      	str	r1, [sp, #8]
      R2=(touchValueRollers[rPin2] < ctouchThrVal);
    3300:	bfd4      	ite	le
    3302:	f04f 0900 	movle.w	r9, #0
    3306:	f04f 0901 	movgt.w	r9, #1
      R3=(touchValueRollers[rPin3] < ctouchThrVal);
    330a:	428b      	cmp	r3, r1
    330c:	bfd4      	ite	le
    330e:	f04f 0800 	movle.w	r8, #0
    3312:	f04f 0801 	movgt.w	r8, #1
      oneroll = (rollerMode < 2);
    3316:	8811      	ldrh	r1, [r2, #0]
      R4=(touchValueRollers[rPin4] < ctouchThrVal);
    3318:	455b      	cmp	r3, fp
      rSum = R1+R2+R3+R4+R5+R6;
    331a:	eb0a 0209 	add.w	r2, sl, r9
      R4=(touchValueRollers[rPin4] < ctouchThrVal);
    331e:	bfd4      	ite	le
    3320:	2700      	movle	r7, #0
    3322:	2701      	movgt	r7, #1
      rSum = R1+R2+R3+R4+R5+R6;
    3324:	4442      	add	r2, r8
      R5=(touchValueRollers[rPin5] < ctouchThrVal);
    3326:	42b3      	cmp	r3, r6
    3328:	bfd4      	ite	le
    332a:	f04f 0e00 	movle.w	lr, #0
    332e:	f04f 0e01 	movgt.w	lr, #1
      rSum = R1+R2+R3+R4+R5+R6;
    3332:	443a      	add	r2, r7
      R6=(touchValueRollers[rPin6] < ctouchThrVal);
    3334:	4283      	cmp	r3, r0
    3336:	bfd4      	ite	le
    3338:	f04f 0c00 	movle.w	ip, #0
    333c:	f04f 0c01 	movgt.w	ip, #1
      rSum = R1+R2+R3+R4+R5+R6;
    3340:	4472      	add	r2, lr
    3342:	4462      	add	r2, ip
    3344:	9201      	str	r2, [sp, #4]
      R1=(touchValueRollers[rPin1] < ctouchThrVal);
    3346:	4a95      	ldr	r2, [pc, #596]	; (359c <readSwitches()+0x8e8>)
    3348:	f882 a000 	strb.w	sl, [r2]
      R2=(touchValueRollers[rPin2] < ctouchThrVal);
    334c:	f8df a250 	ldr.w	sl, [pc, #592]	; 35a0 <readSwitches()+0x8ec>
      rSum = R1+R2+R3+R4+R5+R6;
    3350:	9a01      	ldr	r2, [sp, #4]
      R2=(touchValueRollers[rPin2] < ctouchThrVal);
    3352:	f88a 9000 	strb.w	r9, [sl]
      R3=(touchValueRollers[rPin3] < ctouchThrVal);
    3356:	f8df 924c 	ldr.w	r9, [pc, #588]	; 35a4 <readSwitches()+0x8f0>
    335a:	f889 8000 	strb.w	r8, [r9]
      R4=(touchValueRollers[rPin4] < ctouchThrVal);
    335e:	f8df 8248 	ldr.w	r8, [pc, #584]	; 35a8 <readSwitches()+0x8f4>
    3362:	f888 7000 	strb.w	r7, [r8]
      R5=(touchValueRollers[rPin5] < ctouchThrVal);
    3366:	4f91      	ldr	r7, [pc, #580]	; (35ac <readSwitches()+0x8f8>)
    3368:	f887 e000 	strb.w	lr, [r7]
      R6=(touchValueRollers[rPin6] < ctouchThrVal);
    336c:	4f90      	ldr	r7, [pc, #576]	; (35b0 <readSwitches()+0x8fc>)
    336e:	f887 c000 	strb.w	ip, [r7]
      rSum = R1+R2+R3+R4+R5+R6;
    3372:	4f90      	ldr	r7, [pc, #576]	; (35b4 <readSwitches()+0x900>)
      oneroll = (rollerMode < 2);
    3374:	f8df c240 	ldr.w	ip, [pc, #576]	; 35b8 <readSwitches()+0x904>
      rSum = R1+R2+R3+R4+R5+R6;
    3378:	703a      	strb	r2, [r7, #0]
      octaveR = 0;
    337a:	4f90      	ldr	r7, [pc, #576]	; (35bc <readSwitches()+0x908>)
    337c:	f04f 0e00 	mov.w	lr, #0
      oneroll = (rollerMode < 2);
    3380:	2901      	cmp	r1, #1
      octaveR = 0;
    3382:	f887 e000 	strb.w	lr, [r7]
      oneroll = (rollerMode < 2);
    3386:	bf8c      	ite	hi
    3388:	f04f 0e00 	movhi.w	lr, #0
    338c:	f04f 0e01 	movls.w	lr, #1
      if      (R6 && (R5 || oneroll)) octaveR = 6;  //R6
    3390:	4283      	cmp	r3, r0
      oneroll = (rollerMode < 2);
    3392:	f88c e000 	strb.w	lr, [ip]
      if      (R6 && (R5 || oneroll)) octaveR = 6;  //R6
    3396:	dd31      	ble.n	33fc <readSwitches()+0x748>
    3398:	42b3      	cmp	r3, r6
    339a:	f300 81f3 	bgt.w	3784 <readSwitches()+0xad0>
    339e:	2901      	cmp	r1, #1
    33a0:	f200 8178 	bhi.w	3694 <readSwitches()+0x9e0>
    33a4:	4a86      	ldr	r2, [pc, #536]	; (35c0 <readSwitches()+0x90c>)
    33a6:	9403      	str	r4, [sp, #12]
    33a8:	4623      	mov	r3, r4
    33aa:	703c      	strb	r4, [r7, #0]
      if ((3 == rollerMode) && R6 && !R5 && (6 == lastOctaveR)) octaveR = 7; // Bonus octave on top
    33ac:	9202      	str	r2, [sp, #8]
    33ae:	4c85      	ldr	r4, [pc, #532]	; (35c4 <readSwitches()+0x910>)
    33b0:	e15b      	b.n	366a <readSwitches()+0x9b6>
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    33b2:	2b00      	cmp	r3, #0
    33b4:	f43f ad9d 	beq.w	2ef2 <readSwitches()+0x23e>
  int qTransp = ((pinkyKey && (pinkySetting < 25)) ? pinkySetting-12 : 0) + ((LHp3 && lpinky3) ? lpinky3-13 : 0);
    33b8:	4f83      	ldr	r7, [pc, #524]	; (35c8 <readSwitches()+0x914>)
    33ba:	883f      	ldrh	r7, [r7, #0]
    33bc:	9705      	str	r7, [sp, #20]
  pinkyKey = LHs || ((lpinky3==MOD) && LHp3);
    33be:	4f83      	ldr	r7, [pc, #524]	; (35cc <readSwitches()+0x918>)
    33c0:	f04f 0901 	mov.w	r9, #1
    33c4:	f887 9000 	strb.w	r9, [r7]
  int qTransp = ((pinkyKey && (pinkySetting < 25)) ? pinkySetting-12 : 0) + ((LHp3 && lpinky3) ? lpinky3-13 : 0);
    33c8:	9f05      	ldr	r7, [sp, #20]
    33ca:	2f18      	cmp	r7, #24
    33cc:	f67f acc6 	bls.w	2d5c <readSwitches()+0xa8>
    33d0:	2701      	movs	r7, #1
    33d2:	3d0d      	subs	r5, #13
    33d4:	442e      	add	r6, r5
    33d6:	e4cb      	b.n	2d70 <readSwitches()+0xbc>
    33d8:	4613      	mov	r3, r2
  fingeredNote = glissCurrentNote;
    33da:	9a02      	ldr	r2, [sp, #8]
    33dc:	6013      	str	r3, [r2, #0]
}
    33de:	b017      	add	sp, #92	; 0x5c
    33e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    33e4:	6805      	ldr	r5, [r0, #0]
    33e6:	9508      	str	r5, [sp, #32]
	return ret;
    33e8:	9d08      	ldr	r5, [sp, #32]
      lastGlissTime = millis() + glissTime; // ensure new start of gliss
    33ea:	4e79      	ldr	r6, [pc, #484]	; (35d0 <readSwitches()+0x91c>)
    33ec:	440d      	add	r5, r1
    33ee:	6035      	str	r5, [r6, #0]
      newFingeringFirstTimeFlag = false;
    33f0:	2500      	movs	r5, #0
    33f2:	7015      	strb	r5, [r2, #0]
    33f4:	e554      	b.n	2ea0 <readSwitches()+0x1ec>
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    33f6:	3b01      	subs	r3, #1
    33f8:	1b1b      	subs	r3, r3, r4
    33fa:	e4d0      	b.n	2d9e <readSwitches()+0xea>
      else if (R5 && (R4 || oneroll)) octaveR = 5;  //R5
    33fc:	42b3      	cmp	r3, r6
    33fe:	f340 8149 	ble.w	3694 <readSwitches()+0x9e0>
    3402:	455b      	cmp	r3, fp
    3404:	f300 812a 	bgt.w	365c <readSwitches()+0x9a8>
    3408:	2901      	cmp	r1, #1
    340a:	f240 8127 	bls.w	365c <readSwitches()+0x9a8>
      else if (R3 && (R2 || oneroll)) octaveR = 3;  //R3
    340e:	9a02      	ldr	r2, [sp, #8]
    3410:	4293      	cmp	r3, r2
    3412:	f340 8149 	ble.w	36a8 <readSwitches()+0x9f4>
    3416:	9a03      	ldr	r2, [sp, #12]
    3418:	4293      	cmp	r3, r2
    341a:	f300 8212 	bgt.w	3842 <readSwitches()+0xb8e>
    341e:	2901      	cmp	r1, #1
    3420:	f240 820f 	bls.w	3842 <readSwitches()+0xb8e>
      else if (R1) octaveR = 1;  //R1
    3424:	9a04      	ldr	r2, [sp, #16]
    3426:	429a      	cmp	r2, r3
    3428:	f280 8149 	bge.w	36be <readSwitches()+0xa0a>
    342c:	2201      	movs	r2, #1
    342e:	703a      	strb	r2, [r7, #0]
    3430:	4a63      	ldr	r2, [pc, #396]	; (35c0 <readSwitches()+0x90c>)
    3432:	4c64      	ldr	r4, [pc, #400]	; (35c4 <readSwitches()+0x910>)
    3434:	9202      	str	r2, [sp, #8]
    3436:	e16b      	b.n	3710 <readSwitches()+0xa5c>
    3438:	3b01      	subs	r3, #1
    343a:	e4c4      	b.n	2dc6 <readSwitches()+0x112>
    343c:	2300      	movs	r3, #0
    343e:	e6d9      	b.n	31f4 <readSwitches()+0x540>
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3440:	3301      	adds	r3, #1
    3442:	e4b8      	b.n	2db6 <readSwitches()+0x102>
      fingeredNoteUntransposed = startNote
    3444:	4b63      	ldr	r3, [pc, #396]	; (35d4 <readSwitches()+0x920>)
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    3446:	9d01      	ldr	r5, [sp, #4]
      fingeredNoteUntransposed = startNote
    3448:	781b      	ldrb	r3, [r3, #0]
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    344a:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
    344e:	1b5b      	subs	r3, r3, r5
      + 3*(!LH3)           // Min Third up when lift
    3450:	4d61      	ldr	r5, [pc, #388]	; (35d8 <readSwitches()+0x924>)
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    3452:	ebab 098b 	sub.w	r9, fp, fp, lsl #2
      + 3*(!LH3)           // Min Third up when lift
    3456:	f895 8000 	ldrb.w	r8, [r5]
      - 5*LH1              //Fifth key
    345a:	ebce 758e 	rsb	r5, lr, lr, lsl #30
      + 4*(!LH2)           // Maj Third up when lift
    345e:	fab4 f484 	clz	r4, r4
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    3462:	444b      	add	r3, r9
      - 5*LH1              //Fifth key
    3464:	ebce 0585 	rsb	r5, lr, r5, lsl #2
      + 4*(!LH2)           // Maj Third up when lift
    3468:	0964      	lsrs	r4, r4, #5
      - 5*LH1              //Fifth key
    346a:	442b      	add	r3, r5
      + 4*(!LH2)           // Maj Third up when lift
    346c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      + 3*(!LH3)           // Min Third up when lift
    3470:	f1b8 0f00 	cmp.w	r8, #0
    3474:	f000 81aa 	beq.w	37cc <readSwitches()+0xb18>
      + 2*RHs + 4*RHp3  //Trill keys +2 and +4
    3478:	9c04      	ldr	r4, [sp, #16]
    347a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    347e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
      + LHp1 + RHp1               // Trill keys +1 
    3482:	4413      	add	r3, r2
    3484:	4403      	add	r3, r0
      - LHp2 - 2*RHp2               // Trill keys -1 and -2 
    3486:	eba3 030a 	sub.w	r3, r3, sl
    348a:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
      + octaveR*12;       //Octave rollers
    348e:	9a03      	ldr	r2, [sp, #12]
    3490:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3494:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3498:	e4a3      	b.n	2de2 <readSwitches()+0x12e>
      fingeredNoteUntransposed = startNote
    349a:	4b4e      	ldr	r3, [pc, #312]	; (35d4 <readSwitches()+0x920>)
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    349c:	9801      	ldr	r0, [sp, #4]
      fingeredNoteUntransposed = startNote
    349e:	781b      	ldrb	r3, [r3, #0]
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    34a0:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
    34a4:	ebab 028b 	sub.w	r2, fp, fp, lsl #2
    34a8:	1a1b      	subs	r3, r3, r0
    34aa:	4413      	add	r3, r2
      - 5*LH1              //Fifth key
    34ac:	ebce 728e 	rsb	r2, lr, lr, lsl #30
    34b0:	ebce 0282 	rsb	r2, lr, r2, lsl #2
    34b4:	4413      	add	r3, r2
      + 2*RHs + 4*RHp3  //Trill keys +2 and +4
    34b6:	9a04      	ldr	r2, [sp, #16]
    34b8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    34bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
      + (!LH2 || !LH3 || LHp2) // Trill +1 achieved by lifting finger from LH2 or LH3, or touching LHp2
    34c0:	2c00      	cmp	r4, #0
    34c2:	f040 8179 	bne.w	37b8 <readSwitches()+0xb04>
    34c6:	2201      	movs	r2, #1
    34c8:	4413      	add	r3, r2
      + (6-octaveR)*12;       //Octave rollers, reversed
    34ca:	9a03      	ldr	r2, [sp, #12]
    34cc:	f1c2 0206 	rsb	r2, r2, #6
    34d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    34d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    34d8:	e483      	b.n	2de2 <readSwitches()+0x12e>
      fingeredNoteUntransposed = startNote
    34da:	4b3e      	ldr	r3, [pc, #248]	; (35d4 <readSwitches()+0x920>)
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    34dc:	9801      	ldr	r0, [sp, #4]
      fingeredNoteUntransposed = startNote
    34de:	781b      	ldrb	r3, [r3, #0]
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    34e0:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
    34e4:	ebab 028b 	sub.w	r2, fp, fp, lsl #2
    34e8:	1a1b      	subs	r3, r3, r0
    34ea:	4413      	add	r3, r2
      - 5*LH1              //Fifth key
    34ec:	ebce 728e 	rsb	r2, lr, lr, lsl #30
    34f0:	ebce 0282 	rsb	r2, lr, r2, lsl #2
    34f4:	4413      	add	r3, r2
      + 2*RHs + 4*RHp3  //Trill keys +2 and +4
    34f6:	9a04      	ldr	r2, [sp, #16]
    34f8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    34fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
      + (!LH2 || !LH3 || LHp2) // Trill +1 achieved by lifting finger from LH2 or LH3, or touching LHp2
    3500:	2c00      	cmp	r4, #0
    3502:	f040 814f 	bne.w	37a4 <readSwitches()+0xaf0>
    3506:	2201      	movs	r2, #1
    3508:	4413      	add	r3, r2
      + octaveR*12;       //Octave rollers
    350a:	9a03      	ldr	r2, [sp, #12]
    350c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3510:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3514:	e465      	b.n	2de2 <readSwitches()+0x12e>
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+9*(!LH1 && LH2 && LH3)-10*(!RH3 && RHp3)+octaveR*12;
    3516:	4b2f      	ldr	r3, [pc, #188]	; (35d4 <readSwitches()+0x920>)
    3518:	781b      	ldrb	r3, [r3, #0]
    351a:	3301      	adds	r3, #1
    351c:	eba3 054e 	sub.w	r5, r3, lr, lsl #1
    3520:	4b2e      	ldr	r3, [pc, #184]	; (35dc <readSwitches()+0x928>)
    3522:	781b      	ldrb	r3, [r3, #0]
    3524:	2b00      	cmp	r3, #0
    3526:	f040 8136 	bne.w	3796 <readSwitches()+0xae2>
    352a:	1b2b      	subs	r3, r5, r4
    352c:	2c00      	cmp	r4, #0
    352e:	f040 8183 	bne.w	3838 <readSwitches()+0xb84>
    3532:	4d29      	ldr	r5, [pc, #164]	; (35d8 <readSwitches()+0x924>)
    3534:	782d      	ldrb	r5, [r5, #0]
    3536:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
    353a:	4413      	add	r3, r2
    353c:	eba3 0a0a 	sub.w	sl, r3, sl
    3540:	9b04      	ldr	r3, [sp, #16]
    3542:	b113      	cbz	r3, 354a <readSwitches()+0x896>
    3544:	b90a      	cbnz	r2, 354a <readSwitches()+0x896>
    3546:	f10a 0a01 	add.w	sl, sl, #1
    354a:	ebaa 0308 	sub.w	r3, sl, r8
    354e:	f1b8 0f00 	cmp.w	r8, #0
    3552:	d002      	beq.n	355a <readSwitches()+0x8a6>
    3554:	2d00      	cmp	r5, #0
    3556:	bf18      	it	ne
    3558:	3b01      	subne	r3, #1
    355a:	9a01      	ldr	r2, [sp, #4]
    355c:	1a9b      	subs	r3, r3, r2
    355e:	eba3 034b 	sub.w	r3, r3, fp, lsl #1
    3562:	4403      	add	r3, r0
    3564:	eba3 030c 	sub.w	r3, r3, ip
    3568:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    356c:	f1be 0f00 	cmp.w	lr, #0
    3570:	d102      	bne.n	3578 <readSwitches()+0x8c4>
    3572:	b10c      	cbz	r4, 3578 <readSwitches()+0x8c4>
    3574:	b105      	cbz	r5, 3578 <readSwitches()+0x8c4>
    3576:	3309      	adds	r3, #9
    3578:	f1bb 0f00 	cmp.w	fp, #0
    357c:	d187      	bne.n	348e <readSwitches()+0x7da>
    357e:	2900      	cmp	r1, #0
    3580:	d085      	beq.n	348e <readSwitches()+0x7da>
    3582:	3b0a      	subs	r3, #10
    3584:	e783      	b.n	348e <readSwitches()+0x7da>
    3586:	bf00      	nop
    3588:	1fff8d9c 	.word	0x1fff8d9c
    358c:	1fff9be8 	.word	0x1fff9be8
    3590:	1b4e81b5 	.word	0x1b4e81b5
    3594:	1fff9a66 	.word	0x1fff9a66
    3598:	1fff9b9c 	.word	0x1fff9b9c
    359c:	1fff991c 	.word	0x1fff991c
    35a0:	1fff991d 	.word	0x1fff991d
    35a4:	1fff991e 	.word	0x1fff991e
    35a8:	1fff991f 	.word	0x1fff991f
    35ac:	1fff9920 	.word	0x1fff9920
    35b0:	1fff9921 	.word	0x1fff9921
    35b4:	1fff9b94 	.word	0x1fff9b94
    35b8:	1fff9b5c 	.word	0x1fff9b5c
    35bc:	1fff9b38 	.word	0x1fff9b38
    35c0:	1fff9ab0 	.word	0x1fff9ab0
    35c4:	1fff9b08 	.word	0x1fff9b08
    35c8:	1fff9b74 	.word	0x1fff9b74
    35cc:	1fff9b72 	.word	0x1fff9b72
    35d0:	1fff9b04 	.word	0x1fff9b04
    35d4:	1fff8e6c 	.word	0x1fff8e6c
    35d8:	1fff9911 	.word	0x1fff9911
    35dc:	1fff9912 	.word	0x1fff9912
    saxFinger[0] = LH1;
    35e0:	4da7      	ldr	r5, [pc, #668]	; (3880 <readSwitches()+0xbcc>)
    saxFinger[6] = RH2;
    35e2:	9b01      	ldr	r3, [sp, #4]
    35e4:	71ab      	strb	r3, [r5, #6]
    saxFinger[1] = LHb;
    35e6:	4ba7      	ldr	r3, [pc, #668]	; (3884 <readSwitches()+0xbd0>)
    saxFinger[4] = LHp1;
    35e8:	712a      	strb	r2, [r5, #4]
    saxFinger[1] = LHb;
    35ea:	781b      	ldrb	r3, [r3, #0]
    35ec:	706b      	strb	r3, [r5, #1]
    saxFinger[3] = LH3;
    35ee:	4ba6      	ldr	r3, [pc, #664]	; (3888 <readSwitches()+0xbd4>)
    saxFinger[5] = RH1;
    35f0:	f885 8005 	strb.w	r8, [r5, #5]
    saxFinger[3] = LH3;
    35f4:	781b      	ldrb	r3, [r3, #0]
    saxFinger[2] = LH2;
    35f6:	70ac      	strb	r4, [r5, #2]
    saxFinger[7] = RH3;
    35f8:	f885 b007 	strb.w	fp, [r5, #7]
    saxFinger[8] = RHp1;
    35fc:	7228      	strb	r0, [r5, #8]
    saxFinger[0] = LH1;
    35fe:	f885 e000 	strb.w	lr, [r5]
    saxFinger[3] = LH3;
    3602:	70eb      	strb	r3, [r5, #3]
    saxFinger[9] = RHp3;
    3604:	f04f 0801 	mov.w	r8, #1
    3608:	f805 1f09 	strb.w	r1, [r5, #9]!
    while (matched<10 && combo<16)
    360c:	f8df 927c 	ldr.w	r9, [pc, #636]	; 388c <readSwitches()+0xbd8>
    saxFinger[9] = RHp3;
    3610:	f8cd c004 	str.w	ip, [sp, #4]
    3614:	4642      	mov	r2, r8
      combo++;
    3616:	4b9a      	ldr	r3, [pc, #616]	; (3880 <readSwitches()+0xbcc>)
    3618:	fa5f fc88 	uxtb.w	ip, r8
      for (byte finger=0; finger < 10; finger++)
    361c:	f108 3bff 	add.w	fp, r8, #4294967295
    saxFinger[9] = RHp3;
    3620:	464c      	mov	r4, r9
    3622:	4670      	mov	r0, lr
      matched = 0;
    3624:	2100      	movs	r1, #0
    3626:	e007      	b.n	3638 <readSwitches()+0x984>
        if ((saxFinger[finger] == saxFingerMatch[combo-1][finger]) || (saxFingerMatch[combo-1][finger] == 2)) matched++;
    3628:	2a02      	cmp	r2, #2
    362a:	d007      	beq.n	363c <readSwitches()+0x988>
      for (byte finger=0; finger < 10; finger++)
    362c:	42ab      	cmp	r3, r5
    362e:	d009      	beq.n	3644 <readSwitches()+0x990>
        if ((saxFinger[finger] == saxFingerMatch[combo-1][finger]) || (saxFingerMatch[combo-1][finger] == 2)) matched++;
    3630:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    3634:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    3638:	4290      	cmp	r0, r2
    363a:	d1f5      	bne.n	3628 <readSwitches()+0x974>
    363c:	3101      	adds	r1, #1
      for (byte finger=0; finger < 10; finger++)
    363e:	42ab      	cmp	r3, r5
        if ((saxFinger[finger] == saxFingerMatch[combo-1][finger]) || (saxFingerMatch[combo-1][finger] == 2)) matched++;
    3640:	b2c9      	uxtb	r1, r1
      for (byte finger=0; finger < 10; finger++)
    3642:	d1f5      	bne.n	3630 <readSwitches()+0x97c>
    while (matched<10 && combo<16)
    3644:	2909      	cmp	r1, #9
    3646:	f200 80d6 	bhi.w	37f6 <readSwitches()+0xb42>
    364a:	f108 0801 	add.w	r8, r8, #1
    364e:	f1b8 0f11 	cmp.w	r8, #17
    3652:	f000 80c5 	beq.w	37e0 <readSwitches()+0xb2c>
        if ((saxFinger[finger] == saxFingerMatch[combo-1][finger]) || (saxFingerMatch[combo-1][finger] == 2)) matched++;
    3656:	f819 2f0a 	ldrb.w	r2, [r9, #10]!
    365a:	e7dc      	b.n	3616 <readSwitches()+0x962>
      else if (R5 && (R4 || oneroll)) octaveR = 5;  //R5
    365c:	4a8c      	ldr	r2, [pc, #560]	; (3890 <readSwitches()+0xbdc>)
    365e:	4c8d      	ldr	r4, [pc, #564]	; (3894 <readSwitches()+0xbe0>)
    3660:	9202      	str	r2, [sp, #8]
    3662:	2305      	movs	r3, #5
    3664:	703b      	strb	r3, [r7, #0]
      lastOctaveR = octaveR;
    3666:	783b      	ldrb	r3, [r7, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    3668:	9303      	str	r3, [sp, #12]
      lastOctaveR = octaveR;
    366a:	7023      	strb	r3, [r4, #0]
  K5=RHp1;
    366c:	4b8a      	ldr	r3, [pc, #552]	; (3898 <readSwitches()+0xbe4>)
  K1=RHp2;
    366e:	4a8b      	ldr	r2, [pc, #556]	; (389c <readSwitches()+0xbe8>)
  K5=RHp1;
    3670:	7818      	ldrb	r0, [r3, #0]
  K7=RHp3;
    3672:	4b8b      	ldr	r3, [pc, #556]	; (38a0 <readSwitches()+0xbec>)
  K1=RHp2;
    3674:	f892 c000 	ldrb.w	ip, [r2]
  K7=RHp3;
    3678:	7819      	ldrb	r1, [r3, #0]
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    367a:	4b8a      	ldr	r3, [pc, #552]	; (38a4 <readSwitches()+0xbf0>)
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	9304      	str	r3, [sp, #16]
    3680:	4b89      	ldr	r3, [pc, #548]	; (38a8 <readSwitches()+0xbf4>)
    3682:	f893 8000 	ldrb.w	r8, [r3]
    3686:	4b89      	ldr	r3, [pc, #548]	; (38ac <readSwitches()+0xbf8>)
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	9301      	str	r3, [sp, #4]
    368c:	4b88      	ldr	r3, [pc, #544]	; (38b0 <readSwitches()+0xbfc>)
    368e:	f893 b000 	ldrb.w	fp, [r3]
      break;
    3692:	e5bd      	b.n	3210 <readSwitches()+0x55c>
      else if (R4 && (R3 || oneroll)) octaveR = 4;  //R4
    3694:	455b      	cmp	r3, fp
    3696:	f77f aeba 	ble.w	340e <readSwitches()+0x75a>
    369a:	9a02      	ldr	r2, [sp, #8]
    369c:	4293      	cmp	r3, r2
    369e:	f300 80c4 	bgt.w	382a <readSwitches()+0xb76>
    36a2:	2901      	cmp	r1, #1
    36a4:	f240 80c1 	bls.w	382a <readSwitches()+0xb76>
      else if (R2 && (R1 || oneroll)) octaveR = 2;  //R2
    36a8:	9a03      	ldr	r2, [sp, #12]
    36aa:	4293      	cmp	r3, r2
    36ac:	f77f aeba 	ble.w	3424 <readSwitches()+0x770>
    36b0:	9a04      	ldr	r2, [sp, #16]
    36b2:	429a      	cmp	r2, r3
    36b4:	f2c0 80ce 	blt.w	3854 <readSwitches()+0xba0>
    36b8:	2901      	cmp	r1, #1
    36ba:	f240 80cb 	bls.w	3854 <readSwitches()+0xba0>
      else if (lastOctaveR > 1) {
    36be:	4c75      	ldr	r4, [pc, #468]	; (3894 <readSwitches()+0xbe0>)
    36c0:	f894 c000 	ldrb.w	ip, [r4]
    36c4:	f1bc 0f01 	cmp.w	ip, #1
    36c8:	f240 80d7 	bls.w	387a <readSwitches()+0xbc6>
        if (rollerMode) octaveR = lastOctaveR; //if rollers are released and we are not coming down from roller 1, stay at the higher octave
    36cc:	b109      	cbz	r1, 36d2 <readSwitches()+0xa1e>
    36ce:	f887 c000 	strb.w	ip, [r7]
        if (otfKey && !rSum && polySelect && (polySelect<PolySelect::ERotatorA) && rotatorOn && (mainState == NOTE_OFF)) hmzKey = fingeredNote%12;
    36d2:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 38b4 <readSwitches()+0xc00>
    36d6:	f8bc c000 	ldrh.w	ip, [ip]
    36da:	f1bc 0f00 	cmp.w	ip, #0
    36de:	f000 80bf 	beq.w	3860 <readSwitches()+0xbac>
    36e2:	9a01      	ldr	r2, [sp, #4]
    36e4:	2a00      	cmp	r2, #0
    36e6:	f040 80bb 	bne.w	3860 <readSwitches()+0xbac>
    36ea:	4a73      	ldr	r2, [pc, #460]	; (38b8 <readSwitches()+0xc04>)
    36ec:	8812      	ldrh	r2, [r2, #0]
    36ee:	3a01      	subs	r2, #1
    36f0:	b292      	uxth	r2, r2
    36f2:	2a06      	cmp	r2, #6
    36f4:	f200 80b4 	bhi.w	3860 <readSwitches()+0xbac>
    36f8:	4a70      	ldr	r2, [pc, #448]	; (38bc <readSwitches()+0xc08>)
    36fa:	7812      	ldrb	r2, [r2, #0]
    36fc:	2a00      	cmp	r2, #0
    36fe:	f000 80af 	beq.w	3860 <readSwitches()+0xbac>
    3702:	4a6f      	ldr	r2, [pc, #444]	; (38c0 <readSwitches()+0xc0c>)
    3704:	6812      	ldr	r2, [r2, #0]
    3706:	2a01      	cmp	r2, #1
    3708:	4a61      	ldr	r2, [pc, #388]	; (3890 <readSwitches()+0xbdc>)
    370a:	9202      	str	r2, [sp, #8]
    370c:	f000 80e8 	beq.w	38e0 <readSwitches()+0xc2c>
      if ((3 == rollerMode) && R6 && !R5 && (6 == lastOctaveR)) octaveR = 7; // Bonus octave on top
    3710:	2903      	cmp	r1, #3
    3712:	d1a8      	bne.n	3666 <readSwitches()+0x9b2>
    3714:	4283      	cmp	r3, r0
    3716:	dda6      	ble.n	3666 <readSwitches()+0x9b2>
    3718:	42b3      	cmp	r3, r6
    371a:	dca4      	bgt.n	3666 <readSwitches()+0x9b2>
    371c:	7823      	ldrb	r3, [r4, #0]
    371e:	2b06      	cmp	r3, #6
    3720:	d1a1      	bne.n	3666 <readSwitches()+0x9b2>
    3722:	2307      	movs	r3, #7
    3724:	703b      	strb	r3, [r7, #0]
    3726:	9303      	str	r3, [sp, #12]
    3728:	e79f      	b.n	366a <readSwitches()+0x9b6>
  glissActive = glissEnable&&(mainState == NOTE_ON)&&(glissInterval>0)&&(slurSustain == 0)&&(slurSostenuto==0);
    372a:	4a66      	ldr	r2, [pc, #408]	; (38c4 <readSwitches()+0xc10>)
    372c:	6812      	ldr	r2, [r2, #0]
    372e:	2a00      	cmp	r2, #0
    3730:	f77f ab8f 	ble.w	2e52 <readSwitches()+0x19e>
    3734:	4a64      	ldr	r2, [pc, #400]	; (38c8 <readSwitches()+0xc14>)
    3736:	4865      	ldr	r0, [pc, #404]	; (38cc <readSwitches()+0xc18>)
    3738:	7812      	ldrb	r2, [r2, #0]
    373a:	7800      	ldrb	r0, [r0, #0]
    373c:	4302      	orrs	r2, r0
    373e:	bf0c      	ite	eq
    3740:	2501      	moveq	r5, #1
    3742:	2500      	movne	r5, #0
    3744:	f7ff bb86 	b.w	2e54 <readSwitches()+0x1a0>
            glissCurrentNote -= (abs(glissNoteDiff) >= abs(glissInterval)) 
    3748:	495e      	ldr	r1, [pc, #376]	; (38c4 <readSwitches()+0xc10>)
    374a:	680e      	ldr	r6, [r1, #0]
    374c:	ea86 74e6 	eor.w	r4, r6, r6, asr #31
    3750:	1ad1      	subs	r1, r2, r3
    3752:	eba4 74e6 	sub.w	r4, r4, r6, asr #31
                            ? glissInterval : abs(glissTargetInterval) > abs(glissInterval) ? 1 : abs(glissNoteDiff);
    3756:	42a1      	cmp	r1, r4
    3758:	da3a      	bge.n	37d0 <readSwitches()+0xb1c>
    375a:	495d      	ldr	r1, [pc, #372]	; (38d0 <readSwitches()+0xc1c>)
    375c:	6809      	ldr	r1, [r1, #0]
    375e:	2900      	cmp	r1, #0
    3760:	bfb8      	it	lt
    3762:	4249      	neglt	r1, r1
    3764:	428c      	cmp	r4, r1
    3766:	da00      	bge.n	376a <readSwitches()+0xab6>
    3768:	1e53      	subs	r3, r2, #1
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    376a:	6802      	ldr	r2, [r0, #0]
    376c:	920a      	str	r2, [sp, #40]	; 0x28
	return ret;
    376e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        lastGlissTime = millis();
    3770:	603a      	str	r2, [r7, #0]
  fingeredNote = glissCurrentNote;
    3772:	9a02      	ldr	r2, [sp, #8]
            glissCurrentNote += (abs(glissNoteDiff) >= abs(glissInterval)) 
    3774:	602b      	str	r3, [r5, #0]
  fingeredNote = glissCurrentNote;
    3776:	6013      	str	r3, [r2, #0]
}
    3778:	b017      	add	sp, #92	; 0x5c
    377a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+octaveR*12;
    377e:	1b1b      	subs	r3, r3, r4
    3780:	f7ff bbcd 	b.w	2f1e <readSwitches()+0x26a>
      if ((3 == rollerMode) && R6 && !R5 && (6 == lastOctaveR)) octaveR = 7; // Bonus octave on top
    3784:	2903      	cmp	r1, #3
      if      (R6 && (R5 || oneroll)) octaveR = 6;  //R6
    3786:	703c      	strb	r4, [r7, #0]
      if ((3 == rollerMode) && R6 && !R5 && (6 == lastOctaveR)) octaveR = 7; // Bonus octave on top
    3788:	d026      	beq.n	37d8 <readSwitches()+0xb24>
    378a:	4a41      	ldr	r2, [pc, #260]	; (3890 <readSwitches()+0xbdc>)
    378c:	9403      	str	r4, [sp, #12]
    378e:	4623      	mov	r3, r4
    3790:	9202      	str	r2, [sp, #8]
    3792:	4c40      	ldr	r4, [pc, #256]	; (3894 <readSwitches()+0xbe0>)
    3794:	e769      	b.n	366a <readSwitches()+0x9b6>
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+9*(!LH1 && LH2 && LH3)-10*(!RH3 && RHp3)+octaveR*12;
    3796:	f1be 0f00 	cmp.w	lr, #0
    379a:	d058      	beq.n	384e <readSwitches()+0xb9a>
    379c:	2c00      	cmp	r4, #0
    379e:	d14a      	bne.n	3836 <readSwitches()+0xb82>
    37a0:	1e6b      	subs	r3, r5, #1
    37a2:	e6c6      	b.n	3532 <readSwitches()+0x87e>
      + (!LH2 || !LH3 || LHp2) // Trill +1 achieved by lifting finger from LH2 or LH3, or touching LHp2
    37a4:	4a38      	ldr	r2, [pc, #224]	; (3888 <readSwitches()+0xbd4>)
    37a6:	7812      	ldrb	r2, [r2, #0]
    37a8:	2a00      	cmp	r2, #0
    37aa:	f43f aeac 	beq.w	3506 <readSwitches()+0x852>
    37ae:	f1ba 0200 	subs.w	r2, sl, #0
    37b2:	bf18      	it	ne
    37b4:	2201      	movne	r2, #1
    37b6:	e6a7      	b.n	3508 <readSwitches()+0x854>
      + (!LH2 || !LH3 || LHp2) // Trill +1 achieved by lifting finger from LH2 or LH3, or touching LHp2
    37b8:	4a33      	ldr	r2, [pc, #204]	; (3888 <readSwitches()+0xbd4>)
    37ba:	7812      	ldrb	r2, [r2, #0]
    37bc:	2a00      	cmp	r2, #0
    37be:	f43f ae82 	beq.w	34c6 <readSwitches()+0x812>
    37c2:	f1ba 0200 	subs.w	r2, sl, #0
    37c6:	bf18      	it	ne
    37c8:	2201      	movne	r2, #1
    37ca:	e67d      	b.n	34c8 <readSwitches()+0x814>
      + 3*(!LH3)           // Min Third up when lift
    37cc:	3303      	adds	r3, #3
    37ce:	e653      	b.n	3478 <readSwitches()+0x7c4>
            glissCurrentNote -= (abs(glissNoteDiff) >= abs(glissInterval)) 
    37d0:	1b93      	subs	r3, r2, r6
    37d2:	e7ca      	b.n	376a <readSwitches()+0xab6>
            glissCurrentNote += (abs(glissNoteDiff) >= abs(glissInterval)) 
    37d4:	1993      	adds	r3, r2, r6
    37d6:	e7c8      	b.n	376a <readSwitches()+0xab6>
    37d8:	4b2d      	ldr	r3, [pc, #180]	; (3890 <readSwitches()+0xbdc>)
    37da:	4c2e      	ldr	r4, [pc, #184]	; (3894 <readSwitches()+0xbe0>)
    37dc:	9302      	str	r3, [sp, #8]
    37de:	e742      	b.n	3666 <readSwitches()+0x9b2>
    if (matched<11 && combo==17) fingeredNoteUntransposed=lastFingering; else fingeredNoteUntransposed = startNote+1+saxFingerResult[combo-1]-LHp2+RHs-(RHp2 && (1 == combo) && LHp2)+octaveR*12;
    37e0:	4b3c      	ldr	r3, [pc, #240]	; (38d4 <readSwitches()+0xc20>)
    37e2:	4a3d      	ldr	r2, [pc, #244]	; (38d8 <readSwitches()+0xc24>)
    37e4:	781b      	ldrb	r3, [r3, #0]
    37e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    37e8:	3301      	adds	r3, #1
    37ea:	4413      	add	r3, r2
    37ec:	9a04      	ldr	r2, [sp, #16]
    37ee:	eba3 030a 	sub.w	r3, r3, sl
    37f2:	4413      	add	r3, r2
    37f4:	e64b      	b.n	348e <readSwitches()+0x7da>
    37f6:	4b37      	ldr	r3, [pc, #220]	; (38d4 <readSwitches()+0xc20>)
    37f8:	4a37      	ldr	r2, [pc, #220]	; (38d8 <readSwitches()+0xc24>)
    37fa:	781b      	ldrb	r3, [r3, #0]
    37fc:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
    3800:	9904      	ldr	r1, [sp, #16]
    3802:	3301      	adds	r3, #1
    3804:	4660      	mov	r0, ip
    3806:	4413      	add	r3, r2
    3808:	f8dd c004 	ldr.w	ip, [sp, #4]
    380c:	eba3 030a 	sub.w	r3, r3, sl
    3810:	440b      	add	r3, r1
    3812:	f1bc 0f00 	cmp.w	ip, #0
    3816:	f43f ae3a 	beq.w	348e <readSwitches()+0x7da>
    381a:	2801      	cmp	r0, #1
    381c:	f47f ae37 	bne.w	348e <readSwitches()+0x7da>
    3820:	f1ba 0f00 	cmp.w	sl, #0
    3824:	bf18      	it	ne
    3826:	3b01      	subne	r3, #1
    3828:	e631      	b.n	348e <readSwitches()+0x7da>
      else if (R4 && (R3 || oneroll)) octaveR = 4;  //R4
    382a:	2204      	movs	r2, #4
    382c:	703a      	strb	r2, [r7, #0]
    382e:	4a18      	ldr	r2, [pc, #96]	; (3890 <readSwitches()+0xbdc>)
    3830:	4c18      	ldr	r4, [pc, #96]	; (3894 <readSwitches()+0xbe0>)
    3832:	9202      	str	r2, [sp, #8]
    3834:	e76c      	b.n	3710 <readSwitches()+0xa5c>
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+9*(!LH1 && LH2 && LH3)-10*(!RH3 && RHp3)+octaveR*12;
    3836:	1b2b      	subs	r3, r5, r4
    3838:	f1be 0f00 	cmp.w	lr, #0
    383c:	bf18      	it	ne
    383e:	3b01      	subne	r3, #1
    3840:	e677      	b.n	3532 <readSwitches()+0x87e>
      else if (R3 && (R2 || oneroll)) octaveR = 3;  //R3
    3842:	2203      	movs	r2, #3
    3844:	703a      	strb	r2, [r7, #0]
    3846:	4a12      	ldr	r2, [pc, #72]	; (3890 <readSwitches()+0xbdc>)
    3848:	4c12      	ldr	r4, [pc, #72]	; (3894 <readSwitches()+0xbe0>)
    384a:	9202      	str	r2, [sp, #8]
    384c:	e760      	b.n	3710 <readSwitches()+0xa5c>
    fingeredNoteUntransposed=startNote+1-2*LH1-(LHb && !(LH1 && LH2))-LH2-(LH2 && LH1)-2*LH3+LHp1-LHp2+(RHs && !LHp1)-RH1-(RH1 && LH3)-RH2-2*RH3+RHp1-RHp2-2*RHp3+9*(!LH1 && LH2 && LH3)-10*(!RH3 && RHp3)+octaveR*12;
    384e:	1e6b      	subs	r3, r5, #1
    3850:	1b1b      	subs	r3, r3, r4
    3852:	e66e      	b.n	3532 <readSwitches()+0x87e>
      else if (R2 && (R1 || oneroll)) octaveR = 2;  //R2
    3854:	2202      	movs	r2, #2
    3856:	703a      	strb	r2, [r7, #0]
    3858:	4a0d      	ldr	r2, [pc, #52]	; (3890 <readSwitches()+0xbdc>)
    385a:	4c0e      	ldr	r4, [pc, #56]	; (3894 <readSwitches()+0xbe0>)
    385c:	9202      	str	r2, [sp, #8]
    385e:	e757      	b.n	3710 <readSwitches()+0xa5c>
        if (mainState == NOTE_OFF) currentRotation = 3; //rotator reset by releasing rollers
    3860:	4a17      	ldr	r2, [pc, #92]	; (38c0 <readSwitches()+0xc0c>)
    3862:	6812      	ldr	r2, [r2, #0]
    3864:	2a01      	cmp	r2, #1
    3866:	4a0a      	ldr	r2, [pc, #40]	; (3890 <readSwitches()+0xbdc>)
    3868:	9202      	str	r2, [sp, #8]
    386a:	f47f af51 	bne.w	3710 <readSwitches()+0xa5c>
    386e:	4a1b      	ldr	r2, [pc, #108]	; (38dc <readSwitches()+0xc28>)
    3870:	f04f 0c03 	mov.w	ip, #3
    3874:	f882 c000 	strb.w	ip, [r2]
    3878:	e74a      	b.n	3710 <readSwitches()+0xa5c>
    387a:	4a05      	ldr	r2, [pc, #20]	; (3890 <readSwitches()+0xbdc>)
    387c:	9202      	str	r2, [sp, #8]
    387e:	e747      	b.n	3710 <readSwitches()+0xa5c>
    3880:	1fff9bc4 	.word	0x1fff9bc4
    3884:	1fff9912 	.word	0x1fff9912
    3888:	1fff9911 	.word	0x1fff9911
    388c:	00012ed0 	.word	0x00012ed0
    3890:	1fff9ab0 	.word	0x1fff9ab0
    3894:	1fff9b08 	.word	0x1fff9b08
    3898:	1fff9925 	.word	0x1fff9925
    389c:	1fff9926 	.word	0x1fff9926
    38a0:	1fff9927 	.word	0x1fff9927
    38a4:	1fff9928 	.word	0x1fff9928
    38a8:	1fff9922 	.word	0x1fff9922
    38ac:	1fff9923 	.word	0x1fff9923
    38b0:	1fff9924 	.word	0x1fff9924
    38b4:	1fff9b5e 	.word	0x1fff9b5e
    38b8:	1fff9b80 	.word	0x1fff9b80
    38bc:	1fff9bc2 	.word	0x1fff9bc2
    38c0:	1fff9b30 	.word	0x1fff9b30
    38c4:	1fff9ad0 	.word	0x1fff9ad0
    38c8:	1fff9bd5 	.word	0x1fff9bd5
    38cc:	1fff9bd4 	.word	0x1fff9bd4
    38d0:	1fff9ad8 	.word	0x1fff9ad8
    38d4:	1fff8e6c 	.word	0x1fff8e6c
    38d8:	1fff8e08 	.word	0x1fff8e08
    38dc:	1fff8dbf 	.word	0x1fff8dbf
        if (otfKey && !rSum && polySelect && (polySelect<PolySelect::ERotatorA) && rotatorOn && (mainState == NOTE_OFF)) hmzKey = fingeredNote%12;
    38e0:	6812      	ldr	r2, [r2, #0]
    38e2:	f8df e06c 	ldr.w	lr, [pc, #108]	; 3950 <readSwitches()+0xc9c>
    38e6:	f04f 0c0c 	mov.w	ip, #12
    38ea:	fb92 f8fc 	sdiv	r8, r2, ip
    38ee:	fb0c 2218 	mls	r2, ip, r8, r2
    38f2:	f8ae 2000 	strh.w	r2, [lr]
        if (mainState == NOTE_OFF) currentRotation = 3; //rotator reset by releasing rollers
    38f6:	e7ba      	b.n	386e <readSwitches()+0xbba>
      fingeredNoteUntransposed = startNote
    38f8:	4b16      	ldr	r3, [pc, #88]	; (3954 <readSwitches()+0xca0>)
    38fa:	781b      	ldrb	r3, [r3, #0]
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    38fc:	ebab 058b 	sub.w	r5, fp, fp, lsl #2
      + 4*(!LH2)           // Maj Third up when lift
    3900:	fab4 fb84 	clz	fp, r4
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    3904:	9c01      	ldr	r4, [sp, #4]
    3906:	eba3 0348 	sub.w	r3, r3, r8, lsl #1
    390a:	1b1b      	subs	r3, r3, r4
      + 3*(!LH3)           // Min Third up when lift
    390c:	4c12      	ldr	r4, [pc, #72]	; (3958 <readSwitches()+0xca4>)
      - 2*RH1 - RH2 - 3*RH3  //"Trumpet valves"
    390e:	442b      	add	r3, r5
      + 3*(!LH3)           // Min Third up when lift
    3910:	7825      	ldrb	r5, [r4, #0]
      - 5*LH1              //Fifth key
    3912:	ebce 748e 	rsb	r4, lr, lr, lsl #30
    3916:	ebce 0484 	rsb	r4, lr, r4, lsl #2
      + 4*(!LH2)           // Maj Third up when lift
    391a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
      - 5*LH1              //Fifth key
    391e:	4423      	add	r3, r4
      + 4*(!LH2)           // Maj Third up when lift
    3920:	eb03 038b 	add.w	r3, r3, fp, lsl #2
      + 3*(!LH3)           // Min Third up when lift
    3924:	b905      	cbnz	r5, 3928 <readSwitches()+0xc74>
    3926:	3303      	adds	r3, #3
      + 2*RHs + 4*RHp3  //Trill keys +2 and +4
    3928:	9c04      	ldr	r4, [sp, #16]
    392a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    392e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
      + LHp1 + RHp1               // Trill keys +1 
    3932:	4413      	add	r3, r2
      + (6-octaveR)*12;       //Octave rollers, reversed    
    3934:	9a03      	ldr	r2, [sp, #12]
      + LHp1 + RHp1               // Trill keys +1 
    3936:	4403      	add	r3, r0
      - LHp2 - 2*RHp2               // Trill keys -1 and -2 
    3938:	eba3 030a 	sub.w	r3, r3, sl
      + (6-octaveR)*12;       //Octave rollers, reversed    
    393c:	f1c2 0206 	rsb	r2, r2, #6
      - LHp2 - 2*RHp2               // Trill keys -1 and -2 
    3940:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
      + (6-octaveR)*12;       //Octave rollers, reversed    
    3944:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3948:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    394c:	f7ff ba49 	b.w	2de2 <readSwitches()+0x12e>
    3950:	1fff9aec 	.word	0x1fff9aec
    3954:	1fff8e6c 	.word	0x1fff8e6c
    3958:	1fff9911 	.word	0x1fff9911

0000395c <loop>:
  if(configManagementMode) {
    395c:	4b9f      	ldr	r3, [pc, #636]	; (3bdc <loop+0x280>)
    395e:	781b      	ldrb	r3, [r3, #0]
    3960:	2b00      	cmp	r3, #0
    3962:	f040 812d 	bne.w	3bc0 <loop+0x264>
void loop() {
    3966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  breathFilter.input(analogRead(breathSensorPin));
    396a:	200e      	movs	r0, #14
void loop() {
    396c:	b08b      	sub	sp, #44	; 0x2c
  breathFilter.input(analogRead(breathSensorPin));
    396e:	f00a fc7d 	bl	e26c <analogRead>
    3972:	f00d fe5f 	bl	11634 <__aeabi_i2f>
    3976:	4601      	mov	r1, r0
    3978:	4899      	ldr	r0, [pc, #612]	; (3be0 <loop+0x284>)
  pressureSensor = constrain((int) breathFilter.output(), 0, 4095); // Get the filtered pressure sensor reading from analog pin A0, input from sensor MP3V5004GP
    397a:	4c9a      	ldr	r4, [pc, #616]	; (3be4 <loop+0x288>)
  if (mainState == NOTE_OFF) {
    397c:	4d9a      	ldr	r5, [pc, #616]	; (3be8 <loop+0x28c>)
  breathFilter.input(analogRead(breathSensorPin));
    397e:	f7fc fdd3 	bl	528 <FilterOnePole::input(float)>
  pressureSensor = constrain((int) breathFilter.output(), 0, 4095); // Get the filtered pressure sensor reading from analog pin A0, input from sensor MP3V5004GP
    3982:	4897      	ldr	r0, [pc, #604]	; (3be0 <loop+0x284>)
    3984:	f7fc fda4 	bl	4d0 <FilterOnePole::output()>
    3988:	f00e f86e 	bl	11a68 <__aeabi_f2iz>
    398c:	f380 000c 	usat	r0, #12, r0
    3990:	6020      	str	r0, [r4, #0]
  readSwitches();
    3992:	f7ff f98f 	bl	2cb4 <readSwitches()>
  if (mainState == NOTE_OFF) {
    3996:	682b      	ldr	r3, [r5, #0]
    3998:	2b01      	cmp	r3, #1
    399a:	d054      	beq.n	3a46 <loop+0xea>
  } else if (mainState == RISE_WAIT) {
    399c:	2b02      	cmp	r3, #2
    399e:	f000 8477 	beq.w	4290 <loop+0x934>
  } else if (mainState == NOTE_ON) {
    39a2:	2b03      	cmp	r3, #3
    39a4:	f000 8170 	beq.w	3c88 <loop+0x32c>
    39a8:	4c90      	ldr	r4, [pc, #576]	; (3bec <loop+0x290>)
    39aa:	4e91      	ldr	r6, [pc, #580]	; (3bf0 <loop+0x294>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    39ac:	6823      	ldr	r3, [r4, #0]
  if ((currentTime - ccBreathSendTime) > (breathInterval-1u)){
    39ae:	4c91      	ldr	r4, [pc, #580]	; (3bf4 <loop+0x298>)
    39b0:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    39b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    39b4:	6822      	ldr	r2, [r4, #0]
  currentTime = millis();
    39b6:	6033      	str	r3, [r6, #0]
  if ((currentTime - ccBreathSendTime) > (breathInterval-1u)){
    39b8:	1a99      	subs	r1, r3, r2
    39ba:	4a8f      	ldr	r2, [pc, #572]	; (3bf8 <loop+0x29c>)
    39bc:	8812      	ldrh	r2, [r2, #0]
    39be:	3a01      	subs	r2, #1
    39c0:	4291      	cmp	r1, r2
    39c2:	f200 8339 	bhi.w	4038 <loop+0x6dc>
  if (currentTime - ccSendTime > CC_INTERVAL) {
    39c6:	4c8d      	ldr	r4, [pc, #564]	; (3bfc <loop+0x2a0>)
    39c8:	6822      	ldr	r2, [r4, #0]
    39ca:	1a9a      	subs	r2, r3, r2
    39cc:	2a09      	cmp	r2, #9
    39ce:	f200 8302 	bhi.w	3fd6 <loop+0x67a>
  if (currentTime - ccSendTime2 > CC_INTERVAL2) {
    39d2:	4c8b      	ldr	r4, [pc, #556]	; (3c00 <loop+0x2a4>)
    39d4:	6822      	ldr	r2, [r4, #0]
    39d6:	1a9a      	subs	r2, r3, r2
    39d8:	2a0d      	cmp	r2, #13
    39da:	f200 82f7 	bhi.w	3fcc <loop+0x670>
  if (currentTime - ccSendTime3 > CC_INTERVAL3) {
    39de:	4c89      	ldr	r4, [pc, #548]	; (3c04 <loop+0x2a8>)
    39e0:	6822      	ldr	r2, [r4, #0]
    39e2:	1a9a      	subs	r2, r3, r2
    39e4:	2a25      	cmp	r2, #37	; 0x25
    39e6:	d91c      	bls.n	3a22 <loop+0xc6>
    if (gateOpenEnable || gateOpen) doorKnobCheck();
    39e8:	4b87      	ldr	r3, [pc, #540]	; (3c08 <loop+0x2ac>)
    39ea:	881b      	ldrh	r3, [r3, #0]
    39ec:	b913      	cbnz	r3, 39f4 <loop+0x98>
    39ee:	4b87      	ldr	r3, [pc, #540]	; (3c0c <loop+0x2b0>)
    39f0:	781b      	ldrb	r3, [r3, #0]
    39f2:	b10b      	cbz	r3, 39f8 <loop+0x9c>
    39f4:	f7fe f91e 	bl	1c34 <doorKnobCheck()>
    battCheck();
    39f8:	f7fe f97a 	bl	1cf0 <battCheck()>
    if (((pinkySetting == LVL) || (pinkySetting == LVLP) || (pinkySetting == GLD)) && pinkyKey && K7 && (mainState == NOTE_OFF)){
    39fc:	4b84      	ldr	r3, [pc, #528]	; (3c10 <loop+0x2b4>)
    39fe:	881b      	ldrh	r3, [r3, #0]
    3a00:	3b1b      	subs	r3, #27
    3a02:	b29b      	uxth	r3, r3
    3a04:	2b02      	cmp	r3, #2
    3a06:	d808      	bhi.n	3a1a <loop+0xbe>
    3a08:	4b82      	ldr	r3, [pc, #520]	; (3c14 <loop+0x2b8>)
    3a0a:	781b      	ldrb	r3, [r3, #0]
    3a0c:	b12b      	cbz	r3, 3a1a <loop+0xbe>
    3a0e:	4b82      	ldr	r3, [pc, #520]	; (3c18 <loop+0x2bc>)
    3a10:	781b      	ldrb	r3, [r3, #0]
    3a12:	b113      	cbz	r3, 3a1a <loop+0xbe>
    3a14:	682b      	ldr	r3, [r5, #0]
    3a16:	2b01      	cmp	r3, #1
    3a18:	d001      	beq.n	3a1e <loop+0xc2>
    } else updateSensorLEDs();
    3a1a:	f002 faff 	bl	601c <updateSensorLEDs()>
    ccSendTime3 = currentTime;
    3a1e:	6833      	ldr	r3, [r6, #0]
    3a20:	6023      	str	r3, [r4, #0]
  if (currentTime - pixelUpdateTime > pixelUpdateInterval) {
    3a22:	4c7e      	ldr	r4, [pc, #504]	; (3c1c <loop+0x2c0>)
    3a24:	6822      	ldr	r2, [r4, #0]
    3a26:	1a9b      	subs	r3, r3, r2
    3a28:	2b50      	cmp	r3, #80	; 0x50
    3a2a:	f200 82eb 	bhi.w	4004 <loop+0x6a8>
  if(dacMode == DAC_MODE_PITCH) { // pitch CV from DAC and breath CV from PWM on pin 6, for filtering and scaling on separate board
    3a2e:	4b7c      	ldr	r3, [pc, #496]	; (3c20 <loop+0x2c4>)
    3a30:	881b      	ldrh	r3, [r3, #0]
    3a32:	2b01      	cmp	r3, #1
    3a34:	f000 8292 	beq.w	3f5c <loop+0x600>
  midiDiscardInput();
    3a38:	f005 fb08 	bl	904c <midiDiscardInput()>
}
    3a3c:	b00b      	add	sp, #44	; 0x2c
    3a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  menu();
    3a42:	f004 bfb7 	b.w	89b4 <menu()>
    if (activeMIDIchannel != MIDIchannel) {
    3a46:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 3c24 <loop+0x2c8>
    3a4a:	4b77      	ldr	r3, [pc, #476]	; (3c28 <loop+0x2cc>)
    3a4c:	f8b8 0000 	ldrh.w	r0, [r8]
    3a50:	781a      	ldrb	r2, [r3, #0]
    3a52:	4282      	cmp	r2, r0
    3a54:	f040 80bc 	bne.w	3bd0 <loop+0x274>
    if ((activePatch != patch) && doPatchUpdate) {
    3a58:	4f74      	ldr	r7, [pc, #464]	; (3c2c <loop+0x2d0>)
    3a5a:	4b75      	ldr	r3, [pc, #468]	; (3c30 <loop+0x2d4>)
    3a5c:	8838      	ldrh	r0, [r7, #0]
    3a5e:	781a      	ldrb	r2, [r3, #0]
    3a60:	4282      	cmp	r2, r0
    3a62:	d004      	beq.n	3a6e <loop+0x112>
    3a64:	4e73      	ldr	r6, [pc, #460]	; (3c34 <loop+0x2d8>)
    3a66:	7832      	ldrb	r2, [r6, #0]
    3a68:	2a00      	cmp	r2, #0
    3a6a:	f040 85cb 	bne.w	4604 <loop+0xca8>
    if ((pressureSensor > breathThrVal) || gateOpen) {
    3a6e:	4a72      	ldr	r2, [pc, #456]	; (3c38 <loop+0x2dc>)
    3a70:	6823      	ldr	r3, [r4, #0]
    3a72:	8812      	ldrh	r2, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a74:	4c5d      	ldr	r4, [pc, #372]	; (3bec <loop+0x290>)
    3a76:	429a      	cmp	r2, r3
    3a78:	f280 80a4 	bge.w	3bc4 <loop+0x268>
    3a7c:	6821      	ldr	r1, [r4, #0]
    3a7e:	9106      	str	r1, [sp, #24]
      initial_breath_value = pressureSensor;
    3a80:	496e      	ldr	r1, [pc, #440]	; (3c3c <loop+0x2e0>)
      breath_on_time = millis();
    3a82:	4a6f      	ldr	r2, [pc, #444]	; (3c40 <loop+0x2e4>)
      initial_breath_value = pressureSensor;
    3a84:	600b      	str	r3, [r1, #0]
	return ret;
    3a86:	9b06      	ldr	r3, [sp, #24]
      breath_on_time = millis();
    3a88:	6013      	str	r3, [r2, #0]
      mainState = RISE_WAIT; // Go to next state
    3a8a:	2302      	movs	r3, #2
    3a8c:	602b      	str	r3, [r5, #0]
    if (legacy || legacyBrAct) {
    3a8e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 3c44 <loop+0x2e8>
    3a92:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 3c48 <loop+0x2ec>
    3a96:	f8b9 3000 	ldrh.w	r3, [r9]
    3a9a:	f8ba 2000 	ldrh.w	r2, [sl]
    3a9e:	4313      	orrs	r3, r2
    3aa0:	b29b      	uxth	r3, r3
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	f040 8334 	bne.w	4110 <loop+0x7b4>
    if (analogRead(breathSensorPin) > (breathCalZero - 850)) programonce = false;
    3aa8:	4b68      	ldr	r3, [pc, #416]	; (3c4c <loop+0x2f0>)
    3aaa:	681e      	ldr	r6, [r3, #0]
    3aac:	200e      	movs	r0, #14
    3aae:	f00a fbdd 	bl	e26c <analogRead>
    3ab2:	f46f 7354 	mvn.w	r3, #848	; 0x350
    3ab6:	441e      	add	r6, r3
    3ab8:	4286      	cmp	r6, r0
    3aba:	dc02      	bgt.n	3ac2 <loop+0x166>
    3abc:	4b64      	ldr	r3, [pc, #400]	; (3c50 <loop+0x2f4>)
    3abe:	2200      	movs	r2, #0
    3ac0:	701a      	strb	r2, [r3, #0]
    if (polySelect != EHarmonizerOff) {
    3ac2:	4b64      	ldr	r3, [pc, #400]	; (3c54 <loop+0x2f8>)
    3ac4:	881b      	ldrh	r3, [r3, #0]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	f000 851a 	beq.w	4500 <loop+0xba4>
      if (lastSpecialKey != specialKey) {
    3acc:	4b62      	ldr	r3, [pc, #392]	; (3c58 <loop+0x2fc>)
    3ace:	4963      	ldr	r1, [pc, #396]	; (3c5c <loop+0x300>)
    3ad0:	781a      	ldrb	r2, [r3, #0]
    3ad2:	780b      	ldrb	r3, [r1, #0]
    3ad4:	4293      	cmp	r3, r2
    3ad6:	d062      	beq.n	3b9e <loop+0x242>
        if (specialKey) {
    3ad8:	2a00      	cmp	r2, #0
    3ada:	d060      	beq.n	3b9e <loop+0x242>
          if (K4) {
    3adc:	4b60      	ldr	r3, [pc, #384]	; (3c60 <loop+0x304>)
    3ade:	781e      	ldrb	r6, [r3, #0]
    3ae0:	2e00      	cmp	r6, #0
    3ae2:	f000 8726 	beq.w	4932 <loop+0xfd6>
            if (!slurSustain) {
    3ae6:	485f      	ldr	r0, [pc, #380]	; (3c64 <loop+0x308>)
    3ae8:	7807      	ldrb	r7, [r0, #0]
    3aea:	2f00      	cmp	r7, #0
    3aec:	f040 871f 	bne.w	492e <loop+0xfd2>
              slurSostenuto = 0;
    3af0:	f8df c174 	ldr.w	ip, [pc, #372]	; 3c68 <loop+0x30c>
          if (K5) {
    3af4:	4b5d      	ldr	r3, [pc, #372]	; (3c6c <loop+0x310>)
              slurSostenuto = 0;
    3af6:	f88c 7000 	strb.w	r7, [ip]
              parallelChord = 0;
    3afa:	f8df a174 	ldr.w	sl, [pc, #372]	; 3c70 <loop+0x314>
              rotatorOn = 0;
    3afe:	f8df c174 	ldr.w	ip, [pc, #372]	; 3c74 <loop+0x318>
          if (K5) {
    3b02:	781b      	ldrb	r3, [r3, #0]
              parallelChord = 0;
    3b04:	f88a 7000 	strb.w	r7, [sl]
              rotatorOn = 0;
    3b08:	f88c 7000 	strb.w	r7, [ip]
              slurSustain = 1;
    3b0c:	2701      	movs	r7, #1
              rotatorOn = 0;
    3b0e:	f8cd c008 	str.w	ip, [sp, #8]
              slurSustain = 1;
    3b12:	7007      	strb	r7, [r0, #0]
          if (K5) {
    3b14:	b133      	cbz	r3, 3b24 <loop+0x1c8>
              slurSustain = 0;
    3b16:	2700      	movs	r7, #0
    3b18:	7007      	strb	r7, [r0, #0]
              rotatorOn = 0;
    3b1a:	9802      	ldr	r0, [sp, #8]
    3b1c:	7007      	strb	r7, [r0, #0]
              parallelChord = 1;
    3b1e:	2001      	movs	r0, #1
    3b20:	f88a 0000 	strb.w	r0, [sl]
          if (K1) {
    3b24:	4854      	ldr	r0, [pc, #336]	; (3c78 <loop+0x31c>)
    3b26:	f890 e000 	ldrb.w	lr, [r0]
    3b2a:	f1be 0f00 	cmp.w	lr, #0
    3b2e:	f000 87f8 	beq.w	4b22 <loop+0x11c6>
            if (!subOctaveDouble) {
    3b32:	4852      	ldr	r0, [pc, #328]	; (3c7c <loop+0x320>)
    3b34:	7807      	ldrb	r7, [r0, #0]
    3b36:	2f00      	cmp	r7, #0
    3b38:	f041 8128 	bne.w	4d8c <loop+0x1430>
              rotatorOn = 0;
    3b3c:	f8df c134 	ldr.w	ip, [pc, #308]	; 3c74 <loop+0x318>
    3b40:	f88c 7000 	strb.w	r7, [ip]
              subOctaveDouble = 1;
    3b44:	2701      	movs	r7, #1
    3b46:	7007      	strb	r7, [r0, #0]
          if (K2) {
    3b48:	484d      	ldr	r0, [pc, #308]	; (3c80 <loop+0x324>)
    3b4a:	7800      	ldrb	r0, [r0, #0]
    3b4c:	2800      	cmp	r0, #0
    3b4e:	f000 8633 	beq.w	47b8 <loop+0xe5c>
            if (!slurSostenuto) {
    3b52:	4f45      	ldr	r7, [pc, #276]	; (3c68 <loop+0x30c>)
    3b54:	f897 c000 	ldrb.w	ip, [r7]
    3b58:	f1bc 0f00 	cmp.w	ip, #0
    3b5c:	f041 811a 	bne.w	4d94 <loop+0x1438>
              slurSustain = 0;
    3b60:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3c64 <loop+0x308>
    3b64:	f888 c000 	strb.w	ip, [r8]
              slurSostenuto = 1;
    3b68:	f04f 0c01 	mov.w	ip, #1
    3b6c:	f887 c000 	strb.w	ip, [r7]
          if (!K1 && !K4 && !K5 && !K2 && !pinkyKey) {
    3b70:	f1be 0f00 	cmp.w	lr, #0
    3b74:	f040 8620 	bne.w	47b8 <loop+0xe5c>
    3b78:	4333      	orrs	r3, r6
    3b7a:	4318      	orrs	r0, r3
    3b7c:	f040 861c 	bne.w	47b8 <loop+0xe5c>
    3b80:	4b24      	ldr	r3, [pc, #144]	; (3c14 <loop+0x2b8>)
    3b82:	781b      	ldrb	r3, [r3, #0]
    3b84:	2b00      	cmp	r3, #0
    3b86:	f040 861c 	bne.w	47c2 <loop+0xe66>
            slurSustain = 0;
    3b8a:	4836      	ldr	r0, [pc, #216]	; (3c64 <loop+0x308>)
    3b8c:	7003      	strb	r3, [r0, #0]
            parallelChord = 0;
    3b8e:	4838      	ldr	r0, [pc, #224]	; (3c70 <loop+0x314>)
    3b90:	7003      	strb	r3, [r0, #0]
            subOctaveDouble = 0;
    3b92:	483a      	ldr	r0, [pc, #232]	; (3c7c <loop+0x320>)
    3b94:	7003      	strb	r3, [r0, #0]
            rotatorOn = 0;
    3b96:	4837      	ldr	r0, [pc, #220]	; (3c74 <loop+0x318>)
    3b98:	7003      	strb	r3, [r0, #0]
            slurSostenuto = 0;
    3b9a:	4833      	ldr	r0, [pc, #204]	; (3c68 <loop+0x30c>)
    3b9c:	7003      	strb	r3, [r0, #0]
      lastSpecialKey = specialKey;
    3b9e:	700a      	strb	r2, [r1, #0]
    if ((pinkySetting == LVL) || (pinkySetting == LVLP)){
    3ba0:	4b1b      	ldr	r3, [pc, #108]	; (3c10 <loop+0x2b4>)
    3ba2:	881b      	ldrh	r3, [r3, #0]
    3ba4:	f1a3 021b 	sub.w	r2, r3, #27
    3ba8:	2a01      	cmp	r2, #1
    3baa:	f240 84b5 	bls.w	4518 <loop+0xbbc>
    } else if (pinkySetting == GLD){
    3bae:	2b1d      	cmp	r3, #29
    3bb0:	f47f aefb 	bne.w	39aa <loop+0x4e>
      lastPinkyKey = pinkyKey;
    3bb4:	4a17      	ldr	r2, [pc, #92]	; (3c14 <loop+0x2b8>)
    3bb6:	4b33      	ldr	r3, [pc, #204]	; (3c84 <loop+0x328>)
    3bb8:	7812      	ldrb	r2, [r2, #0]
    3bba:	4e0d      	ldr	r6, [pc, #52]	; (3bf0 <loop+0x294>)
    3bbc:	701a      	strb	r2, [r3, #0]
    3bbe:	e6f5      	b.n	39ac <loop+0x50>
    configModeLoop();
    3bc0:	f006 bf5a 	b.w	aa78 <configModeLoop()>
    if ((pressureSensor > breathThrVal) || gateOpen) {
    3bc4:	4a11      	ldr	r2, [pc, #68]	; (3c0c <loop+0x2b0>)
    3bc6:	7812      	ldrb	r2, [r2, #0]
    3bc8:	2a00      	cmp	r2, #0
    3bca:	f47f af57 	bne.w	3a7c <loop+0x120>
    3bce:	e75e      	b.n	3a8e <loop+0x132>
      activeMIDIchannel = MIDIchannel; // only switch channel if no active note
    3bd0:	b2c0      	uxtb	r0, r0
    3bd2:	7018      	strb	r0, [r3, #0]
      midiSetChannel(activeMIDIchannel);
    3bd4:	f005 f8ca 	bl	8d6c <midiSetChannel(unsigned char)>
    3bd8:	e73e      	b.n	3a58 <loop+0xfc>
    3bda:	bf00      	nop
    3bdc:	1fff9a64 	.word	0x1fff9a64
    3be0:	1fff9a28 	.word	0x1fff9a28
    3be4:	1fff9b8c 	.word	0x1fff9b8c
    3be8:	1fff9b30 	.word	0x1fff9b30
    3bec:	1fff9d70 	.word	0x1fff9d70
    3bf0:	1fff9a68 	.word	0x1fff9a68
    3bf4:	1fff9a54 	.word	0x1fff9a54
    3bf8:	1fff8d3a 	.word	0x1fff8d3a
    3bfc:	1fff9a58 	.word	0x1fff9a58
    3c00:	1fff9a5c 	.word	0x1fff9a5c
    3c04:	1fff9a60 	.word	0x1fff9a60
    3c08:	1fff9ac2 	.word	0x1fff9ac2
    3c0c:	1fff9ac0 	.word	0x1fff9ac0
    3c10:	1fff9b74 	.word	0x1fff9b74
    3c14:	1fff9b72 	.word	0x1fff9b72
    3c18:	1fff990e 	.word	0x1fff990e
    3c1c:	1fff992c 	.word	0x1fff992c
    3c20:	1fff9a84 	.word	0x1fff9a84
    3c24:	1fff9918 	.word	0x1fff9918
    3c28:	1fff9930 	.word	0x1fff9930
    3c2c:	1fff9b62 	.word	0x1fff9b62
    3c30:	1fff9932 	.word	0x1fff9932
    3c34:	1fff9a8a 	.word	0x1fff9a8a
    3c38:	1fff9a4e 	.word	0x1fff9a4e
    3c3c:	1fff9af4 	.word	0x1fff9af4
    3c40:	1fff9a50 	.word	0x1fff9a50
    3c44:	1fff9b0e 	.word	0x1fff9b0e
    3c48:	1fff9b10 	.word	0x1fff9b10
    3c4c:	1fff9a24 	.word	0x1fff9a24
    3c50:	1fff9b92 	.word	0x1fff9b92
    3c54:	1fff9b80 	.word	0x1fff9b80
    3c58:	1fff9bd6 	.word	0x1fff9bd6
    3c5c:	1fff9b0a 	.word	0x1fff9b0a
    3c60:	1fff990b 	.word	0x1fff990b
    3c64:	1fff9bd5 	.word	0x1fff9bd5
    3c68:	1fff9bd4 	.word	0x1fff9bd4
    3c6c:	1fff990c 	.word	0x1fff990c
    3c70:	1fff9b60 	.word	0x1fff9b60
    3c74:	1fff9bc2 	.word	0x1fff9bc2
    3c78:	1fff9908 	.word	0x1fff9908
    3c7c:	1fff9bda 	.word	0x1fff9bda
    3c80:	1fff9909 	.word	0x1fff9909
    3c84:	1fff9b09 	.word	0x1fff9b09
    if ((pressureSensor < breathThrVal) && !gateOpen) {
    3c88:	4ba2      	ldr	r3, [pc, #648]	; (3f14 <loop+0x5b8>)
    3c8a:	6821      	ldr	r1, [r4, #0]
    3c8c:	881a      	ldrh	r2, [r3, #0]
    3c8e:	428a      	cmp	r2, r1
    3c90:	dd58      	ble.n	3d44 <loop+0x3e8>
    3c92:	4ba1      	ldr	r3, [pc, #644]	; (3f18 <loop+0x5bc>)
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	2b00      	cmp	r3, #0
    3c98:	d154      	bne.n	3d44 <loop+0x3e8>
      activeNote = noteValueCheck(activeNote);
    3c9a:	f8df 9280 	ldr.w	r9, [pc, #640]	; 3f1c <loop+0x5c0>
    3c9e:	f899 0000 	ldrb.w	r0, [r9]
  if (note > 127) {
    3ca2:	287f      	cmp	r0, #127	; 0x7f
    3ca4:	dd0b      	ble.n	3cbe <loop+0x362>
    note = 115 + (note - 127) % 12;
    3ca6:	387f      	subs	r0, #127	; 0x7f
    3ca8:	f1a3 3355 	sub.w	r3, r3, #1431655765	; 0x55555555
    3cac:	fba3 2300 	umull	r2, r3, r3, r0
    3cb0:	08db      	lsrs	r3, r3, #3
    3cb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3cb6:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    3cba:	3073      	adds	r0, #115	; 0x73
        activeNote = noteValueCheck(activeNote);
    3cbc:	b2c0      	uxtb	r0, r0
      if (priority) {
    3cbe:	4b98      	ldr	r3, [pc, #608]	; (3f20 <loop+0x5c4>)
    3cc0:	9301      	str	r3, [sp, #4]
    3cc2:	881b      	ldrh	r3, [r3, #0]
      activeNote = noteValueCheck(activeNote);
    3cc4:	f889 0000 	strb.w	r0, [r9]
      if (priority) {
    3cc8:	2b00      	cmp	r3, #0
    3cca:	f041 80cc 	bne.w	4e66 <loop+0x150a>
      if (parallelChord) {
    3cce:	f8df a254 	ldr.w	sl, [pc, #596]	; 3f24 <loop+0x5c8>
    3cd2:	f89a 3000 	ldrb.w	r3, [sl]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	f000 863c 	beq.w	4954 <loop+0xff8>
        for (int i = 0; i < addedIntervals; i++) {
    3cdc:	4f92      	ldr	r7, [pc, #584]	; (3f28 <loop+0x5cc>)
    3cde:	783b      	ldrb	r3, [r7, #0]
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	f000 8637 	beq.w	4954 <loop+0xff8>
    3ce6:	4e91      	ldr	r6, [pc, #580]	; (3f2c <loop+0x5d0>)
    note = 12 - abs(note) % 12;
    3ce8:	f8df b244 	ldr.w	fp, [pc, #580]	; 3f30 <loop+0x5d4>
        for (int i = 0; i < addedIntervals; i++) {
    3cec:	f04f 0800 	mov.w	r8, #0
    3cf0:	e011      	b.n	3d16 <loop+0x3ba>
    note = 115 + (note - 127) % 12;
    3cf2:	fbab 1302 	umull	r1, r3, fp, r2
    3cf6:	08db      	lsrs	r3, r3, #3
    3cf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3cfc:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
    3d00:	f102 0073 	add.w	r0, r2, #115	; 0x73
          midiSendNoteOff(noteValueCheck(activeNote + slurInterval[i])); // send Note On message for new note
    3d04:	b2c0      	uxtb	r0, r0
    3d06:	f005 f8ef 	bl	8ee8 <midiSendNoteOff(unsigned char)>
        for (int i = 0; i < addedIntervals; i++) {
    3d0a:	783b      	ldrb	r3, [r7, #0]
    3d0c:	f108 0801 	add.w	r8, r8, #1
    3d10:	4543      	cmp	r3, r8
    3d12:	f340 861f 	ble.w	4954 <loop+0xff8>
          midiSendNoteOff(noteValueCheck(activeNote + slurInterval[i])); // send Note On message for new note
    3d16:	f899 0000 	ldrb.w	r0, [r9]
    3d1a:	f856 3f04 	ldr.w	r3, [r6, #4]!
    3d1e:	4418      	add	r0, r3
  if (note > 127) {
    3d20:	287f      	cmp	r0, #127	; 0x7f
    note = 115 + (note - 127) % 12;
    3d22:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
  if (note > 127) {
    3d26:	dce4      	bgt.n	3cf2 <loop+0x396>
  } else if (note < 0) {
    3d28:	2800      	cmp	r0, #0
    note = 12 - abs(note) % 12;
    3d2a:	f1c0 0200 	rsb	r2, r0, #0
  } else if (note < 0) {
    3d2e:	dae9      	bge.n	3d04 <loop+0x3a8>
    note = 12 - abs(note) % 12;
    3d30:	fbab 1302 	umull	r1, r3, fp, r2
    3d34:	08db      	lsrs	r3, r3, #3
    3d36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d3a:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
    3d3e:	f1c2 000c 	rsb	r0, r2, #12
    3d42:	e7df      	b.n	3d04 <loop+0x3a8>
      if (noteValueCheck(fingeredNote) != activeNote) {
    3d44:	4e7b      	ldr	r6, [pc, #492]	; (3f34 <loop+0x5d8>)
    3d46:	6833      	ldr	r3, [r6, #0]
  if (note > 127) {
    3d48:	2b7f      	cmp	r3, #127	; 0x7f
    3d4a:	f300 8484 	bgt.w	4656 <loop+0xcfa>
  } else if (note < 0) {
    3d4e:	2b00      	cmp	r3, #0
    3d50:	da0a      	bge.n	3d68 <loop+0x40c>
    note = 12 - abs(note) % 12;
    3d52:	4877      	ldr	r0, [pc, #476]	; (3f30 <loop+0x5d4>)
    3d54:	425b      	negs	r3, r3
    3d56:	fba0 7003 	umull	r7, r0, r0, r3
    3d5a:	08c0      	lsrs	r0, r0, #3
    3d5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3d60:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
    3d64:	f1c3 030c 	rsb	r3, r3, #12
      if (noteValueCheck(fingeredNote) != activeNote) {
    3d68:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 3f1c <loop+0x5c0>
    3d6c:	f899 7000 	ldrb.w	r7, [r9]
    3d70:	429f      	cmp	r7, r3
    3d72:	f000 84e2 	beq.w	473a <loop+0xdde>
        if (!velocity) {
    3d76:	4b70      	ldr	r3, [pc, #448]	; (3f38 <loop+0x5dc>)
    3d78:	881b      	ldrh	r3, [r3, #0]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d146      	bne.n	3e0c <loop+0x4b0>
          unsigned int breathValHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    3d7e:	4b6f      	ldr	r3, [pc, #444]	; (3f3c <loop+0x5e0>)
    3d80:	496f      	ldr	r1, [pc, #444]	; (3f40 <loop+0x5e4>)
    3d82:	681b      	ldr	r3, [r3, #0]
    3d84:	8809      	ldrh	r1, [r1, #0]
    3d86:	429a      	cmp	r2, r3
    3d88:	f340 87d2 	ble.w	4d30 <loop+0x13d4>
        breathLevel = constrain(max(pressureSensor, initial_breath_value), breathThrVal, breathMaxVal);
    3d8c:	4613      	mov	r3, r2
	if (in_range == 0) return out_min + out_range / 2;
    3d8e:	1a89      	subs	r1, r1, r2
    3d90:	f001 8006 	beq.w	4da0 <loop+0x1444>
	long num = (x - in_min) * out_range;
    3d94:	1a9b      	subs	r3, r3, r2
    3d96:	ebc3 3383 	rsb	r3, r3, r3, lsl #14
		num += in_range / 2;
    3d9a:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
    3d9e:	eb03 0362 	add.w	r3, r3, r2, asr #1
		if (in_range * num < 0) return result - 1;
    3da2:	fb03 f201 	mul.w	r2, r3, r1
    3da6:	2a00      	cmp	r2, #0
	long result = num / in_range + out_min;
    3da8:	fb93 f0f1 	sdiv	r0, r3, r1
		if (in_range * num < 0) return result - 1;
    3dac:	f2c1 80c0 	blt.w	4f30 <L_19097_delayMicroseconds+0x18>
          unsigned int breathValHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    3db0:	f7fd fa7e 	bl	12b0 <breathCurve(unsigned int)>
          velocitySend = constrain(velocitySend + velocitySend * .1 * velBias, 1, 127);
    3db4:	f3c0 10c6 	ubfx	r0, r0, #7, #7
    3db8:	f00d fc3c 	bl	11634 <__aeabi_i2f>
    3dbc:	4b61      	ldr	r3, [pc, #388]	; (3f44 <loop+0x5e8>)
    3dbe:	4680      	mov	r8, r0
    3dc0:	8818      	ldrh	r0, [r3, #0]
    3dc2:	f00d fc37 	bl	11634 <__aeabi_i2f>
    3dc6:	4960      	ldr	r1, [pc, #384]	; (3f48 <loop+0x5ec>)
    3dc8:	4682      	mov	sl, r0
    3dca:	4640      	mov	r0, r8
    3dcc:	f00d fc86 	bl	116dc <__aeabi_fmul>
    3dd0:	4601      	mov	r1, r0
    3dd2:	4650      	mov	r0, sl
    3dd4:	f00d fc82 	bl	116dc <__aeabi_fmul>
    3dd8:	4641      	mov	r1, r8
    3dda:	f00d fb77 	bl	114cc <__addsf3>
    3dde:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    3de2:	4680      	mov	r8, r0
    3de4:	f00d fe18 	bl	11a18 <__aeabi_fcmplt>
    3de8:	2800      	cmp	r0, #0
    3dea:	f040 87c8 	bne.w	4d7e <loop+0x1422>
    3dee:	4957      	ldr	r1, [pc, #348]	; (3f4c <loop+0x5f0>)
    3df0:	4640      	mov	r0, r8
    3df2:	f00d fe2f 	bl	11a54 <__aeabi_fcmpgt>
    3df6:	2800      	cmp	r0, #0
    3df8:	f041 8066 	bne.w	4ec8 <loop+0x156c>
    3dfc:	4640      	mov	r0, r8
    3dfe:	f00d fe59 	bl	11ab4 <__aeabi_f2uiz>
    3e02:	b2c3      	uxtb	r3, r0
    3e04:	f8df 8148 	ldr.w	r8, [pc, #328]	; 3f50 <loop+0x5f4>
    3e08:	f888 3000 	strb.w	r3, [r8]
  if (note > 127) {
    3e0c:	2f7f      	cmp	r7, #127	; 0x7f
    3e0e:	dd0a      	ble.n	3e26 <loop+0x4ca>
    note = 115 + (note - 127) % 12;
    3e10:	4b47      	ldr	r3, [pc, #284]	; (3f30 <loop+0x5d4>)
    3e12:	3f7f      	subs	r7, #127	; 0x7f
    3e14:	fba3 2307 	umull	r2, r3, r3, r7
    3e18:	08db      	lsrs	r3, r3, #3
    3e1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e1e:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
    3e22:	3773      	adds	r7, #115	; 0x73
        activeNote = noteValueCheck(activeNote);
    3e24:	b2ff      	uxtb	r7, r7
        if ((parallelChord || subOctaveDouble || rotatorOn) && priority) { // poly playing, send old note off before new note on
    3e26:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 3f24 <loop+0x5c8>
        activeNote = noteValueCheck(activeNote);
    3e2a:	f889 7000 	strb.w	r7, [r9]
        if ((parallelChord || subOctaveDouble || rotatorOn) && priority) { // poly playing, send old note off before new note on
    3e2e:	f89a 3000 	ldrb.w	r3, [sl]
    3e32:	2b00      	cmp	r3, #0
    3e34:	f040 85c0 	bne.w	49b8 <loop+0x105c>
    3e38:	4b46      	ldr	r3, [pc, #280]	; (3f54 <loop+0x5f8>)
    3e3a:	4a47      	ldr	r2, [pc, #284]	; (3f58 <loop+0x5fc>)
    3e3c:	9303      	str	r3, [sp, #12]
    3e3e:	9202      	str	r2, [sp, #8]
    3e40:	781b      	ldrb	r3, [r3, #0]
    3e42:	7812      	ldrb	r2, [r2, #0]
    3e44:	431a      	orrs	r2, r3
    3e46:	f040 8673 	bne.w	4b30 <loop+0x11d4>
    3e4a:	4b35      	ldr	r3, [pc, #212]	; (3f20 <loop+0x5c4>)
    3e4c:	9301      	str	r3, [sp, #4]
        if (rotatorOn) {
    3e4e:	9b02      	ldr	r3, [sp, #8]
    3e50:	781b      	ldrb	r3, [r3, #0]
    3e52:	2b00      	cmp	r3, #0
    3e54:	f040 8693 	bne.w	4b7e <loop+0x1222>
        if ((parallelChord || subOctaveDouble || rotatorOn) && !priority) { // poly playing, send old note off before new note on
    3e58:	f89a 3000 	ldrb.w	r3, [sl]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	f000 864a 	beq.w	4af6 <loop+0x119a>
    3e62:	9b01      	ldr	r3, [sp, #4]
    3e64:	881b      	ldrh	r3, [r3, #0]
    3e66:	2b00      	cmp	r3, #0
    3e68:	f000 8752 	beq.w	4d10 <loop+0x13b4>
        fingeredNote = noteValueCheck(fingeredNote);
    3e6c:	6830      	ldr	r0, [r6, #0]
  if (note > 127) {
    3e6e:	287f      	cmp	r0, #127	; 0x7f
    3e70:	f340 8592 	ble.w	4998 <loop+0x103c>
    note = 115 + (note - 127) % 12;
    3e74:	4a2e      	ldr	r2, [pc, #184]	; (3f30 <loop+0x5d4>)
    3e76:	387f      	subs	r0, #127	; 0x7f
    3e78:	fba2 1200 	umull	r1, r2, r2, r0
    3e7c:	08d2      	lsrs	r2, r2, #3
    3e7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3e82:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    3e86:	3073      	adds	r0, #115	; 0x73
        fingeredNote = noteValueCheck(fingeredNote);
    3e88:	6030      	str	r0, [r6, #0]
        if (priority) {
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	f040 867d 	bne.w	4b8a <loop+0x122e>
        if (parallelChord) {
    3e90:	f89a 3000 	ldrb.w	r3, [sl]
    3e94:	2b00      	cmp	r3, #0
    3e96:	f000 841f 	beq.w	46d8 <loop+0xd7c>
          for (int i = 0; i < addedIntervals; i++) {
    3e9a:	4f23      	ldr	r7, [pc, #140]	; (3f28 <loop+0x5cc>)
    3e9c:	783b      	ldrb	r3, [r7, #0]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	f000 841a 	beq.w	46d8 <loop+0xd7c>
    3ea4:	4a21      	ldr	r2, [pc, #132]	; (3f2c <loop+0x5d0>)
    3ea6:	f8cd 9010 	str.w	r9, [sp, #16]
    3eaa:	2300      	movs	r3, #0
    3eac:	46b1      	mov	r9, r6
    3eae:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3f50 <loop+0x5f4>
    3eb2:	469b      	mov	fp, r3
    3eb4:	4616      	mov	r6, r2
    3eb6:	e014      	b.n	3ee2 <loop+0x586>
    note = 115 + (note - 127) % 12;
    3eb8:	4b1d      	ldr	r3, [pc, #116]	; (3f30 <loop+0x5d4>)
    3eba:	fba3 0201 	umull	r0, r2, r3, r1
    3ebe:	08d2      	lsrs	r2, r2, #3
    3ec0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3ec4:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
    3ec8:	f101 0073 	add.w	r0, r1, #115	; 0x73
            midiSendNoteOn(noteValueCheck(fingeredNote + slurInterval[i]), velocitySend); // send Note On message for new note
    3ecc:	f898 1000 	ldrb.w	r1, [r8]
    3ed0:	b2c0      	uxtb	r0, r0
    3ed2:	f004 ffcb 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
          for (int i = 0; i < addedIntervals; i++) {
    3ed6:	783a      	ldrb	r2, [r7, #0]
    3ed8:	f10b 0b01 	add.w	fp, fp, #1
    3edc:	455a      	cmp	r2, fp
    3ede:	f340 83f8 	ble.w	46d2 <loop+0xd76>
            midiSendNoteOn(noteValueCheck(fingeredNote + slurInterval[i]), velocitySend); // send Note On message for new note
    3ee2:	f856 0f04 	ldr.w	r0, [r6, #4]!
    3ee6:	f8d9 2000 	ldr.w	r2, [r9]
    3eea:	4410      	add	r0, r2
  if (note > 127) {
    3eec:	287f      	cmp	r0, #127	; 0x7f
    note = 115 + (note - 127) % 12;
    3eee:	f1a0 017f 	sub.w	r1, r0, #127	; 0x7f
  if (note > 127) {
    3ef2:	dce1      	bgt.n	3eb8 <loop+0x55c>
  } else if (note < 0) {
    3ef4:	2800      	cmp	r0, #0
    note = 12 - abs(note) % 12;
    3ef6:	f1c0 0100 	rsb	r1, r0, #0
  } else if (note < 0) {
    3efa:	dae7      	bge.n	3ecc <loop+0x570>
    note = 12 - abs(note) % 12;
    3efc:	4b0c      	ldr	r3, [pc, #48]	; (3f30 <loop+0x5d4>)
    3efe:	fba3 0201 	umull	r0, r2, r3, r1
    3f02:	08d2      	lsrs	r2, r2, #3
    3f04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3f08:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
    3f0c:	f1c1 000c 	rsb	r0, r1, #12
    3f10:	e7dc      	b.n	3ecc <loop+0x570>
    3f12:	bf00      	nop
    3f14:	1fff9a4e 	.word	0x1fff9a4e
    3f18:	1fff9ac0 	.word	0x1fff9ac0
    3f1c:	1fff9931 	.word	0x1fff9931
    3f20:	1fff9b90 	.word	0x1fff9b90
    3f24:	1fff9b60 	.word	0x1fff9b60
    3f28:	1fff8d38 	.word	0x1fff8d38
    3f2c:	1fff8e44 	.word	0x1fff8e44
    3f30:	aaaaaaab 	.word	0xaaaaaaab
    3f34:	1fff9ab0 	.word	0x1fff9ab0
    3f38:	1fff9bf4 	.word	0x1fff9bf4
    3f3c:	1fff9a48 	.word	0x1fff9a48
    3f40:	1fff9a4c 	.word	0x1fff9a4c
    3f44:	1fff9bf0 	.word	0x1fff9bf0
    3f48:	3dcccccd 	.word	0x3dcccccd
    3f4c:	42fe0000 	.word	0x42fe0000
    3f50:	1fff9bf6 	.word	0x1fff9bf6
    3f54:	1fff9bda 	.word	0x1fff9bda
    3f58:	1fff9bc2 	.word	0x1fff9bc2
    targetPitch += map(pitchBend,0,16383,-84,84);
    3f5c:	4aa4      	ldr	r2, [pc, #656]	; (41f0 <loop+0x894>)
    targetPitch = (fingeredNote-24)*42;
    3f5e:	4ba5      	ldr	r3, [pc, #660]	; (41f4 <loop+0x898>)
	long num = (x - in_min) * out_range;
    3f60:	6811      	ldr	r1, [r2, #0]
    3f62:	681b      	ldr	r3, [r3, #0]
    3f64:	20a8      	movs	r0, #168	; 0xa8
		num += in_range / 2;
    3f66:	f641 72ff 	movw	r2, #8191	; 0x1fff
    3f6a:	fb00 2201 	mla	r2, r0, r1, r2
	long result = num / in_range + out_min;
    3f6e:	48a2      	ldr	r0, [pc, #648]	; (41f8 <loop+0x89c>)
    3f70:	3b18      	subs	r3, #24
    3f72:	fb80 1002 	smull	r1, r0, r0, r2
    3f76:	212a      	movs	r1, #42	; 0x2a
    3f78:	4410      	add	r0, r2
    3f7a:	fb01 f303 	mul.w	r3, r1, r3
    3f7e:	17d1      	asrs	r1, r2, #31
    3f80:	ebc1 3160 	rsb	r1, r1, r0, asr #13
		if (in_range * num < 0) return result - 1;
    3f84:	2a00      	cmp	r2, #0
	long result = num / in_range + out_min;
    3f86:	bfac      	ite	ge
    3f88:	f1a1 0254 	subge.w	r2, r1, #84	; 0x54
		if (in_range * num < 0) return result - 1;
    3f8c:	f1a1 0255 	sublt.w	r2, r1, #85	; 0x55
    targetPitch -=quarterToneTrigger*21;
    3f90:	499a      	ldr	r1, [pc, #616]	; (41fc <loop+0x8a0>)
    targetPitch += map(pitchBend,0,16383,-84,84);
    3f92:	4413      	add	r3, r2
    if (portIsOn){
    3f94:	4a9a      	ldr	r2, [pc, #616]	; (4200 <loop+0x8a4>)
    targetPitch -=quarterToneTrigger*21;
    3f96:	7808      	ldrb	r0, [r1, #0]
    if (portIsOn){
    3f98:	7812      	ldrb	r2, [r2, #0]
    targetPitch -=quarterToneTrigger*21;
    3f9a:	499a      	ldr	r1, [pc, #616]	; (4204 <loop+0x8a8>)
    3f9c:	f06f 0414 	mvn.w	r4, #20
    3fa0:	fb04 3300 	mla	r3, r4, r0, r3
    3fa4:	600b      	str	r3, [r1, #0]
      if (targetPitch > cvPitch){
    3fa6:	4998      	ldr	r1, [pc, #608]	; (4208 <loop+0x8ac>)
    if (portIsOn){
    3fa8:	2a00      	cmp	r2, #0
    3faa:	d04c      	beq.n	4046 <loop+0x6ea>
      if (targetPitch > cvPitch){
    3fac:	6808      	ldr	r0, [r1, #0]
    3fae:	4283      	cmp	r3, r0
    3fb0:	dd47      	ble.n	4042 <loop+0x6e6>
        if (!cvPortaTuneCount) {
    3fb2:	4c96      	ldr	r4, [pc, #600]	; (420c <loop+0x8b0>)
    3fb4:	7822      	ldrb	r2, [r4, #0]
    3fb6:	2a00      	cmp	r2, #0
    3fb8:	f000 8379 	beq.w	46ae <loop+0xd52>
          cvPortaTuneCount++;
    3fbc:	3201      	adds	r2, #1
    3fbe:	b2d2      	uxtb	r2, r2
          if (cvPortaTuneCount > CVPORTATUNE) cvPortaTuneCount=0;
    3fc0:	2a02      	cmp	r2, #2
    3fc2:	f200 8591 	bhi.w	4ae8 <loop+0x118c>
          cvPortaTuneCount++;
    3fc6:	7022      	strb	r2, [r4, #0]
          cvPitch += 1+(127-oldport)/4;
    3fc8:	4603      	mov	r3, r0
    3fca:	e03d      	b.n	4048 <loop+0x6ec>
    portamento_();
    3fcc:	f7fe f9b0 	bl	2330 <portamento_()>
    ccSendTime2 = currentTime;
    3fd0:	6833      	ldr	r3, [r6, #0]
    3fd2:	6023      	str	r3, [r4, #0]
    3fd4:	e503      	b.n	39de <loop+0x82>
  if (3 == biteControl){
    3fd6:	4f8e      	ldr	r7, [pc, #568]	; (4210 <loop+0x8b4>)
    pitch_bend();
    3fd8:	f7fd fa94 	bl	1504 <pitch_bend()>
    extraController();
    3fdc:	f7fd feb4 	bl	1d48 <extraController()>
  if (3 == biteControl){
    3fe0:	883b      	ldrh	r3, [r7, #0]
    3fe2:	2b03      	cmp	r3, #3
    3fe4:	d102      	bne.n	3fec <loop+0x690>
    3fe6:	f7fc fcf1 	bl	9cc <biteCC_() [clone .part.0]>
  if (4 == biteControl) { // "GLS"
    3fea:	883b      	ldrh	r3, [r7, #0]
    3fec:	2b04      	cmp	r3, #4
    3fee:	d101      	bne.n	3ff4 <loop+0x698>
    3ff0:	f7fc fe36 	bl	c60 <gliss() [clone .part.0]>
  if (3 == leverControl){
    3ff4:	4b87      	ldr	r3, [pc, #540]	; (4214 <loop+0x8b8>)
    3ff6:	881b      	ldrh	r3, [r3, #0]
    3ff8:	2b03      	cmp	r3, #3
    3ffa:	f000 83d6 	beq.w	47aa <loop+0xe4e>
    ccSendTime = currentTime;
    3ffe:	6833      	ldr	r3, [r6, #0]
    4000:	6023      	str	r3, [r4, #0]
    4002:	e4e6      	b.n	39d2 <loop+0x76>
    drawSensorPixels(); // live sensor monitoring for the setup screens
    4004:	f003 fe28 	bl	7c58 <drawSensorPixels()>
    if (rotatorOn || slurSustain || parallelChord || subOctaveDouble || slurSostenuto || gateOpen) {
    4008:	4b83      	ldr	r3, [pc, #524]	; (4218 <loop+0x8bc>)
    400a:	4984      	ldr	r1, [pc, #528]	; (421c <loop+0x8c0>)
    400c:	4a84      	ldr	r2, [pc, #528]	; (4220 <loop+0x8c4>)
    400e:	7809      	ldrb	r1, [r1, #0]
    4010:	781b      	ldrb	r3, [r3, #0]
    4012:	7812      	ldrb	r2, [r2, #0]
    4014:	430b      	orrs	r3, r1
    4016:	4983      	ldr	r1, [pc, #524]	; (4224 <loop+0x8c8>)
    4018:	4313      	orrs	r3, r2
    401a:	4a83      	ldr	r2, [pc, #524]	; (4228 <loop+0x8cc>)
    401c:	7809      	ldrb	r1, [r1, #0]
    401e:	7812      	ldrb	r2, [r2, #0]
    4020:	430b      	orrs	r3, r1
    4022:	4313      	orrs	r3, r2
    4024:	4a81      	ldr	r2, [pc, #516]	; (422c <loop+0x8d0>)
    4026:	7812      	ldrb	r2, [r2, #0]
    4028:	4313      	orrs	r3, r2
    402a:	f000 877d 	beq.w	4f28 <L_19097_delayMicroseconds+0x10>
      statusLedFlip();
    402e:	f001 ffd5 	bl	5fdc <statusLedFlip()>
    pixelUpdateTime = currentTime;
    4032:	6833      	ldr	r3, [r6, #0]
    4034:	6023      	str	r3, [r4, #0]
    4036:	e4fa      	b.n	3a2e <loop+0xd2>
    breath();
    4038:	f7fd f982 	bl	1340 <breath()>
    ccBreathSendTime = currentTime;
    403c:	6833      	ldr	r3, [r6, #0]
    403e:	6023      	str	r3, [r4, #0]
    4040:	e4c1      	b.n	39c6 <loop+0x6a>
      } else if (targetPitch < cvPitch){
    4042:	f2c0 8320 	blt.w	4686 <loop+0xd2a>
      cvPitch = targetPitch;
    4046:	600b      	str	r3, [r1, #0]
    if (cvVibRate){
    4048:	4a79      	ldr	r2, [pc, #484]	; (4230 <loop+0x8d4>)
    404a:	8810      	ldrh	r0, [r2, #0]
    404c:	2800      	cmp	r0, #0
    404e:	d03a      	beq.n	40c6 <loop+0x76a>
      int timeDivider = timeDividerList[cvVibRate];
    4050:	4c78      	ldr	r4, [pc, #480]	; (4234 <loop+0x8d8>)
      int cvVib = map(((waveformsTable[map(currentTime%timeDivider, 0, timeDivider, 0, maxSamplesNum-1)] - 2047) * exSensorIndicator), -259968,259969,-11,11);
    4052:	6832      	ldr	r2, [r6, #0]
      int timeDivider = timeDividerList[cvVibRate];
    4054:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
	if (in_range == 0) return out_min + out_range / 2;
    4058:	2800      	cmp	r0, #0
    405a:	f000 83a9 	beq.w	47b0 <loop+0xe54>
      int cvVib = map(((waveformsTable[map(currentTime%timeDivider, 0, timeDivider, 0, maxSamplesNum-1)] - 2047) * exSensorIndicator), -259968,259969,-11,11);
    405e:	fbb2 f4f0 	udiv	r4, r2, r0
    4062:	fb00 2214 	mls	r2, r0, r4, r2
	long num = (x - in_min) * out_range;
    4066:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		num += in_range / 2;
    406a:	eb00 74d0 	add.w	r4, r0, r0, lsr #31
	long num = (x - in_min) * out_range;
    406e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
		num += in_range / 2;
    4072:	eb02 0264 	add.w	r2, r2, r4, asr #1
	long result = num / in_range + out_min;
    4076:	fb92 f4f0 	sdiv	r4, r2, r0
		if (in_range * num < 0) return result - 1;
    407a:	fb02 f000 	mul.w	r0, r2, r0
    407e:	2800      	cmp	r0, #0
    4080:	4a6d      	ldr	r2, [pc, #436]	; (4238 <loop+0x8dc>)
    4082:	bfb8      	it	lt
    4084:	f104 34ff 	addlt.w	r4, r4, #4294967295
    4088:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    408c:	f2a2 72ff 	subw	r2, r2, #2047	; 0x7ff
    4090:	4c6a      	ldr	r4, [pc, #424]	; (423c <loop+0x8e0>)
    4092:	6824      	ldr	r4, [r4, #0]
    4094:	fb04 f202 	mul.w	r2, r4, r2
	long num = (x - in_min) * out_range;
    4098:	f502 327d 	add.w	r2, r2, #259072	; 0x3f400
    409c:	2016      	movs	r0, #22
    409e:	f502 7260 	add.w	r2, r2, #896	; 0x380
    40a2:	fb00 f202 	mul.w	r2, r0, r2
	long result = num / in_range + out_min;
    40a6:	4c66      	ldr	r4, [pc, #408]	; (4240 <loop+0x8e4>)
		num += in_range / 2;
    40a8:	f502 327d 	add.w	r2, r2, #259072	; 0x3f400
    40ac:	f502 7260 	add.w	r2, r2, #896	; 0x380
	long result = num / in_range + out_min;
    40b0:	fb84 0402 	smull	r0, r4, r4, r2
    40b4:	17d0      	asrs	r0, r2, #31
    40b6:	ebc0 4064 	rsb	r0, r0, r4, asr #17
		if (in_range * num < 0) return result - 1;
    40ba:	2a00      	cmp	r2, #0
	long result = num / in_range + out_min;
    40bc:	bfac      	ite	ge
    40be:	380b      	subge	r0, #11
		if (in_range * num < 0) return result - 1;
    40c0:	380c      	sublt	r0, #12
      cvPitch += cvVib;
    40c2:	4403      	add	r3, r0
    40c4:	600b      	str	r3, [r1, #0]
    int cvPitchTuned = 2*(cvTune-100)+map(cvPitch,0,4032,0,4032+2*(cvScale-100));
    40c6:	4a5f      	ldr	r2, [pc, #380]	; (4244 <loop+0x8e8>)
    40c8:	495f      	ldr	r1, [pc, #380]	; (4248 <loop+0x8ec>)
    40ca:	8812      	ldrh	r2, [r2, #0]
	long result = num / in_range + out_min;
    40cc:	485f      	ldr	r0, [pc, #380]	; (424c <loop+0x8f0>)
    40ce:	f202 727c 	addw	r2, r2, #1916	; 0x77c
	long num = (x - in_min) * out_range;
    40d2:	fb02 f303 	mul.w	r3, r2, r3
    40d6:	005b      	lsls	r3, r3, #1
		num += in_range / 2;
    40d8:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
    40dc:	880a      	ldrh	r2, [r1, #0]
	long result = num / in_range + out_min;
    40de:	fb80 1003 	smull	r1, r0, r0, r3
    40e2:	3a64      	subs	r2, #100	; 0x64
    40e4:	4418      	add	r0, r3
    40e6:	17d9      	asrs	r1, r3, #31
		if (in_range * num < 0) return result - 1;
    40e8:	2b00      	cmp	r3, #0
    40ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
	long result = num / in_range + out_min;
    40ee:	ebc1 21e0 	rsb	r1, r1, r0, asr #11
		if (in_range * num < 0) return result - 1;
    40f2:	f2c0 84f6 	blt.w	4ae2 <loop+0x1186>
    40f6:	4411      	add	r1, r2
    analogWrite(dacPin,constrain(cvPitchTuned,0,4095));
    40f8:	f381 010c 	usat	r1, #12, r1
    40fc:	2028      	movs	r0, #40	; 0x28
    40fe:	f00a fc6b 	bl	e9d8 <analogWrite>
  midiDiscardInput();
    4102:	f004 ffa3 	bl	904c <midiDiscardInput()>
}
    4106:	b00b      	add	sp, #44	; 0x2c
    4108:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  menu();
    410c:	f004 bc52 	b.w	89b4 <menu()>
      bool bothPB = (pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && (pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    4110:	4b4f      	ldr	r3, [pc, #316]	; (4250 <loop+0x8f4>)
    4112:	4a50      	ldr	r2, [pc, #320]	; (4254 <loop+0x8f8>)
    4114:	881b      	ldrh	r3, [r3, #0]
    4116:	8812      	ldrh	r2, [r2, #0]
    4118:	4413      	add	r3, r2
    411a:	4a4f      	ldr	r2, [pc, #316]	; (4258 <loop+0x8fc>)
    411c:	6811      	ldr	r1, [r2, #0]
    411e:	105a      	asrs	r2, r3, #1
    4120:	ebb1 0f53 	cmp.w	r1, r3, lsr #1
    4124:	4b4d      	ldr	r3, [pc, #308]	; (425c <loop+0x900>)
    4126:	681b      	ldr	r3, [r3, #0]
    4128:	f340 8206 	ble.w	4538 <loop+0xbdc>
    412c:	429a      	cmp	r2, r3
      bool justPbDn = !(pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && (pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    412e:	f04f 0300 	mov.w	r3, #0
      bool bothPB = (pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && (pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    4132:	bfb4      	ite	lt
    4134:	2201      	movlt	r2, #1
    4136:	461a      	movge	r2, r3
    4138:	9201      	str	r2, [sp, #4]
      bool justPbUp = (pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && !(pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    413a:	bfac      	ite	ge
    413c:	2201      	movge	r2, #1
    413e:	461a      	movlt	r2, r3
      bool justPbDn = !(pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && (pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    4140:	9304      	str	r3, [sp, #16]
      bool justPbUp = (pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && !(pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    4142:	9203      	str	r2, [sp, #12]
      bool noPb = !(pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && !(pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    4144:	9305      	str	r3, [sp, #20]
      bool brSuck = analogRead(breathSensorPin) < (breathCalZero - 850);
    4146:	200e      	movs	r0, #14
    4148:	f00a f890 	bl	e26c <analogRead>
      int pitchlatchForPatch = patchLimit(pitchlatch + 1);
    414c:	4b44      	ldr	r3, [pc, #272]	; (4260 <loop+0x904>)
      bool brSuck = analogRead(breathSensorPin) < (breathCalZero - 850);
    414e:	4945      	ldr	r1, [pc, #276]	; (4264 <loop+0x908>)
      int pitchlatchForPatch = patchLimit(pitchlatch + 1);
    4150:	f8d3 e000 	ldr.w	lr, [r3]
      if (pcCombo1 && (pcCombo1 != lastpcc1)){ // latched note number to patch number, send with K1/K5 combo
    4154:	4b44      	ldr	r3, [pc, #272]	; (4268 <loop+0x90c>)
      bool brSuck = analogRead(breathSensorPin) < (breathCalZero - 850);
    4156:	9002      	str	r0, [sp, #8]
      if (pcCombo1 && (pcCombo1 != lastpcc1)){ // latched note number to patch number, send with K1/K5 combo
    4158:	781a      	ldrb	r2, [r3, #0]
      bool brSuck = analogRead(breathSensorPin) < (breathCalZero - 850);
    415a:	680e      	ldr	r6, [r1, #0]
      if (pcCombo1 && (pcCombo1 != lastpcc1)){ // latched note number to patch number, send with K1/K5 combo
    415c:	4843      	ldr	r0, [pc, #268]	; (426c <loop+0x910>)
      int pitchlatchForPatch = patchLimit(pitchlatch + 1);
    415e:	f10e 0301 	add.w	r3, lr, #1
    4162:	2b80      	cmp	r3, #128	; 0x80
    4164:	bfa8      	it	ge
    4166:	2380      	movge	r3, #128	; 0x80
    4168:	2b01      	cmp	r3, #1
    416a:	bfb8      	it	lt
    416c:	2301      	movlt	r3, #1
      if (pcCombo1 && (pcCombo1 != lastpcc1)){ // latched note number to patch number, send with K1/K5 combo
    416e:	2a00      	cmp	r2, #0
    4170:	f000 8163 	beq.w	443a <loop+0xade>
    4174:	7801      	ldrb	r1, [r0, #0]
    4176:	4291      	cmp	r1, r2
    4178:	f000 815f 	beq.w	443a <loop+0xade>
        if (patch != pitchlatchForPatch) {
    417c:	8839      	ldrh	r1, [r7, #0]
    417e:	4299      	cmp	r1, r3
    4180:	f000 82a2 	beq.w	46c8 <loop+0xd6c>
      } else if (pcCombo2 && (pcCombo2 != lastpcc2)) { // hi and lo patch numbers, send with K2/K6 combo
    4184:	493a      	ldr	r1, [pc, #232]	; (4270 <loop+0x914>)
          patch = pitchlatchForPatch;
    4186:	803b      	strh	r3, [r7, #0]
          doPatchUpdate = 1;
    4188:	4b3a      	ldr	r3, [pc, #232]	; (4274 <loop+0x918>)
      } else if (pcCombo2 && (pcCombo2 != lastpcc2)) { // hi and lo patch numbers, send with K2/K6 combo
    418a:	7809      	ldrb	r1, [r1, #0]
          doPatchUpdate = 1;
    418c:	f04f 0c01 	mov.w	ip, #1
    4190:	f883 c000 	strb.w	ip, [r3]
    4194:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 4278 <loop+0x91c>
          patchKey ||
    4198:	4b38      	ldr	r3, [pc, #224]	; (427c <loop+0x920>)
      lastpcc1=pcCombo1;
    419a:	7002      	strb	r2, [r0, #0]
      if (
    419c:	781b      	ldrb	r3, [r3, #0]
      lastpcc2=pcCombo2;
    419e:	f88c 1000 	strb.w	r1, [ip]
      if (
    41a2:	b943      	cbnz	r3, 41b6 <loop+0x85a>
          patchKey ||
    41a4:	9b01      	ldr	r3, [sp, #4]
    41a6:	2b00      	cmp	r3, #0
    41a8:	f000 8167 	beq.w	447a <loop+0xb1e>
          (bothPB && legacy) ||
    41ac:	f8b9 3000 	ldrh.w	r3, [r9]
    41b0:	2b00      	cmp	r3, #0
    41b2:	f000 8162 	beq.w	447a <loop+0xb1e>
        int fingeredNoteUntransposedForPatch = patchLimit(fingeredNoteUntransposed + 1);
    41b6:	4b32      	ldr	r3, [pc, #200]	; (4280 <loop+0x924>)
    41b8:	6818      	ldr	r0, [r3, #0]
        if (exSensor >= ((extracThrVal + extracMaxVal) / 2)) { // instant midi setting
    41ba:	4b32      	ldr	r3, [pc, #200]	; (4284 <loop+0x928>)
    41bc:	881a      	ldrh	r2, [r3, #0]
    41be:	4b32      	ldr	r3, [pc, #200]	; (4288 <loop+0x92c>)
    41c0:	881b      	ldrh	r3, [r3, #0]
    41c2:	441a      	add	r2, r3
    41c4:	4b31      	ldr	r3, [pc, #196]	; (428c <loop+0x930>)
    41c6:	6819      	ldr	r1, [r3, #0]
        int fingeredNoteUntransposedForPatch = patchLimit(fingeredNoteUntransposed + 1);
    41c8:	1c43      	adds	r3, r0, #1
    41ca:	2b80      	cmp	r3, #128	; 0x80
    41cc:	bfa8      	it	ge
    41ce:	2380      	movge	r3, #128	; 0x80
    41d0:	2b01      	cmp	r3, #1
    41d2:	bfb8      	it	lt
    41d4:	2301      	movlt	r3, #1
        if (exSensor >= ((extracThrVal + extracMaxVal) / 2)) { // instant midi setting
    41d6:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
    41da:	f2c0 8205 	blt.w	45e8 <loop+0xc8c>
          if ((fingeredNoteUntransposedForPatch >= 73) && (fingeredNoteUntransposedForPatch <= 88)) {
    41de:	f1a3 0249 	sub.w	r2, r3, #73	; 0x49
    41e2:	2a0f      	cmp	r2, #15
    41e4:	f63f ac62 	bhi.w	3aac <loop+0x150>
            MIDIchannel = fingeredNoteUntransposedForPatch - 72; // Mid C and up
    41e8:	3b48      	subs	r3, #72	; 0x48
    41ea:	f8a8 3000 	strh.w	r3, [r8]
    41ee:	e45d      	b.n	3aac <loop+0x150>
    41f0:	1fff8e04 	.word	0x1fff8e04
    41f4:	1fff9ab0 	.word	0x1fff9ab0
    41f8:	80020009 	.word	0x80020009
    41fc:	1fff9b93 	.word	0x1fff9b93
    4200:	1fff9b82 	.word	0x1fff9b82
    4204:	1fff9bdc 	.word	0x1fff9bdc
    4208:	1fff9a70 	.word	0x1fff9a70
    420c:	1fff9a74 	.word	0x1fff9a74
    4210:	1fff9a0a 	.word	0x1fff9a0a
    4214:	1fff9b18 	.word	0x1fff9b18
    4218:	1fff9bc2 	.word	0x1fff9bc2
    421c:	1fff9bd5 	.word	0x1fff9bd5
    4220:	1fff9b60 	.word	0x1fff9b60
    4224:	1fff9bda 	.word	0x1fff9bda
    4228:	1fff9bd4 	.word	0x1fff9bd4
    422c:	1fff9ac0 	.word	0x1fff9ac0
    4230:	1fff9a82 	.word	0x1fff9a82
    4234:	00013174 	.word	0x00013174
    4238:	00012f94 	.word	0x00012f94
    423c:	1fff9a90 	.word	0x1fff9a90
    4240:	40891b49 	.word	0x40891b49
    4244:	1fff9a76 	.word	0x1fff9a76
    4248:	1fff9a80 	.word	0x1fff9a80
    424c:	82082083 	.word	0x82082083
    4250:	1fff9b76 	.word	0x1fff9b76
    4254:	1fff9b78 	.word	0x1fff9b78
    4258:	1fff9b6c 	.word	0x1fff9b6c
    425c:	1fff9b68 	.word	0x1fff9b68
    4260:	1fff9b7c 	.word	0x1fff9b7c
    4264:	1fff9a24 	.word	0x1fff9a24
    4268:	1fff9b70 	.word	0x1fff9b70
    426c:	1fff9b0b 	.word	0x1fff9b0b
    4270:	1fff9b71 	.word	0x1fff9b71
    4274:	1fff9a8a 	.word	0x1fff9a8a
    4278:	1fff9b0c 	.word	0x1fff9b0c
    427c:	1fff9b64 	.word	0x1fff9b64
    4280:	1fff9ab4 	.word	0x1fff9ab4
    4284:	1fff9a9c 	.word	0x1fff9a9c
    4288:	1fff9a9a 	.word	0x1fff9a9a
    428c:	1fff9a8c 	.word	0x1fff9a8c
    if ((pressureSensor > breathThrVal) || gateOpen) {
    4290:	4ab0      	ldr	r2, [pc, #704]	; (4554 <loop+0xbf8>)
    4292:	6820      	ldr	r0, [r4, #0]
    4294:	8812      	ldrh	r2, [r2, #0]
    4296:	4282      	cmp	r2, r0
    4298:	db04      	blt.n	42a4 <loop+0x948>
    429a:	4baf      	ldr	r3, [pc, #700]	; (4558 <loop+0xbfc>)
    429c:	781b      	ldrb	r3, [r3, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	f000 81d3 	beq.w	464a <loop+0xcee>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42a4:	4cad      	ldr	r4, [pc, #692]	; (455c <loop+0xc00>)
    42a6:	6821      	ldr	r1, [r4, #0]
    42a8:	9107      	str	r1, [sp, #28]
      if ((millis() - breath_on_time > velSmpDl) || (0 == velSmpDl) || velocity) {
    42aa:	49ad      	ldr	r1, [pc, #692]	; (4560 <loop+0xc04>)
	return ret;
    42ac:	9b07      	ldr	r3, [sp, #28]
    42ae:	6809      	ldr	r1, [r1, #0]
    42b0:	1a5b      	subs	r3, r3, r1
    42b2:	49ac      	ldr	r1, [pc, #688]	; (4564 <loop+0xc08>)
    42b4:	8809      	ldrh	r1, [r1, #0]
    42b6:	428b      	cmp	r3, r1
    42b8:	d813      	bhi.n	42e2 <loop+0x986>
    42ba:	b191      	cbz	r1, 42e2 <loop+0x986>
    42bc:	4baa      	ldr	r3, [pc, #680]	; (4568 <loop+0xc0c>)
    42be:	8819      	ldrh	r1, [r3, #0]
    42c0:	2900      	cmp	r1, #0
    42c2:	f43f ab72 	beq.w	39aa <loop+0x4e>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    42c6:	4ba9      	ldr	r3, [pc, #676]	; (456c <loop+0xc10>)
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	4283      	cmp	r3, r0
    42cc:	bfb8      	it	lt
    42ce:	4603      	movlt	r3, r0
        breathLevel = constrain(max(pressureSensor, initial_breath_value), breathThrVal, breathMaxVal);
    42d0:	48a7      	ldr	r0, [pc, #668]	; (4570 <loop+0xc14>)
    42d2:	429a      	cmp	r2, r3
    42d4:	8800      	ldrh	r0, [r0, #0]
    42d6:	f340 85fe 	ble.w	4ed6 <loop+0x157a>
    42da:	4ba6      	ldr	r3, [pc, #664]	; (4574 <loop+0xc18>)
    42dc:	601a      	str	r2, [r3, #0]
        } else velocitySend = velocity;
    42de:	b2c9      	uxtb	r1, r1
    42e0:	e052      	b.n	4388 <loop+0xa2c>
    42e2:	4ba2      	ldr	r3, [pc, #648]	; (456c <loop+0xc10>)
        breathLevel = constrain(max(pressureSensor, initial_breath_value), breathThrVal, breathMaxVal);
    42e4:	49a2      	ldr	r1, [pc, #648]	; (4570 <loop+0xc14>)
    42e6:	681b      	ldr	r3, [r3, #0]
    42e8:	4283      	cmp	r3, r0
    42ea:	bfb8      	it	lt
    42ec:	4603      	movlt	r3, r0
    42ee:	429a      	cmp	r2, r3
    42f0:	8808      	ldrh	r0, [r1, #0]
    42f2:	f300 819e 	bgt.w	4632 <loop+0xcd6>
      if ((millis() - breath_on_time > velSmpDl) || (0 == velSmpDl) || velocity) {
    42f6:	499c      	ldr	r1, [pc, #624]	; (4568 <loop+0xc0c>)
        breathLevel = constrain(max(pressureSensor, initial_breath_value), breathThrVal, breathMaxVal);
    42f8:	4e9e      	ldr	r6, [pc, #632]	; (4574 <loop+0xc18>)
      if ((millis() - breath_on_time > velSmpDl) || (0 == velSmpDl) || velocity) {
    42fa:	8809      	ldrh	r1, [r1, #0]
        breathLevel = constrain(max(pressureSensor, initial_breath_value), breathThrVal, breathMaxVal);
    42fc:	4283      	cmp	r3, r0
    42fe:	bfa8      	it	ge
    4300:	4603      	movge	r3, r0
    4302:	6033      	str	r3, [r6, #0]
        if (!velocity) {
    4304:	2900      	cmp	r1, #0
    4306:	d1ea      	bne.n	42de <loop+0x982>
          unsigned int breathValHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    4308:	429a      	cmp	r2, r3
    430a:	bfc8      	it	gt
    430c:	4613      	movgt	r3, r2
    430e:	f340 8198 	ble.w	4642 <loop+0xce6>
	if (in_range == 0) return out_min + out_range / 2;
    4312:	1a81      	subs	r1, r0, r2
    4314:	f000 841b 	beq.w	4b4e <loop+0x11f2>
	long num = (x - in_min) * out_range;
    4318:	1a9b      	subs	r3, r3, r2
    431a:	ebc3 3383 	rsb	r3, r3, r3, lsl #14
		num += in_range / 2;
    431e:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
    4322:	eb03 0362 	add.w	r3, r3, r2, asr #1
	long result = num / in_range + out_min;
    4326:	fb93 f0f1 	sdiv	r0, r3, r1
		if (in_range * num < 0) return result - 1;
    432a:	fb03 f101 	mul.w	r1, r3, r1
    432e:	2900      	cmp	r1, #0
    4330:	f2c0 85d8 	blt.w	4ee4 <loop+0x1588>
    4334:	f7fc ffbc 	bl	12b0 <breathCurve(unsigned int)>
          velocitySend = constrain(velocitySend + velocitySend * .1 * velBias, 1, 127);
    4338:	f3c0 10c6 	ubfx	r0, r0, #7, #7
    433c:	f00d f97a 	bl	11634 <__aeabi_i2f>
    4340:	4b8d      	ldr	r3, [pc, #564]	; (4578 <loop+0xc1c>)
    4342:	4606      	mov	r6, r0
    4344:	8818      	ldrh	r0, [r3, #0]
    4346:	f00d f975 	bl	11634 <__aeabi_i2f>
    434a:	498c      	ldr	r1, [pc, #560]	; (457c <loop+0xc20>)
    434c:	4607      	mov	r7, r0
    434e:	4630      	mov	r0, r6
    4350:	f00d f9c4 	bl	116dc <__aeabi_fmul>
    4354:	4601      	mov	r1, r0
    4356:	4638      	mov	r0, r7
    4358:	f00d f9c0 	bl	116dc <__aeabi_fmul>
    435c:	4631      	mov	r1, r6
    435e:	f00d f8b5 	bl	114cc <__addsf3>
    4362:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    4366:	4606      	mov	r6, r0
    4368:	f00d fb56 	bl	11a18 <__aeabi_fcmplt>
    436c:	2800      	cmp	r0, #0
    436e:	f040 83c0 	bne.w	4af2 <loop+0x1196>
    4372:	4983      	ldr	r1, [pc, #524]	; (4580 <loop+0xc24>)
    4374:	4630      	mov	r0, r6
    4376:	f00d fb6d 	bl	11a54 <__aeabi_fcmpgt>
    437a:	2800      	cmp	r0, #0
    437c:	f040 84bc 	bne.w	4cf8 <loop+0x139c>
    4380:	4630      	mov	r0, r6
    4382:	f00d fb97 	bl	11ab4 <__aeabi_f2uiz>
    4386:	b2c1      	uxtb	r1, r0
    4388:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 4584 <loop+0xc28>
        fingeredNote = noteValueCheck(fingeredNote);
    438c:	4e7e      	ldr	r6, [pc, #504]	; (4588 <loop+0xc2c>)
          velocitySend = constrain(velocitySend + velocitySend * .1 * velBias, 1, 127);
    438e:	f888 1000 	strb.w	r1, [r8]
        breath(); // send breath data
    4392:	f7fc ffd5 	bl	1340 <breath()>
        fingeredNote = noteValueCheck(fingeredNote);
    4396:	6830      	ldr	r0, [r6, #0]
  if (note > 127) {
    4398:	287f      	cmp	r0, #127	; 0x7f
    439a:	f340 81f7 	ble.w	478c <loop+0xe30>
    note = 115 + (note - 127) % 12;
    439e:	4b7b      	ldr	r3, [pc, #492]	; (458c <loop+0xc30>)
    43a0:	387f      	subs	r0, #127	; 0x7f
    43a2:	fba3 2300 	umull	r2, r3, r3, r0
    43a6:	08db      	lsrs	r3, r3, #3
    43a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    43ac:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    43b0:	3073      	adds	r0, #115	; 0x73
        if (priority) { // mono prio to last chord note
    43b2:	4b77      	ldr	r3, [pc, #476]	; (4590 <loop+0xc34>)
    43b4:	9301      	str	r3, [sp, #4]
    43b6:	881b      	ldrh	r3, [r3, #0]
        fingeredNote = noteValueCheck(fingeredNote);
    43b8:	6030      	str	r0, [r6, #0]
        if (priority) { // mono prio to last chord note
    43ba:	2b00      	cmp	r3, #0
    43bc:	f040 8213 	bne.w	47e6 <loop+0xe8a>
        if (parallelChord) {
    43c0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 4594 <loop+0xc38>
    43c4:	f89a 3000 	ldrb.w	r3, [sl]
    43c8:	2b00      	cmp	r3, #0
    43ca:	f000 81c2 	beq.w	4752 <loop+0xdf6>
          for (int i = 0; i < addedIntervals; i++) {
    43ce:	4f72      	ldr	r7, [pc, #456]	; (4598 <loop+0xc3c>)
    43d0:	783b      	ldrb	r3, [r7, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	f000 81bd 	beq.w	4752 <loop+0xdf6>
    43d8:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 459c <loop+0xc40>
    43dc:	f04f 0900 	mov.w	r9, #0
    43e0:	e014      	b.n	440c <loop+0xab0>
    note = 115 + (note - 127) % 12;
    43e2:	4b6a      	ldr	r3, [pc, #424]	; (458c <loop+0xc30>)
    43e4:	fba3 1302 	umull	r1, r3, r3, r2
    43e8:	08db      	lsrs	r3, r3, #3
    43ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    43ee:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
    43f2:	f102 0073 	add.w	r0, r2, #115	; 0x73
            midiSendNoteOn(noteValueCheck(fingeredNote + slurInterval[i]), velocitySend); // send Note On message for new note
    43f6:	f898 1000 	ldrb.w	r1, [r8]
    43fa:	b2c0      	uxtb	r0, r0
    43fc:	f004 fd36 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
          for (int i = 0; i < addedIntervals; i++) {
    4400:	783b      	ldrb	r3, [r7, #0]
    4402:	f109 0901 	add.w	r9, r9, #1
    4406:	454b      	cmp	r3, r9
    4408:	f340 81a3 	ble.w	4752 <loop+0xdf6>
            midiSendNoteOn(noteValueCheck(fingeredNote + slurInterval[i]), velocitySend); // send Note On message for new note
    440c:	f85b 0f04 	ldr.w	r0, [fp, #4]!
    4410:	6833      	ldr	r3, [r6, #0]
    4412:	4418      	add	r0, r3
  if (note > 127) {
    4414:	287f      	cmp	r0, #127	; 0x7f
    note = 115 + (note - 127) % 12;
    4416:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
  if (note > 127) {
    441a:	dce2      	bgt.n	43e2 <loop+0xa86>
  } else if (note < 0) {
    441c:	2800      	cmp	r0, #0
    note = 12 - abs(note) % 12;
    441e:	f1c0 0200 	rsb	r2, r0, #0
  } else if (note < 0) {
    4422:	dae8      	bge.n	43f6 <loop+0xa9a>
    note = 12 - abs(note) % 12;
    4424:	4b59      	ldr	r3, [pc, #356]	; (458c <loop+0xc30>)
    4426:	fba3 1302 	umull	r1, r3, r3, r2
    442a:	08db      	lsrs	r3, r3, #3
    442c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4430:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
    4434:	f1c2 000c 	rsb	r0, r2, #12
    4438:	e7dd      	b.n	43f6 <loop+0xa9a>
      } else if (pcCombo2 && (pcCombo2 != lastpcc2)) { // hi and lo patch numbers, send with K2/K6 combo
    443a:	4959      	ldr	r1, [pc, #356]	; (45a0 <loop+0xc44>)
    443c:	f8df c164 	ldr.w	ip, [pc, #356]	; 45a4 <loop+0xc48>
    4440:	7809      	ldrb	r1, [r1, #0]
    4442:	2900      	cmp	r1, #0
    4444:	f43f aea8 	beq.w	4198 <loop+0x83c>
    4448:	f89c b000 	ldrb.w	fp, [ip]
    444c:	4559      	cmp	r1, fp
    444e:	f43f aea3 	beq.w	4198 <loop+0x83c>
        if (pitchlatch > 75) {
    4452:	f1be 0f4b 	cmp.w	lr, #75	; 0x4b
    4456:	f340 8359 	ble.w	4b0c <loop+0x11b0>
          if (patch != patchLimit(pitchlatchForPatch + 24)) {
    445a:	3318      	adds	r3, #24
    445c:	2b80      	cmp	r3, #128	; 0x80
    445e:	f8b7 b000 	ldrh.w	fp, [r7]
    4462:	bfa8      	it	ge
    4464:	2380      	movge	r3, #128	; 0x80
    4466:	459b      	cmp	fp, r3
    4468:	f43f ae96 	beq.w	4198 <loop+0x83c>
            patch = patchLimit(pitchlatchForPatch - 36); // subtract 36 to get low numbers 0 to 36
    446c:	803b      	strh	r3, [r7, #0]
            doPatchUpdate = 1;
    446e:	4b4e      	ldr	r3, [pc, #312]	; (45a8 <loop+0xc4c>)
    4470:	f04f 0b01 	mov.w	fp, #1
    4474:	f883 b000 	strb.w	fp, [r3]
    4478:	e68e      	b.n	4198 <loop+0x83c>
          (bothPB && legacy) ||
    447a:	9a02      	ldr	r2, [sp, #8]
      bool brSuck = analogRead(breathSensorPin) < (breathCalZero - 850);
    447c:	f2a6 3352 	subw	r3, r6, #850	; 0x352
          (bothPB && legacy) ||
    4480:	429a      	cmp	r2, r3
    4482:	f6bf ab13 	bge.w	3aac <loop+0x150>
          (brSuck && legacyBrAct && justPbUp) ||
    4486:	f8ba 3000 	ldrh.w	r3, [sl]
    448a:	2b00      	cmp	r3, #0
    448c:	f43f ab0e 	beq.w	3aac <loop+0x150>
    4490:	9b03      	ldr	r3, [sp, #12]
    4492:	2b00      	cmp	r3, #0
    4494:	f47f ae8f 	bne.w	41b6 <loop+0x85a>
          (brSuck && legacyBrAct && bcasMode && noPb)
    4498:	4b44      	ldr	r3, [pc, #272]	; (45ac <loop+0xc50>)
    449a:	881b      	ldrh	r3, [r3, #0]
    449c:	b11b      	cbz	r3, 44a6 <loop+0xb4a>
    449e:	9b05      	ldr	r3, [sp, #20]
    44a0:	2b00      	cmp	r3, #0
    44a2:	f47f ae88 	bne.w	41b6 <loop+0x85a>
        if (justPbDn && legacyBrAct && brSuck && programonce == false) { // down bend for suck programming button
    44a6:	9b04      	ldr	r3, [sp, #16]
    44a8:	2b00      	cmp	r3, #0
    44aa:	f43f aaff 	beq.w	3aac <loop+0x150>
    44ae:	4b40      	ldr	r3, [pc, #256]	; (45b0 <loop+0xc54>)
    44b0:	781a      	ldrb	r2, [r3, #0]
    44b2:	2a00      	cmp	r2, #0
    44b4:	f47f aafa 	bne.w	3aac <loop+0x150>
          if (octaveR == 0) { //lowest octave position
    44b8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 45b4 <loop+0xc58>
          programonce = true;
    44bc:	2201      	movs	r2, #1
    44be:	701a      	strb	r2, [r3, #0]
          if (octaveR == 0) { //lowest octave position
    44c0:	f898 3000 	ldrb.w	r3, [r8]
    44c4:	2b00      	cmp	r3, #0
    44c6:	f040 8564 	bne.w	4f92 <L_19097_delayMicroseconds+0x7a>
            if (K1 && K2 && !K3 && K4) { //  e28 send patch change -10
    44ca:	4b3b      	ldr	r3, [pc, #236]	; (45b8 <loop+0xc5c>)
    44cc:	781b      	ldrb	r3, [r3, #0]
    44ce:	2b00      	cmp	r3, #0
    44d0:	f040 8598 	bne.w	5004 <L_19097_delayMicroseconds+0xec>
            } else if (!K1 && K2 && !K3 && K4) { //f#30 send patch change +10
    44d4:	4b39      	ldr	r3, [pc, #228]	; (45bc <loop+0xc60>)
    44d6:	781b      	ldrb	r3, [r3, #0]
    44d8:	2b00      	cmp	r3, #0
    44da:	f000 85f3 	beq.w	50c4 <L_19097_delayMicroseconds+0x1ac>
    44de:	4b38      	ldr	r3, [pc, #224]	; (45c0 <loop+0xc64>)
    44e0:	781b      	ldrb	r3, [r3, #0]
    44e2:	2b00      	cmp	r3, #0
    44e4:	f47f aae2 	bne.w	3aac <loop+0x150>
    44e8:	4b36      	ldr	r3, [pc, #216]	; (45c4 <loop+0xc68>)
    44ea:	781b      	ldrb	r3, [r3, #0]
    44ec:	2b00      	cmp	r3, #0
    44ee:	f43f aadd 	beq.w	3aac <loop+0x150>
              patch = patch + 10;
    44f2:	883b      	ldrh	r3, [r7, #0]
    44f4:	330a      	adds	r3, #10
    44f6:	803b      	strh	r3, [r7, #0]
              doPatchUpdate = 1;
    44f8:	4b2b      	ldr	r3, [pc, #172]	; (45a8 <loop+0xc4c>)
    44fa:	701a      	strb	r2, [r3, #0]
    44fc:	f7ff bad6 	b.w	3aac <loop+0x150>
      slurSustain = 0;
    4500:	4a31      	ldr	r2, [pc, #196]	; (45c8 <loop+0xc6c>)
      rotatorOn = 0;
    4502:	4932      	ldr	r1, [pc, #200]	; (45cc <loop+0xc70>)
      slurSustain = 0;
    4504:	7013      	strb	r3, [r2, #0]
      subOctaveDouble = 0;
    4506:	4a32      	ldr	r2, [pc, #200]	; (45d0 <loop+0xc74>)
      rotatorOn = 0;
    4508:	700b      	strb	r3, [r1, #0]
      subOctaveDouble = 0;
    450a:	7013      	strb	r3, [r2, #0]
      parallelChord = 0;
    450c:	4921      	ldr	r1, [pc, #132]	; (4594 <loop+0xc38>)
      slurSostenuto = 0;
    450e:	4a31      	ldr	r2, [pc, #196]	; (45d4 <loop+0xc78>)
      parallelChord = 0;
    4510:	700b      	strb	r3, [r1, #0]
      slurSostenuto = 0;
    4512:	7013      	strb	r3, [r2, #0]
    4514:	f7ff bb44 	b.w	3ba0 <loop+0x244>
      if (pinkyKey && K7){
    4518:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 45d8 <loop+0xc7c>
    451c:	f898 3000 	ldrb.w	r3, [r8]
    4520:	2b00      	cmp	r3, #0
    4522:	d07d      	beq.n	4620 <loop+0xcc4>
    4524:	4a2d      	ldr	r2, [pc, #180]	; (45dc <loop+0xc80>)
    4526:	7812      	ldrb	r2, [r2, #0]
    4528:	2a00      	cmp	r2, #0
    452a:	f040 83b8 	bne.w	4c9e <loop+0x1342>
    452e:	4f2c      	ldr	r7, [pc, #176]	; (45e0 <loop+0xc84>)
      lastPinkyKey = pinkyKey;
    4530:	4e2c      	ldr	r6, [pc, #176]	; (45e4 <loop+0xc88>)
    4532:	703b      	strb	r3, [r7, #0]
    4534:	f7ff ba3a 	b.w	39ac <loop+0x50>
      bool justPbDn = !(pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && (pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    4538:	429a      	cmp	r2, r3
      bool justPbUp = (pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && !(pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    453a:	f04f 0300 	mov.w	r3, #0
      bool justPbDn = !(pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && (pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    453e:	bfb4      	ite	lt
    4540:	2201      	movlt	r2, #1
    4542:	461a      	movge	r2, r3
    4544:	9204      	str	r2, [sp, #16]
      bool noPb = !(pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && !(pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    4546:	bfac      	ite	ge
    4548:	2201      	movge	r2, #1
    454a:	461a      	movlt	r2, r3
      bool justPbUp = (pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && !(pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    454c:	9303      	str	r3, [sp, #12]
      bool noPb = !(pbUp > ((pitchbMaxVal + pitchbThrVal) / 2)) && !(pbDn > ((pitchbMaxVal + pitchbThrVal) / 2));
    454e:	9205      	str	r2, [sp, #20]
    4550:	9301      	str	r3, [sp, #4]
    4552:	e5f8      	b.n	4146 <loop+0x7ea>
    4554:	1fff9a4e 	.word	0x1fff9a4e
    4558:	1fff9ac0 	.word	0x1fff9ac0
    455c:	1fff9d70 	.word	0x1fff9d70
    4560:	1fff9a50 	.word	0x1fff9a50
    4564:	1fff9bf2 	.word	0x1fff9bf2
    4568:	1fff9bf4 	.word	0x1fff9bf4
    456c:	1fff9af4 	.word	0x1fff9af4
    4570:	1fff9a4c 	.word	0x1fff9a4c
    4574:	1fff9a48 	.word	0x1fff9a48
    4578:	1fff9bf0 	.word	0x1fff9bf0
    457c:	3dcccccd 	.word	0x3dcccccd
    4580:	42fe0000 	.word	0x42fe0000
    4584:	1fff9bf6 	.word	0x1fff9bf6
    4588:	1fff9ab0 	.word	0x1fff9ab0
    458c:	aaaaaaab 	.word	0xaaaaaaab
    4590:	1fff9b90 	.word	0x1fff9b90
    4594:	1fff9b60 	.word	0x1fff9b60
    4598:	1fff8d38 	.word	0x1fff8d38
    459c:	1fff8e44 	.word	0x1fff8e44
    45a0:	1fff9b71 	.word	0x1fff9b71
    45a4:	1fff9b0c 	.word	0x1fff9b0c
    45a8:	1fff9a8a 	.word	0x1fff9a8a
    45ac:	1fff9a06 	.word	0x1fff9a06
    45b0:	1fff9b92 	.word	0x1fff9b92
    45b4:	1fff9b38 	.word	0x1fff9b38
    45b8:	1fff9908 	.word	0x1fff9908
    45bc:	1fff9909 	.word	0x1fff9909
    45c0:	1fff990a 	.word	0x1fff990a
    45c4:	1fff990b 	.word	0x1fff990b
    45c8:	1fff9bd5 	.word	0x1fff9bd5
    45cc:	1fff9bc2 	.word	0x1fff9bc2
    45d0:	1fff9bda 	.word	0x1fff9bda
    45d4:	1fff9bd4 	.word	0x1fff9bd4
    45d8:	1fff9b72 	.word	0x1fff9b72
    45dc:	1fff990e 	.word	0x1fff990e
    45e0:	1fff9b09 	.word	0x1fff9b09
    45e4:	1fff9a68 	.word	0x1fff9a68
          if (!pinkyKey) { // note number to patch number
    45e8:	4a9c      	ldr	r2, [pc, #624]	; (485c <loop+0xf00>)
    45ea:	7812      	ldrb	r2, [r2, #0]
    45ec:	2a00      	cmp	r2, #0
    45ee:	d13e      	bne.n	466e <loop+0xd12>
              if (patch != patchLimit(fingeredNoteUntransposedForPatch - 36)) {
    45f0:	883a      	ldrh	r2, [r7, #0]
    45f2:	429a      	cmp	r2, r3
    45f4:	f43f aa5a 	beq.w	3aac <loop+0x150>
                patch = patchLimit(fingeredNoteUntransposedForPatch - 36); // subtract 36 to get low numbers 0 to 36
    45f8:	803b      	strh	r3, [r7, #0]
                doPatchUpdate = 1;
    45fa:	4b99      	ldr	r3, [pc, #612]	; (4860 <loop+0xf04>)
    45fc:	2201      	movs	r2, #1
    45fe:	701a      	strb	r2, [r3, #0]
    4600:	f7ff ba54 	b.w	3aac <loop+0x150>
      activePatch = patch;
    4604:	b2c0      	uxtb	r0, r0
    4606:	7018      	strb	r0, [r3, #0]
      midiSendProgramChange(activePatch);
    4608:	f004 fbbe 	bl	8d88 <midiSendProgramChange(unsigned char)>
      slurSustain = 0;
    460c:	4895      	ldr	r0, [pc, #596]	; (4864 <loop+0xf08>)
      parallelChord = 0;
    460e:	4996      	ldr	r1, [pc, #600]	; (4868 <loop+0xf0c>)
      subOctaveDouble = 0;
    4610:	4a96      	ldr	r2, [pc, #600]	; (486c <loop+0xf10>)
      slurSustain = 0;
    4612:	2300      	movs	r3, #0
    4614:	7003      	strb	r3, [r0, #0]
      parallelChord = 0;
    4616:	700b      	strb	r3, [r1, #0]
      subOctaveDouble = 0;
    4618:	7013      	strb	r3, [r2, #0]
      doPatchUpdate = 0;
    461a:	7033      	strb	r3, [r6, #0]
    461c:	f7ff ba27 	b.w	3a6e <loop+0x112>
      } else if (!pinkyKey && lastPinkyKey){
    4620:	4f93      	ldr	r7, [pc, #588]	; (4870 <loop+0xf14>)
    4622:	783b      	ldrb	r3, [r7, #0]
    4624:	2b00      	cmp	r3, #0
    4626:	f040 8378 	bne.w	4d1a <loop+0x13be>
    462a:	4e92      	ldr	r6, [pc, #584]	; (4874 <loop+0xf18>)
      lastPinkyKey = pinkyKey;
    462c:	703b      	strb	r3, [r7, #0]
    462e:	f7ff b9bd 	b.w	39ac <loop+0x50>
        breathLevel = constrain(max(pressureSensor, initial_breath_value), breathThrVal, breathMaxVal);
    4632:	4b91      	ldr	r3, [pc, #580]	; (4878 <loop+0xf1c>)
    4634:	601a      	str	r2, [r3, #0]
        if (!velocity) {
    4636:	4b91      	ldr	r3, [pc, #580]	; (487c <loop+0xf20>)
    4638:	8819      	ldrh	r1, [r3, #0]
    463a:	2900      	cmp	r1, #0
    463c:	f47f ae4f 	bne.w	42de <loop+0x982>
    4640:	4613      	mov	r3, r2
          unsigned int breathValHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    4642:	4283      	cmp	r3, r0
    4644:	bfa8      	it	ge
    4646:	4603      	movge	r3, r0
    4648:	e663      	b.n	4312 <loop+0x9b6>
      mainState = NOTE_OFF;
    464a:	2301      	movs	r3, #1
    464c:	4c8c      	ldr	r4, [pc, #560]	; (4880 <loop+0xf24>)
    464e:	4e89      	ldr	r6, [pc, #548]	; (4874 <loop+0xf18>)
    4650:	602b      	str	r3, [r5, #0]
    4652:	f7ff b9ab 	b.w	39ac <loop+0x50>
    note = 115 + (note - 127) % 12;
    4656:	488b      	ldr	r0, [pc, #556]	; (4884 <loop+0xf28>)
    4658:	3b7f      	subs	r3, #127	; 0x7f
    465a:	fba0 7003 	umull	r7, r0, r0, r3
    465e:	08c0      	lsrs	r0, r0, #3
    4660:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4664:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
    4668:	3373      	adds	r3, #115	; 0x73
    466a:	f7ff bb7d 	b.w	3d68 <loop+0x40c>
            if (fingeredNoteUntransposedForPatch > 75) {
    466e:	284a      	cmp	r0, #74	; 0x4a
    4670:	f340 833d 	ble.w	4cee <loop+0x1392>
              if (patch != patchLimit(fingeredNoteUntransposedForPatch + 24)) {
    4674:	3318      	adds	r3, #24
    4676:	2b80      	cmp	r3, #128	; 0x80
    4678:	883a      	ldrh	r2, [r7, #0]
    467a:	bfa8      	it	ge
    467c:	2380      	movge	r3, #128	; 0x80
    467e:	429a      	cmp	r2, r3
    4680:	d1ba      	bne.n	45f8 <loop+0xc9c>
    4682:	f7ff ba13 	b.w	3aac <loop+0x150>
        if (!cvPortaTuneCount) {
    4686:	4c80      	ldr	r4, [pc, #512]	; (4888 <loop+0xf2c>)
    4688:	7822      	ldrb	r2, [r4, #0]
    468a:	2a00      	cmp	r2, #0
    468c:	f040 8337 	bne.w	4cfe <loop+0x13a2>
          cvPitch -= 1+(127-oldport)/4;
    4690:	4a7e      	ldr	r2, [pc, #504]	; (488c <loop+0xf30>)
    4692:	6812      	ldr	r2, [r2, #0]
    4694:	f1d2 027f 	rsbs	r2, r2, #127	; 0x7f
    4698:	bf48      	it	mi
    469a:	3203      	addmi	r2, #3
    469c:	1092      	asrs	r2, r2, #2
    469e:	3201      	adds	r2, #1
    46a0:	1a82      	subs	r2, r0, r2
        if (cvPitch < targetPitch) cvPitch = targetPitch;
    46a2:	4293      	cmp	r3, r2
    46a4:	f73f accf 	bgt.w	4046 <loop+0x6ea>
          cvPitch -= 1+(127-oldport)/4;
    46a8:	600a      	str	r2, [r1, #0]
    46aa:	4613      	mov	r3, r2
    46ac:	e4cc      	b.n	4048 <loop+0x6ec>
          cvPitch += 1+(127-oldport)/4;
    46ae:	4a77      	ldr	r2, [pc, #476]	; (488c <loop+0xf30>)
    46b0:	6812      	ldr	r2, [r2, #0]
    46b2:	f1d2 027f 	rsbs	r2, r2, #127	; 0x7f
    46b6:	bf48      	it	mi
    46b8:	3203      	addmi	r2, #3
    46ba:	eb00 02a2 	add.w	r2, r0, r2, asr #2
    46be:	3201      	adds	r2, #1
        if (cvPitch > targetPitch) cvPitch = targetPitch;
    46c0:	4293      	cmp	r3, r2
    46c2:	f6ff acc0 	blt.w	4046 <loop+0x6ea>
    46c6:	e7ef      	b.n	46a8 <loop+0xd4c>
      } else if (pcCombo2 && (pcCombo2 != lastpcc2)) { // hi and lo patch numbers, send with K2/K6 combo
    46c8:	4b71      	ldr	r3, [pc, #452]	; (4890 <loop+0xf34>)
    46ca:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 4894 <loop+0xf38>
    46ce:	7819      	ldrb	r1, [r3, #0]
    46d0:	e562      	b.n	4198 <loop+0x83c>
    46d2:	464e      	mov	r6, r9
    46d4:	f8dd 9010 	ldr.w	r9, [sp, #16]
        if (subOctaveDouble) {
    46d8:	9b03      	ldr	r3, [sp, #12]
    46da:	781b      	ldrb	r3, [r3, #0]
    46dc:	2b00      	cmp	r3, #0
    46de:	f040 8267 	bne.w	4bb0 <loop+0x1254>
        if (rotatorOn) {
    46e2:	9b02      	ldr	r3, [sp, #8]
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	2b00      	cmp	r3, #0
    46e8:	f040 825e 	bne.w	4ba8 <loop+0x124c>
        if (!priority) {
    46ec:	9b01      	ldr	r3, [sp, #4]
    46ee:	881b      	ldrh	r3, [r3, #0]
    46f0:	2b00      	cmp	r3, #0
    46f2:	f000 8253 	beq.w	4b9c <loop+0x1240>
        if (!parallelChord && !subOctaveDouble && !rotatorOn) { // mono playing, send old note off after new note on
    46f6:	9a03      	ldr	r2, [sp, #12]
    46f8:	f89a 3000 	ldrb.w	r3, [sl]
    46fc:	7812      	ldrb	r2, [r2, #0]
    46fe:	4313      	orrs	r3, r2
    4700:	9a02      	ldr	r2, [sp, #8]
    4702:	7812      	ldrb	r2, [r2, #0]
    4704:	4313      	orrs	r3, r2
    4706:	f000 8405 	beq.w	4f14 <loop+0x15b8>
        if (slurSustain) {
    470a:	4b56      	ldr	r3, [pc, #344]	; (4864 <loop+0xf08>)
    470c:	781b      	ldrb	r3, [r3, #0]
    470e:	2b00      	cmp	r3, #0
    4710:	d050      	beq.n	47b4 <loop+0xe58>
          if (addedIntervals < 9) {
    4712:	4a61      	ldr	r2, [pc, #388]	; (4898 <loop+0xf3c>)
    4714:	7813      	ldrb	r3, [r2, #0]
    4716:	2b08      	cmp	r3, #8
    4718:	d84c      	bhi.n	47b4 <loop+0xe58>
            addedIntervals++;
    471a:	3301      	adds	r3, #1
    471c:	b2db      	uxtb	r3, r3
    471e:	7013      	strb	r3, [r2, #0]
            slurInterval[addedIntervals - 1] = fingeredNote - slurBase;
    4720:	4a5e      	ldr	r2, [pc, #376]	; (489c <loop+0xf40>)
    4722:	6830      	ldr	r0, [r6, #0]
    4724:	6812      	ldr	r2, [r2, #0]
    4726:	495e      	ldr	r1, [pc, #376]	; (48a0 <loop+0xf44>)
    4728:	3b01      	subs	r3, #1
    472a:	1a82      	subs	r2, r0, r2
    472c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if (pressureSensor > breathThrVal) cursorBlinkTime = millis(); // keep display from updating with cursor blinking if breath is over thr
    4730:	4b5c      	ldr	r3, [pc, #368]	; (48a4 <loop+0xf48>)
    4732:	6821      	ldr	r1, [r4, #0]
    4734:	881a      	ldrh	r2, [r3, #0]
        activeNote = fingeredNote;
    4736:	f889 0000 	strb.w	r0, [r9]
    if (pressureSensor > breathThrVal) cursorBlinkTime = millis(); // keep display from updating with cursor blinking if breath is over thr
    473a:	428a      	cmp	r2, r1
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    473c:	4c50      	ldr	r4, [pc, #320]	; (4880 <loop+0xf24>)
    473e:	f6bf a934 	bge.w	39aa <loop+0x4e>
    4742:	6822      	ldr	r2, [r4, #0]
    4744:	4b58      	ldr	r3, [pc, #352]	; (48a8 <loop+0xf4c>)
    4746:	9208      	str	r2, [sp, #32]
	return ret;
    4748:	9a08      	ldr	r2, [sp, #32]
    474a:	4e4a      	ldr	r6, [pc, #296]	; (4874 <loop+0xf18>)
    474c:	601a      	str	r2, [r3, #0]
    474e:	f7ff b92d 	b.w	39ac <loop+0x50>
        if (slurSustain) {
    4752:	4b44      	ldr	r3, [pc, #272]	; (4864 <loop+0xf08>)
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	2b00      	cmp	r3, #0
    4758:	f040 80de 	bne.w	4918 <loop+0xfbc>
        if (subOctaveDouble) {
    475c:	4b43      	ldr	r3, [pc, #268]	; (486c <loop+0xf10>)
    475e:	781b      	ldrb	r3, [r3, #0]
    4760:	2b00      	cmp	r3, #0
    4762:	d155      	bne.n	4810 <loop+0xeb4>
        if (rotatorOn) {
    4764:	4b51      	ldr	r3, [pc, #324]	; (48ac <loop+0xf50>)
    4766:	781b      	ldrb	r3, [r3, #0]
    4768:	2b00      	cmp	r3, #0
    476a:	d14d      	bne.n	4808 <loop+0xeac>
        if (!priority) { // mono prio to base note
    476c:	9b01      	ldr	r3, [sp, #4]
    476e:	881b      	ldrh	r3, [r3, #0]
    4770:	2b00      	cmp	r3, #0
    4772:	d043      	beq.n	47fc <loop+0xea0>
        if (slurSostenuto) {
    4774:	4b4e      	ldr	r3, [pc, #312]	; (48b0 <loop+0xf54>)
    4776:	781b      	ldrb	r3, [r3, #0]
    4778:	2b00      	cmp	r3, #0
    477a:	d13a      	bne.n	47f2 <loop+0xe96>
        activeNote = fingeredNote;
    477c:	4a4d      	ldr	r2, [pc, #308]	; (48b4 <loop+0xf58>)
    477e:	6831      	ldr	r1, [r6, #0]
    4780:	7011      	strb	r1, [r2, #0]
        mainState = NOTE_ON;
    4782:	2303      	movs	r3, #3
    4784:	4e3b      	ldr	r6, [pc, #236]	; (4874 <loop+0xf18>)
    4786:	602b      	str	r3, [r5, #0]
    4788:	f7ff b910 	b.w	39ac <loop+0x50>
  } else if (note < 0) {
    478c:	2800      	cmp	r0, #0
    478e:	f6bf ae10 	bge.w	43b2 <loop+0xa56>
    note = 12 - abs(note) % 12;
    4792:	4b3c      	ldr	r3, [pc, #240]	; (4884 <loop+0xf28>)
    4794:	4240      	negs	r0, r0
    4796:	fba3 2300 	umull	r2, r3, r3, r0
    479a:	08db      	lsrs	r3, r3, #3
    479c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    47a0:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    47a4:	f1c0 000c 	rsb	r0, r0, #12
    47a8:	e603      	b.n	43b2 <loop+0xa56>
    47aa:	f7fc f8bb 	bl	924 <leverCC_() [clone .part.0]>
    47ae:	e426      	b.n	3ffe <loop+0x6a2>
    47b0:	226b      	movs	r2, #107	; 0x6b
    47b2:	e46d      	b.n	4090 <loop+0x734>
            slurInterval[addedIntervals - 1] = fingeredNote - slurBase;
    47b4:	6830      	ldr	r0, [r6, #0]
    47b6:	e7bb      	b.n	4730 <loop+0xdd4>
          if (pinkyKey) {
    47b8:	4b28      	ldr	r3, [pc, #160]	; (485c <loop+0xf00>)
    47ba:	781b      	ldrb	r3, [r3, #0]
    47bc:	2b00      	cmp	r3, #0
    47be:	f43f a9ee 	beq.w	3b9e <loop+0x242>
            if (!rotatorOn) {
    47c2:	483a      	ldr	r0, [pc, #232]	; (48ac <loop+0xf50>)
    47c4:	7803      	ldrb	r3, [r0, #0]
    47c6:	2b00      	cmp	r3, #0
    47c8:	f040 82dc 	bne.w	4d84 <loop+0x1428>
              slurSustain = 0;
    47cc:	4f25      	ldr	r7, [pc, #148]	; (4864 <loop+0xf08>)
              currentRotation = 3;
    47ce:	4e3a      	ldr	r6, [pc, #232]	; (48b8 <loop+0xf5c>)
              slurSustain = 0;
    47d0:	703b      	strb	r3, [r7, #0]
              parallelChord = 0;
    47d2:	4f25      	ldr	r7, [pc, #148]	; (4868 <loop+0xf0c>)
    47d4:	703b      	strb	r3, [r7, #0]
              subOctaveDouble = 0;
    47d6:	4f25      	ldr	r7, [pc, #148]	; (486c <loop+0xf10>)
    47d8:	703b      	strb	r3, [r7, #0]
              rotatorOn = 1;
    47da:	2301      	movs	r3, #1
    47dc:	7003      	strb	r3, [r0, #0]
              currentRotation = 3;
    47de:	2303      	movs	r3, #3
    47e0:	7033      	strb	r3, [r6, #0]
              subOctaveDouble = 0;
    47e2:	f7ff b9dc 	b.w	3b9e <loop+0x242>
          midiSendNoteOn(fingeredNote, velocitySend); // send Note On message for new note
    47e6:	f898 1000 	ldrb.w	r1, [r8]
    47ea:	b2c0      	uxtb	r0, r0
    47ec:	f004 fb3e 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
    47f0:	e5e6      	b.n	43c0 <loop+0xa64>
          midiSendControlChange(66, 127);
    47f2:	217f      	movs	r1, #127	; 0x7f
    47f4:	2042      	movs	r0, #66	; 0x42
    47f6:	f004 fafb 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    47fa:	e7bf      	b.n	477c <loop+0xe20>
          midiSendNoteOn(fingeredNote, velocitySend); // send Note On message for new note
    47fc:	f898 1000 	ldrb.w	r1, [r8]
    4800:	7830      	ldrb	r0, [r6, #0]
    4802:	f004 fb33 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
    4806:	e7b5      	b.n	4774 <loop+0xe18>
          startHarmonizerNotes(fingeredNote);
    4808:	7830      	ldrb	r0, [r6, #0]
    480a:	f7fc fbc1 	bl	f90 <startHarmonizerNotes(unsigned char)>
    480e:	e7ad      	b.n	476c <loop+0xe10>
          midiSendNoteOn(noteValueCheck(fingeredNote - 12), velocitySend);
    4810:	6833      	ldr	r3, [r6, #0]
    4812:	f1a3 000c 	sub.w	r0, r3, #12
  if (note > 127) {
    4816:	287f      	cmp	r0, #127	; 0x7f
    4818:	f340 819d 	ble.w	4b56 <loop+0x11fa>
    note = 115 + (note - 127) % 12;
    481c:	4a19      	ldr	r2, [pc, #100]	; (4884 <loop+0xf28>)
    481e:	3b8b      	subs	r3, #139	; 0x8b
    4820:	fba2 1203 	umull	r1, r2, r2, r3
    4824:	08d2      	lsrs	r2, r2, #3
    4826:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    482a:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    482e:	f103 0073 	add.w	r0, r3, #115	; 0x73
          midiSendNoteOn(noteValueCheck(fingeredNote - 12), velocitySend);
    4832:	f898 1000 	ldrb.w	r1, [r8]
    4836:	b2c0      	uxtb	r0, r0
    4838:	f004 fb18 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
          if (parallelChord) {
    483c:	f89a 3000 	ldrb.w	r3, [sl]
    4840:	2b00      	cmp	r3, #0
    4842:	d08f      	beq.n	4764 <loop+0xe08>
            for (int i = 0; i < addedIntervals; i++) {
    4844:	4f14      	ldr	r7, [pc, #80]	; (4898 <loop+0xf3c>)
    4846:	783b      	ldrb	r3, [r7, #0]
    4848:	2b00      	cmp	r3, #0
    484a:	d08b      	beq.n	4764 <loop+0xe08>
    484c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 48bc <loop+0xf60>
    note = 12 - abs(note) % 12;
    4850:	f8df b030 	ldr.w	fp, [pc, #48]	; 4884 <loop+0xf28>
            for (int i = 0; i < addedIntervals; i++) {
    4854:	f04f 0a00 	mov.w	sl, #0
    4858:	e046      	b.n	48e8 <loop+0xf8c>
    485a:	bf00      	nop
    485c:	1fff9b72 	.word	0x1fff9b72
    4860:	1fff9a8a 	.word	0x1fff9a8a
    4864:	1fff9bd5 	.word	0x1fff9bd5
    4868:	1fff9b60 	.word	0x1fff9b60
    486c:	1fff9bda 	.word	0x1fff9bda
    4870:	1fff9b09 	.word	0x1fff9b09
    4874:	1fff9a68 	.word	0x1fff9a68
    4878:	1fff9a48 	.word	0x1fff9a48
    487c:	1fff9bf4 	.word	0x1fff9bf4
    4880:	1fff9d70 	.word	0x1fff9d70
    4884:	aaaaaaab 	.word	0xaaaaaaab
    4888:	1fff9a74 	.word	0x1fff9a74
    488c:	1fff9b58 	.word	0x1fff9b58
    4890:	1fff9b71 	.word	0x1fff9b71
    4894:	1fff9b0c 	.word	0x1fff9b0c
    4898:	1fff8d38 	.word	0x1fff8d38
    489c:	1fff9bd0 	.word	0x1fff9bd0
    48a0:	1fff8e48 	.word	0x1fff8e48
    48a4:	1fff9a4e 	.word	0x1fff9a4e
    48a8:	1fff9c6c 	.word	0x1fff9c6c
    48ac:	1fff9bc2 	.word	0x1fff9bc2
    48b0:	1fff9bd4 	.word	0x1fff9bd4
    48b4:	1fff9931 	.word	0x1fff9931
    48b8:	1fff8dbf 	.word	0x1fff8dbf
    48bc:	1fff8e44 	.word	0x1fff8e44
    note = 115 + (note - 127) % 12;
    48c0:	fbab 1302 	umull	r1, r3, fp, r2
    48c4:	08db      	lsrs	r3, r3, #3
    48c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    48ca:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
    48ce:	f102 0073 	add.w	r0, r2, #115	; 0x73
              midiSendNoteOn(noteValueCheck(fingeredNote + slurInterval[i] - 12), velocitySend); // send Note On message for new note
    48d2:	f898 1000 	ldrb.w	r1, [r8]
    48d6:	b2c0      	uxtb	r0, r0
    48d8:	f004 fac8 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
            for (int i = 0; i < addedIntervals; i++) {
    48dc:	783b      	ldrb	r3, [r7, #0]
    48de:	f10a 0a01 	add.w	sl, sl, #1
    48e2:	4553      	cmp	r3, sl
    48e4:	f77f af3e 	ble.w	4764 <loop+0xe08>
              midiSendNoteOn(noteValueCheck(fingeredNote + slurInterval[i] - 12), velocitySend); // send Note On message for new note
    48e8:	6832      	ldr	r2, [r6, #0]
    48ea:	f859 3f04 	ldr.w	r3, [r9, #4]!
    48ee:	4413      	add	r3, r2
    48f0:	f1a3 000c 	sub.w	r0, r3, #12
  if (note > 127) {
    48f4:	287f      	cmp	r0, #127	; 0x7f
    note = 115 + (note - 127) % 12;
    48f6:	f1a3 028b 	sub.w	r2, r3, #139	; 0x8b
  if (note > 127) {
    48fa:	dce1      	bgt.n	48c0 <loop+0xf64>
  } else if (note < 0) {
    48fc:	2800      	cmp	r0, #0
    note = 12 - abs(note) % 12;
    48fe:	f1c3 030c 	rsb	r3, r3, #12
  } else if (note < 0) {
    4902:	dae6      	bge.n	48d2 <loop+0xf76>
    note = 12 - abs(note) % 12;
    4904:	fbab 1203 	umull	r1, r2, fp, r3
    4908:	08d2      	lsrs	r2, r2, #3
    490a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    490e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4912:	f1c3 000c 	rsb	r0, r3, #12
    4916:	e7dc      	b.n	48d2 <loop+0xf76>
          midiSendControlChange(64, 127);
    4918:	217f      	movs	r1, #127	; 0x7f
    491a:	2040      	movs	r0, #64	; 0x40
    491c:	f004 fa68 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
          slurBase = fingeredNote;
    4920:	4ab8      	ldr	r2, [pc, #736]	; (4c04 <loop+0x12a8>)
          addedIntervals = 0;
    4922:	4bb9      	ldr	r3, [pc, #740]	; (4c08 <loop+0x12ac>)
          slurBase = fingeredNote;
    4924:	6831      	ldr	r1, [r6, #0]
    4926:	6011      	str	r1, [r2, #0]
          addedIntervals = 0;
    4928:	2200      	movs	r2, #0
    492a:	701a      	strb	r2, [r3, #0]
    492c:	e716      	b.n	475c <loop+0xe00>
            } else slurSustain = 0;
    492e:	2300      	movs	r3, #0
    4930:	7003      	strb	r3, [r0, #0]
          if (K5) {
    4932:	4bb6      	ldr	r3, [pc, #728]	; (4c0c <loop+0x12b0>)
    4934:	781b      	ldrb	r3, [r3, #0]
    4936:	2b00      	cmp	r3, #0
    4938:	f43f a8f4 	beq.w	3b24 <loop+0x1c8>
            if (!parallelChord) {
    493c:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 4c10 <loop+0x12b4>
    4940:	f89a 0000 	ldrb.w	r0, [sl]
    4944:	2800      	cmp	r0, #0
    4946:	f000 82d0 	beq.w	4eea <loop+0x158e>
            } else parallelChord = 0;
    494a:	2000      	movs	r0, #0
    494c:	f88a 0000 	strb.w	r0, [sl]
    4950:	f7ff b8e8 	b.w	3b24 <loop+0x1c8>
      if (subOctaveDouble) {
    4954:	4baf      	ldr	r3, [pc, #700]	; (4c14 <loop+0x12b8>)
    4956:	781b      	ldrb	r3, [r3, #0]
    4958:	2b00      	cmp	r3, #0
    495a:	f040 8234 	bne.w	4dc6 <loop+0x146a>
      if (rotatorOn) {
    495e:	4bae      	ldr	r3, [pc, #696]	; (4c18 <loop+0x12bc>)
    4960:	781b      	ldrb	r3, [r3, #0]
    4962:	2b00      	cmp	r3, #0
    4964:	f040 822a 	bne.w	4dbc <loop+0x1460>
      if (!priority) {
    4968:	9b01      	ldr	r3, [sp, #4]
    496a:	881b      	ldrh	r3, [r3, #0]
    496c:	2b00      	cmp	r3, #0
    496e:	f000 8220 	beq.w	4db2 <loop+0x1456>
      if (slurSustain) {
    4972:	4baa      	ldr	r3, [pc, #680]	; (4c1c <loop+0x12c0>)
    4974:	781b      	ldrb	r3, [r3, #0]
    4976:	2b00      	cmp	r3, #0
    4978:	f040 8216 	bne.w	4da8 <loop+0x144c>
      if (slurSostenuto) {
    497c:	4ba8      	ldr	r3, [pc, #672]	; (4c20 <loop+0x12c4>)
    497e:	781b      	ldrb	r3, [r3, #0]
    4980:	2b00      	cmp	r3, #0
    4982:	f040 8274 	bne.w	4e6e <loop+0x1512>
      breathLevel = 0;
    4986:	4ba7      	ldr	r3, [pc, #668]	; (4c24 <loop+0x12c8>)
    if (pressureSensor > breathThrVal) cursorBlinkTime = millis(); // keep display from updating with cursor blinking if breath is over thr
    4988:	4aa7      	ldr	r2, [pc, #668]	; (4c28 <loop+0x12cc>)
    498a:	6821      	ldr	r1, [r4, #0]
    498c:	8812      	ldrh	r2, [r2, #0]
      breathLevel = 0;
    498e:	2000      	movs	r0, #0
    4990:	6018      	str	r0, [r3, #0]
      mainState = NOTE_OFF;
    4992:	2301      	movs	r3, #1
    4994:	602b      	str	r3, [r5, #0]
    } else {
    4996:	e6d0      	b.n	473a <loop+0xdde>
  } else if (note < 0) {
    4998:	2800      	cmp	r0, #0
    499a:	f6bf aa75 	bge.w	3e88 <loop+0x52c>
    note = 12 - abs(note) % 12;
    499e:	4aa3      	ldr	r2, [pc, #652]	; (4c2c <loop+0x12d0>)
    49a0:	4240      	negs	r0, r0
    49a2:	fba2 1200 	umull	r1, r2, r2, r0
    49a6:	08d2      	lsrs	r2, r2, #3
    49a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    49ac:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    49b0:	f1c0 000c 	rsb	r0, r0, #12
    49b4:	f7ff ba68 	b.w	3e88 <loop+0x52c>
        if ((parallelChord || subOctaveDouble || rotatorOn) && priority) { // poly playing, send old note off before new note on
    49b8:	4b9d      	ldr	r3, [pc, #628]	; (4c30 <loop+0x12d4>)
    49ba:	9301      	str	r3, [sp, #4]
    49bc:	881b      	ldrh	r3, [r3, #0]
    49be:	2b00      	cmp	r3, #0
    49c0:	f040 826a 	bne.w	4e98 <loop+0x153c>
    49c4:	4b93      	ldr	r3, [pc, #588]	; (4c14 <loop+0x12b8>)
    49c6:	9303      	str	r3, [sp, #12]
    49c8:	4b93      	ldr	r3, [pc, #588]	; (4c18 <loop+0x12bc>)
    49ca:	9302      	str	r3, [sp, #8]
          for (int i = 0; i < addedIntervals; i++) {
    49cc:	4f8e      	ldr	r7, [pc, #568]	; (4c08 <loop+0x12ac>)
    49ce:	783b      	ldrb	r3, [r7, #0]
    49d0:	b383      	cbz	r3, 4a34 <loop+0x10d8>
    49d2:	4a98      	ldr	r2, [pc, #608]	; (4c34 <loop+0x12d8>)
    49d4:	9604      	str	r6, [sp, #16]
    note = 12 - abs(note) % 12;
    49d6:	f8df b254 	ldr.w	fp, [pc, #596]	; 4c2c <loop+0x12d0>
          for (int i = 0; i < addedIntervals; i++) {
    49da:	f04f 0800 	mov.w	r8, #0
    49de:	4616      	mov	r6, r2
    49e0:	e010      	b.n	4a04 <loop+0x10a8>
    note = 115 + (note - 127) % 12;
    49e2:	fbab 0301 	umull	r0, r3, fp, r1
    49e6:	08db      	lsrs	r3, r3, #3
    49e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    49ec:	eba1 0183 	sub.w	r1, r1, r3, lsl #2
    49f0:	f101 0073 	add.w	r0, r1, #115	; 0x73
            midiSendNoteOff(noteValueCheck(activeNote + slurInterval[i])); // send Note Off message for old note
    49f4:	b2c0      	uxtb	r0, r0
    49f6:	f004 fa77 	bl	8ee8 <midiSendNoteOff(unsigned char)>
          for (int i = 0; i < addedIntervals; i++) {
    49fa:	783b      	ldrb	r3, [r7, #0]
    49fc:	f108 0801 	add.w	r8, r8, #1
    4a00:	4543      	cmp	r3, r8
    4a02:	dd16      	ble.n	4a32 <loop+0x10d6>
            midiSendNoteOff(noteValueCheck(activeNote + slurInterval[i])); // send Note Off message for old note
    4a04:	f899 0000 	ldrb.w	r0, [r9]
    4a08:	f856 3f04 	ldr.w	r3, [r6, #4]!
    4a0c:	4418      	add	r0, r3
  if (note > 127) {
    4a0e:	287f      	cmp	r0, #127	; 0x7f
    note = 115 + (note - 127) % 12;
    4a10:	f1a0 017f 	sub.w	r1, r0, #127	; 0x7f
  if (note > 127) {
    4a14:	dce5      	bgt.n	49e2 <loop+0x1086>
  } else if (note < 0) {
    4a16:	2800      	cmp	r0, #0
    note = 12 - abs(note) % 12;
    4a18:	f1c0 0100 	rsb	r1, r0, #0
  } else if (note < 0) {
    4a1c:	daea      	bge.n	49f4 <loop+0x1098>
    note = 12 - abs(note) % 12;
    4a1e:	fbab 0301 	umull	r0, r3, fp, r1
    4a22:	08db      	lsrs	r3, r3, #3
    4a24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4a28:	eba1 0183 	sub.w	r1, r1, r3, lsl #2
    4a2c:	f1c1 000c 	rsb	r0, r1, #12
    4a30:	e7e0      	b.n	49f4 <loop+0x1098>
        if (subOctaveDouble) {
    4a32:	9e04      	ldr	r6, [sp, #16]
    4a34:	9b03      	ldr	r3, [sp, #12]
    4a36:	781b      	ldrb	r3, [r3, #0]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	f43f aa08 	beq.w	3e4e <loop+0x4f2>
          midiSendNoteOff(noteValueCheck(activeNote - 12)); // send Note Off message for old note
    4a3e:	f899 3000 	ldrb.w	r3, [r9]
    4a42:	f1a3 000c 	sub.w	r0, r3, #12
  if (note > 127) {
    4a46:	287f      	cmp	r0, #127	; 0x7f
    4a48:	f340 822b 	ble.w	4ea2 <loop+0x1546>
    note = 115 + (note - 127) % 12;
    4a4c:	4a77      	ldr	r2, [pc, #476]	; (4c2c <loop+0x12d0>)
    4a4e:	3b8b      	subs	r3, #139	; 0x8b
    4a50:	fba2 1203 	umull	r1, r2, r2, r3
    4a54:	08d2      	lsrs	r2, r2, #3
    4a56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4a5a:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4a5e:	f103 0073 	add.w	r0, r3, #115	; 0x73
          midiSendNoteOff(noteValueCheck(activeNote - 12)); // send Note Off message for old note
    4a62:	b2c0      	uxtb	r0, r0
    4a64:	f004 fa40 	bl	8ee8 <midiSendNoteOff(unsigned char)>
          if (parallelChord) {
    4a68:	f89a 3000 	ldrb.w	r3, [sl]
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	f000 8082 	beq.w	4b76 <loop+0x121a>
            for (int i = 0; i < addedIntervals; i++) {
    4a72:	4f65      	ldr	r7, [pc, #404]	; (4c08 <loop+0x12ac>)
    4a74:	783b      	ldrb	r3, [r7, #0]
    4a76:	2b00      	cmp	r3, #0
    4a78:	f000 82be 	beq.w	4ff8 <L_19097_delayMicroseconds+0xe0>
    4a7c:	496d      	ldr	r1, [pc, #436]	; (4c34 <loop+0x12d8>)
    4a7e:	9604      	str	r6, [sp, #16]
    note = 12 - abs(note) % 12;
    4a80:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 4c2c <loop+0x12d0>
            for (int i = 0; i < addedIntervals; i++) {
    4a84:	f04f 0800 	mov.w	r8, #0
    4a88:	460e      	mov	r6, r1
    4a8a:	e011      	b.n	4ab0 <loop+0x1154>
    note = 115 + (note - 127) % 12;
    4a8c:	fbab 0302 	umull	r0, r3, fp, r2
    4a90:	08db      	lsrs	r3, r3, #3
    4a92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4a96:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
    4a9a:	f102 0073 	add.w	r0, r2, #115	; 0x73
              midiSendNoteOff(noteValueCheck(activeNote + slurInterval[i] - 12)); // send Note Off message for old note
    4a9e:	b2c0      	uxtb	r0, r0
    4aa0:	f004 fa22 	bl	8ee8 <midiSendNoteOff(unsigned char)>
            for (int i = 0; i < addedIntervals; i++) {
    4aa4:	783b      	ldrb	r3, [r7, #0]
    4aa6:	f108 0801 	add.w	r8, r8, #1
    4aaa:	4543      	cmp	r3, r8
    4aac:	f340 8209 	ble.w	4ec2 <loop+0x1566>
              midiSendNoteOff(noteValueCheck(activeNote + slurInterval[i] - 12)); // send Note Off message for old note
    4ab0:	f856 2f04 	ldr.w	r2, [r6, #4]!
    4ab4:	f899 3000 	ldrb.w	r3, [r9]
    4ab8:	4413      	add	r3, r2
    4aba:	f1a3 000c 	sub.w	r0, r3, #12
  if (note > 127) {
    4abe:	287f      	cmp	r0, #127	; 0x7f
    note = 115 + (note - 127) % 12;
    4ac0:	f1a3 028b 	sub.w	r2, r3, #139	; 0x8b
  if (note > 127) {
    4ac4:	dce2      	bgt.n	4a8c <loop+0x1130>
  } else if (note < 0) {
    4ac6:	2800      	cmp	r0, #0
    note = 12 - abs(note) % 12;
    4ac8:	f1c3 030c 	rsb	r3, r3, #12
  } else if (note < 0) {
    4acc:	dae7      	bge.n	4a9e <loop+0x1142>
    note = 12 - abs(note) % 12;
    4ace:	fbab 0203 	umull	r0, r2, fp, r3
    4ad2:	08d2      	lsrs	r2, r2, #3
    4ad4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4ad8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4adc:	f1c3 000c 	rsb	r0, r3, #12
    4ae0:	e7dd      	b.n	4a9e <loop+0x1142>
    4ae2:	3901      	subs	r1, #1
    4ae4:	f7ff bb07 	b.w	40f6 <loop+0x79a>
          if (cvPortaTuneCount > CVPORTATUNE) cvPortaTuneCount=0;
    4ae8:	2300      	movs	r3, #0
    4aea:	7023      	strb	r3, [r4, #0]
          cvPitch += 1+(127-oldport)/4;
    4aec:	4603      	mov	r3, r0
    4aee:	f7ff baab 	b.w	4048 <loop+0x6ec>
    4af2:	2101      	movs	r1, #1
    4af4:	e448      	b.n	4388 <loop+0xa2c>
        if ((parallelChord || subOctaveDouble || rotatorOn) && !priority) { // poly playing, send old note off before new note on
    4af6:	9b02      	ldr	r3, [sp, #8]
    4af8:	781b      	ldrb	r3, [r3, #0]
    4afa:	9a03      	ldr	r2, [sp, #12]
    4afc:	7812      	ldrb	r2, [r2, #0]
    4afe:	4313      	orrs	r3, r2
    4b00:	f47f a9af 	bne.w	3e62 <loop+0x506>
        if (priority) {
    4b04:	9b01      	ldr	r3, [sp, #4]
    4b06:	881b      	ldrh	r3, [r3, #0]
    4b08:	f7ff b9b0 	b.w	3e6c <loop+0x510>
          if (patch != patchLimit(pitchlatchForPatch - 36)) {
    4b0c:	3b24      	subs	r3, #36	; 0x24
    4b0e:	2b01      	cmp	r3, #1
    4b10:	f8b7 b000 	ldrh.w	fp, [r7]
    4b14:	bfb8      	it	lt
    4b16:	2301      	movlt	r3, #1
    4b18:	459b      	cmp	fp, r3
    4b1a:	f47f aca7 	bne.w	446c <loop+0xb10>
    4b1e:	f7ff bb3b 	b.w	4198 <loop+0x83c>
          if (K2) {
    4b22:	4845      	ldr	r0, [pc, #276]	; (4c38 <loop+0x12dc>)
    4b24:	7800      	ldrb	r0, [r0, #0]
    4b26:	2800      	cmp	r0, #0
    4b28:	f43f a826 	beq.w	3b78 <loop+0x21c>
    4b2c:	f7ff b811 	b.w	3b52 <loop+0x1f6>
        if ((parallelChord || subOctaveDouble || rotatorOn) && priority) { // poly playing, send old note off before new note on
    4b30:	4a3f      	ldr	r2, [pc, #252]	; (4c30 <loop+0x12d4>)
    4b32:	9201      	str	r2, [sp, #4]
    4b34:	8812      	ldrh	r2, [r2, #0]
    4b36:	2a00      	cmp	r2, #0
    4b38:	f43f af7e 	beq.w	4a38 <loop+0x10dc>
          midiSendNoteOff(activeNote); // send Note Off message for old note
    4b3c:	4638      	mov	r0, r7
    4b3e:	f004 f9d3 	bl	8ee8 <midiSendNoteOff(unsigned char)>
        if (parallelChord) {
    4b42:	f89a 3000 	ldrb.w	r3, [sl]
    4b46:	2b00      	cmp	r3, #0
    4b48:	f47f af40 	bne.w	49cc <loop+0x1070>
    4b4c:	e772      	b.n	4a34 <loop+0x10d8>
    4b4e:	f641 70ff 	movw	r0, #8191	; 0x1fff
    4b52:	f7ff bbef 	b.w	4334 <loop+0x9d8>
  } else if (note < 0) {
    4b56:	2800      	cmp	r0, #0
    4b58:	f6bf ae6b 	bge.w	4832 <loop+0xed6>
    note = 12 - abs(note) % 12;
    4b5c:	4a33      	ldr	r2, [pc, #204]	; (4c2c <loop+0x12d0>)
    4b5e:	f1c3 030c 	rsb	r3, r3, #12
    4b62:	fba2 1203 	umull	r1, r2, r2, r3
    4b66:	08d2      	lsrs	r2, r2, #3
    4b68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4b6c:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4b70:	f1c3 000c 	rsb	r0, r3, #12
    4b74:	e65d      	b.n	4832 <loop+0xed6>
        if (rotatorOn) {
    4b76:	9b02      	ldr	r3, [sp, #8]
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d0bd      	beq.n	4afa <loop+0x119e>
          stopHarmonizerNotes(activeNote);
    4b7e:	f899 0000 	ldrb.w	r0, [r9]
    4b82:	f7fc f8af 	bl	ce4 <stopHarmonizerNotes(unsigned char)>
    4b86:	f7ff b967 	b.w	3e58 <loop+0x4fc>
          midiSendNoteOn(fingeredNote, velocitySend); // send Note On message for new note
    4b8a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4c3c <loop+0x12e0>
    4b8e:	b2c0      	uxtb	r0, r0
    4b90:	f898 1000 	ldrb.w	r1, [r8]
    4b94:	f004 f96a 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
    4b98:	f7ff b97a 	b.w	3e90 <loop+0x534>
          midiSendNoteOn(fingeredNote, velocitySend); // send Note On message for new note
    4b9c:	4b27      	ldr	r3, [pc, #156]	; (4c3c <loop+0x12e0>)
    4b9e:	7830      	ldrb	r0, [r6, #0]
    4ba0:	7819      	ldrb	r1, [r3, #0]
    4ba2:	f004 f963 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
    4ba6:	e5a6      	b.n	46f6 <loop+0xd9a>
          startHarmonizerNotes(fingeredNote);
    4ba8:	7830      	ldrb	r0, [r6, #0]
    4baa:	f7fc f9f1 	bl	f90 <startHarmonizerNotes(unsigned char)>
    4bae:	e59d      	b.n	46ec <loop+0xd90>
          midiSendNoteOn(noteValueCheck(fingeredNote - 12), velocitySend); // send Note On message for new note
    4bb0:	6833      	ldr	r3, [r6, #0]
    4bb2:	f1a3 000c 	sub.w	r0, r3, #12
  if (note > 127) {
    4bb6:	287f      	cmp	r0, #127	; 0x7f
    4bb8:	f340 815e 	ble.w	4e78 <loop+0x151c>
    note = 115 + (note - 127) % 12;
    4bbc:	4a1b      	ldr	r2, [pc, #108]	; (4c2c <loop+0x12d0>)
    4bbe:	3b8b      	subs	r3, #139	; 0x8b
    4bc0:	fba2 1203 	umull	r1, r2, r2, r3
    4bc4:	08d2      	lsrs	r2, r2, #3
    4bc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4bca:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4bce:	f103 0073 	add.w	r0, r3, #115	; 0x73
          midiSendNoteOn(noteValueCheck(fingeredNote - 12), velocitySend); // send Note On message for new note
    4bd2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 4c3c <loop+0x12e0>
    4bd6:	b2c0      	uxtb	r0, r0
    4bd8:	f898 1000 	ldrb.w	r1, [r8]
    4bdc:	f004 f946 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
          if (parallelChord) {
    4be0:	f89a 3000 	ldrb.w	r3, [sl]
    4be4:	2b00      	cmp	r3, #0
    4be6:	f43f ad7c 	beq.w	46e2 <loop+0xd86>
            for (int i = 0; i < addedIntervals; i++) {
    4bea:	4f07      	ldr	r7, [pc, #28]	; (4c08 <loop+0x12ac>)
    4bec:	783b      	ldrb	r3, [r7, #0]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	f43f ad77 	beq.w	46e2 <loop+0xd86>
    4bf4:	4a0f      	ldr	r2, [pc, #60]	; (4c34 <loop+0x12d8>)
    4bf6:	f8cd 9010 	str.w	r9, [sp, #16]
    4bfa:	2300      	movs	r3, #0
    4bfc:	46b1      	mov	r9, r6
    4bfe:	469b      	mov	fp, r3
    4c00:	4616      	mov	r6, r2
    4c02:	e032      	b.n	4c6a <loop+0x130e>
    4c04:	1fff9bd0 	.word	0x1fff9bd0
    4c08:	1fff8d38 	.word	0x1fff8d38
    4c0c:	1fff990c 	.word	0x1fff990c
    4c10:	1fff9b60 	.word	0x1fff9b60
    4c14:	1fff9bda 	.word	0x1fff9bda
    4c18:	1fff9bc2 	.word	0x1fff9bc2
    4c1c:	1fff9bd5 	.word	0x1fff9bd5
    4c20:	1fff9bd4 	.word	0x1fff9bd4
    4c24:	1fff9a48 	.word	0x1fff9a48
    4c28:	1fff9a4e 	.word	0x1fff9a4e
    4c2c:	aaaaaaab 	.word	0xaaaaaaab
    4c30:	1fff9b90 	.word	0x1fff9b90
    4c34:	1fff8e44 	.word	0x1fff8e44
    4c38:	1fff9909 	.word	0x1fff9909
    4c3c:	1fff9bf6 	.word	0x1fff9bf6
    note = 115 + (note - 127) % 12;
    4c40:	4bbd      	ldr	r3, [pc, #756]	; (4f38 <L_19097_delayMicroseconds+0x20>)
    4c42:	fba3 120c 	umull	r1, r2, r3, ip
    4c46:	08d2      	lsrs	r2, r2, #3
    4c48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4c4c:	ebac 0c82 	sub.w	ip, ip, r2, lsl #2
    4c50:	f10c 0073 	add.w	r0, ip, #115	; 0x73
              midiSendNoteOn(noteValueCheck(fingeredNote + slurInterval[i] - 12), velocitySend); // send Note On message for new note
    4c54:	f898 1000 	ldrb.w	r1, [r8]
    4c58:	b2c0      	uxtb	r0, r0
    4c5a:	f004 f907 	bl	8e6c <midiSendNoteOn(unsigned char, unsigned char)>
            for (int i = 0; i < addedIntervals; i++) {
    4c5e:	783a      	ldrb	r2, [r7, #0]
    4c60:	f10b 0b01 	add.w	fp, fp, #1
    4c64:	455a      	cmp	r2, fp
    4c66:	f340 8132 	ble.w	4ece <loop+0x1572>
              midiSendNoteOn(noteValueCheck(fingeredNote + slurInterval[i] - 12), velocitySend); // send Note On message for new note
    4c6a:	f856 1f04 	ldr.w	r1, [r6, #4]!
    4c6e:	f8d9 2000 	ldr.w	r2, [r9]
    4c72:	4411      	add	r1, r2
    4c74:	f1a1 000c 	sub.w	r0, r1, #12
  if (note > 127) {
    4c78:	287f      	cmp	r0, #127	; 0x7f
    note = 115 + (note - 127) % 12;
    4c7a:	f1a1 0c8b 	sub.w	ip, r1, #139	; 0x8b
  if (note > 127) {
    4c7e:	dcdf      	bgt.n	4c40 <loop+0x12e4>
  } else if (note < 0) {
    4c80:	2800      	cmp	r0, #0
    note = 12 - abs(note) % 12;
    4c82:	f1c1 010c 	rsb	r1, r1, #12
  } else if (note < 0) {
    4c86:	dae5      	bge.n	4c54 <loop+0x12f8>
    note = 12 - abs(note) % 12;
    4c88:	4bab      	ldr	r3, [pc, #684]	; (4f38 <L_19097_delayMicroseconds+0x20>)
    4c8a:	fba3 0201 	umull	r0, r2, r3, r1
    4c8e:	08d2      	lsrs	r2, r2, #3
    4c90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4c94:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
    4c98:	f1c1 000c 	rsb	r0, r1, #12
    4c9c:	e7da      	b.n	4c54 <loop+0x12f8>
        ledMeter(levelVal);
    4c9e:	4fa7      	ldr	r7, [pc, #668]	; (4f3c <L_19097_delayMicroseconds+0x24>)
    4ca0:	7838      	ldrb	r0, [r7, #0]
    4ca2:	f001 fa2d 	bl	6100 <ledMeter(unsigned char)>
        if (K6 && (levelVal < 127)){
    4ca6:	4ba6      	ldr	r3, [pc, #664]	; (4f40 <L_19097_delayMicroseconds+0x28>)
    4ca8:	781b      	ldrb	r3, [r3, #0]
    4caa:	2b00      	cmp	r3, #0
    4cac:	d04c      	beq.n	4d48 <loop+0x13ec>
    4cae:	883b      	ldrh	r3, [r7, #0]
    4cb0:	2b7e      	cmp	r3, #126	; 0x7e
    4cb2:	d849      	bhi.n	4d48 <loop+0x13ec>
          if (currentTime - lvlTime > (LVL_TIMER_INTERVAL)){
    4cb4:	4ea3      	ldr	r6, [pc, #652]	; (4f44 <L_19097_delayMicroseconds+0x2c>)
    4cb6:	f8df 9290 	ldr.w	r9, [pc, #656]	; 4f48 <L_19097_delayMicroseconds+0x30>
    4cba:	6832      	ldr	r2, [r6, #0]
    4cbc:	f8d9 1000 	ldr.w	r1, [r9]
    4cc0:	1a52      	subs	r2, r2, r1
    4cc2:	2a0f      	cmp	r2, #15
    4cc4:	d93a      	bls.n	4d3c <loop+0x13e0>
            levelVal++;
    4cc6:	3301      	adds	r3, #1
    4cc8:	b299      	uxth	r1, r3
            if (levelCC) midiSendControlChange(levelCC, levelVal);
    4cca:	4ba0      	ldr	r3, [pc, #640]	; (4f4c <L_19097_delayMicroseconds+0x34>)
            levelVal++;
    4ccc:	8039      	strh	r1, [r7, #0]
            if (levelCC) midiSendControlChange(levelCC, levelVal);
    4cce:	8818      	ldrh	r0, [r3, #0]
    4cd0:	2800      	cmp	r0, #0
    4cd2:	d050      	beq.n	4d76 <loop+0x141a>
            if (levelCC) midiSendControlChange(levelCC, levelVal);
    4cd4:	b2c9      	uxtb	r1, r1
    4cd6:	b2c0      	uxtb	r0, r0
    4cd8:	f004 f88a 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
            lvlTime = currentTime;
    4cdc:	4f9c      	ldr	r7, [pc, #624]	; (4f50 <L_19097_delayMicroseconds+0x38>)
      lastPinkyKey = pinkyKey;
    4cde:	f898 3000 	ldrb.w	r3, [r8]
            lvlTime = currentTime;
    4ce2:	6832      	ldr	r2, [r6, #0]
    4ce4:	f8c9 2000 	str.w	r2, [r9]
      lastPinkyKey = pinkyKey;
    4ce8:	703b      	strb	r3, [r7, #0]
    4cea:	f7fe be5f 	b.w	39ac <loop+0x50>
              if (patch != patchLimit(fingeredNoteUntransposedForPatch - 36)) {
    4cee:	3b24      	subs	r3, #36	; 0x24
    4cf0:	2b01      	cmp	r3, #1
    4cf2:	bfb8      	it	lt
    4cf4:	2301      	movlt	r3, #1
    4cf6:	e47b      	b.n	45f0 <loop+0xc94>
    4cf8:	217f      	movs	r1, #127	; 0x7f
    4cfa:	f7ff bb45 	b.w	4388 <loop+0xa2c>
          cvPortaTuneCount++;
    4cfe:	1c53      	adds	r3, r2, #1
    4d00:	b2db      	uxtb	r3, r3
          if (cvPortaTuneCount > CVPORTATUNE) cvPortaTuneCount=0;
    4d02:	2b02      	cmp	r3, #2
    4d04:	f63f aef0 	bhi.w	4ae8 <loop+0x118c>
          cvPortaTuneCount++;
    4d08:	7023      	strb	r3, [r4, #0]
          cvPitch += 1+(127-oldport)/4;
    4d0a:	4603      	mov	r3, r0
    4d0c:	f7ff b99c 	b.w	4048 <loop+0x6ec>
          midiSendNoteOff(activeNote); // send Note Off message for old note
    4d10:	f899 0000 	ldrb.w	r0, [r9]
    4d14:	f004 f8e8 	bl	8ee8 <midiSendNoteOff(unsigned char)>
    4d18:	e6f4      	b.n	4b04 <loop+0x11a8>
        writeSetting(LEVEL_VAL_ADDR,levelVal);
    4d1a:	4b88      	ldr	r3, [pc, #544]	; (4f3c <L_19097_delayMicroseconds+0x24>)
    4d1c:	4e89      	ldr	r6, [pc, #548]	; (4f44 <L_19097_delayMicroseconds+0x2c>)
    4d1e:	8819      	ldrh	r1, [r3, #0]
    4d20:	206a      	movs	r0, #106	; 0x6a
    4d22:	f004 fad9 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
      lastPinkyKey = pinkyKey;
    4d26:	f898 3000 	ldrb.w	r3, [r8]
    4d2a:	703b      	strb	r3, [r7, #0]
    4d2c:	f7fe be3e 	b.w	39ac <loop+0x50>
          unsigned int breathValHires = breathCurve(map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, 0, 16383));
    4d30:	428b      	cmp	r3, r1
    4d32:	bfa8      	it	ge
    4d34:	460b      	movge	r3, r1
    4d36:	f7ff b82a 	b.w	3d8e <loop+0x432>
    4d3a:	4e82      	ldr	r6, [pc, #520]	; (4f44 <L_19097_delayMicroseconds+0x2c>)
    4d3c:	4f84      	ldr	r7, [pc, #528]	; (4f50 <L_19097_delayMicroseconds+0x38>)
      lastPinkyKey = pinkyKey;
    4d3e:	f898 3000 	ldrb.w	r3, [r8]
    4d42:	703b      	strb	r3, [r7, #0]
    4d44:	f7fe be32 	b.w	39ac <loop+0x50>
        } else if (K5 && (levelVal > 0)){
    4d48:	4b82      	ldr	r3, [pc, #520]	; (4f54 <L_19097_delayMicroseconds+0x3c>)
    4d4a:	781b      	ldrb	r3, [r3, #0]
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d0f4      	beq.n	4d3a <loop+0x13de>
    4d50:	8839      	ldrh	r1, [r7, #0]
    4d52:	2900      	cmp	r1, #0
    4d54:	d0f1      	beq.n	4d3a <loop+0x13de>
          if (currentTime - lvlTime > (LVL_TIMER_INTERVAL)){
    4d56:	4e7b      	ldr	r6, [pc, #492]	; (4f44 <L_19097_delayMicroseconds+0x2c>)
    4d58:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 4f48 <L_19097_delayMicroseconds+0x30>
    4d5c:	6833      	ldr	r3, [r6, #0]
    4d5e:	f8d9 2000 	ldr.w	r2, [r9]
    4d62:	1a9b      	subs	r3, r3, r2
    4d64:	2b0f      	cmp	r3, #15
    4d66:	d9e9      	bls.n	4d3c <loop+0x13e0>
            if (levelCC) midiSendControlChange(levelCC, levelVal);
    4d68:	4b78      	ldr	r3, [pc, #480]	; (4f4c <L_19097_delayMicroseconds+0x34>)
            levelVal--;
    4d6a:	3901      	subs	r1, #1
            if (levelCC) midiSendControlChange(levelCC, levelVal);
    4d6c:	8818      	ldrh	r0, [r3, #0]
            levelVal--;
    4d6e:	b289      	uxth	r1, r1
    4d70:	8039      	strh	r1, [r7, #0]
            if (levelCC) midiSendControlChange(levelCC, levelVal);
    4d72:	2800      	cmp	r0, #0
    4d74:	d1ae      	bne.n	4cd4 <loop+0x1378>
            else midiSendAfterTouch(levelVal);
    4d76:	b2c8      	uxtb	r0, r1
    4d78:	f004 f8ee 	bl	8f58 <midiSendAfterTouch(unsigned char)>
    4d7c:	e7ae      	b.n	4cdc <loop+0x1380>
    4d7e:	2301      	movs	r3, #1
    4d80:	f7ff b840 	b.w	3e04 <loop+0x4a8>
            } else rotatorOn = 0;
    4d84:	2300      	movs	r3, #0
    4d86:	7003      	strb	r3, [r0, #0]
    4d88:	f7fe bf09 	b.w	3b9e <loop+0x242>
            } else subOctaveDouble = 0;
    4d8c:	2700      	movs	r7, #0
    4d8e:	7007      	strb	r7, [r0, #0]
    4d90:	f7fe beda 	b.w	3b48 <loop+0x1ec>
            } else slurSostenuto = 0;
    4d94:	f04f 0c00 	mov.w	ip, #0
    4d98:	f887 c000 	strb.w	ip, [r7]
    4d9c:	f7fe bee8 	b.w	3b70 <loop+0x214>
    4da0:	f641 70ff 	movw	r0, #8191	; 0x1fff
    4da4:	f7ff b804 	b.w	3db0 <loop+0x454>
        midiSendControlChange(64, 0);
    4da8:	2100      	movs	r1, #0
    4daa:	2040      	movs	r0, #64	; 0x40
    4dac:	f004 f820 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    4db0:	e5e4      	b.n	497c <loop+0x1020>
        midiSendNoteOff(activeNote); //  send Note Off message
    4db2:	f899 0000 	ldrb.w	r0, [r9]
    4db6:	f004 f897 	bl	8ee8 <midiSendNoteOff(unsigned char)>
    4dba:	e5da      	b.n	4972 <loop+0x1016>
        stopHarmonizerNotes(activeNote);
    4dbc:	f899 0000 	ldrb.w	r0, [r9]
    4dc0:	f7fb ff90 	bl	ce4 <stopHarmonizerNotes(unsigned char)>
    4dc4:	e5d0      	b.n	4968 <loop+0x100c>
        midiSendNoteOff(noteValueCheck(activeNote - 12));
    4dc6:	f899 3000 	ldrb.w	r3, [r9]
    4dca:	f1a3 000c 	sub.w	r0, r3, #12
  if (note > 127) {
    4dce:	287f      	cmp	r0, #127	; 0x7f
    4dd0:	f340 8090 	ble.w	4ef4 <loop+0x1598>
    note = 115 + (note - 127) % 12;
    4dd4:	4a58      	ldr	r2, [pc, #352]	; (4f38 <L_19097_delayMicroseconds+0x20>)
    4dd6:	3b8b      	subs	r3, #139	; 0x8b
    4dd8:	fba2 1203 	umull	r1, r2, r2, r3
    4ddc:	08d2      	lsrs	r2, r2, #3
    4dde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4de2:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4de6:	f103 0073 	add.w	r0, r3, #115	; 0x73
        midiSendNoteOff(noteValueCheck(activeNote - 12));
    4dea:	b2c0      	uxtb	r0, r0
    4dec:	f004 f87c 	bl	8ee8 <midiSendNoteOff(unsigned char)>
        if (parallelChord) {
    4df0:	f89a 3000 	ldrb.w	r3, [sl]
    4df4:	2b00      	cmp	r3, #0
    4df6:	f43f adb2 	beq.w	495e <loop+0x1002>
          for (int i = 0; i < addedIntervals; i++) {
    4dfa:	4f57      	ldr	r7, [pc, #348]	; (4f58 <L_19097_delayMicroseconds+0x40>)
    4dfc:	783b      	ldrb	r3, [r7, #0]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	f43f adad 	beq.w	495e <loop+0x1002>
    4e04:	f8df a154 	ldr.w	sl, [pc, #340]	; 4f5c <L_19097_delayMicroseconds+0x44>
    note = 12 - abs(note) % 12;
    4e08:	4e4b      	ldr	r6, [pc, #300]	; (4f38 <L_19097_delayMicroseconds+0x20>)
          for (int i = 0; i < addedIntervals; i++) {
    4e0a:	f04f 0800 	mov.w	r8, #0
    4e0e:	e011      	b.n	4e34 <loop+0x14d8>
    note = 115 + (note - 127) % 12;
    4e10:	fba6 1302 	umull	r1, r3, r6, r2
    4e14:	08db      	lsrs	r3, r3, #3
    4e16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4e1a:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
    4e1e:	f102 0073 	add.w	r0, r2, #115	; 0x73
            midiSendNoteOff(noteValueCheck(activeNote + slurInterval[i] - 12)); // send Note On message for new note
    4e22:	b2c0      	uxtb	r0, r0
    4e24:	f004 f860 	bl	8ee8 <midiSendNoteOff(unsigned char)>
          for (int i = 0; i < addedIntervals; i++) {
    4e28:	783b      	ldrb	r3, [r7, #0]
    4e2a:	f108 0801 	add.w	r8, r8, #1
    4e2e:	4543      	cmp	r3, r8
    4e30:	f77f ad95 	ble.w	495e <loop+0x1002>
            midiSendNoteOff(noteValueCheck(activeNote + slurInterval[i] - 12)); // send Note On message for new note
    4e34:	f85a 2f04 	ldr.w	r2, [sl, #4]!
    4e38:	f899 3000 	ldrb.w	r3, [r9]
    4e3c:	4413      	add	r3, r2
    4e3e:	f1a3 000c 	sub.w	r0, r3, #12
  if (note > 127) {
    4e42:	287f      	cmp	r0, #127	; 0x7f
    note = 115 + (note - 127) % 12;
    4e44:	f1a3 028b 	sub.w	r2, r3, #139	; 0x8b
  if (note > 127) {
    4e48:	dce2      	bgt.n	4e10 <loop+0x14b4>
  } else if (note < 0) {
    4e4a:	2800      	cmp	r0, #0
    note = 12 - abs(note) % 12;
    4e4c:	f1c3 030c 	rsb	r3, r3, #12
  } else if (note < 0) {
    4e50:	dae7      	bge.n	4e22 <loop+0x14c6>
    note = 12 - abs(note) % 12;
    4e52:	fba6 1203 	umull	r1, r2, r6, r3
    4e56:	08d2      	lsrs	r2, r2, #3
    4e58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4e5c:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4e60:	f1c3 000c 	rsb	r0, r3, #12
    4e64:	e7dd      	b.n	4e22 <loop+0x14c6>
        midiSendNoteOff(activeNote); //  send Note Off message
    4e66:	f004 f83f 	bl	8ee8 <midiSendNoteOff(unsigned char)>
    4e6a:	f7fe bf30 	b.w	3cce <loop+0x372>
        midiSendControlChange(66, 0);
    4e6e:	2100      	movs	r1, #0
    4e70:	2042      	movs	r0, #66	; 0x42
    4e72:	f003 ffbd 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    4e76:	e586      	b.n	4986 <loop+0x102a>
  } else if (note < 0) {
    4e78:	2800      	cmp	r0, #0
    4e7a:	f6bf aeaa 	bge.w	4bd2 <loop+0x1276>
    note = 12 - abs(note) % 12;
    4e7e:	4a2e      	ldr	r2, [pc, #184]	; (4f38 <L_19097_delayMicroseconds+0x20>)
    4e80:	f1c3 030c 	rsb	r3, r3, #12
    4e84:	fba2 1203 	umull	r1, r2, r2, r3
    4e88:	08d2      	lsrs	r2, r2, #3
    4e8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4e8e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4e92:	f1c3 000c 	rsb	r0, r3, #12
    4e96:	e69c      	b.n	4bd2 <loop+0x1276>
    4e98:	4b31      	ldr	r3, [pc, #196]	; (4f60 <L_19097_delayMicroseconds+0x48>)
    4e9a:	9303      	str	r3, [sp, #12]
    4e9c:	4b31      	ldr	r3, [pc, #196]	; (4f64 <L_19097_delayMicroseconds+0x4c>)
    4e9e:	9302      	str	r3, [sp, #8]
    4ea0:	e64c      	b.n	4b3c <loop+0x11e0>
  } else if (note < 0) {
    4ea2:	2800      	cmp	r0, #0
    4ea4:	f6bf addd 	bge.w	4a62 <loop+0x1106>
    note = 12 - abs(note) % 12;
    4ea8:	4a23      	ldr	r2, [pc, #140]	; (4f38 <L_19097_delayMicroseconds+0x20>)
    4eaa:	f1c3 030c 	rsb	r3, r3, #12
    4eae:	fba2 1203 	umull	r1, r2, r2, r3
    4eb2:	08d2      	lsrs	r2, r2, #3
    4eb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4eb8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4ebc:	f1c3 000c 	rsb	r0, r3, #12
    4ec0:	e5cf      	b.n	4a62 <loop+0x1106>
    4ec2:	9e04      	ldr	r6, [sp, #16]
    4ec4:	f7fe bfc3 	b.w	3e4e <loop+0x4f2>
    4ec8:	237f      	movs	r3, #127	; 0x7f
    4eca:	f7fe bf9b 	b.w	3e04 <loop+0x4a8>
    4ece:	464e      	mov	r6, r9
    4ed0:	f8dd 9010 	ldr.w	r9, [sp, #16]
    4ed4:	e405      	b.n	46e2 <loop+0xd86>
        breathLevel = constrain(max(pressureSensor, initial_breath_value), breathThrVal, breathMaxVal);
    4ed6:	4298      	cmp	r0, r3
    4ed8:	bfa8      	it	ge
    4eda:	4618      	movge	r0, r3
    4edc:	4b22      	ldr	r3, [pc, #136]	; (4f68 <L_19097_delayMicroseconds+0x50>)
    4ede:	6018      	str	r0, [r3, #0]
        if (!velocity) {
    4ee0:	f7ff b9fd 	b.w	42de <loop+0x982>
    4ee4:	3801      	subs	r0, #1
    4ee6:	f7ff ba25 	b.w	4334 <loop+0x9d8>
    4eea:	4f1e      	ldr	r7, [pc, #120]	; (4f64 <L_19097_delayMicroseconds+0x4c>)
    4eec:	481f      	ldr	r0, [pc, #124]	; (4f6c <L_19097_delayMicroseconds+0x54>)
    4eee:	9702      	str	r7, [sp, #8]
    4ef0:	f7fe be11 	b.w	3b16 <loop+0x1ba>
  } else if (note < 0) {
    4ef4:	2800      	cmp	r0, #0
    4ef6:	f6bf af78 	bge.w	4dea <loop+0x148e>
    note = 12 - abs(note) % 12;
    4efa:	4a0f      	ldr	r2, [pc, #60]	; (4f38 <L_19097_delayMicroseconds+0x20>)
    4efc:	f1c3 030c 	rsb	r3, r3, #12
    4f00:	fba2 1203 	umull	r1, r2, r2, r3
    4f04:	08d2      	lsrs	r2, r2, #3
    4f06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4f0a:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    4f0e:	f1c3 000c 	rsb	r0, r3, #12
    4f12:	e76a      	b.n	4dea <loop+0x148e>
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    4f14:	f44f 437a 	mov.w	r3, #64000	; 0xfa00

00004f18 <L_19097_delayMicroseconds>:
    4f18:	3b01      	subs	r3, #1
    4f1a:	d1fd      	bne.n	4f18 <L_19097_delayMicroseconds>
          midiSendNoteOff(activeNote); //  send Note Off message
    4f1c:	f899 0000 	ldrb.w	r0, [r9]
    4f20:	f003 ffe2 	bl	8ee8 <midiSendNoteOff(unsigned char)>
    4f24:	f7ff bbf1 	b.w	470a <loop+0xdae>
      statusLedOn();
    4f28:	f001 f84c 	bl	5fc4 <statusLedOn()>
    4f2c:	f7ff b881 	b.w	4032 <loop+0x6d6>
    4f30:	3801      	subs	r0, #1
    4f32:	f7fe bf3d 	b.w	3db0 <loop+0x454>
    4f36:	bf00      	nop
    4f38:	aaaaaaab 	.word	0xaaaaaaab
    4f3c:	1fff9b14 	.word	0x1fff9b14
    4f40:	1fff990d 	.word	0x1fff990d
    4f44:	1fff9a68 	.word	0x1fff9a68
    4f48:	1fff9b2c 	.word	0x1fff9b2c
    4f4c:	1fff9b12 	.word	0x1fff9b12
    4f50:	1fff9b09 	.word	0x1fff9b09
    4f54:	1fff990c 	.word	0x1fff990c
    4f58:	1fff8d38 	.word	0x1fff8d38
    4f5c:	1fff8e44 	.word	0x1fff8e44
    4f60:	1fff9bda 	.word	0x1fff9bda
    4f64:	1fff9bc2 	.word	0x1fff9bc2
    4f68:	1fff9a48 	.word	0x1fff9a48
    4f6c:	1fff9bd5 	.word	0x1fff9bd5
            if (!K1 && !K2 && K3 && !K4) { //send reverb pitchlatch value
    4f70:	4b5d      	ldr	r3, [pc, #372]	; (50e8 <L_19097_delayMicroseconds+0x1d0>)
    4f72:	781b      	ldrb	r3, [r3, #0]
    4f74:	2b00      	cmp	r3, #0
    4f76:	f47e ad99 	bne.w	3aac <loop+0x150>
              reverb = constrain(reverb, 0, 127);
    4f7a:	4b5c      	ldr	r3, [pc, #368]	; (50ec <L_19097_delayMicroseconds+0x1d4>)
              reverb = ((pitchlatch - 36) * 2);
    4f7c:	f1ae 0124 	sub.w	r1, lr, #36	; 0x24
    4f80:	f381 0147 	usat	r1, #7, r1, lsl #1
              reverb = constrain(reverb, 0, 127);
    4f84:	6019      	str	r1, [r3, #0]
              midiSendControlChange(91, reverb);
    4f86:	205b      	movs	r0, #91	; 0x5b
    4f88:	b2c9      	uxtb	r1, r1
    4f8a:	f003 ff31 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
          if (octaveR == 3) { //middle octave position to set breath parameters
    4f8e:	f898 3000 	ldrb.w	r3, [r8]
    4f92:	2b03      	cmp	r3, #3
    4f94:	f47e ad88 	bne.w	3aa8 <loop+0x14c>
            if (K1) { //turn on midi volume
    4f98:	f8df 8154 	ldr.w	r8, [pc, #340]	; 50f0 <L_19097_delayMicroseconds+0x1d8>
    4f9c:	f898 2000 	ldrb.w	r2, [r8]
    4fa0:	2a00      	cmp	r2, #0
    4fa2:	f040 8084 	bne.w	50ae <L_19097_delayMicroseconds+0x196>
            if (K3) { //turn on midi breath controller
    4fa6:	4f53      	ldr	r7, [pc, #332]	; (50f4 <L_19097_delayMicroseconds+0x1dc>)
    4fa8:	783b      	ldrb	r3, [r7, #0]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d173      	bne.n	5096 <L_19097_delayMicroseconds+0x17e>
            if (K4) { //sb turn on midi expression
    4fae:	4e4e      	ldr	r6, [pc, #312]	; (50e8 <L_19097_delayMicroseconds+0x1d0>)
    4fb0:	7833      	ldrb	r3, [r6, #0]
    4fb2:	2b00      	cmp	r3, #0
    4fb4:	d163      	bne.n	507e <L_19097_delayMicroseconds+0x166>
            if (K2) { //2v turn on aftertouch
    4fb6:	4b50      	ldr	r3, [pc, #320]	; (50f8 <L_19097_delayMicroseconds+0x1e0>)
    4fb8:	781b      	ldrb	r3, [r3, #0]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d153      	bne.n	5066 <L_19097_delayMicroseconds+0x14e>
              breathAT = 0;
    4fbe:	4a4f      	ldr	r2, [pc, #316]	; (50fc <L_19097_delayMicroseconds+0x1e4>)
    4fc0:	8013      	strh	r3, [r2, #0]
            if (K5) { //1tr turn on velocity
    4fc2:	4b4f      	ldr	r3, [pc, #316]	; (5100 <L_19097_delayMicroseconds+0x1e8>)
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d130      	bne.n	502c <L_19097_delayMicroseconds+0x114>
              velocity = 127;
    4fca:	4b4e      	ldr	r3, [pc, #312]	; (5104 <L_19097_delayMicroseconds+0x1ec>)
    4fcc:	227f      	movs	r2, #127	; 0x7f
    4fce:	801a      	strh	r2, [r3, #0]
            if (!K1 && !K3 && !K4) {
    4fd0:	783a      	ldrb	r2, [r7, #0]
    4fd2:	f898 3000 	ldrb.w	r3, [r8]
    4fd6:	4313      	orrs	r3, r2
    4fd8:	7832      	ldrb	r2, [r6, #0]
    4fda:	4313      	orrs	r3, r2
    4fdc:	f47e ad64 	bne.w	3aa8 <loop+0x14c>
              breathCC = 0;
    4fe0:	4a49      	ldr	r2, [pc, #292]	; (5108 <L_19097_delayMicroseconds+0x1f0>)
              midiSendControlChange(7, 127); //midi vol to 127
    4fe2:	217f      	movs	r1, #127	; 0x7f
    4fe4:	2007      	movs	r0, #7
              breathCC = 0;
    4fe6:	8013      	strh	r3, [r2, #0]
              midiSendControlChange(7, 127); //midi vol to 127
    4fe8:	f003 ff02 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
              midiSendControlChange(11, 127); //midi expression to 127
    4fec:	217f      	movs	r1, #127	; 0x7f
    4fee:	200b      	movs	r0, #11
    4ff0:	f003 fefe 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    4ff4:	f7fe bd58 	b.w	3aa8 <loop+0x14c>
        if (rotatorOn) {
    4ff8:	9b02      	ldr	r3, [sp, #8]
    4ffa:	781b      	ldrb	r3, [r3, #0]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	f43e af30 	beq.w	3e62 <loop+0x506>
    5002:	e5bc      	b.n	4b7e <loop+0x1222>
            if (K1 && K2 && !K3 && K4) { //  e28 send patch change -10
    5004:	4b3c      	ldr	r3, [pc, #240]	; (50f8 <L_19097_delayMicroseconds+0x1e0>)
    5006:	781b      	ldrb	r3, [r3, #0]
    5008:	b1e3      	cbz	r3, 5044 <L_19097_delayMicroseconds+0x12c>
    500a:	4b3a      	ldr	r3, [pc, #232]	; (50f4 <L_19097_delayMicroseconds+0x1dc>)
    500c:	781b      	ldrb	r3, [r3, #0]
    500e:	2b00      	cmp	r3, #0
    5010:	f47e ad4c 	bne.w	3aac <loop+0x150>
    5014:	4b34      	ldr	r3, [pc, #208]	; (50e8 <L_19097_delayMicroseconds+0x1d0>)
    5016:	781b      	ldrb	r3, [r3, #0]
    5018:	2b00      	cmp	r3, #0
    501a:	f43e ad47 	beq.w	3aac <loop+0x150>
              patch = patch - 10;
    501e:	883b      	ldrh	r3, [r7, #0]
    5020:	3b0a      	subs	r3, #10
    5022:	803b      	strh	r3, [r7, #0]
              doPatchUpdate = 1;
    5024:	4b39      	ldr	r3, [pc, #228]	; (510c <L_19097_delayMicroseconds+0x1f4>)
    5026:	701a      	strb	r2, [r3, #0]
    5028:	f7fe bd40 	b.w	3aac <loop+0x150>
              velocity = 0;
    502c:	4b35      	ldr	r3, [pc, #212]	; (5104 <L_19097_delayMicroseconds+0x1ec>)
    502e:	2200      	movs	r2, #0
              midiSendControlChange(7, 127); //midi vol to 127
    5030:	217f      	movs	r1, #127	; 0x7f
    5032:	2007      	movs	r0, #7
              velocity = 0;
    5034:	801a      	strh	r2, [r3, #0]
              midiSendControlChange(7, 127); //midi vol to 127
    5036:	f003 fedb 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
              midiSendControlChange(11, 127); //midi expression to 0
    503a:	217f      	movs	r1, #127	; 0x7f
    503c:	200b      	movs	r0, #11
    503e:	f003 fed7 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    5042:	e7c5      	b.n	4fd0 <L_19097_delayMicroseconds+0xb8>
            } else if (K1 && !K2 && !K3 && K4) { //f29 decrement and send patch change
    5044:	4b2b      	ldr	r3, [pc, #172]	; (50f4 <L_19097_delayMicroseconds+0x1dc>)
    5046:	781b      	ldrb	r3, [r3, #0]
    5048:	2b00      	cmp	r3, #0
    504a:	f47e ad2f 	bne.w	3aac <loop+0x150>
    504e:	4b26      	ldr	r3, [pc, #152]	; (50e8 <L_19097_delayMicroseconds+0x1d0>)
    5050:	781b      	ldrb	r3, [r3, #0]
    5052:	2b00      	cmp	r3, #0
    5054:	f43e ad2a 	beq.w	3aac <loop+0x150>
              patch--;
    5058:	883b      	ldrh	r3, [r7, #0]
    505a:	3b01      	subs	r3, #1
    505c:	803b      	strh	r3, [r7, #0]
              doPatchUpdate = 1;
    505e:	4b2b      	ldr	r3, [pc, #172]	; (510c <L_19097_delayMicroseconds+0x1f4>)
    5060:	701a      	strb	r2, [r3, #0]
    5062:	f7fe bd23 	b.w	3aac <loop+0x150>
              breathAT = 1;
    5066:	4b25      	ldr	r3, [pc, #148]	; (50fc <L_19097_delayMicroseconds+0x1e4>)
    5068:	2201      	movs	r2, #1
              midiSendControlChange(7, 127); //midi vol to 127
    506a:	217f      	movs	r1, #127	; 0x7f
    506c:	2007      	movs	r0, #7
              breathAT = 1;
    506e:	801a      	strh	r2, [r3, #0]
              midiSendControlChange(7, 127); //midi vol to 127
    5070:	f003 febe 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
              midiSendControlChange(11, 127); //midi expression to 0
    5074:	217f      	movs	r1, #127	; 0x7f
    5076:	200b      	movs	r0, #11
    5078:	f003 feba 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    507c:	e7a1      	b.n	4fc2 <L_19097_delayMicroseconds+0xaa>
              breathCC = 4;
    507e:	4b22      	ldr	r3, [pc, #136]	; (5108 <L_19097_delayMicroseconds+0x1f0>)
    5080:	2204      	movs	r2, #4
              midiSendControlChange(7, 127); //midi vol to 127
    5082:	217f      	movs	r1, #127	; 0x7f
    5084:	2007      	movs	r0, #7
              breathCC = 4;
    5086:	801a      	strh	r2, [r3, #0]
              midiSendControlChange(7, 127); //midi vol to 127
    5088:	f003 feb2 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
              midiSendControlChange(11, 0); //midi expression to 0
    508c:	2100      	movs	r1, #0
    508e:	200b      	movs	r0, #11
    5090:	f003 feae 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    5094:	e78f      	b.n	4fb6 <L_19097_delayMicroseconds+0x9e>
              breathCC = 2;
    5096:	4b1c      	ldr	r3, [pc, #112]	; (5108 <L_19097_delayMicroseconds+0x1f0>)
    5098:	2202      	movs	r2, #2
              midiSendControlChange(7, 127); //midi vol to 127
    509a:	217f      	movs	r1, #127	; 0x7f
    509c:	2007      	movs	r0, #7
              breathCC = 2;
    509e:	801a      	strh	r2, [r3, #0]
              midiSendControlChange(7, 127); //midi vol to 127
    50a0:	f003 fea6 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
              midiSendControlChange(11, 127); //midi expression to 127
    50a4:	217f      	movs	r1, #127	; 0x7f
    50a6:	200b      	movs	r0, #11
    50a8:	f003 fea2 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    50ac:	e77f      	b.n	4fae <L_19097_delayMicroseconds+0x96>
              breathCC = 3;
    50ae:	4a16      	ldr	r2, [pc, #88]	; (5108 <L_19097_delayMicroseconds+0x1f0>)
              midiSendControlChange(7, 0); //midi vol to 0
    50b0:	2100      	movs	r1, #0
    50b2:	2007      	movs	r0, #7
              breathCC = 3;
    50b4:	8013      	strh	r3, [r2, #0]
              midiSendControlChange(7, 0); //midi vol to 0
    50b6:	f003 fe9b 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
              midiSendControlChange(11, 127); //midi expression to 127
    50ba:	217f      	movs	r1, #127	; 0x7f
    50bc:	200b      	movs	r0, #11
    50be:	f003 fe97 	bl	8df0 <midiSendControlChange(unsigned char, unsigned char)>
    50c2:	e770      	b.n	4fa6 <L_19097_delayMicroseconds+0x8e>
            } else if (!K1 && !K2 && !K3 && K4) { //g31 increment and send patch change
    50c4:	4b0b      	ldr	r3, [pc, #44]	; (50f4 <L_19097_delayMicroseconds+0x1dc>)
    50c6:	781b      	ldrb	r3, [r3, #0]
    50c8:	2b00      	cmp	r3, #0
    50ca:	f47f af51 	bne.w	4f70 <L_19097_delayMicroseconds+0x58>
    50ce:	4b06      	ldr	r3, [pc, #24]	; (50e8 <L_19097_delayMicroseconds+0x1d0>)
    50d0:	781b      	ldrb	r3, [r3, #0]
    50d2:	2b00      	cmp	r3, #0
    50d4:	f43e acea 	beq.w	3aac <loop+0x150>
              patch++;
    50d8:	883b      	ldrh	r3, [r7, #0]
    50da:	3301      	adds	r3, #1
    50dc:	803b      	strh	r3, [r7, #0]
              doPatchUpdate = 1;
    50de:	4b0b      	ldr	r3, [pc, #44]	; (510c <L_19097_delayMicroseconds+0x1f4>)
    50e0:	701a      	strb	r2, [r3, #0]
    50e2:	f7fe bce3 	b.w	3aac <loop+0x150>
    50e6:	bf00      	nop
    50e8:	1fff990b 	.word	0x1fff990b
    50ec:	1fff9b98 	.word	0x1fff9b98
    50f0:	1fff9908 	.word	0x1fff9908
    50f4:	1fff990a 	.word	0x1fff990a
    50f8:	1fff9909 	.word	0x1fff9909
    50fc:	1fff9a1c 	.word	0x1fff9a1c
    5100:	1fff990c 	.word	0x1fff990c
    5104:	1fff9bf4 	.word	0x1fff9bf4
    5108:	1fff9a1e 	.word	0x1fff9a1e
    510c:	1fff9a8a 	.word	0x1fff9a8a

00005110 <_GLOBAL__sub_I_breathThrVal>:
}
    5110:	b510      	push	{r4, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    5112:	f009 f93b 	bl	e38c <eeprom_initialize>
Adafruit_MPR121 touchSensorRollers = Adafruit_MPR121();
    5116:	480d      	ldr	r0, [pc, #52]	; (514c <_GLOBAL__sub_I_breathThrVal+0x3c>)
    5118:	f006 fa1a 	bl	b550 <Adafruit_MPR121::Adafruit_MPR121()>
Adafruit_MPR121 touchSensorRH = Adafruit_MPR121();
    511c:	480c      	ldr	r0, [pc, #48]	; (5150 <_GLOBAL__sub_I_breathThrVal+0x40>)
    511e:	f006 fa17 	bl	b550 <Adafruit_MPR121::Adafruit_MPR121()>
Adafruit_MPR121 touchSensorLH = Adafruit_MPR121();
    5122:	480c      	ldr	r0, [pc, #48]	; (5154 <_GLOBAL__sub_I_breathThrVal+0x44>)
    5124:	f006 fa14 	bl	b550 <Adafruit_MPR121::Adafruit_MPR121()>
FilterOnePole breathFilter;
    5128:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    512c:	2101      	movs	r1, #1
    512e:	2300      	movs	r3, #0
    5130:	4809      	ldr	r0, [pc, #36]	; (5158 <_GLOBAL__sub_I_breathThrVal+0x48>)
    5132:	f7fb f991 	bl	458 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
		channel = NULL;
    5136:	4809      	ldr	r0, [pc, #36]	; (515c <_GLOBAL__sub_I_breathThrVal+0x4c>)
IntervalTimer cvTimer;
    5138:	4a09      	ldr	r2, [pc, #36]	; (5160 <_GLOBAL__sub_I_breathThrVal+0x50>)
    513a:	490a      	ldr	r1, [pc, #40]	; (5164 <_GLOBAL__sub_I_breathThrVal+0x54>)
		nvic_priority = 128;
    513c:	2380      	movs	r3, #128	; 0x80
		channel = NULL;
    513e:	2400      	movs	r4, #0
		nvic_priority = 128;
    5140:	7103      	strb	r3, [r0, #4]
		channel = NULL;
    5142:	6004      	str	r4, [r0, #0]
}
    5144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
IntervalTimer cvTimer;
    5148:	f00c b9b4 	b.w	114b4 <__aeabi_atexit>
    514c:	1fff9be8 	.word	0x1fff9be8
    5150:	1fff9be4 	.word	0x1fff9be4
    5154:	1fff9be0 	.word	0x1fff9be0
    5158:	1fff9a28 	.word	0x1fff9a28
    515c:	1fff9a78 	.word	0x1fff9a78
    5160:	1fff8d34 	.word	0x1fff8d34
    5164:	000005a9 	.word	0x000005a9

00005168 <leverSave(AdjustMenuEntry const&)>:
  }, 
  ctouchThrSave
};


static void leverSave(const AdjustMenuEntry& e) {
    5168:	b510      	push	{r4, lr}
    516a:	4604      	mov	r4, r0
  writeSetting(LEVER_THR_ADDR, *e.entries[0].value);
    516c:	20a4      	movs	r0, #164	; 0xa4
    516e:	6863      	ldr	r3, [r4, #4]
    5170:	8819      	ldrh	r1, [r3, #0]
    5172:	f004 f8b1 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(LEVER_MAX_ADDR, *e.entries[1].value);
    5176:	68e3      	ldr	r3, [r4, #12]
    5178:	20a6      	movs	r0, #166	; 0xa6
}
    517a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeSetting(LEVER_MAX_ADDR, *e.entries[1].value);
    517e:	8819      	ldrh	r1, [r3, #0]
    5180:	f004 b8aa 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>

00005184 <ctouchThrSave(AdjustMenuEntry const&)>:
static void ctouchThrSave(const AdjustMenuEntry& e) {
    5184:	4603      	mov	r3, r0
  writeSetting(CTOUCH_THR_ADDR, *e.entries[0].value);
    5186:	202a      	movs	r0, #42	; 0x2a
    5188:	685b      	ldr	r3, [r3, #4]
    518a:	8819      	ldrh	r1, [r3, #0]
    518c:	f004 b8a4 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>

00005190 <extracSave(AdjustMenuEntry const&)>:
static void extracSave(const AdjustMenuEntry& e) {
    5190:	b510      	push	{r4, lr}
    5192:	4604      	mov	r4, r0
  writeSetting(EXTRAC_THR_ADDR, *e.entries[0].value);
    5194:	2022      	movs	r0, #34	; 0x22
    5196:	6863      	ldr	r3, [r4, #4]
    5198:	8819      	ldrh	r1, [r3, #0]
    519a:	f004 f89d 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(EXTRAC_MAX_ADDR, *e.entries[1].value);
    519e:	68e3      	ldr	r3, [r4, #12]
    51a0:	2024      	movs	r0, #36	; 0x24
}
    51a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeSetting(EXTRAC_MAX_ADDR, *e.entries[1].value);
    51a6:	8819      	ldrh	r1, [r3, #0]
    51a8:	f004 b896 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>

000051ac <pbSave(AdjustMenuEntry const&)>:
static void pbSave(const AdjustMenuEntry& e) {
    51ac:	b510      	push	{r4, lr}
    51ae:	4604      	mov	r4, r0
  writeSetting(PITCHB_THR_ADDR, *e.entries[0].value);
    51b0:	200a      	movs	r0, #10
    51b2:	6863      	ldr	r3, [r4, #4]
    51b4:	8819      	ldrh	r1, [r3, #0]
    51b6:	f004 f88f 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(PITCHB_MAX_ADDR, *e.entries[1].value);
    51ba:	68e3      	ldr	r3, [r4, #12]
    51bc:	200c      	movs	r0, #12
}
    51be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeSetting(PITCHB_MAX_ADDR, *e.entries[1].value);
    51c2:	8819      	ldrh	r1, [r3, #0]
    51c4:	f004 b888 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>

000051c8 <portamentoSave(AdjustMenuEntry const&)>:
static void portamentoSave(const AdjustMenuEntry& e) {
    51c8:	b510      	push	{r4, lr}
    51ca:	4604      	mov	r4, r0
  writeSetting(PORTAM_THR_ADDR, *e.entries[0].value);
    51cc:	2006      	movs	r0, #6
    51ce:	6863      	ldr	r3, [r4, #4]
    51d0:	8819      	ldrh	r1, [r3, #0]
    51d2:	f004 f881 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  writeSetting(PORTAM_MAX_ADDR, *e.entries[1].value);
    51d6:	68e3      	ldr	r3, [r4, #12]
    51d8:	2008      	movs	r0, #8
}
    51da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeSetting(PORTAM_MAX_ADDR, *e.entries[1].value);
    51de:	8819      	ldrh	r1, [r3, #0]
    51e0:	f004 b87a 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>

000051e4 <breathSave(AdjustMenuEntry const&)>:
static void breathSave(const AdjustMenuEntry& e) {
    51e4:	b510      	push	{r4, lr}
    51e6:	4604      	mov	r4, r0
    writeSetting(BREATH_THR_ADDR, *e.entries[0].value);
    51e8:	2002      	movs	r0, #2
    51ea:	6863      	ldr	r3, [r4, #4]
    51ec:	8819      	ldrh	r1, [r3, #0]
    51ee:	f004 f873 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    writeSetting(BREATH_MAX_ADDR, *e.entries[1].value);
    51f2:	68e3      	ldr	r3, [r4, #12]
    51f4:	2004      	movs	r0, #4
}
    51f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeSetting(BREATH_MAX_ADDR, *e.entries[1].value);
    51fa:	8819      	ldrh	r1, [r3, #0]
    51fc:	f004 b86c 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>

00005200 <drawAdjCursor(unsigned char)>:
}


//***********************************************************

static void drawAdjCursor(byte color) {
    5200:	b570      	push	{r4, r5, r6, lr}
  display.drawTriangle(16,4,20,4,18,1,color);
    5202:	4d0e      	ldr	r5, [pc, #56]	; (523c <drawAdjCursor(unsigned char)+0x3c>)
static void drawAdjCursor(byte color) {
    5204:	b084      	sub	sp, #16
  display.drawTriangle(16,4,20,4,18,1,color);
    5206:	2612      	movs	r6, #18
    5208:	2204      	movs	r2, #4
    520a:	2301      	movs	r3, #1
    520c:	e9cd 2600 	strd	r2, r6, [sp]
    5210:	4604      	mov	r4, r0
    5212:	9003      	str	r0, [sp, #12]
    5214:	9302      	str	r3, [sp, #8]
    5216:	4628      	mov	r0, r5
    5218:	2314      	movs	r3, #20
    521a:	2110      	movs	r1, #16
    521c:	f008 f8da 	bl	d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>
  display.drawTriangle(16,6,20,6,18,9,color);
    5220:	2206      	movs	r2, #6
    5222:	2309      	movs	r3, #9
    5224:	9302      	str	r3, [sp, #8]
    5226:	e9cd 2600 	strd	r2, r6, [sp]
    522a:	9403      	str	r4, [sp, #12]
    522c:	2314      	movs	r3, #20
    522e:	2110      	movs	r1, #16
    5230:	4628      	mov	r0, r5
    5232:	f008 f8cf 	bl	d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>
}
    5236:	b004      	add	sp, #16
    5238:	bd70      	pop	{r4, r5, r6, pc}
    523a:	bf00      	nop
    523c:	1fff9c74 	.word	0x1fff9c74

00005240 <autoCalSelected()>:
void autoCalSelected() {
    5240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(adjustOption == 3) {
    5244:	4da1      	ldr	r5, [pc, #644]	; (54cc <autoCalSelected()+0x28c>)
    5246:	f9b5 3000 	ldrsh.w	r3, [r5]
    524a:	2b03      	cmp	r3, #3
    524c:	d00c      	beq.n	5268 <autoCalSelected()+0x28>
  if(adjustOption == 0) {
    524e:	b383      	cbz	r3, 52b2 <autoCalSelected()+0x72>
  if(adjustOption == 2) {
    5250:	2b02      	cmp	r3, #2
    5252:	d04e      	beq.n	52f2 <autoCalSelected()+0xb2>
  if(adjustOption == 5) {
    5254:	2b05      	cmp	r3, #5
    5256:	d079      	beq.n	534c <autoCalSelected()+0x10c>
  if(adjustOption == 1) {
    5258:	2b01      	cmp	r3, #1
    525a:	f000 80a4 	beq.w	53a6 <autoCalSelected()+0x166>
  if(adjustOption == 4) {
    525e:	2b04      	cmp	r3, #4
    5260:	f000 80c6 	beq.w	53f0 <autoCalSelected()+0x1b0>
}
    5264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    calRead = touchRead(extraPin);
    5268:	2010      	movs	r0, #16
    526a:	f00a fe4d 	bl	ff08 <touchRead>
    extracThrVal = constrain(calRead+200, extracLoLimit, extracHiLimit);
    526e:	30c8      	adds	r0, #200	; 0xc8
    5270:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
    5274:	bfa8      	it	ge
    5276:	f44f 607a 	movge.w	r0, #4000	; 0xfa0
    527a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    527e:	bfb8      	it	lt
    5280:	f44f 70fa 	movlt.w	r0, #500	; 0x1f4
    extracMaxVal = constrain(extracThrVal+600, extracLoLimit, extracHiLimit);
    5284:	f500 7316 	add.w	r3, r0, #600	; 0x258
    5288:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    extracThrVal = constrain(calRead+200, extracLoLimit, extracHiLimit);
    528c:	4a90      	ldr	r2, [pc, #576]	; (54d0 <autoCalSelected()+0x290>)
    extracMaxVal = constrain(extracThrVal+600, extracLoLimit, extracHiLimit);
    528e:	4c91      	ldr	r4, [pc, #580]	; (54d4 <autoCalSelected()+0x294>)
    extracThrVal = constrain(calRead+200, extracLoLimit, extracHiLimit);
    5290:	b281      	uxth	r1, r0
    extracMaxVal = constrain(extracThrVal+600, extracLoLimit, extracHiLimit);
    5292:	bfa8      	it	ge
    5294:	f44f 637a 	movge.w	r3, #4000	; 0xfa0
    writeSetting(EXTRAC_THR_ADDR, extracThrVal);
    5298:	2022      	movs	r0, #34	; 0x22
    extracThrVal = constrain(calRead+200, extracLoLimit, extracHiLimit);
    529a:	8011      	strh	r1, [r2, #0]
    extracMaxVal = constrain(extracThrVal+600, extracLoLimit, extracHiLimit);
    529c:	8023      	strh	r3, [r4, #0]
    writeSetting(EXTRAC_THR_ADDR, extracThrVal);
    529e:	f004 f81b 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    writeSetting(EXTRAC_MAX_ADDR, extracMaxVal);
    52a2:	8821      	ldrh	r1, [r4, #0]
    52a4:	2024      	movs	r0, #36	; 0x24
    52a6:	f004 f817 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  if(adjustOption == 0) {
    52aa:	f9b5 3000 	ldrsh.w	r3, [r5]
    52ae:	2b00      	cmp	r3, #0
    52b0:	d1ce      	bne.n	5250 <autoCalSelected()+0x10>
    calRead = analogRead(breathSensorPin);
    52b2:	200e      	movs	r0, #14
    52b4:	f008 ffda 	bl	e26c <analogRead>
    breathThrVal = constrain(calRead+200, breathLoLimit, breathHiLimit);
    52b8:	f640 73ff 	movw	r3, #4095	; 0xfff
    52bc:	30c8      	adds	r0, #200	; 0xc8
    52be:	4298      	cmp	r0, r3
    52c0:	bfa8      	it	ge
    52c2:	4618      	movge	r0, r3
    52c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    52c8:	b281      	uxth	r1, r0
    breathMaxVal = constrain(breathThrVal+1500, breathLoLimit, breathHiLimit);
    52ca:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
    52ce:	4298      	cmp	r0, r3
    52d0:	4c81      	ldr	r4, [pc, #516]	; (54d8 <autoCalSelected()+0x298>)
    52d2:	bfa8      	it	ge
    52d4:	4618      	movge	r0, r3
    breathThrVal = constrain(calRead+200, breathLoLimit, breathHiLimit);
    52d6:	4b81      	ldr	r3, [pc, #516]	; (54dc <autoCalSelected()+0x29c>)
    breathMaxVal = constrain(breathThrVal+1500, breathLoLimit, breathHiLimit);
    52d8:	8020      	strh	r0, [r4, #0]
    writeSetting(BREATH_THR_ADDR, breathThrVal);
    52da:	2002      	movs	r0, #2
    breathThrVal = constrain(calRead+200, breathLoLimit, breathHiLimit);
    52dc:	8019      	strh	r1, [r3, #0]
    writeSetting(BREATH_THR_ADDR, breathThrVal);
    52de:	f003 fffb 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    writeSetting(BREATH_MAX_ADDR, breathMaxVal);
    52e2:	8821      	ldrh	r1, [r4, #0]
    52e4:	2004      	movs	r0, #4
    52e6:	f003 fff7 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  if(adjustOption == 2) {
    52ea:	f9b5 3000 	ldrsh.w	r3, [r5]
    52ee:	2b02      	cmp	r3, #2
    52f0:	d1b0      	bne.n	5254 <autoCalSelected()+0x14>
    calRead = touchRead(pbUpPin);
    52f2:	2001      	movs	r0, #1
    52f4:	f00a fe08 	bl	ff08 <touchRead>
    52f8:	4604      	mov	r4, r0
    calReadNext = touchRead(pbDnPin);
    52fa:	2000      	movs	r0, #0
    52fc:	f00a fe04 	bl	ff08 <touchRead>
    pitchbThrVal = constrain(calRead+200, pitchbLoLimit, pitchbHiLimit);
    5300:	4284      	cmp	r4, r0
    5302:	bfb8      	it	lt
    5304:	4604      	movlt	r4, r0
    5306:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    530a:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
    530e:	bfa8      	it	ge
    5310:	f44f 607a 	movge.w	r0, #4000	; 0xfa0
    5314:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    5318:	bfb8      	it	lt
    531a:	f44f 70fa 	movlt.w	r0, #500	; 0x1f4
    pitchbMaxVal = constrain(pitchbThrVal+800, pitchbLoLimit, pitchbHiLimit);
    531e:	f500 7348 	add.w	r3, r0, #800	; 0x320
    5322:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    pitchbThrVal = constrain(calRead+200, pitchbLoLimit, pitchbHiLimit);
    5326:	4a6e      	ldr	r2, [pc, #440]	; (54e0 <autoCalSelected()+0x2a0>)
    pitchbMaxVal = constrain(pitchbThrVal+800, pitchbLoLimit, pitchbHiLimit);
    5328:	4c6e      	ldr	r4, [pc, #440]	; (54e4 <autoCalSelected()+0x2a4>)
    532a:	bfa8      	it	ge
    532c:	f44f 637a 	movge.w	r3, #4000	; 0xfa0
    pitchbThrVal = constrain(calRead+200, pitchbLoLimit, pitchbHiLimit);
    5330:	b281      	uxth	r1, r0
    writeSetting(PITCHB_THR_ADDR, pitchbThrVal);
    5332:	200a      	movs	r0, #10
    pitchbThrVal = constrain(calRead+200, pitchbLoLimit, pitchbHiLimit);
    5334:	8011      	strh	r1, [r2, #0]
    pitchbMaxVal = constrain(pitchbThrVal+800, pitchbLoLimit, pitchbHiLimit);
    5336:	8023      	strh	r3, [r4, #0]
    writeSetting(PITCHB_THR_ADDR, pitchbThrVal);
    5338:	f003 ffce 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    writeSetting(PITCHB_MAX_ADDR, pitchbMaxVal);
    533c:	8821      	ldrh	r1, [r4, #0]
    533e:	200c      	movs	r0, #12
    5340:	f003 ffca 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  if(adjustOption == 5) {
    5344:	f9b5 3000 	ldrsh.w	r3, [r5]
    5348:	2b05      	cmp	r3, #5
    534a:	d185      	bne.n	5258 <autoCalSelected()+0x18>
    calRead = 3000-touchRead(vibratoPin);
    534c:	200f      	movs	r0, #15
    534e:	f00a fddb 	bl	ff08 <touchRead>
    leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    5352:	f5c0 613f 	rsb	r1, r0, #3056	; 0xbf0
    5356:	3104      	adds	r1, #4
    5358:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
    535c:	bfa8      	it	ge
    535e:	f44f 61fa 	movge.w	r1, #2000	; 0x7d0
    leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    5362:	f5c0 6343 	rsb	r3, r0, #3120	; 0xc30
    leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    5366:	f5b1 6faf 	cmp.w	r1, #1400	; 0x578
    536a:	bfb8      	it	lt
    536c:	f44f 61af 	movlt.w	r1, #1400	; 0x578
    leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    5370:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    5374:	bfa8      	it	ge
    5376:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
    537a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
    leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    537e:	4a5a      	ldr	r2, [pc, #360]	; (54e8 <autoCalSelected()+0x2a8>)
    leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    5380:	4c5a      	ldr	r4, [pc, #360]	; (54ec <autoCalSelected()+0x2ac>)
    5382:	bfb8      	it	lt
    5384:	f44f 63af 	movlt.w	r3, #1400	; 0x578
    leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    5388:	b289      	uxth	r1, r1
    writeSetting(LEVER_THR_ADDR, leverThrVal);
    538a:	20a4      	movs	r0, #164	; 0xa4
    leverThrVal = constrain(calRead+60, leverLoLimit, leverHiLimit);
    538c:	8011      	strh	r1, [r2, #0]
    leverMaxVal = constrain(calRead+120, leverLoLimit, leverHiLimit);
    538e:	8023      	strh	r3, [r4, #0]
    writeSetting(LEVER_THR_ADDR, leverThrVal);
    5390:	f003 ffa2 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    writeSetting(LEVER_MAX_ADDR, leverMaxVal);
    5394:	8821      	ldrh	r1, [r4, #0]
    5396:	20a6      	movs	r0, #166	; 0xa6
    5398:	f003 ff9e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  if(adjustOption == 1) {
    539c:	f9b5 3000 	ldrsh.w	r3, [r5]
    53a0:	2b01      	cmp	r3, #1
    53a2:	f47f af5c 	bne.w	525e <autoCalSelected()+0x1e>
    calRead = analogRead(bitePressurePin);
    53a6:	2015      	movs	r0, #21
    53a8:	f008 ff60 	bl	e26c <analogRead>
    portamThrVal = constrain(calRead+300, portamLoLimit, portamHiLimit);
    53ac:	f241 235c 	movw	r3, #4700	; 0x125c
    53b0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    53b4:	4298      	cmp	r0, r3
    53b6:	bfa8      	it	ge
    53b8:	4618      	movge	r0, r3
    53ba:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
    53be:	bfb8      	it	lt
    53c0:	f44f 702f 	movlt.w	r0, #700	; 0x2bc
    53c4:	b281      	uxth	r1, r0
    portamMaxVal = constrain(portamThrVal+600, portamLoLimit, portamHiLimit);
    53c6:	f500 7016 	add.w	r0, r0, #600	; 0x258
    53ca:	4298      	cmp	r0, r3
    53cc:	4c48      	ldr	r4, [pc, #288]	; (54f0 <autoCalSelected()+0x2b0>)
    53ce:	bfa8      	it	ge
    53d0:	4618      	movge	r0, r3
    portamThrVal = constrain(calRead+300, portamLoLimit, portamHiLimit);
    53d2:	4b48      	ldr	r3, [pc, #288]	; (54f4 <autoCalSelected()+0x2b4>)
    portamMaxVal = constrain(portamThrVal+600, portamLoLimit, portamHiLimit);
    53d4:	8020      	strh	r0, [r4, #0]
    writeSetting(PORTAM_THR_ADDR, portamThrVal);
    53d6:	2006      	movs	r0, #6
    portamThrVal = constrain(calRead+300, portamLoLimit, portamHiLimit);
    53d8:	8019      	strh	r1, [r3, #0]
    writeSetting(PORTAM_THR_ADDR, portamThrVal);
    53da:	f003 ff7d 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    writeSetting(PORTAM_MAX_ADDR, portamMaxVal);
    53de:	8821      	ldrh	r1, [r4, #0]
    53e0:	2008      	movs	r0, #8
    53e2:	f003 ff79 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  if(adjustOption == 4) {
    53e6:	f9b5 3000 	ldrsh.w	r3, [r5]
    53ea:	2b04      	cmp	r3, #4
    53ec:	f47f af3a 	bne.w	5264 <autoCalSelected()+0x24>
    53f0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 54f8 <autoCalSelected()+0x2b8>
      calReadNext = touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300;
    53f4:	4e41      	ldr	r6, [pc, #260]	; (54fc <autoCalSelected()+0x2bc>)
    53f6:	4d42      	ldr	r5, [pc, #264]	; (5500 <autoCalSelected()+0x2c0>)
  if(adjustOption == 4) {
    53f8:	2700      	movs	r7, #0
    calRead = ctouchHiLimit;  
    53fa:	f44f 74af 	mov.w	r4, #350	; 0x15e
      calReadNext = touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300;
    53fe:	b2f9      	uxtb	r1, r7
    5400:	4630      	mov	r0, r6
    5402:	f006 f8a9 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    5406:	f858 3b04 	ldr.w	r3, [r8], #4
    540a:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    540e:	fb03 f000 	mul.w	r0, r3, r0
    5412:	fb85 2300 	smull	r2, r3, r5, r0
    5416:	17c0      	asrs	r0, r0, #31
    5418:	ebc0 1063 	rsb	r0, r0, r3, asr #5
    541c:	4284      	cmp	r4, r0
    for (byte i = 0; i < 6; i++) {
    541e:	f107 0701 	add.w	r7, r7, #1
    5422:	bfa8      	it	ge
    5424:	4604      	movge	r4, r0
    5426:	2f06      	cmp	r7, #6
    5428:	d1e9      	bne.n	53fe <autoCalSelected()+0x1be>
    542a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5504 <autoCalSelected()+0x2c4>
      calReadNext = touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300;
    542e:	4e36      	ldr	r6, [pc, #216]	; (5508 <autoCalSelected()+0x2c8>)
    5430:	4d33      	ldr	r5, [pc, #204]	; (5500 <autoCalSelected()+0x2c0>)
    for (byte i = 0; i < 6; i++) {
    5432:	2700      	movs	r7, #0
      calReadNext = touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300;
    5434:	b2f9      	uxtb	r1, r7
    5436:	4630      	mov	r0, r6
    5438:	f006 f88e 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    543c:	f858 3b04 	ldr.w	r3, [r8], #4
    5440:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    5444:	fb03 f000 	mul.w	r0, r3, r0
    5448:	fb85 2300 	smull	r2, r3, r5, r0
    544c:	17c0      	asrs	r0, r0, #31
    544e:	ebc0 1063 	rsb	r0, r0, r3, asr #5
    5452:	4284      	cmp	r4, r0
    for (byte i = 0; i < 12; i++) {
    5454:	f107 0701 	add.w	r7, r7, #1
    5458:	bfa8      	it	ge
    545a:	4604      	movge	r4, r0
    545c:	2f0c      	cmp	r7, #12
    545e:	d1e9      	bne.n	5434 <autoCalSelected()+0x1f4>
    5460:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 550c <autoCalSelected()+0x2cc>
      calReadNext = touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300;
    5464:	4e2a      	ldr	r6, [pc, #168]	; (5510 <autoCalSelected()+0x2d0>)
    5466:	4d26      	ldr	r5, [pc, #152]	; (5500 <autoCalSelected()+0x2c0>)
    for (byte i = 0; i < 12; i++) {
    5468:	2700      	movs	r7, #0
      calReadNext = touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300;
    546a:	b2f9      	uxtb	r1, r7
    546c:	4630      	mov	r0, r6
    546e:	f006 f873 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    5472:	f858 3b04 	ldr.w	r3, [r8], #4
    5476:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    547a:	fb03 f000 	mul.w	r0, r3, r0
    547e:	fb85 2300 	smull	r2, r3, r5, r0
    5482:	17c0      	asrs	r0, r0, #31
    5484:	ebc0 1063 	rsb	r0, r0, r3, asr #5
    5488:	4284      	cmp	r4, r0
    for (byte i = 0; i < 12; i++) {
    548a:	f107 0701 	add.w	r7, r7, #1
    548e:	bfa8      	it	ge
    5490:	4604      	movge	r4, r0
    5492:	2f0c      	cmp	r7, #12
    5494:	d1e9      	bne.n	546a <autoCalSelected()+0x22a>
    ctouchThrVal = constrain(calRead-20, ctouchLoLimit, ctouchHiLimit);
    5496:	3c14      	subs	r4, #20
    5498:	2c32      	cmp	r4, #50	; 0x32
    549a:	bfb8      	it	lt
    549c:	2432      	movlt	r4, #50	; 0x32
	long num = (x - in_min) * out_range;
    549e:	f240 723a 	movw	r2, #1850	; 0x73a
    54a2:	f5a4 73af 	sub.w	r3, r4, #350	; 0x15e
    54a6:	fb02 f303 	mul.w	r3, r2, r3
		num += in_range / 2;
    54aa:	3b96      	subs	r3, #150	; 0x96
	long result = num / in_range + out_min;
    54ac:	fb85 2503 	smull	r2, r5, r5, r3
    54b0:	4818      	ldr	r0, [pc, #96]	; (5514 <autoCalSelected()+0x2d4>)
    touch_Thr = map(ctouchThrVal,ctouchHiLimit,ctouchLoLimit,ttouchLoLimit,ttouchHiLimit);
    54b2:	4a19      	ldr	r2, [pc, #100]	; (5518 <autoCalSelected()+0x2d8>)
    54b4:	17db      	asrs	r3, r3, #31
    ctouchThrVal = constrain(calRead-20, ctouchLoLimit, ctouchHiLimit);
    54b6:	b2a1      	uxth	r1, r4
    54b8:	eba3 1365 	sub.w	r3, r3, r5, asr #5
    54bc:	3332      	adds	r3, #50	; 0x32
    54be:	8001      	strh	r1, [r0, #0]
}
    54c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeSetting(CTOUCH_THR_ADDR, ctouchThrVal);
    54c4:	202a      	movs	r0, #42	; 0x2a
    touch_Thr = map(ctouchThrVal,ctouchHiLimit,ctouchLoLimit,ttouchLoLimit,ttouchHiLimit);
    54c6:	6013      	str	r3, [r2, #0]
    writeSetting(CTOUCH_THR_ADDR, ctouchThrVal);
    54c8:	f003 bf06 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    54cc:	1fff9c20 	.word	0x1fff9c20
    54d0:	1fff9a9c 	.word	0x1fff9a9c
    54d4:	1fff9a9a 	.word	0x1fff9a9a
    54d8:	1fff9a4c 	.word	0x1fff9a4c
    54dc:	1fff9a4e 	.word	0x1fff9a4e
    54e0:	1fff9b78 	.word	0x1fff9b78
    54e4:	1fff9b76 	.word	0x1fff9b76
    54e8:	1fff9b28 	.word	0x1fff9b28
    54ec:	1fff9b1c 	.word	0x1fff9b1c
    54f0:	1fff9b86 	.word	0x1fff9b86
    54f4:	1fff9b88 	.word	0x1fff9b88
    54f8:	1fff8d9c 	.word	0x1fff8d9c
    54fc:	1fff9be8 	.word	0x1fff9be8
    5500:	1b4e81b5 	.word	0x1b4e81b5
    5504:	1fff8d6c 	.word	0x1fff8d6c
    5508:	1fff9be4 	.word	0x1fff9be4
    550c:	1fff8d3c 	.word	0x1fff8d3c
    5510:	1fff9be0 	.word	0x1fff9be0
    5514:	1fff9a66 	.word	0x1fff9a66
    5518:	1fff8e70 	.word	0x1fff8e70

0000551c <drawAdjustFrame(int)>:

static void drawAdjustFrame(int line) {
    551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  display.drawLine(25,line,120,line,WHITE); // Top line
    5520:	4d21      	ldr	r5, [pc, #132]	; (55a8 <drawAdjustFrame(int)+0x8c>)
static void drawAdjustFrame(int line) {
    5522:	b082      	sub	sp, #8
  display.drawLine(25,line,120,line,WHITE); // Top line
    5524:	2601      	movs	r6, #1
    5526:	b202      	sxth	r2, r0
  display.drawLine(25,line+12,120,line+12,WHITE); // Bottom line
    5528:	b284      	uxth	r4, r0
  display.drawLine(25,line,120,line,WHITE); // Top line
    552a:	e9cd 2600 	strd	r2, r6, [sp]
    552e:	4628      	mov	r0, r5
    5530:	2378      	movs	r3, #120	; 0x78
    5532:	2119      	movs	r1, #25
    5534:	f007 fdb6 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.drawLine(25,line+12,120,line+12,WHITE); // Bottom line
    5538:	f104 020c 	add.w	r2, r4, #12
    553c:	b212      	sxth	r2, r2
    553e:	e9cd 2600 	strd	r2, r6, [sp]
    5542:	4628      	mov	r0, r5

  display.drawLine(25,line+1,25,line+2,WHITE);
    5544:	eb04 0806 	add.w	r8, r4, r6
  display.drawLine(25,line+12,120,line+12,WHITE); // Bottom line
    5548:	2378      	movs	r3, #120	; 0x78
    554a:	2119      	movs	r1, #25
  display.drawLine(25,line+1,25,line+2,WHITE);
    554c:	1ca7      	adds	r7, r4, #2
  display.drawLine(25,line+12,120,line+12,WHITE); // Bottom line
    554e:	f007 fda9 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.drawLine(25,line+1,25,line+2,WHITE);
    5552:	fa0f f888 	sxth.w	r8, r8
    5556:	b23f      	sxth	r7, r7
    5558:	2319      	movs	r3, #25
    555a:	9700      	str	r7, [sp, #0]
    555c:	4619      	mov	r1, r3
    555e:	4642      	mov	r2, r8
    5560:	4628      	mov	r0, r5
    5562:	9601      	str	r6, [sp, #4]
    5564:	f007 fd9e 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.drawLine(120,line+1,120,line+2,WHITE);
    5568:	2378      	movs	r3, #120	; 0x78
    556a:	4642      	mov	r2, r8
    556c:	9700      	str	r7, [sp, #0]
    556e:	4619      	mov	r1, r3
    5570:	4628      	mov	r0, r5
    5572:	9601      	str	r6, [sp, #4]

  display.drawLine(120,line+10,120,line+11,WHITE);
    5574:	f104 070a 	add.w	r7, r4, #10
    5578:	340b      	adds	r4, #11
  display.drawLine(120,line+1,120,line+2,WHITE);
    557a:	f007 fd93 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.drawLine(120,line+10,120,line+11,WHITE);
    557e:	b23f      	sxth	r7, r7
    5580:	b224      	sxth	r4, r4
    5582:	2378      	movs	r3, #120	; 0x78
    5584:	4619      	mov	r1, r3
    5586:	463a      	mov	r2, r7
    5588:	4628      	mov	r0, r5
    558a:	e9cd 4600 	strd	r4, r6, [sp]
    558e:	f007 fd89 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.drawLine(25,line+10,25,line+11,WHITE);
    5592:	2319      	movs	r3, #25
    5594:	e9cd 4600 	strd	r4, r6, [sp]
    5598:	463a      	mov	r2, r7
    559a:	4619      	mov	r1, r3
    559c:	4628      	mov	r0, r5
    559e:	f007 fd81 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
}
    55a2:	b002      	add	sp, #8
    55a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55a8:	1fff9c74 	.word	0x1fff9c74

000055ac <updateSensorPixel(int, int)>:
  }
}

//***********************************************************

static bool updateSensorPixel(int pos, int pos2) {
    55ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool update = pos != sensorPixelPos1 || pos2 != sensorPixelPos2;
    55ae:	4e16      	ldr	r6, [pc, #88]	; (5608 <updateSensorPixel(int, int)+0x5c>)
    55b0:	4f16      	ldr	r7, [pc, #88]	; (560c <updateSensorPixel(int, int)+0x60>)
    55b2:	f9b6 3000 	ldrsh.w	r3, [r6]
    55b6:	4283      	cmp	r3, r0
static bool updateSensorPixel(int pos, int pos2) {
    55b8:	b083      	sub	sp, #12
    55ba:	460d      	mov	r5, r1
  bool update = pos != sensorPixelPos1 || pos2 != sensorPixelPos2;
    55bc:	d103      	bne.n	55c6 <updateSensorPixel(int, int)+0x1a>
    55be:	f9b7 3000 	ldrsh.w	r3, [r7]
    55c2:	428b      	cmp	r3, r1
    55c4:	d01d      	beq.n	5602 <updateSensorPixel(int, int)+0x56>
  if(update) {
    display.drawFastHLine(28, 38, 119-28, BLACK); // Clear old line
    55c6:	2300      	movs	r3, #0
    55c8:	9300      	str	r3, [sp, #0]
    display.drawPixel(pos, 38, WHITE);
    55ca:	b204      	sxth	r4, r0
    display.drawFastHLine(28, 38, 119-28, BLACK); // Clear old line
    55cc:	235b      	movs	r3, #91	; 0x5b
    55ce:	4810      	ldr	r0, [pc, #64]	; (5610 <updateSensorPixel(int, int)+0x64>)
    55d0:	2226      	movs	r2, #38	; 0x26
    55d2:	211c      	movs	r1, #28
    55d4:	f006 ff64 	bl	c4a0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)>
    display.drawPixel(pos, 38, WHITE);
    55d8:	2301      	movs	r3, #1
    55da:	480d      	ldr	r0, [pc, #52]	; (5610 <updateSensorPixel(int, int)+0x64>)
    55dc:	2226      	movs	r2, #38	; 0x26
    55de:	4621      	mov	r1, r4
    55e0:	f006 fdf8 	bl	c1d4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>
    if( pos2 >= 0) display.drawPixel(pos2, 38, WHITE);
    55e4:	1c6b      	adds	r3, r5, #1
    55e6:	d104      	bne.n	55f2 <updateSensorPixel(int, int)+0x46>

    sensorPixelPos1 = pos;
    55e8:	2001      	movs	r0, #1
    55ea:	8034      	strh	r4, [r6, #0]
    sensorPixelPos2 = pos2;
    55ec:	803d      	strh	r5, [r7, #0]
  }
  return update;
}
    55ee:	b003      	add	sp, #12
    55f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( pos2 >= 0) display.drawPixel(pos2, 38, WHITE);
    55f2:	b22d      	sxth	r5, r5
    55f4:	4806      	ldr	r0, [pc, #24]	; (5610 <updateSensorPixel(int, int)+0x64>)
    55f6:	2301      	movs	r3, #1
    55f8:	2226      	movs	r2, #38	; 0x26
    55fa:	4629      	mov	r1, r5
    55fc:	f006 fdea 	bl	c1d4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>
    5600:	e7f2      	b.n	55e8 <updateSensorPixel(int, int)+0x3c>
  bool update = pos != sensorPixelPos1 || pos2 != sensorPixelPos2;
    5602:	2000      	movs	r0, #0
}
    5604:	b003      	add	sp, #12
    5606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5608:	1fff8e80 	.word	0x1fff8e80
    560c:	1fff8e82 	.word	0x1fff8e82
    5610:	1fff9c74 	.word	0x1fff9c74

00005614 <plotSensorPixels()>:

void plotSensorPixels(){
    5614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int redraw = 0;

  if(forcePix)
    5618:	4dc6      	ldr	r5, [pc, #792]	; (5934 <plotSensorPixels()+0x320>)
    561a:	782b      	ldrb	r3, [r5, #0]
void plotSensorPixels(){
    561c:	b083      	sub	sp, #12
  if(forcePix)
    561e:	b11b      	cbz	r3, 5628 <plotSensorPixels()+0x14>
    sensorPixelPos1 = -1;
    5620:	4bc5      	ldr	r3, [pc, #788]	; (5938 <plotSensorPixels()+0x324>)
    5622:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5626:	801a      	strh	r2, [r3, #0]

  // This is hacky. It depends on the order of items in the adjust menu list.
  if(adjustOption == 0) {
    5628:	4bc4      	ldr	r3, [pc, #784]	; (593c <plotSensorPixels()+0x328>)
    562a:	f9b3 3000 	ldrsh.w	r3, [r3]
    562e:	b13b      	cbz	r3, 5640 <plotSensorPixels()+0x2c>
    int pos = map(constrain(pressureSensor, breathLoLimit, breathHiLimit), breathLoLimit, breathHiLimit, 28, 118);
    redraw = updateSensorPixel(pos, -1);
  }
  else if(adjustOption == 1) {
    5630:	3b01      	subs	r3, #1
    5632:	2b04      	cmp	r3, #4
    5634:	d81a      	bhi.n	566c <plotSensorPixels()+0x58>
    5636:	e8df f003 	tbb	[pc, r3]
    563a:	7249      	.short	0x7249
    563c:	c6a6      	.short	0xc6a6
    563e:	26          	.byte	0x26
    563f:	00          	.byte	0x00
    int pos = map(constrain(pressureSensor, breathLoLimit, breathHiLimit), breathLoLimit, breathHiLimit, 28, 118);
    5640:	4bbf      	ldr	r3, [pc, #764]	; (5940 <plotSensorPixels()+0x32c>)
    5642:	48c0      	ldr	r0, [pc, #768]	; (5944 <plotSensorPixels()+0x330>)
	long num = (x - in_min) * out_range;
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	225a      	movs	r2, #90	; 0x5a
    5648:	f383 030c 	usat	r3, #12, r3
    564c:	fb02 f303 	mul.w	r3, r2, r3
		num += in_range / 2;
    5650:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
	long result = num / in_range + out_min;
    5654:	fba0 2003 	umull	r2, r0, r0, r3
    5658:	1a1b      	subs	r3, r3, r0
    565a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
    565e:	0ac0      	lsrs	r0, r0, #11
    redraw = updateSensorPixel(pos, -1);
    5660:	f04f 31ff 	mov.w	r1, #4294967295
    5664:	301c      	adds	r0, #28
    5666:	f7ff ffa1 	bl	55ac <updateSensorPixel(int, int)>
 #endif
    redraw = updateSensorPixel(pos, -1);
  }

  
  if (redraw){
    566a:	b920      	cbnz	r0, 5676 <plotSensorPixels()+0x62>
    display.display();
  }
  forcePix = 0;
    566c:	2300      	movs	r3, #0
    566e:	702b      	strb	r3, [r5, #0]
}
    5670:	b003      	add	sp, #12
    5672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    display.display();
    5676:	48b4      	ldr	r0, [pc, #720]	; (5948 <plotSensorPixels()+0x334>)
    5678:	f007 fb6a 	bl	cd50 <Adafruit_SSD1306::display()>
  forcePix = 0;
    567c:	2300      	movs	r3, #0
    567e:	702b      	strb	r3, [r5, #0]
}
    5680:	b003      	add	sp, #12
    5682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     int pos = map(constrain(3000-touchRead(vibratoPin), leverLoLimit, leverHiLimit), leverLoLimit, leverHiLimit, 28, 118);
    5686:	200f      	movs	r0, #15
    5688:	f00a fc3e 	bl	ff08 <touchRead>
    568c:	f5c0 603b 	rsb	r0, r0, #2992	; 0xbb0
    5690:	3008      	adds	r0, #8
	long num = (x - in_min) * out_range;
    5692:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
    5696:	bfa8      	it	ge
    5698:	f44f 60fa 	movge.w	r0, #2000	; 0x7d0
    569c:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
    56a0:	bfb8      	it	lt
    56a2:	f44f 60af 	movlt.w	r0, #1400	; 0x578
    56a6:	235a      	movs	r3, #90	; 0x5a
    56a8:	f5a0 60af 	sub.w	r0, r0, #1400	; 0x578
    56ac:	fb03 f000 	mul.w	r0, r3, r0
	long result = num / in_range + out_min;
    56b0:	4ba6      	ldr	r3, [pc, #664]	; (594c <plotSensorPixels()+0x338>)
		num += in_range / 2;
    56b2:	f500 7096 	add.w	r0, r0, #300	; 0x12c
	long result = num / in_range + out_min;
    56b6:	fba3 3000 	umull	r3, r0, r3, r0
    56ba:	0980      	lsrs	r0, r0, #6
    redraw = updateSensorPixel(pos, -1);
    56bc:	f04f 31ff 	mov.w	r1, #4294967295
    56c0:	301c      	adds	r0, #28
    56c2:	f7ff ff73 	bl	55ac <updateSensorPixel(int, int)>
  if (redraw){
    56c6:	2800      	cmp	r0, #0
    56c8:	d0d0      	beq.n	566c <plotSensorPixels()+0x58>
    56ca:	e7d4      	b.n	5676 <plotSensorPixels()+0x62>
    if (biteJumper) { //PBITE (if pulled low with jumper or if on a NuRAD, use pressure sensor instead of capacitive bite sensor)
    56cc:	4ba0      	ldr	r3, [pc, #640]	; (5950 <plotSensorPixels()+0x33c>)
    56ce:	781b      	ldrb	r3, [r3, #0]
    56d0:	2b00      	cmp	r3, #0
    56d2:	f000 812a 	beq.w	592a <plotSensorPixels()+0x316>
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
    56d6:	2015      	movs	r0, #21
    56d8:	f008 fdc8 	bl	e26c <analogRead>
    56dc:	4602      	mov	r2, r0
	long num = (x - in_min) * out_range;
    56de:	f241 235c 	movw	r3, #4700	; 0x125c
    56e2:	4293      	cmp	r3, r2
    56e4:	bfa8      	it	ge
    56e6:	4613      	movge	r3, r2
    56e8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
    56ec:	bfb8      	it	lt
    56ee:	f44f 732f 	movlt.w	r3, #700	; 0x2bc
    56f2:	215a      	movs	r1, #90	; 0x5a
    56f4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
    56f8:	fb01 f303 	mul.w	r3, r1, r3
	long result = num / in_range + out_min;
    56fc:	4995      	ldr	r1, [pc, #596]	; (5954 <plotSensorPixels()+0x340>)
    56fe:	4c96      	ldr	r4, [pc, #600]	; (5958 <plotSensorPixels()+0x344>)
		num += in_range / 2;
    5700:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
	long result = num / in_range + out_min;
    5704:	fba1 1303 	umull	r1, r3, r1, r3
    5708:	0a1b      	lsrs	r3, r3, #8
    redraw = updateSensorPixel(pos, -1);
    570a:	f04f 31ff 	mov.w	r1, #4294967295
    570e:	f103 001c 	add.w	r0, r3, #28
      biteSensor=analogRead(bitePressurePin); // alternative kind bite sensor (air pressure tube and sensor)  PBITE
    5712:	6022      	str	r2, [r4, #0]
    redraw = updateSensorPixel(pos, -1);
    5714:	f7ff ff4a 	bl	55ac <updateSensorPixel(int, int)>
  if (redraw){
    5718:	2800      	cmp	r0, #0
    571a:	d0a7      	beq.n	566c <plotSensorPixels()+0x58>
    571c:	e7ab      	b.n	5676 <plotSensorPixels()+0x62>
    int pos = map(constrain(pbUp, pitchbLoLimit, pitchbHiLimit), pitchbLoLimit, pitchbHiLimit, 28, 118);
    571e:	4b8f      	ldr	r3, [pc, #572]	; (595c <plotSensorPixels()+0x348>)
    int pos2 = map(constrain(pbDn, pitchbLoLimit, pitchbHiLimit), pitchbLoLimit, pitchbHiLimit, 28, 118);
    5720:	4a8f      	ldr	r2, [pc, #572]	; (5960 <plotSensorPixels()+0x34c>)
	long num = (x - in_min) * out_range;
    5722:	681b      	ldr	r3, [r3, #0]
    5724:	6812      	ldr	r2, [r2, #0]
    5726:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    572a:	bfa8      	it	ge
    572c:	f44f 637a 	movge.w	r3, #4000	; 0xfa0
    5730:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
    5734:	bfa8      	it	ge
    5736:	f44f 627a 	movge.w	r2, #4000	; 0xfa0
    573a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    573e:	bfb8      	it	lt
    5740:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
    5744:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    5748:	bfb8      	it	lt
    574a:	f44f 72fa 	movlt.w	r2, #500	; 0x1f4
    574e:	f5a3 70fa 	sub.w	r0, r3, #500	; 0x1f4
    5752:	f5a2 71fa 	sub.w	r1, r2, #500	; 0x1f4
    5756:	235a      	movs	r3, #90	; 0x5a
    5758:	fb03 f000 	mul.w	r0, r3, r0
    575c:	fb03 f101 	mul.w	r1, r3, r1
	long result = num / in_range + out_min;
    5760:	4b80      	ldr	r3, [pc, #512]	; (5964 <plotSensorPixels()+0x350>)
		num += in_range / 2;
    5762:	f201 61d6 	addw	r1, r1, #1750	; 0x6d6
    5766:	f200 60d6 	addw	r0, r0, #1750	; 0x6d6
	long result = num / in_range + out_min;
    576a:	fba3 2101 	umull	r2, r1, r3, r1
    576e:	fba3 3000 	umull	r3, r0, r3, r0
    5772:	0ac9      	lsrs	r1, r1, #11
    5774:	0ac0      	lsrs	r0, r0, #11
    redraw = updateSensorPixel(pos, pos2);
    5776:	311c      	adds	r1, #28
    5778:	301c      	adds	r0, #28
    577a:	f7ff ff17 	bl	55ac <updateSensorPixel(int, int)>
  if (redraw){
    577e:	2800      	cmp	r0, #0
    5780:	f43f af74 	beq.w	566c <plotSensorPixels()+0x58>
    5784:	e777      	b.n	5676 <plotSensorPixels()+0x62>
    int pos = map(constrain(exSensor, extracLoLimit, extracHiLimit), extracLoLimit, extracHiLimit, 28, 118);
    5786:	4b78      	ldr	r3, [pc, #480]	; (5968 <plotSensorPixels()+0x354>)
    5788:	4a76      	ldr	r2, [pc, #472]	; (5964 <plotSensorPixels()+0x350>)
	long num = (x - in_min) * out_range;
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    5790:	bfa8      	it	ge
    5792:	f44f 637a 	movge.w	r3, #4000	; 0xfa0
    5796:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    579a:	bfb8      	it	lt
    579c:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
    57a0:	215a      	movs	r1, #90	; 0x5a
    57a2:	f5a3 70fa 	sub.w	r0, r3, #500	; 0x1f4
    57a6:	fb01 f000 	mul.w	r0, r1, r0
		num += in_range / 2;
    57aa:	f200 60d6 	addw	r0, r0, #1750	; 0x6d6
	long result = num / in_range + out_min;
    57ae:	fba2 2000 	umull	r2, r0, r2, r0
    57b2:	0ac0      	lsrs	r0, r0, #11
    redraw = updateSensorPixel(pos, -1);
    57b4:	f04f 31ff 	mov.w	r1, #4294967295
    57b8:	301c      	adds	r0, #28
    57ba:	f7ff fef7 	bl	55ac <updateSensorPixel(int, int)>
  if (redraw){
    57be:	2800      	cmp	r0, #0
    57c0:	f43f af54 	beq.w	566c <plotSensorPixels()+0x58>
    57c4:	e757      	b.n	5676 <plotSensorPixels()+0x62>
        display.drawLine(28,37,118,37,BLACK);
    57c6:	2225      	movs	r2, #37	; 0x25
    57c8:	2400      	movs	r4, #0
    57ca:	e9cd 2400 	strd	r2, r4, [sp]
    57ce:	485e      	ldr	r0, [pc, #376]	; (5948 <plotSensorPixels()+0x334>)
    57d0:	4e66      	ldr	r6, [pc, #408]	; (596c <plotSensorPixels()+0x358>)
      int pos = map(constrain(touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    57d2:	4f67      	ldr	r7, [pc, #412]	; (5970 <plotSensorPixels()+0x35c>)
    57d4:	f8df 919c 	ldr.w	r9, [pc, #412]	; 5974 <plotSensorPixels()+0x360>
    57d8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 594c <plotSensorPixels()+0x338>
        display.drawLine(28,37,118,37,BLACK);
    57dc:	2376      	movs	r3, #118	; 0x76
    57de:	211c      	movs	r1, #28
    57e0:	f007 fc60 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
    for (byte i=0; i<12; i++){
    57e4:	e018      	b.n	5818 <plotSensorPixels()+0x204>
      int pos = map(constrain(touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    57e6:	4548      	cmp	r0, r9
    57e8:	dc26      	bgt.n	5838 <plotSensorPixels()+0x224>
    57ea:	fb88 2300 	smull	r2, r3, r8, r0
    57ee:	17c1      	asrs	r1, r0, #31
    57f0:	ebc1 1163 	rsb	r1, r1, r3, asr #5
	long num = (x - in_min) * out_range;
    57f4:	3932      	subs	r1, #50	; 0x32
    57f6:	235a      	movs	r3, #90	; 0x5a
    57f8:	fb03 f101 	mul.w	r1, r3, r1
		num += in_range / 2;
    57fc:	3196      	adds	r1, #150	; 0x96
	long result = num / in_range + out_min;
    57fe:	fba8 3101 	umull	r3, r1, r8, r1
    5802:	0949      	lsrs	r1, r1, #5
    5804:	311c      	adds	r1, #28
      display.drawPixel(pos, 37, WHITE);
    5806:	b209      	sxth	r1, r1
    5808:	2301      	movs	r3, #1
    for (byte i=0; i<12; i++){
    580a:	441c      	add	r4, r3
      display.drawPixel(pos, 37, WHITE);
    580c:	484e      	ldr	r0, [pc, #312]	; (5948 <plotSensorPixels()+0x334>)
    580e:	2225      	movs	r2, #37	; 0x25
    5810:	f006 fce0 	bl	c1d4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>
    for (byte i=0; i<12; i++){
    5814:	2c0c      	cmp	r4, #12
    5816:	d011      	beq.n	583c <plotSensorPixels()+0x228>
      int pos = map(constrain(touchSensorRH.filteredData(i) * (300-calOffsetRH[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    5818:	b2e1      	uxtb	r1, r4
    581a:	4638      	mov	r0, r7
    581c:	f005 fe9c 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    5820:	f856 3b04 	ldr.w	r3, [r6], #4
    5824:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    5828:	f643 2297 	movw	r2, #14999	; 0x3a97
    582c:	fb03 f000 	mul.w	r0, r3, r0
    5830:	4290      	cmp	r0, r2
    5832:	dcd8      	bgt.n	57e6 <plotSensorPixels()+0x1d2>
    5834:	211c      	movs	r1, #28
    5836:	e7e7      	b.n	5808 <plotSensorPixels()+0x1f4>
    5838:	2176      	movs	r1, #118	; 0x76
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
    583a:	e7e5      	b.n	5808 <plotSensorPixels()+0x1f4>
    display.drawLine(28,38,118,38,BLACK);
    583c:	2226      	movs	r2, #38	; 0x26
    583e:	2400      	movs	r4, #0
    5840:	e9cd 2400 	strd	r2, r4, [sp]
    5844:	4840      	ldr	r0, [pc, #256]	; (5948 <plotSensorPixels()+0x334>)
    5846:	4e4c      	ldr	r6, [pc, #304]	; (5978 <plotSensorPixels()+0x364>)
      int pos = map(constrain(touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    5848:	4f4c      	ldr	r7, [pc, #304]	; (597c <plotSensorPixels()+0x368>)
    584a:	f8df 9128 	ldr.w	r9, [pc, #296]	; 5974 <plotSensorPixels()+0x360>
    584e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 594c <plotSensorPixels()+0x338>
    display.drawLine(28,38,118,38,BLACK);
    5852:	2376      	movs	r3, #118	; 0x76
    5854:	211c      	movs	r1, #28
    5856:	f007 fc25 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
    for (byte i=0; i<12; i++){
    585a:	e018      	b.n	588e <plotSensorPixels()+0x27a>
      int pos = map(constrain(touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    585c:	4548      	cmp	r0, r9
    585e:	dc26      	bgt.n	58ae <plotSensorPixels()+0x29a>
    5860:	fb88 2300 	smull	r2, r3, r8, r0
    5864:	17c1      	asrs	r1, r0, #31
    5866:	ebc1 1163 	rsb	r1, r1, r3, asr #5
	long num = (x - in_min) * out_range;
    586a:	3932      	subs	r1, #50	; 0x32
    586c:	235a      	movs	r3, #90	; 0x5a
    586e:	fb03 f101 	mul.w	r1, r3, r1
		num += in_range / 2;
    5872:	3196      	adds	r1, #150	; 0x96
	long result = num / in_range + out_min;
    5874:	fba8 3101 	umull	r3, r1, r8, r1
    5878:	0949      	lsrs	r1, r1, #5
    587a:	311c      	adds	r1, #28
      display.drawPixel(pos, 38, WHITE);
    587c:	b209      	sxth	r1, r1
    587e:	2301      	movs	r3, #1
    for (byte i=0; i<12; i++){
    5880:	441c      	add	r4, r3
      display.drawPixel(pos, 38, WHITE);
    5882:	4831      	ldr	r0, [pc, #196]	; (5948 <plotSensorPixels()+0x334>)
    5884:	2226      	movs	r2, #38	; 0x26
    5886:	f006 fca5 	bl	c1d4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>
    for (byte i=0; i<12; i++){
    588a:	2c0c      	cmp	r4, #12
    588c:	d011      	beq.n	58b2 <plotSensorPixels()+0x29e>
      int pos = map(constrain(touchSensorLH.filteredData(i) * (300-calOffsetLH[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    588e:	b2e1      	uxtb	r1, r4
    5890:	4638      	mov	r0, r7
    5892:	f005 fe61 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    5896:	f856 3b04 	ldr.w	r3, [r6], #4
    589a:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    589e:	f643 2297 	movw	r2, #14999	; 0x3a97
    58a2:	fb03 f000 	mul.w	r0, r3, r0
    58a6:	4290      	cmp	r0, r2
    58a8:	dcd8      	bgt.n	585c <plotSensorPixels()+0x248>
    58aa:	211c      	movs	r1, #28
    58ac:	e7e7      	b.n	587e <plotSensorPixels()+0x26a>
    58ae:	2176      	movs	r1, #118	; 0x76
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
    58b0:	e7e5      	b.n	587e <plotSensorPixels()+0x26a>
    display.drawLine(28,39,118,39,BLACK);
    58b2:	2227      	movs	r2, #39	; 0x27
    58b4:	2400      	movs	r4, #0
    58b6:	e9cd 2400 	strd	r2, r4, [sp]
    58ba:	4823      	ldr	r0, [pc, #140]	; (5948 <plotSensorPixels()+0x334>)
    58bc:	4e30      	ldr	r6, [pc, #192]	; (5980 <plotSensorPixels()+0x36c>)
      int pos = map(constrain(touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    58be:	4f31      	ldr	r7, [pc, #196]	; (5984 <plotSensorPixels()+0x370>)
    58c0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5974 <plotSensorPixels()+0x360>
    58c4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 594c <plotSensorPixels()+0x338>
    display.drawLine(28,39,118,39,BLACK);
    58c8:	2376      	movs	r3, #118	; 0x76
    58ca:	211c      	movs	r1, #28
    58cc:	f007 fbea 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
    for (byte i=0; i<6; i++){
    58d0:	e017      	b.n	5902 <plotSensorPixels()+0x2ee>
      int pos = map(constrain(touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    58d2:	fb88 2300 	smull	r2, r3, r8, r0
    58d6:	17c1      	asrs	r1, r0, #31
    58d8:	ebc1 1163 	rsb	r1, r1, r3, asr #5
	long num = (x - in_min) * out_range;
    58dc:	3932      	subs	r1, #50	; 0x32
    58de:	235a      	movs	r3, #90	; 0x5a
    58e0:	fb03 f101 	mul.w	r1, r3, r1
		num += in_range / 2;
    58e4:	3196      	adds	r1, #150	; 0x96
	long result = num / in_range + out_min;
    58e6:	fba8 3101 	umull	r3, r1, r8, r1
    58ea:	0949      	lsrs	r1, r1, #5
    58ec:	311c      	adds	r1, #28
      display.drawPixel(pos, 39, WHITE);
    58ee:	b209      	sxth	r1, r1
    58f0:	4815      	ldr	r0, [pc, #84]	; (5948 <plotSensorPixels()+0x334>)
    for (byte i=0; i<6; i++){
    58f2:	3401      	adds	r4, #1
      display.drawPixel(pos, 39, WHITE);
    58f4:	2301      	movs	r3, #1
    58f6:	2227      	movs	r2, #39	; 0x27
    58f8:	f006 fc6c 	bl	c1d4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>
    for (byte i=0; i<6; i++){
    58fc:	2c06      	cmp	r4, #6
    58fe:	f43f aeba 	beq.w	5676 <plotSensorPixels()+0x62>
      int pos = map(constrain(touchSensorRollers.filteredData(i) * (300-calOffsetRollers[i])/300, ctouchLoLimit, ctouchHiLimit), ctouchLoLimit, ctouchHiLimit, 28, 118);
    5902:	b2e1      	uxtb	r1, r4
    5904:	4638      	mov	r0, r7
    5906:	f005 fe27 	bl	b558 <Adafruit_MPR121::filteredData(unsigned char)>
    590a:	f856 3b04 	ldr.w	r3, [r6], #4
    590e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
    5912:	fb03 f000 	mul.w	r0, r3, r0
    5916:	f643 2397 	movw	r3, #14999	; 0x3a97
    591a:	4298      	cmp	r0, r3
    591c:	f04f 011c 	mov.w	r1, #28
    5920:	dde6      	ble.n	58f0 <plotSensorPixels()+0x2dc>
    5922:	4548      	cmp	r0, r9
    5924:	ddd5      	ble.n	58d2 <plotSensorPixels()+0x2be>
    5926:	2176      	movs	r1, #118	; 0x76
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
    5928:	e7e2      	b.n	58f0 <plotSensorPixels()+0x2dc>
      biteSensor = touchRead(bitePin);     // get sensor data, do some smoothing - SENSOR PIN 17 - PCB PINS LABELED "BITE" (GND left, sensor pin right)
    592a:	2011      	movs	r0, #17
    592c:	f00a faec 	bl	ff08 <touchRead>
    5930:	4602      	mov	r2, r0
    5932:	e6d4      	b.n	56de <plotSensorPixels()+0xca>
    5934:	1fff9c2a 	.word	0x1fff9c2a
    5938:	1fff8e80 	.word	0x1fff8e80
    593c:	1fff9c20 	.word	0x1fff9c20
    5940:	1fff9b8c 	.word	0x1fff9b8c
    5944:	00100101 	.word	0x00100101
    5948:	1fff9c74 	.word	0x1fff9c74
    594c:	1b4e81b5 	.word	0x1b4e81b5
    5950:	1fff9a0d 	.word	0x1fff9a0d
    5954:	10624dd3 	.word	0x10624dd3
    5958:	1fff9a10 	.word	0x1fff9a10
    595c:	1fff9b6c 	.word	0x1fff9b6c
    5960:	1fff9b68 	.word	0x1fff9b68
    5964:	95cbec1b 	.word	0x95cbec1b
    5968:	1fff9a8c 	.word	0x1fff9a8c
    596c:	1fff8d6c 	.word	0x1fff8d6c
    5970:	1fff9be4 	.word	0x1fff9be4
    5974:	00019b53 	.word	0x00019b53
    5978:	1fff8d3c 	.word	0x1fff8d3c
    597c:	1fff9be0 	.word	0x1fff9be0
    5980:	1fff8d9c 	.word	0x1fff8d9c
    5984:	1fff9be8 	.word	0x1fff9be8

00005988 <drawAdjustMenu(AdjustMenuEntry const*)>:
static void drawAdjustMenu(const AdjustMenuEntry *menu) {
    5988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  display.clearDisplay();
    598c:	4d83      	ldr	r5, [pc, #524]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
static void drawAdjustMenu(const AdjustMenuEntry *menu) {
    598e:	4604      	mov	r4, r0
    5990:	b083      	sub	sp, #12
  display.clearDisplay();
    5992:	4628      	mov	r0, r5
  bool haveSecondValue = menu->entries[1].value != nullptr;
    5994:	68e6      	ldr	r6, [r4, #12]
  drawAdjustBase( menu->title, haveSecondValue );
    5996:	f8d4 8000 	ldr.w	r8, [r4]
  display.clearDisplay();
    599a:	f007 f9c9 	bl	cd30 <Adafruit_SSD1306::clearDisplay()>
  drawAdjustFrame(17);
    599e:	2011      	movs	r0, #17
    59a0:	f7ff fdbc 	bl	551c <drawAdjustFrame(int)>
  display.drawLine(25,36,25,40,WHITE);
    59a4:	2701      	movs	r7, #1
    59a6:	2319      	movs	r3, #25
    59a8:	f04f 0928 	mov.w	r9, #40	; 0x28
    59ac:	4619      	mov	r1, r3
    59ae:	2224      	movs	r2, #36	; 0x24
    59b0:	4628      	mov	r0, r5
    59b2:	9701      	str	r7, [sp, #4]
    59b4:	f8cd 9000 	str.w	r9, [sp]
    59b8:	f007 fb74 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.drawLine(120,36,120,40,WHITE);
    59bc:	2378      	movs	r3, #120	; 0x78
    59be:	4619      	mov	r1, r3
    59c0:	2224      	movs	r2, #36	; 0x24
    59c2:	4628      	mov	r0, r5
    59c4:	f8cd 9000 	str.w	r9, [sp]
    59c8:	9701      	str	r7, [sp, #4]
    59ca:	f007 fb6b 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.setTextSize(1);
    59ce:	4639      	mov	r1, r7
    59d0:	4628      	mov	r0, r5
    59d2:	f008 f81d 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    59d6:	4b72      	ldr	r3, [pc, #456]	; (5ba0 <drawAdjustMenu(AdjustMenuEntry const*)+0x218>)
    59d8:	612b      	str	r3, [r5, #16]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    59da:	f1b8 0f00 	cmp.w	r8, #0
    59de:	d007      	beq.n	59f0 <drawAdjustMenu(AdjustMenuEntry const*)+0x68>
							  return write((const uint8_t *)str, strlen(str)); }
    59e0:	4640      	mov	r0, r8
    59e2:	f00c feed 	bl	127c0 <strlen>
    59e6:	4641      	mov	r1, r8
    59e8:	4602      	mov	r2, r0
    59ea:	4628      	mov	r0, r5
    59ec:	f008 fada 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    59f0:	486a      	ldr	r0, [pc, #424]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    59f2:	f008 fb39 	bl	e068 <Print::println()>
    59f6:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
							  return write((const uint8_t *)str, strlen(str)); }
    59fa:	496a      	ldr	r1, [pc, #424]	; (5ba4 <drawAdjustMenu(AdjustMenuEntry const*)+0x21c>)
    59fc:	4867      	ldr	r0, [pc, #412]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    59fe:	612b      	str	r3, [r5, #16]
    5a00:	2203      	movs	r2, #3
    5a02:	f008 facf 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a06:	4865      	ldr	r0, [pc, #404]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5a08:	f008 fb2e 	bl	e068 <Print::println()>
    5a0c:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
							  return write((const uint8_t *)str, strlen(str)); }
    5a10:	4965      	ldr	r1, [pc, #404]	; (5ba8 <drawAdjustMenu(AdjustMenuEntry const*)+0x220>)
    5a12:	4862      	ldr	r0, [pc, #392]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5a14:	612b      	str	r3, [r5, #16]
    5a16:	2203      	movs	r2, #3
    5a18:	f008 fac4 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a1c:	485f      	ldr	r0, [pc, #380]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5a1e:	f008 fb23 	bl	e068 <Print::println()>
  if(all) {
    5a22:	2e00      	cmp	r6, #0
    5a24:	f040 8090 	bne.w	5b48 <drawAdjustMenu(AdjustMenuEntry const*)+0x1c0>
  cursorNow = WHITE;
    5a28:	4b60      	ldr	r3, [pc, #384]	; (5bac <drawAdjustMenu(AdjustMenuEntry const*)+0x224>)
    5a2a:	2701      	movs	r7, #1
  drawAdjCursor(WHITE);
    5a2c:	4638      	mov	r0, r7
  cursorNow = WHITE;
    5a2e:	701f      	strb	r7, [r3, #0]
  drawAdjCursor(WHITE);
    5a30:	f7ff fbe6 	bl	5200 <drawAdjCursor(unsigned char)>
  pos1 = map( *menu->entries[0].value, menu->entries[0].limitLow, menu->entries[0].limitHigh, 27, 119);
    5a34:	6863      	ldr	r3, [r4, #4]
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    5a36:	8962      	ldrh	r2, [r4, #10]
    5a38:	8819      	ldrh	r1, [r3, #0]
    5a3a:	8923      	ldrh	r3, [r4, #8]
	if (in_range == 0) return out_min + out_range / 2;
    5a3c:	1ad2      	subs	r2, r2, r3
    5a3e:	d061      	beq.n	5b04 <drawAdjustMenu(AdjustMenuEntry const*)+0x17c>
	long num = (x - in_min) * out_range;
    5a40:	1ac9      	subs	r1, r1, r3
		num += in_range / 2;
    5a42:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
	long num = (x - in_min) * out_range;
    5a46:	205c      	movs	r0, #92	; 0x5c
		num += in_range / 2;
    5a48:	105b      	asrs	r3, r3, #1
    5a4a:	fb00 3301 	mla	r3, r0, r1, r3
		if (in_range * num < 0) return result - 1;
    5a4e:	fb03 f102 	mul.w	r1, r3, r2
    5a52:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    5a54:	fb93 f3f2 	sdiv	r3, r3, r2
    5a58:	4a55      	ldr	r2, [pc, #340]	; (5bb0 <drawAdjustMenu(AdjustMenuEntry const*)+0x228>)
    5a5a:	bfac      	ite	ge
    5a5c:	331b      	addge	r3, #27
		if (in_range * num < 0) return result - 1;
    5a5e:	331a      	addlt	r3, #26
    5a60:	b299      	uxth	r1, r3
    5a62:	8011      	strh	r1, [r2, #0]
  display.drawLine( pos1, 20, pos1, 26, WHITE );
    5a64:	201a      	movs	r0, #26
    5a66:	2201      	movs	r2, #1
    5a68:	b21b      	sxth	r3, r3
    5a6a:	e9cd 0200 	strd	r0, r2, [sp]
    5a6e:	4619      	mov	r1, r3
    5a70:	484a      	ldr	r0, [pc, #296]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5a72:	2214      	movs	r2, #20
    5a74:	f007 fb16 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  if(haveSecondValue) {
    5a78:	2e00      	cmp	r6, #0
    5a7a:	d04e      	beq.n	5b1a <drawAdjustMenu(AdjustMenuEntry const*)+0x192>
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    5a7c:	8a23      	ldrh	r3, [r4, #16]
    5a7e:	8a62      	ldrh	r2, [r4, #18]
    pos2 = map( *menu->entries[1].value, menu->entries[1].limitLow, menu->entries[1].limitHigh, 27, 119);
    5a80:	68e1      	ldr	r1, [r4, #12]
	if (in_range == 0) return out_min + out_range / 2;
    5a82:	1ad2      	subs	r2, r2, r3
    5a84:	8809      	ldrh	r1, [r1, #0]
    5a86:	f000 8086 	beq.w	5b96 <drawAdjustMenu(AdjustMenuEntry const*)+0x20e>
	long num = (x - in_min) * out_range;
    5a8a:	1acb      	subs	r3, r1, r3
		num += in_range / 2;
    5a8c:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	long num = (x - in_min) * out_range;
    5a90:	205c      	movs	r0, #92	; 0x5c
		num += in_range / 2;
    5a92:	1049      	asrs	r1, r1, #1
    5a94:	fb00 1103 	mla	r1, r0, r3, r1
	long result = num / in_range + out_min;
    5a98:	fb91 f3f2 	sdiv	r3, r1, r2
		if (in_range * num < 0) return result - 1;
    5a9c:	fb01 f202 	mul.w	r2, r1, r2
    5aa0:	2a00      	cmp	r2, #0
	long result = num / in_range + out_min;
    5aa2:	bfac      	ite	ge
    5aa4:	331b      	addge	r3, #27
		if (in_range * num < 0) return result - 1;
    5aa6:	331a      	addlt	r3, #26
    5aa8:	b299      	uxth	r1, r3
    display.drawLine( pos2, 50, pos2, 56, WHITE );
    5aaa:	b21b      	sxth	r3, r3
    pos2 = map( *menu->entries[1].value, menu->entries[1].limitLow, menu->entries[1].limitHigh, 27, 119);
    5aac:	4a41      	ldr	r2, [pc, #260]	; (5bb4 <drawAdjustMenu(AdjustMenuEntry const*)+0x22c>)
    display.drawLine( pos2, 50, pos2, 56, WHITE );
    5aae:	483b      	ldr	r0, [pc, #236]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    pos2 = map( *menu->entries[1].value, menu->entries[1].limitLow, menu->entries[1].limitHigh, 27, 119);
    5ab0:	8011      	strh	r1, [r2, #0]
    display.drawLine( pos2, 50, pos2, 56, WHITE );
    5ab2:	2601      	movs	r6, #1
    5ab4:	2238      	movs	r2, #56	; 0x38
    5ab6:	e9cd 2600 	strd	r2, r6, [sp]
    5aba:	4619      	mov	r1, r3
    5abc:	2232      	movs	r2, #50	; 0x32
    5abe:	f007 faf1 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.fillRect(64,0,64,9,BLACK);
    5ac2:	2309      	movs	r3, #9
    5ac4:	2200      	movs	r2, #0
    5ac6:	9300      	str	r3, [sp, #0]
    5ac8:	2340      	movs	r3, #64	; 0x40
    5aca:	9201      	str	r2, [sp, #4]
    5acc:	4619      	mov	r1, r3
    5ace:	4833      	ldr	r0, [pc, #204]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5ad0:	f007 fb3a 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  display.setTextSize(1);
    5ad4:	4631      	mov	r1, r6
    5ad6:	4831      	ldr	r0, [pc, #196]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5ad8:	f007 ff9a 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    display.print(*menu->entries[0].value);
    5adc:	6863      	ldr	r3, [r4, #4]
    5ade:	4a36      	ldr	r2, [pc, #216]	; (5bb8 <drawAdjustMenu(AdjustMenuEntry const*)+0x230>)
    5ae0:	612a      	str	r2, [r5, #16]
	size_t print(int n)				{ return print((long)n); }
    5ae2:	8819      	ldrh	r1, [r3, #0]
    5ae4:	482d      	ldr	r0, [pc, #180]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5ae6:	f008 fab7 	bl	e058 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    5aea:	4934      	ldr	r1, [pc, #208]	; (5bbc <drawAdjustMenu(AdjustMenuEntry const*)+0x234>)
    5aec:	482b      	ldr	r0, [pc, #172]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5aee:	4632      	mov	r2, r6
    5af0:	f008 fa58 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
    display.print(*menu->entries[1].value);
    5af4:	68e3      	ldr	r3, [r4, #12]
	size_t print(int n)				{ return print((long)n); }
    5af6:	4829      	ldr	r0, [pc, #164]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5af8:	8819      	ldrh	r1, [r3, #0]
}
    5afa:	b003      	add	sp, #12
    5afc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5b00:	f008 baaa 	b.w	e058 <Print::print(long)>
  pos1 = map( *menu->entries[0].value, menu->entries[0].limitLow, menu->entries[0].limitHigh, 27, 119);
    5b04:	4a2a      	ldr	r2, [pc, #168]	; (5bb0 <drawAdjustMenu(AdjustMenuEntry const*)+0x228>)
  display.drawLine( pos1, 20, pos1, 26, WHITE );
    5b06:	9701      	str	r7, [sp, #4]
  pos1 = map( *menu->entries[0].value, menu->entries[0].limitLow, menu->entries[0].limitHigh, 27, 119);
    5b08:	2349      	movs	r3, #73	; 0x49
  display.drawLine( pos1, 20, pos1, 26, WHITE );
    5b0a:	211a      	movs	r1, #26
    5b0c:	9100      	str	r1, [sp, #0]
    5b0e:	4823      	ldr	r0, [pc, #140]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
  pos1 = map( *menu->entries[0].value, menu->entries[0].limitLow, menu->entries[0].limitHigh, 27, 119);
    5b10:	8013      	strh	r3, [r2, #0]
  display.drawLine( pos1, 20, pos1, 26, WHITE );
    5b12:	4619      	mov	r1, r3
    5b14:	2214      	movs	r2, #20
    5b16:	f007 fac5 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.fillRect(64,0,64,9,BLACK);
    5b1a:	2340      	movs	r3, #64	; 0x40
    5b1c:	2200      	movs	r2, #0
    5b1e:	2109      	movs	r1, #9
    5b20:	e9cd 1200 	strd	r1, r2, [sp]
    5b24:	481d      	ldr	r0, [pc, #116]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5b26:	4619      	mov	r1, r3
    5b28:	f007 fb0e 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  display.setTextSize(1);
    5b2c:	481b      	ldr	r0, [pc, #108]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5b2e:	2101      	movs	r1, #1
    5b30:	f007 ff6e 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    display.print(*menu->entries[0].value);
    5b34:	6863      	ldr	r3, [r4, #4]
    5b36:	4a22      	ldr	r2, [pc, #136]	; (5bc0 <drawAdjustMenu(AdjustMenuEntry const*)+0x238>)
    5b38:	612a      	str	r2, [r5, #16]
    5b3a:	8819      	ldrh	r1, [r3, #0]
    5b3c:	4817      	ldr	r0, [pc, #92]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
}
    5b3e:	b003      	add	sp, #12
    5b40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5b44:	f008 ba88 	b.w	e058 <Print::print(long)>
    drawAdjustFrame(47);
    5b48:	202f      	movs	r0, #47	; 0x2f
    5b4a:	f7ff fce7 	bl	551c <drawAdjustFrame(int)>
							  return write((const uint8_t *)str, strlen(str)); }
    5b4e:	491d      	ldr	r1, [pc, #116]	; (5bc4 <drawAdjustMenu(AdjustMenuEntry const*)+0x23c>)
    5b50:	4812      	ldr	r0, [pc, #72]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5b52:	2203      	movs	r2, #3
    5b54:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
    5b58:	612b      	str	r3, [r5, #16]
    5b5a:	f008 fa23 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    5b5e:	480f      	ldr	r0, [pc, #60]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
    5b60:	f008 fa82 	bl	e068 <Print::println()>
  cursorNow = WHITE;
    5b64:	2701      	movs	r7, #1
    5b66:	4b11      	ldr	r3, [pc, #68]	; (5bac <drawAdjustMenu(AdjustMenuEntry const*)+0x224>)
  drawAdjCursor(WHITE);
    5b68:	4638      	mov	r0, r7
  cursorNow = WHITE;
    5b6a:	701f      	strb	r7, [r3, #0]
  drawAdjCursor(WHITE);
    5b6c:	f7ff fb48 	bl	5200 <drawAdjCursor(unsigned char)>
  pos1 = map( *menu->entries[0].value, menu->entries[0].limitLow, menu->entries[0].limitHigh, 27, 119);
    5b70:	6863      	ldr	r3, [r4, #4]
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    5b72:	8962      	ldrh	r2, [r4, #10]
    5b74:	8819      	ldrh	r1, [r3, #0]
    5b76:	8923      	ldrh	r3, [r4, #8]
	if (in_range == 0) return out_min + out_range / 2;
    5b78:	1ad2      	subs	r2, r2, r3
    5b7a:	f47f af61 	bne.w	5a40 <drawAdjustMenu(AdjustMenuEntry const*)+0xb8>
    5b7e:	4a0c      	ldr	r2, [pc, #48]	; (5bb0 <drawAdjustMenu(AdjustMenuEntry const*)+0x228>)
  display.drawLine( pos1, 20, pos1, 26, WHITE );
    5b80:	9701      	str	r7, [sp, #4]
  pos1 = map( *menu->entries[0].value, menu->entries[0].limitLow, menu->entries[0].limitHigh, 27, 119);
    5b82:	2349      	movs	r3, #73	; 0x49
  display.drawLine( pos1, 20, pos1, 26, WHITE );
    5b84:	211a      	movs	r1, #26
    5b86:	9100      	str	r1, [sp, #0]
    5b88:	4804      	ldr	r0, [pc, #16]	; (5b9c <drawAdjustMenu(AdjustMenuEntry const*)+0x214>)
  pos1 = map( *menu->entries[0].value, menu->entries[0].limitLow, menu->entries[0].limitHigh, 27, 119);
    5b8a:	8013      	strh	r3, [r2, #0]
  display.drawLine( pos1, 20, pos1, 26, WHITE );
    5b8c:	4619      	mov	r1, r3
    5b8e:	2214      	movs	r2, #20
    5b90:	f007 fa88 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  if(haveSecondValue) {
    5b94:	e772      	b.n	5a7c <drawAdjustMenu(AdjustMenuEntry const*)+0xf4>
    5b96:	2349      	movs	r3, #73	; 0x49
    5b98:	4619      	mov	r1, r3
    5b9a:	e787      	b.n	5aac <drawAdjustMenu(AdjustMenuEntry const*)+0x124>
    5b9c:	1fff9c74 	.word	0x1fff9c74
    5ba0:	00020019 	.word	0x00020019
    5ba4:	00013828 	.word	0x00013828
    5ba8:	0001382c 	.word	0x0001382c
    5bac:	1fff9c70 	.word	0x1fff9c70
    5bb0:	1fff9c26 	.word	0x1fff9c26
    5bb4:	1fff9c28 	.word	0x1fff9c28
    5bb8:	00020044 	.word	0x00020044
    5bbc:	00013834 	.word	0x00013834
    5bc0:	00020068 	.word	0x00020068
    5bc4:	00013830 	.word	0x00013830

00005bc8 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)>:
    return true;
  }
  return false;
}

static bool handleInput(const AdjustMenuEntry *currentMenu, uint32_t timeNow, uint8_t buttons, uint16_t *xpos, int ypos, int index) {
    5bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool haveSecondValue = currentMenu->entries[1].value != nullptr;
    5bcc:	f8d0 800c 	ldr.w	r8, [r0, #12]
static bool handleInput(const AdjustMenuEntry *currentMenu, uint32_t timeNow, uint8_t buttons, uint16_t *xpos, int ypos, int index) {
    5bd0:	b082      	sub	sp, #8
    5bd2:	461e      	mov	r6, r3
  if (buttons) {
    5bd4:	4614      	mov	r4, r2
    5bd6:	2a00      	cmp	r2, #0
    5bd8:	d04a      	beq.n	5c70 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0xa8>
    if (buttons == BTN_DOWN+BTN_UP){
    5bda:	2a05      	cmp	r2, #5
    5bdc:	4605      	mov	r5, r0
    5bde:	d054      	beq.n	5c8a <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0xc2>
  uint16_t step = (entry->limitHigh-entry->limitLow)/92;
    5be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5be2:	4a86      	ldr	r2, [pc, #536]	; (5dfc <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x234>)
    5be4:	eb00 07c3 	add.w	r7, r0, r3, lsl #3
  switch(buttons) {
    5be8:	2c01      	cmp	r4, #1
  uint16_t step = (entry->limitHigh-entry->limitLow)/92;
    5bea:	8978      	ldrh	r0, [r7, #10]
    5bec:	8939      	ldrh	r1, [r7, #8]
  int val = *entry->value;
    5bee:	f8d7 c004 	ldr.w	ip, [r7, #4]
  uint16_t step = (entry->limitHigh-entry->limitLow)/92;
    5bf2:	eba0 0301 	sub.w	r3, r0, r1
    5bf6:	fb82 e203 	smull	lr, r2, r2, r3
    5bfa:	441a      	add	r2, r3
    5bfc:	ea4f 73e3 	mov.w	r3, r3, asr #31
    5c00:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  int val = *entry->value;
    5c04:	f8bc 2000 	ldrh.w	r2, [ip]
  switch(buttons) {
    5c08:	f000 80f2 	beq.w	5df0 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x228>
    5c0c:	2c04      	cmp	r4, #4
    5c0e:	d077      	beq.n	5d00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x138>
    5c10:	4f7b      	ldr	r7, [pc, #492]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
      forcePix = 1;
      plotSensorPixels();
    } else 
    drawAdjustBar( buttons, ypos, &currentMenu->entries[index], xpos );

    display.fillRect(64,0,64,9,BLACK);
    5c12:	487b      	ldr	r0, [pc, #492]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5c14:	2200      	movs	r2, #0
    5c16:	2340      	movs	r3, #64	; 0x40
    5c18:	2109      	movs	r1, #9
    5c1a:	9100      	str	r1, [sp, #0]
    5c1c:	9201      	str	r2, [sp, #4]
    5c1e:	4619      	mov	r1, r3
    5c20:	f007 fa92 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    display.setTextSize(1);
    5c24:	4876      	ldr	r0, [pc, #472]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5c26:	2101      	movs	r1, #1
    5c28:	f007 fef2 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    if(haveSecondValue) {
    5c2c:	f1b8 0f00 	cmp.w	r8, #0
    5c30:	f000 80d4 	beq.w	5ddc <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x214>
    5c34:	4b73      	ldr	r3, [pc, #460]	; (5e04 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x23c>)
    5c36:	613b      	str	r3, [r7, #16]
      display.setCursor(68,2);
      display.print(*currentMenu->entries[0].value);
    5c38:	686b      	ldr	r3, [r5, #4]
	size_t print(int n)				{ return print((long)n); }
    5c3a:	4871      	ldr	r0, [pc, #452]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5c3c:	8819      	ldrh	r1, [r3, #0]
    5c3e:	f008 fa0b 	bl	e058 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    5c42:	4971      	ldr	r1, [pc, #452]	; (5e08 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x240>)
    5c44:	486e      	ldr	r0, [pc, #440]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5c46:	2201      	movs	r2, #1
    5c48:	f008 f9ac 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
      display.print("|");
      display.print(*currentMenu->entries[1].value);
    5c4c:	68eb      	ldr	r3, [r5, #12]
	size_t print(int n)				{ return print((long)n); }
    5c4e:	486c      	ldr	r0, [pc, #432]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5c50:	8819      	ldrh	r1, [r3, #0]
    5c52:	f008 fa01 	bl	e058 <Print::print(long)>
    } else {
      display.setCursor(104,2);
      display.print(*currentMenu->entries[0].value);
    }
    
    int last = adjustCurrent;
    5c56:	4b6d      	ldr	r3, [pc, #436]	; (5e0c <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x244>)
    if(buttons == BTN_ENTER)      adjustCurrent += 1;
    5c58:	2c02      	cmp	r4, #2
    int last = adjustCurrent;
    5c5a:	f9b3 1000 	ldrsh.w	r1, [r3]
    if(buttons == BTN_ENTER)      adjustCurrent += 1;
    5c5e:	f000 8090 	beq.w	5d82 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x1ba>
    else if( buttons == BTN_MENU) adjustCurrent = 0;
    5c62:	2c08      	cmp	r4, #8
    5c64:	f000 80c2 	beq.w	5dec <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x224>
    return true;
    5c68:	2001      	movs	r0, #1

    return true;
  } else { 
    return updateAdjustLineCursor(timeNow, *xpos, ypos);
  }
}
    5c6a:	b002      	add	sp, #8
    5c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((timeNow - cursorBlinkTime) > cursorBlinkInterval) {
    5c70:	4d67      	ldr	r5, [pc, #412]	; (5e10 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x248>)
    5c72:	4a68      	ldr	r2, [pc, #416]	; (5e14 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x24c>)
    5c74:	682b      	ldr	r3, [r5, #0]
    5c76:	6812      	ldr	r2, [r2, #0]
    5c78:	1acb      	subs	r3, r1, r3
    5c7a:	4293      	cmp	r3, r2
    5c7c:	460f      	mov	r7, r1
    5c7e:	f200 8098 	bhi.w	5db2 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x1ea>
  return false;
    5c82:	4620      	mov	r0, r4
}
    5c84:	b002      	add	sp, #8
    5c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      display.fillRect(26,35,90,7,BLACK);
    5c8a:	4f5d      	ldr	r7, [pc, #372]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5c8c:	f04f 0907 	mov.w	r9, #7
    5c90:	f04f 0a00 	mov.w	sl, #0
    5c94:	235a      	movs	r3, #90	; 0x5a
    5c96:	2223      	movs	r2, #35	; 0x23
    5c98:	4638      	mov	r0, r7
    5c9a:	e9cd 9a00 	strd	r9, sl, [sp]
    5c9e:	211a      	movs	r1, #26
    5ca0:	f007 fa52 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
      display.setTextSize(1);
    5ca4:	4638      	mov	r0, r7
    5ca6:	2101      	movs	r1, #1
    5ca8:	f007 feb2 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    5cac:	4b5a      	ldr	r3, [pc, #360]	; (5e18 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x250>)
    5cae:	613b      	str	r3, [r7, #16]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    5cb0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
							  return write((const uint8_t *)str, strlen(str)); }
    5cb4:	464a      	mov	r2, r9
    5cb6:	617b      	str	r3, [r7, #20]
    5cb8:	4958      	ldr	r1, [pc, #352]	; (5e1c <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x254>)
    5cba:	4638      	mov	r0, r7
    5cbc:	f008 f972 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    5cc0:	4638      	mov	r0, r7
    5cc2:	f008 f9d1 	bl	e068 <Print::println()>
      display.display();
    5cc6:	4638      	mov	r0, r7
    5cc8:	f007 f842 	bl	cd50 <Adafruit_SSD1306::display()>
      delay(2000);
    5ccc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    5cd0:	f009 f89c 	bl	ee0c <delay>
      autoCalSelected();
    5cd4:	f7ff fab4 	bl	5240 <autoCalSelected()>
      display.fillRect(26,35,90,7,BLACK);
    5cd8:	235a      	movs	r3, #90	; 0x5a
    5cda:	2223      	movs	r2, #35	; 0x23
    5cdc:	211a      	movs	r1, #26
    5cde:	4638      	mov	r0, r7
    5ce0:	e9cd 9a00 	strd	r9, sl, [sp]
    5ce4:	f007 fa30 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
      display.display();
    5ce8:	4638      	mov	r0, r7
    5cea:	f007 f831 	bl	cd50 <Adafruit_SSD1306::display()>
      drawAdjustMenu(currentMenu);
    5cee:	4628      	mov	r0, r5
    5cf0:	f7ff fe4a 	bl	5988 <drawAdjustMenu(AdjustMenuEntry const*)>
      forcePix = 1;
    5cf4:	4b4a      	ldr	r3, [pc, #296]	; (5e20 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x258>)
    5cf6:	2201      	movs	r2, #1
    5cf8:	701a      	strb	r2, [r3, #0]
      plotSensorPixels();
    5cfa:	f7ff fc8b 	bl	5614 <plotSensorPixels()>
    5cfe:	e788      	b.n	5c12 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x4a>
      val += step;
    5d00:	fa12 f283 	uxtah	r2, r2, r3
    *entry->value = constrain(val, entry->limitLow, entry->limitHigh);
    5d04:	4291      	cmp	r1, r2
    5d06:	dc03      	bgt.n	5d10 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x148>
    5d08:	4290      	cmp	r0, r2
    5d0a:	bfa8      	it	ge
    5d0c:	4610      	movge	r0, r2
    5d0e:	b281      	uxth	r1, r0
    display.drawLine(p, row, p, row+6, BLACK);
    5d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    *entry->value = constrain(val, entry->limitLow, entry->limitHigh);
    5d12:	f8ac 1000 	strh.w	r1, [ip]
    display.drawLine(p, row, p, row+6, BLACK);
    5d16:	f9b6 3000 	ldrsh.w	r3, [r6]
    5d1a:	4839      	ldr	r0, [pc, #228]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5d1c:	f102 0906 	add.w	r9, r2, #6
    5d20:	fa0f fa82 	sxth.w	sl, r2
    5d24:	fa0f f989 	sxth.w	r9, r9
    5d28:	2200      	movs	r2, #0
    5d2a:	4619      	mov	r1, r3
    5d2c:	9201      	str	r2, [sp, #4]
    5d2e:	f8cd 9000 	str.w	r9, [sp]
    5d32:	4652      	mov	r2, sl
    5d34:	f007 f9b6 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
    *pos = p = map(*entry->value, entry->limitLow, entry->limitHigh, 27, 119);
    5d38:	687b      	ldr	r3, [r7, #4]
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    5d3a:	897a      	ldrh	r2, [r7, #10]
    5d3c:	8819      	ldrh	r1, [r3, #0]
    5d3e:	893b      	ldrh	r3, [r7, #8]
	if (in_range == 0) return out_min + out_range / 2;
    5d40:	1ad2      	subs	r2, r2, r3
    5d42:	d058      	beq.n	5df6 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x22e>
	long num = (x - in_min) * out_range;
    5d44:	1ac9      	subs	r1, r1, r3
		num += in_range / 2;
    5d46:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
    5d4a:	105b      	asrs	r3, r3, #1
	long num = (x - in_min) * out_range;
    5d4c:	205c      	movs	r0, #92	; 0x5c
		num += in_range / 2;
    5d4e:	fb00 3301 	mla	r3, r0, r1, r3
		if (in_range * num < 0) return result - 1;
    5d52:	fb03 f102 	mul.w	r1, r3, r2
    5d56:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    5d58:	fb93 f3f2 	sdiv	r3, r3, r2
    5d5c:	bfac      	ite	ge
    5d5e:	331b      	addge	r3, #27
		if (in_range * num < 0) return result - 1;
    5d60:	331a      	addlt	r3, #26
    5d62:	b29a      	uxth	r2, r3
    display.drawLine(p, row, p, row+6, WHITE);
    5d64:	b21b      	sxth	r3, r3
    5d66:	2101      	movs	r1, #1
    *pos = p = map(*entry->value, entry->limitLow, entry->limitHigh, 27, 119);
    5d68:	8032      	strh	r2, [r6, #0]
    display.drawLine(p, row, p, row+6, WHITE);
    5d6a:	4825      	ldr	r0, [pc, #148]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5d6c:	9101      	str	r1, [sp, #4]
    5d6e:	4652      	mov	r2, sl
    5d70:	4619      	mov	r1, r3
    5d72:	f8cd 9000 	str.w	r9, [sp]
    5d76:	f007 f995 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
    cursorNow = BLACK;
    5d7a:	4b2a      	ldr	r3, [pc, #168]	; (5e24 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x25c>)
    5d7c:	2200      	movs	r2, #0
    5d7e:	701a      	strb	r2, [r3, #0]
    5d80:	e746      	b.n	5c10 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x48>
    if(buttons == BTN_ENTER)      adjustCurrent += 1;
    5d82:	1c4a      	adds	r2, r1, #1
    5d84:	b212      	sxth	r2, r2
    if(last != adjustCurrent) drawLineCursor(*xpos, ypos, WHITE);
    5d86:	4291      	cmp	r1, r2
    if(buttons == BTN_ENTER)      adjustCurrent += 1;
    5d88:	801a      	strh	r2, [r3, #0]
    if(last != adjustCurrent) drawLineCursor(*xpos, ypos, WHITE);
    5d8a:	f43f af6d 	beq.w	5c68 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0xa0>
  display.drawLine(hPos, vPos,hPos, vPos+6, color);
    5d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5d90:	f9b6 3000 	ldrsh.w	r3, [r6]
    5d94:	481a      	ldr	r0, [pc, #104]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5d96:	3206      	adds	r2, #6
    5d98:	2401      	movs	r4, #1
    5d9a:	b212      	sxth	r2, r2
    5d9c:	e9cd 2400 	strd	r2, r4, [sp]
    5da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5da2:	4619      	mov	r1, r3
    5da4:	b212      	sxth	r2, r2
    5da6:	f007 f97d 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
    return true;
    5daa:	4620      	mov	r0, r4
}
    5dac:	b002      	add	sp, #8
    5dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    5db2:	491c      	ldr	r1, [pc, #112]	; (5e24 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x25c>)
    return updateAdjustLineCursor(timeNow, *xpos, ypos);
    5db4:	8833      	ldrh	r3, [r6, #0]
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    5db6:	780a      	ldrb	r2, [r1, #0]
  display.drawLine(hPos, vPos,hPos, vPos+6, color);
    5db8:	4811      	ldr	r0, [pc, #68]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    5dba:	3a01      	subs	r2, #1
    5dbc:	bf18      	it	ne
    5dbe:	2201      	movne	r2, #1
  display.drawLine(hPos, vPos,hPos, vPos+6, color);
    5dc0:	9201      	str	r2, [sp, #4]
    5dc2:	700a      	strb	r2, [r1, #0]
    5dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5dc6:	3206      	adds	r2, #6
    5dc8:	b212      	sxth	r2, r2
    5dca:	9200      	str	r2, [sp, #0]
    5dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5dce:	b21b      	sxth	r3, r3
    5dd0:	b212      	sxth	r2, r2
    5dd2:	4619      	mov	r1, r3
    5dd4:	f007 f966 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
    cursorBlinkTime = timeNow;
    5dd8:	602f      	str	r7, [r5, #0]
    5dda:	e745      	b.n	5c68 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0xa0>
      display.print(*currentMenu->entries[0].value);
    5ddc:	686b      	ldr	r3, [r5, #4]
    cursor_x = x;
    5dde:	4a12      	ldr	r2, [pc, #72]	; (5e28 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x260>)
    5de0:	613a      	str	r2, [r7, #16]
	size_t print(int n)				{ return print((long)n); }
    5de2:	8819      	ldrh	r1, [r3, #0]
    5de4:	4806      	ldr	r0, [pc, #24]	; (5e00 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x238>)
    5de6:	f008 f937 	bl	e058 <Print::print(long)>
    5dea:	e734      	b.n	5c56 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x8e>
    5dec:	2200      	movs	r2, #0
    5dee:	e7ca      	b.n	5d86 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x1be>
      val -= step;
    5df0:	b29b      	uxth	r3, r3
    5df2:	1ad2      	subs	r2, r2, r3
  if(updated) {
    5df4:	e786      	b.n	5d04 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x13c>
    5df6:	2349      	movs	r3, #73	; 0x49
    5df8:	461a      	mov	r2, r3
    5dfa:	e7b4      	b.n	5d66 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)+0x19e>
    5dfc:	b21642c9 	.word	0xb21642c9
    5e00:	1fff9c74 	.word	0x1fff9c74
    5e04:	00020044 	.word	0x00020044
    5e08:	00013834 	.word	0x00013834
    5e0c:	1fff9c22 	.word	0x1fff9c22
    5e10:	1fff9c6c 	.word	0x1fff9c6c
    5e14:	000150bc 	.word	0x000150bc
    5e18:	00230035 	.word	0x00230035
    5e1c:	00013838 	.word	0x00013838
    5e20:	1fff9c2a 	.word	0x1fff9c2a
    5e24:	1fff9c70 	.word	0x1fff9c70
    5e28:	00020068 	.word	0x00020068

00005e2c <updateAdjustMenu(unsigned long, KeyState&, bool, bool)>:

int updateAdjustMenu(uint32_t timeNow, KeyState &input, bool firstRun, bool drawSensor) {
    5e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool redraw = false;
  int result = 0; 

  const AdjustMenuEntry *currentMenu = adjustMenuEntries[adjustOption];
    5e30:	4f59      	ldr	r7, [pc, #356]	; (5f98 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x16c>)
    5e32:	4d5a      	ldr	r5, [pc, #360]	; (5f9c <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x170>)

  uint8_t buttons = input.changed ? input.current : 0;
    5e34:	f891 a001 	ldrb.w	sl, [r1, #1]
int updateAdjustMenu(uint32_t timeNow, KeyState &input, bool firstRun, bool drawSensor) {
    5e38:	4698      	mov	r8, r3
  const AdjustMenuEntry *currentMenu = adjustMenuEntries[adjustOption];
    5e3a:	f9b7 3000 	ldrsh.w	r3, [r7]
int updateAdjustMenu(uint32_t timeNow, KeyState &input, bool firstRun, bool drawSensor) {
    5e3e:	b083      	sub	sp, #12
  const AdjustMenuEntry *currentMenu = adjustMenuEntries[adjustOption];
    5e40:	f855 9023 	ldr.w	r9, [r5, r3, lsl #2]
int updateAdjustMenu(uint32_t timeNow, KeyState &input, bool firstRun, bool drawSensor) {
    5e44:	4606      	mov	r6, r0
  uint8_t buttons = input.changed ? input.current : 0;
    5e46:	f1ba 0f00 	cmp.w	sl, #0
    5e4a:	d001      	beq.n	5e50 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x24>
    5e4c:	f891 a000 	ldrb.w	sl, [r1]

  if(firstRun || refreshScreen) {
    5e50:	f8df b14c 	ldr.w	fp, [pc, #332]	; 5fa0 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x174>
    5e54:	b91a      	cbnz	r2, 5e5e <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x32>
    5e56:	f89b 3000 	ldrb.w	r3, [fp]
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	d038      	beq.n	5ed0 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0xa4>
    adjustCurrent = 0;
    5e5e:	4d51      	ldr	r5, [pc, #324]	; (5fa4 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x178>)
    5e60:	2300      	movs	r3, #0
    refreshScreen = false;
    drawAdjustMenu(currentMenu);
    5e62:	4648      	mov	r0, r9
    adjustCurrent = 0;
    5e64:	802b      	strh	r3, [r5, #0]
    refreshScreen = false;
    5e66:	f88b 3000 	strb.w	r3, [fp]
    drawAdjustMenu(currentMenu);
    5e6a:	f7ff fd8d 	bl	5988 <drawAdjustMenu(AdjustMenuEntry const*)>
    // the sensor pixel stuff should be refactored (to work again)
    forcePix = 1;
    5e6e:	4a4e      	ldr	r2, [pc, #312]	; (5fa8 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x17c>)
    sensorPixelPos1 = -1; // Force draw of sensor pixels
    5e70:	4b4e      	ldr	r3, [pc, #312]	; (5fac <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x180>)
  }

  if(adjustCurrent == 0) {
    5e72:	f9b5 4000 	ldrsh.w	r4, [r5]
    forcePix = 1;
    5e76:	2101      	movs	r1, #1
    5e78:	7011      	strb	r1, [r2, #0]
    sensorPixelPos1 = -1; // Force draw of sensor pixels
    5e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5e7e:	801a      	strh	r2, [r3, #0]
  if(adjustCurrent == 0) {
    5e80:	b35c      	cbz	r4, 5eda <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0xae>
    }

    if(save && currentMenu->saveFunc)
      currentMenu->saveFunc(*currentMenu);

  } else if( adjustCurrent == 1) {
    5e82:	2c01      	cmp	r4, #1
    redraw |= handleInput(currentMenu, timeNow, buttons, &pos1, 20, 0);
    5e84:	4652      	mov	r2, sl
    5e86:	4631      	mov	r1, r6
  } else if( adjustCurrent == 1) {
    5e88:	d047      	beq.n	5f1a <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0xee>
  } else {
    redraw |= handleInput(currentMenu, timeNow, buttons, &pos2, 50, 1);
    5e8a:	2332      	movs	r3, #50	; 0x32
    5e8c:	2401      	movs	r4, #1
    5e8e:	e9cd 3400 	strd	r3, r4, [sp]
    5e92:	4648      	mov	r0, r9
    5e94:	4b46      	ldr	r3, [pc, #280]	; (5fb0 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x184>)
    5e96:	f7ff fe97 	bl	5bc8 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)>
  int result = 0; 
    5e9a:	2600      	movs	r6, #0
    redraw |= handleInput(currentMenu, timeNow, buttons, &pos2, 50, 1);
    5e9c:	4604      	mov	r4, r0
  }

  // Keep adjustCurrent in range
  if( (adjustCurrent > 2) || ((adjustCurrent == 2) && (currentMenu->entries[1].value == nullptr)))
    5e9e:	f9b5 3000 	ldrsh.w	r3, [r5]
    5ea2:	2b02      	cmp	r3, #2
    5ea4:	dd46      	ble.n	5f34 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x108>
    adjustCurrent = 0;
    5ea6:	2300      	movs	r3, #0
    5ea8:	802b      	strh	r3, [r5, #0]

  // Keep adjust option in range.
  if(adjustOption < 0)
    5eaa:	f9b7 3000 	ldrsh.w	r3, [r7]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	db49      	blt.n	5f46 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x11a>
    adjustOption = numAdjustEntries-1;
  else if (adjustOption >= numAdjustEntries)
    5eb2:	2b05      	cmp	r3, #5
    adjustOption = 0;
    5eb4:	bfc4      	itt	gt
    5eb6:	2300      	movgt	r3, #0
    5eb8:	803b      	strhgt	r3, [r7, #0]


  if(drawSensor) {
    5eba:	f1b8 0f00 	cmp.w	r8, #0
    5ebe:	d147      	bne.n	5f50 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x124>
    plotSensorPixels();
  }

  if(result >= 0)
    result = redraw;
    5ec0:	2e00      	cmp	r6, #0

  return result;
}
    5ec2:	bf0c      	ite	eq
    5ec4:	4620      	moveq	r0, r4
    5ec6:	f04f 30ff 	movne.w	r0, #4294967295
    5eca:	b003      	add	sp, #12
    5ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ed0:	4d34      	ldr	r5, [pc, #208]	; (5fa4 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x178>)
  if(adjustCurrent == 0) {
    5ed2:	f9b5 4000 	ldrsh.w	r4, [r5]
    5ed6:	2c00      	cmp	r4, #0
    5ed8:	d1d3      	bne.n	5e82 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x56>
  if ((timeNow - cursorBlinkTime) > cursorBlinkInterval) {
    5eda:	4b36      	ldr	r3, [pc, #216]	; (5fb4 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x188>)
    5edc:	4a36      	ldr	r2, [pc, #216]	; (5fb8 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x18c>)
    5ede:	6819      	ldr	r1, [r3, #0]
    5ee0:	6813      	ldr	r3, [r2, #0]
    5ee2:	1af3      	subs	r3, r6, r3
    5ee4:	428b      	cmp	r3, r1
    5ee6:	d90a      	bls.n	5efe <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0xd2>
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    5ee8:	4b34      	ldr	r3, [pc, #208]	; (5fbc <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x190>)
    5eea:	7818      	ldrb	r0, [r3, #0]
    return true;
    5eec:	2401      	movs	r4, #1
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    5eee:	1b00      	subs	r0, r0, r4
    5ef0:	bf18      	it	ne
    5ef2:	2001      	movne	r0, #1
    5ef4:	7018      	strb	r0, [r3, #0]
    drawAdjCursor(cursorNow);
    5ef6:	f7ff f983 	bl	5200 <drawAdjCursor(unsigned char)>
    cursorBlinkTime = timeNow;
    5efa:	4a2f      	ldr	r2, [pc, #188]	; (5fb8 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x18c>)
    5efc:	6016      	str	r6, [r2, #0]
    if( buttons == BTN_DOWN ) {
    5efe:	f1ba 0f01 	cmp.w	sl, #1
    5f02:	d036      	beq.n	5f72 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x146>
    else if ( buttons == BTN_UP ) {
    5f04:	f1ba 0f04 	cmp.w	sl, #4
    5f08:	d025      	beq.n	5f56 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x12a>
    else if ( buttons == BTN_ENTER ) {
    5f0a:	f1ba 0f02 	cmp.w	sl, #2
    5f0e:	d036      	beq.n	5f7e <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x152>
    else if (buttons == BTN_MENU ) {
    5f10:	f1ba 0f08 	cmp.w	sl, #8
    5f14:	d037      	beq.n	5f86 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x15a>
  int result = 0; 
    5f16:	2600      	movs	r6, #0
    5f18:	e7c1      	b.n	5e9e <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x72>
    redraw |= handleInput(currentMenu, timeNow, buttons, &pos1, 20, 0);
    5f1a:	2314      	movs	r3, #20
    5f1c:	2600      	movs	r6, #0
    5f1e:	9300      	str	r3, [sp, #0]
    5f20:	9601      	str	r6, [sp, #4]
    5f22:	4b27      	ldr	r3, [pc, #156]	; (5fc0 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x194>)
    5f24:	4648      	mov	r0, r9
    5f26:	f7ff fe4f 	bl	5bc8 <handleInput(AdjustMenuEntry const*, unsigned long, unsigned char, unsigned short*, int, int)>
  if( (adjustCurrent > 2) || ((adjustCurrent == 2) && (currentMenu->entries[1].value == nullptr)))
    5f2a:	f9b5 3000 	ldrsh.w	r3, [r5]
    5f2e:	2b02      	cmp	r3, #2
    redraw |= handleInput(currentMenu, timeNow, buttons, &pos1, 20, 0);
    5f30:	4604      	mov	r4, r0
  if( (adjustCurrent > 2) || ((adjustCurrent == 2) && (currentMenu->entries[1].value == nullptr)))
    5f32:	dcb8      	bgt.n	5ea6 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x7a>
    5f34:	d1b9      	bne.n	5eaa <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x7e>
    5f36:	f8d9 300c 	ldr.w	r3, [r9, #12]
    5f3a:	2b00      	cmp	r3, #0
    5f3c:	d0b3      	beq.n	5ea6 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x7a>
  if(adjustOption < 0)
    5f3e:	f9b7 3000 	ldrsh.w	r3, [r7]
    5f42:	2b00      	cmp	r3, #0
    5f44:	dab5      	bge.n	5eb2 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x86>
    adjustOption = numAdjustEntries-1;
    5f46:	2305      	movs	r3, #5
    5f48:	803b      	strh	r3, [r7, #0]
  if(drawSensor) {
    5f4a:	f1b8 0f00 	cmp.w	r8, #0
    5f4e:	d0b7      	beq.n	5ec0 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x94>
    plotSensorPixels();
    5f50:	f7ff fb60 	bl	5614 <plotSensorPixels()>
    5f54:	e7b4      	b.n	5ec0 <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x94>
      adjustOption -= 1;
    5f56:	883b      	ldrh	r3, [r7, #0]
    5f58:	3b01      	subs	r3, #1
    5f5a:	b21b      	sxth	r3, r3
    5f5c:	803b      	strh	r3, [r7, #0]
    if(save && currentMenu->saveFunc)
    5f5e:	f8d9 3014 	ldr.w	r3, [r9, #20]
      refreshScreen = 1;
    5f62:	2201      	movs	r2, #1
    5f64:	f88b 2000 	strb.w	r2, [fp]
    if(save && currentMenu->saveFunc)
    5f68:	b13b      	cbz	r3, 5f7a <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x14e>
    5f6a:	2600      	movs	r6, #0
      currentMenu->saveFunc(*currentMenu);
    5f6c:	4648      	mov	r0, r9
    5f6e:	4798      	blx	r3
    5f70:	e795      	b.n	5e9e <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x72>
      adjustOption += 1;
    5f72:	883b      	ldrh	r3, [r7, #0]
    5f74:	3301      	adds	r3, #1
    5f76:	b21b      	sxth	r3, r3
    if(save && currentMenu->saveFunc)
    5f78:	e7f0      	b.n	5f5c <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x130>
    5f7a:	461e      	mov	r6, r3
    5f7c:	e78f      	b.n	5e9e <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x72>
      adjustCurrent = 1;
    5f7e:	2301      	movs	r3, #1
    5f80:	802b      	strh	r3, [r5, #0]
  int result = 0; 
    5f82:	2600      	movs	r6, #0
    5f84:	e791      	b.n	5eaa <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x7e>
    if(save && currentMenu->saveFunc)
    5f86:	f8d9 3014 	ldr.w	r3, [r9, #20]
      adjustCurrent = 0;
    5f8a:	2200      	movs	r2, #0
    5f8c:	802a      	strh	r2, [r5, #0]
      result = -1;
    5f8e:	f04f 36ff 	mov.w	r6, #4294967295
    if(save && currentMenu->saveFunc)
    5f92:	2b00      	cmp	r3, #0
    5f94:	d1ea      	bne.n	5f6c <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x140>
    5f96:	e788      	b.n	5eaa <updateAdjustMenu(unsigned long, KeyState&, bool, bool)+0x7e>
    5f98:	1fff9c20 	.word	0x1fff9c20
    5f9c:	1fff8e84 	.word	0x1fff8e84
    5fa0:	1fff9c24 	.word	0x1fff9c24
    5fa4:	1fff9c22 	.word	0x1fff9c22
    5fa8:	1fff9c2a 	.word	0x1fff9c2a
    5fac:	1fff8e80 	.word	0x1fff8e80
    5fb0:	1fff9c28 	.word	0x1fff9c28
    5fb4:	000150bc 	.word	0x000150bc
    5fb8:	1fff9c6c 	.word	0x1fff9c6c
    5fbc:	1fff9c70 	.word	0x1fff9c70
    5fc0:	1fff9c26 	.word	0x1fff9c26

00005fc4 <statusLedOn()>:
#include "globals.h"
#include "config.h"

// Do things with status LED.
void statusLedOn() {
  digitalWrite(statusLedPin, HIGH);
    5fc4:	2101      	movs	r1, #1
    5fc6:	200d      	movs	r0, #13
    5fc8:	f008 be90 	b.w	ecec <digitalWrite>

00005fcc <statusLedOff()>:
  analogWrite(sLedPin, SPCKEY_LED_BRIGHTNESS);
#endif
}

void statusLedOff() {
  digitalWrite(statusLedPin, LOW);
    5fcc:	2100      	movs	r1, #0
    5fce:	200d      	movs	r0, #13
    5fd0:	f008 be8c 	b.w	ecec <digitalWrite>

00005fd4 <statusLed(bool)>:
#if defined(SEAMUS)
  analogWrite(sLedPin, 0);
#endif
}

void statusLed(bool state) {
    5fd4:	4601      	mov	r1, r0
  digitalWrite(statusLedPin, state);
    5fd6:	200d      	movs	r0, #13
    5fd8:	f008 be88 	b.w	ecec <digitalWrite>

00005fdc <statusLedFlip()>:
#if defined(SEAMUS)
  analogWrite(sLedPin, state*SPCKEY_LED_BRIGHTNESS);
#endif
}

void statusLedFlip() {
    5fdc:	b508      	push	{r3, lr}
  digitalWrite(statusLedPin, !digitalRead(statusLedPin));
    5fde:	200d      	movs	r0, #13
    5fe0:	f008 feaa 	bl	ed38 <digitalRead>
    5fe4:	fab0 f180 	clz	r1, r0
#if defined(SEAMUS)
  if (digitalRead(statusLedPin)) analogWrite(sLedPin, SPCKEY_LED_BRIGHTNESS); else analogWrite(sLedPin, 0);
#endif
}
    5fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(statusLedPin, !digitalRead(statusLedPin));
    5fec:	0949      	lsrs	r1, r1, #5
    5fee:	200d      	movs	r0, #13
    5ff0:	f008 be7c 	b.w	ecec <digitalWrite>

00005ff4 <statusLedFlash(unsigned short)>:

void statusLedFlash(uint16_t delayTime) {
    5ff4:	b510      	push	{r4, lr}
    5ff6:	4604      	mov	r4, r0
  digitalWrite(statusLedPin, LOW);
    5ff8:	2100      	movs	r1, #0
  statusLedOff();
  delay(delayTime/2);
    5ffa:	0864      	lsrs	r4, r4, #1
  digitalWrite(statusLedPin, LOW);
    5ffc:	200d      	movs	r0, #13
    5ffe:	f008 fe75 	bl	ecec <digitalWrite>
  delay(delayTime/2);
    6002:	4620      	mov	r0, r4
    6004:	f008 ff02 	bl	ee0c <delay>
  digitalWrite(statusLedPin, HIGH);
    6008:	200d      	movs	r0, #13
    600a:	2101      	movs	r1, #1
    600c:	f008 fe6e 	bl	ecec <digitalWrite>
  statusLedOn();
  delay(delayTime/2);
    6010:	4620      	mov	r0, r4
}
    6012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(delayTime/2);
    6016:	f008 bef9 	b.w	ee0c <delay>
    601a:	bf00      	nop

0000601c <updateSensorLEDs()>:
void statusLedBlink() {
  statusLedFlash(300);
  statusLedFlash(300);
}

void updateSensorLEDs() {
    601c:	b508      	push	{r3, lr}
  if (breathLevel > breathThrVal) { // breath indicator LED, labeled "B" on PCB
    601e:	4a31      	ldr	r2, [pc, #196]	; (60e4 <updateSensorLEDs()+0xc8>)
    6020:	4b31      	ldr	r3, [pc, #196]	; (60e8 <updateSensorLEDs()+0xcc>)
    6022:	6812      	ldr	r2, [r2, #0]
    6024:	881b      	ldrh	r3, [r3, #0]
    6026:	4293      	cmp	r3, r2
    6028:	da1a      	bge.n	6060 <updateSensorLEDs()+0x44>
    //analogWrite(bLedPin, map(breathLevel,0,4096,5,breathLedBrightness));
    analogWrite(bLedPin, map(constrain(breathLevel, breathThrVal, breathMaxVal), breathThrVal, breathMaxVal, MIN_LED_BRIGHTNESS, BREATH_LED_BRIGHTNESS));
    602a:	4930      	ldr	r1, [pc, #192]	; (60ec <updateSensorLEDs()+0xd0>)
    602c:	8808      	ldrh	r0, [r1, #0]
	if (in_range == 0) return out_min + out_range / 2;
    602e:	ebb0 0c03 	subs.w	ip, r0, r3
    6032:	d053      	beq.n	60dc <updateSensorLEDs()+0xc0>
		num += in_range / 2;
    6034:	eb0c 71dc 	add.w	r1, ip, ip, lsr #31
	long num = (x - in_min) * out_range;
    6038:	4282      	cmp	r2, r0
    603a:	bfd4      	ite	le
    603c:	ebc3 0302 	rsble	r3, r3, r2
    6040:	ebc3 0300 	rsbgt	r3, r3, r0
		num += in_range / 2;
    6044:	1049      	asrs	r1, r1, #1
	long num = (x - in_min) * out_range;
    6046:	f240 2253 	movw	r2, #595	; 0x253
		num += in_range / 2;
    604a:	fb02 1103 	mla	r1, r2, r3, r1
		if (in_range * num < 0) return result - 1;
    604e:	fb01 f30c 	mul.w	r3, r1, ip
    6052:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    6054:	fb91 f1fc 	sdiv	r1, r1, ip
    6058:	bfac      	ite	ge
    605a:	3105      	addge	r1, #5
		if (in_range * num < 0) return result - 1;
    605c:	3104      	addlt	r1, #4
    605e:	e000      	b.n	6062 <updateSensorLEDs()+0x46>
  } else {
    analogWrite(bLedPin, 0);
    6060:	2100      	movs	r1, #0
    6062:	200a      	movs	r0, #10
    6064:	f008 fcb8 	bl	e9d8 <analogWrite>
  }
  if (portIsOn) { // portamento indicator LED, labeled "P" on PCB
    6068:	4b21      	ldr	r3, [pc, #132]	; (60f0 <updateSensorLEDs()+0xd4>)
    606a:	7819      	ldrb	r1, [r3, #0]
    606c:	b351      	cbz	r1, 60c4 <updateSensorLEDs()+0xa8>
    //analogWrite(pLedPin, map(biteSensor,0,4096,5,portamLedBrightness));
    analogWrite(pLedPin, map(constrain(oldport, 0, 127), 0, 127, MIN_LED_BRIGHTNESS, PORTAM_LED_BRIGHTNESS));
    606e:	4b21      	ldr	r3, [pc, #132]	; (60f4 <updateSensorLEDs()+0xd8>)
	long result = num / in_range + out_min;
    6070:	4921      	ldr	r1, [pc, #132]	; (60f8 <updateSensorLEDs()+0xdc>)
	long num = (x - in_min) * out_range;
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	f240 1227 	movw	r2, #295	; 0x127
    6078:	f383 0307 	usat	r3, #7, r3
    607c:	fb02 f303 	mul.w	r3, r2, r3
		num += in_range / 2;
    6080:	333f      	adds	r3, #63	; 0x3f
	long result = num / in_range + out_min;
    6082:	fba1 2103 	umull	r2, r1, r1, r3
    6086:	1a5b      	subs	r3, r3, r1
    6088:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    608c:	0989      	lsrs	r1, r1, #6
    608e:	3105      	adds	r1, #5
    6090:	2009      	movs	r0, #9
    6092:	f008 fca1 	bl	e9d8 <analogWrite>
  } else {
    analogWrite(pLedPin, 0);
  }
  #if defined(NURAD)
  if (exSensorIndicator){
    6096:	4b19      	ldr	r3, [pc, #100]	; (60fc <updateSensorLEDs()+0xe0>)
    6098:	6819      	ldr	r1, [r3, #0]
    609a:	b1d1      	cbz	r1, 60d2 <updateSensorLEDs()+0xb6>
	long num = (x - in_min) * out_range;
    609c:	f381 0307 	usat	r3, #7, r1
    60a0:	f240 1227 	movw	r2, #295	; 0x127
    60a4:	fb02 f303 	mul.w	r3, r2, r3
	long result = num / in_range + out_min;
    60a8:	4913      	ldr	r1, [pc, #76]	; (60f8 <updateSensorLEDs()+0xdc>)
		num += in_range / 2;
    60aa:	333f      	adds	r3, #63	; 0x3f
	long result = num / in_range + out_min;
    60ac:	fba1 2103 	umull	r2, r1, r1, r3
    60b0:	1a5b      	subs	r3, r3, r1
    60b2:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    60b6:	0989      	lsrs	r1, r1, #6
    analogWrite(eLedPin, map(constrain(exSensorIndicator, 0, 127), 0, 127, MIN_LED_BRIGHTNESS, EXTCON_LED_BRIGHTNESS));
  } else {
    analogWrite(eLedPin, 0);
  }
  #endif
}
    60b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    analogWrite(eLedPin, map(constrain(exSensorIndicator, 0, 127), 0, 127, MIN_LED_BRIGHTNESS, EXTCON_LED_BRIGHTNESS));
    60bc:	3105      	adds	r1, #5
    60be:	2016      	movs	r0, #22
    60c0:	f008 bc8a 	b.w	e9d8 <analogWrite>
    analogWrite(pLedPin, 0);
    60c4:	2009      	movs	r0, #9
    60c6:	f008 fc87 	bl	e9d8 <analogWrite>
  if (exSensorIndicator){
    60ca:	4b0c      	ldr	r3, [pc, #48]	; (60fc <updateSensorLEDs()+0xe0>)
    60cc:	6819      	ldr	r1, [r3, #0]
    60ce:	2900      	cmp	r1, #0
    60d0:	d1e4      	bne.n	609c <updateSensorLEDs()+0x80>
}
    60d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    analogWrite(eLedPin, 0);
    60d6:	2016      	movs	r0, #22
    60d8:	f008 bc7e 	b.w	e9d8 <analogWrite>
	if (in_range == 0) return out_min + out_range / 2;
    60dc:	f44f 7197 	mov.w	r1, #302	; 0x12e
    60e0:	e7bf      	b.n	6062 <updateSensorLEDs()+0x46>
    60e2:	bf00      	nop
    60e4:	1fff9a48 	.word	0x1fff9a48
    60e8:	1fff9a4e 	.word	0x1fff9a4e
    60ec:	1fff9a4c 	.word	0x1fff9a4c
    60f0:	1fff9b82 	.word	0x1fff9b82
    60f4:	1fff9b58 	.word	0x1fff9b58
    60f8:	02040811 	.word	0x02040811
    60fc:	1fff9a90 	.word	0x1fff9a90

00006100 <ledMeter(unsigned char)>:

void ledMeter(byte indicatedValue){
  analogWrite(bLedPin, map(constrain(indicatedValue, 0, 127), 0, 127, 0, BREATH_LED_BRIGHTNESS)); // full glow at maximum value
    6100:	287f      	cmp	r0, #127	; 0x7f
    6102:	bfa8      	it	ge
    6104:	207f      	movge	r0, #127	; 0x7f
	long num = (x - in_min) * out_range;
    6106:	f44f 7316 	mov.w	r3, #600	; 0x258
    610a:	fb00 f303 	mul.w	r3, r0, r3
	long result = num / in_range + out_min;
    610e:	4910      	ldr	r1, [pc, #64]	; (6150 <ledMeter(unsigned char)+0x50>)
		num += in_range / 2;
    6110:	333f      	adds	r3, #63	; 0x3f
	long result = num / in_range + out_min;
    6112:	fba1 2103 	umull	r2, r1, r1, r3
    6116:	1a5b      	subs	r3, r3, r1
    6118:	eb01 0153 	add.w	r1, r1, r3, lsr #1
void ledMeter(byte indicatedValue){
    611c:	b510      	push	{r4, lr}
  analogWrite(bLedPin, map(constrain(indicatedValue, 0, 127), 0, 127, 0, BREATH_LED_BRIGHTNESS)); // full glow at maximum value
    611e:	0989      	lsrs	r1, r1, #6
    6120:	4604      	mov	r4, r0
    6122:	200a      	movs	r0, #10
    6124:	f008 fc58 	bl	e9d8 <analogWrite>
	long num = (x - in_min) * out_range;
    6128:	f1a4 037f 	sub.w	r3, r4, #127	; 0x7f
    612c:	f44f 7296 	mov.w	r2, #300	; 0x12c
    6130:	fb02 f303 	mul.w	r3, r2, r3
	long result = num / in_range + out_min;
    6134:	4907      	ldr	r1, [pc, #28]	; (6154 <ledMeter(unsigned char)+0x54>)
		num += in_range / 2;
    6136:	3b3f      	subs	r3, #63	; 0x3f
	long result = num / in_range + out_min;
    6138:	fb81 2103 	smull	r2, r1, r1, r3
    613c:	4419      	add	r1, r3
    613e:	17db      	asrs	r3, r3, #31
  analogWrite(pLedPin, map(constrain(indicatedValue, 0, 127), 127, 0, 0, PORTAM_LED_BRIGHTNESS)); // full glow at minimum value
}
    6140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(pLedPin, map(constrain(indicatedValue, 0, 127), 127, 0, 0, PORTAM_LED_BRIGHTNESS)); // full glow at minimum value
    6144:	eba3 11a1 	sub.w	r1, r3, r1, asr #6
    6148:	2009      	movs	r0, #9
    614a:	f008 bc45 	b.w	e9d8 <analogWrite>
    614e:	bf00      	nop
    6150:	02040811 	.word	0x02040811
    6154:	81020409 	.word	0x81020409

00006158 <rotatorCSave(MenuEntrySub const&)>:

static void rotatorBSave(const MenuEntrySub& __unused sub) {
  saveRotatorSetting(&rotations_b, ROTB1_ADDR);
}

static void rotatorCSave(const MenuEntrySub& __unused sub) {
    6158:	b538      	push	{r3, r4, r5, lr}
    615a:	4d09      	ldr	r5, [pc, #36]	; (6180 <rotatorCSave(MenuEntrySub const&)+0x28>)
    615c:	2482      	movs	r4, #130	; 0x82
    stored = readSetting(settingAddr+2*i);
    615e:	4620      	mov	r0, r4
    6160:	f004 fbe4 	bl	a92c <readSetting(unsigned short)>
    if(stored != rotator->rotations[i])
    6164:	f835 1f02 	ldrh.w	r1, [r5, #2]!
    6168:	b200      	sxth	r0, r0
    616a:	4288      	cmp	r0, r1
      writeSetting(settingAddr+2*i,(rotator->rotations[i]));
    616c:	4620      	mov	r0, r4
    if(stored != rotator->rotations[i])
    616e:	d001      	beq.n	6174 <rotatorCSave(MenuEntrySub const&)+0x1c>
      writeSetting(settingAddr+2*i,(rotator->rotations[i]));
    6170:	f003 f8b2 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  for(int i = 0; i < 4; ++i) {
    6174:	3402      	adds	r4, #2
    6176:	b2a4      	uxth	r4, r4
    6178:	2c8a      	cmp	r4, #138	; 0x8a
    617a:	d1f0      	bne.n	615e <rotatorCSave(MenuEntrySub const&)+0x6>
  saveRotatorSetting(&rotations_c, ROTC1_ADDR);
}
    617c:	bd38      	pop	{r3, r4, r5, pc}
    617e:	bf00      	nop
    6180:	1fff9bb8 	.word	0x1fff9bb8

00006184 <parallelSave(MenuEntrySub const&)>:
static void parallelCOptionGet(SubMenuRef __unused, char *out, const char** __unused unit) {
  numToString(rotations_c.parallel-24, out, true);
}

static void parallelSave(SubMenuRef __unused) {
  writeSetting(PARAL_ADDR, rotations_a.parallel);
    6184:	4b02      	ldr	r3, [pc, #8]	; (6190 <parallelSave(MenuEntrySub const&)+0xc>)
    6186:	2044      	movs	r0, #68	; 0x44
    6188:	8819      	ldrh	r1, [r3, #0]
    618a:	f003 b8a5 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    618e:	bf00      	nop
    6190:	1fff9ba0 	.word	0x1fff9ba0

00006194 <parallelBSave(MenuEntrySub const&)>:
}

static void parallelBSave(SubMenuRef __unused) {
  writeSetting(PARAB_ADDR, rotations_b.parallel);
    6194:	4b02      	ldr	r3, [pc, #8]	; (61a0 <parallelBSave(MenuEntrySub const&)+0xc>)
    6196:	2076      	movs	r0, #118	; 0x76
    6198:	8819      	ldrh	r1, [r3, #0]
    619a:	f003 b89d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    619e:	bf00      	nop
    61a0:	1fff9bac 	.word	0x1fff9bac

000061a4 <parallelCSave(MenuEntrySub const&)>:
}

static void parallelCSave(SubMenuRef __unused) {
  writeSetting(PARAC_ADDR, rotations_c.parallel);
    61a4:	4b02      	ldr	r3, [pc, #8]	; (61b0 <parallelCSave(MenuEntrySub const&)+0xc>)
    61a6:	2080      	movs	r0, #128	; 0x80
    61a8:	8819      	ldrh	r1, [r3, #0]
    61aa:	f003 b895 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    61ae:	bf00      	nop
    61b0:	1fff9bb8 	.word	0x1fff9bb8

000061b4 <rotatorPrioSave(MenuEntrySub const&)>:
    if (priority) strncpy(out, "LO", 4);
    else strncpy(out, "HI", 4);
}

static void rotatorPrioSave(SubMenuRef __unused) {
  writeSetting(PRIO_ADDR,priority);
    61b4:	4b02      	ldr	r3, [pc, #8]	; (61c0 <rotatorPrioSave(MenuEntrySub const&)+0xc>)
    61b6:	204e      	movs	r0, #78	; 0x4e
    61b8:	8819      	ldrh	r1, [r3, #0]
    61ba:	f003 b88d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    61be:	bf00      	nop
    61c0:	1fff9b90 	.word	0x1fff9b90

000061c4 <fwcDrop2Save(MenuEntrySub const&)>:
    if (fwcDrop2) strncpy(out, "ON", 4);
    else strncpy(out, "OFF", 4);
}

static void fwcDrop2Save(SubMenuRef __unused) {
  writeSetting(FWCDP2_ADDR,fwcDrop2);
    61c4:	4b02      	ldr	r3, [pc, #8]	; (61d0 <fwcDrop2Save(MenuEntrySub const&)+0xc>)
    61c6:	209a      	movs	r0, #154	; 0x9a
    61c8:	8819      	ldrh	r1, [r3, #0]
    61ca:	f003 b885 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    61ce:	bf00      	nop
    61d0:	1fff9aba 	.word	0x1fff9aba

000061d4 <fwcLockHSave(MenuEntrySub const&)>:
  writeSetting(FWCLCH_ADDR,fwcLockH);
    61d4:	4b02      	ldr	r3, [pc, #8]	; (61e0 <fwcLockHSave(MenuEntrySub const&)+0xc>)
    61d6:	2098      	movs	r0, #152	; 0x98
    61d8:	8819      	ldrh	r1, [r3, #0]
    61da:	f003 b87d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    61de:	bf00      	nop
    61e0:	1fff9abc 	.word	0x1fff9abc

000061e4 <fwcTypeSave(MenuEntrySub const&)>:
  writeSetting(FWCTYPE_ADDR,fwcType);
    61e4:	4b02      	ldr	r3, [pc, #8]	; (61f0 <fwcTypeSave(MenuEntrySub const&)+0xc>)
    61e6:	208c      	movs	r0, #140	; 0x8c
    61e8:	8819      	ldrh	r1, [r3, #0]
    61ea:	f003 b875 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    61ee:	bf00      	nop
    61f0:	1fff9abe 	.word	0x1fff9abe

000061f4 <hmzLimitSave(MenuEntrySub const&)>:
static void hmzLimitOptionGet(SubMenuRef sub, char *out, const char** __unused unit) {
  numToString((*sub.valuePtr), out, false);
}

static void hmzLimitSave(SubMenuRef __unused) {
  writeSetting(HMZLIMIT_ADDR,hmzLimit);
    61f4:	4b02      	ldr	r3, [pc, #8]	; (6200 <hmzLimitSave(MenuEntrySub const&)+0xc>)
    61f6:	209c      	movs	r0, #156	; 0x9c
    61f8:	8819      	ldrh	r1, [r3, #0]
    61fa:	f003 b86d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    61fe:	bf00      	nop
    6200:	1fff9aee 	.word	0x1fff9aee

00006204 <otfKeySave(MenuEntrySub const&)>:
    if (otfKey) strncpy(out, "ON", 4);
    else strncpy(out, "OFF", 4);
}

static void otfKeySave(SubMenuRef __unused) {
  writeSetting(OTFKEY_ADDR,otfKey);
    6204:	4b02      	ldr	r3, [pc, #8]	; (6210 <otfKeySave(MenuEntrySub const&)+0xc>)
    6206:	20a0      	movs	r0, #160	; 0xa0
    6208:	8819      	ldrh	r1, [r3, #0]
    620a:	f003 b865 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    620e:	bf00      	nop
    6210:	1fff9b5e 	.word	0x1fff9b5e

00006214 <hmzKeySave(MenuEntrySub const&)>:
  writeSetting(HMZKEY_ADDR,hmzKey);
    6214:	4b02      	ldr	r3, [pc, #8]	; (6220 <hmzKeySave(MenuEntrySub const&)+0xc>)
    6216:	2096      	movs	r0, #150	; 0x96
    6218:	8819      	ldrh	r1, [r3, #0]
    621a:	f003 b85d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    621e:	bf00      	nop
    6220:	1fff9aec 	.word	0x1fff9aec

00006224 <polySelectSave(MenuEntrySub const&)>:
  writeSetting(POLYSEL_ADDR,polySelect);
    6224:	4b02      	ldr	r3, [pc, #8]	; (6230 <polySelectSave(MenuEntrySub const&)+0xc>)
    6226:	208a      	movs	r0, #138	; 0x8a
    6228:	8819      	ldrh	r1, [r3, #0]
    622a:	f003 b855 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    622e:	bf00      	nop
    6230:	1fff9b80 	.word	0x1fff9b80

00006234 <cvScaleMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
const MenuEntrySub cvScaleMenu = {
  MenuType::ESub, "CV SCALE", "SCALING", &cvScale, 1, 199, MenuEntryFlags::ENone,
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    numToString(cvScale-100, out, true);
  },
  [](SubMenuRef __unused) { writeSetting(CVSCALE_ADDR,cvScale); }
    6234:	4b02      	ldr	r3, [pc, #8]	; (6240 <cvScaleMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6236:	20b6      	movs	r0, #182	; 0xb6
    6238:	8819      	ldrh	r1, [r3, #0]
    623a:	f003 b84d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    623e:	bf00      	nop
    6240:	1fff9a76 	.word	0x1fff9a76

00006244 <cvTuneMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused) { writeSetting(CVTUNE_ADDR,cvTune); }
    6244:	4b02      	ldr	r3, [pc, #8]	; (6250 <cvTuneMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6246:	20b4      	movs	r0, #180	; 0xb4
    6248:	8819      	ldrh	r1, [r3, #0]
    624a:	f003 b845 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    624e:	bf00      	nop
    6250:	1fff9a80 	.word	0x1fff9a80

00006254 <dacModeMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused) { writeSetting(DAC_MODE_ADDR, dacMode); }
    6254:	4b02      	ldr	r3, [pc, #8]	; (6260 <dacModeMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6256:	2064      	movs	r0, #100	; 0x64
    6258:	8819      	ldrh	r1, [r3, #0]
    625a:	f003 b83d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    625e:	bf00      	nop
    6260:	1fff9a84 	.word	0x1fff9a84

00006264 <midiSaveFunc(MenuEntrySub const&)>:
static void midiSaveFunc(const MenuEntrySub & __unused sub) { writeSetting(MIDI_ADDR, MIDIchannel); }
    6264:	4b02      	ldr	r3, [pc, #8]	; (6270 <midiSaveFunc(MenuEntrySub const&)+0xc>)
    6266:	2010      	movs	r0, #16
    6268:	8819      	ldrh	r1, [r3, #0]
    626a:	f003 b835 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    626e:	bf00      	nop
    6270:	1fff9918 	.word	0x1fff9918

00006274 <octaveMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused) { writeSetting(OCTAVE_ADDR,octave); }
    6274:	4b02      	ldr	r3, [pc, #8]	; (6280 <octaveMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6276:	2028      	movs	r0, #40	; 0x28
    6278:	8819      	ldrh	r1, [r3, #0]
    627a:	f003 b82d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    627e:	bf00      	nop
    6280:	1fff9b36 	.word	0x1fff9b36

00006284 <transposeSave(MenuEntrySub const&)>:
  writeSetting(TRANSP_ADDR,transpose);
    6284:	4b02      	ldr	r3, [pc, #8]	; (6290 <transposeSave(MenuEntrySub const&)+0xc>)
    6286:	200e      	movs	r0, #14
    6288:	8819      	ldrh	r1, [r3, #0]
    628a:	f003 b825 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    628e:	bf00      	nop
    6290:	1fff9bec 	.word	0x1fff9bec

00006294 <breathIntervalMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
const MenuEntrySub breathIntervalMenu = {
  MenuType::ESub, "BR INTERV", "CC INTERV", &breathInterval, 3, 15, MenuEntryFlags::ENone,
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    numToString(breathInterval, out, false);
  },
  [](SubMenuRef __unused) { writeSetting(BRINTERV_ADDR, breathInterval); }
    6294:	4b02      	ldr	r3, [pc, #8]	; (62a0 <breathIntervalMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6296:	209e      	movs	r0, #158	; 0x9e
    6298:	8819      	ldrh	r1, [r3, #0]
    629a:	f003 b81d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    629e:	bf00      	nop
    62a0:	1fff8d3a 	.word	0x1fff8d3a

000062a4 <velBiasMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused){ writeSetting(VEL_BIAS_ADDR,velBias); }
    62a4:	4b02      	ldr	r3, [pc, #8]	; (62b0 <velBiasMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    62a6:	2030      	movs	r0, #48	; 0x30
    62a8:	8819      	ldrh	r1, [r3, #0]
    62aa:	f003 b815 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    62ae:	bf00      	nop
    62b0:	1fff9bf0 	.word	0x1fff9bf0

000062b4 <velSmpDlMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VEL_SMP_DL_ADDR,velSmpDl); }
    62b4:	4b02      	ldr	r3, [pc, #8]	; (62c0 <velSmpDlMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    62b6:	202e      	movs	r0, #46	; 0x2e
    62b8:	8819      	ldrh	r1, [r3, #0]
    62ba:	f003 b80d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    62be:	bf00      	nop
    62c0:	1fff9bf2 	.word	0x1fff9bf2

000062c4 <curveWriteSettings(MenuEntrySub const&)>:
static void curveWriteSettings(const MenuEntrySub & __unused sub){ writeSetting(BREATHCURVE_ADDR,curve); }
    62c4:	4b02      	ldr	r3, [pc, #8]	; (62d0 <curveWriteSettings(MenuEntrySub const&)+0xc>)
    62c6:	202c      	movs	r0, #44	; 0x2c
    62c8:	8819      	ldrh	r1, [r3, #0]
    62ca:	f003 b805 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    62ce:	bf00      	nop
    62d0:	1fff9a6c 	.word	0x1fff9a6c

000062d4 <velocityMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VELOCITY_ADDR,velocity); }
    62d4:	4b02      	ldr	r3, [pc, #8]	; (62e0 <velocityMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    62d6:	2016      	movs	r0, #22
    62d8:	8819      	ldrh	r1, [r3, #0]
    62da:	f002 bffd 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    62de:	bf00      	nop
    62e0:	1fff9bf4 	.word	0x1fff9bf4

000062e4 <breathCC2RiseMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(BREATH_CC2_RISE_ADDR,breathCC2Rise); }
    62e4:	4b02      	ldr	r3, [pc, #8]	; (62f0 <breathCC2RiseMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    62e6:	205a      	movs	r0, #90	; 0x5a
    62e8:	8819      	ldrh	r1, [r3, #0]
    62ea:	f002 bff5 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    62ee:	bf00      	nop
    62f0:	1fff9a22 	.word	0x1fff9a22

000062f4 <glissandoMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
      *label = "ms";
    }else{
      strncpy(out, "OFF", 4);
    }
  },
[](const MenuEntrySub & __unused sub) { writeSetting(GLISSSET_ADDR,glissSetting); }
    62f4:	4b02      	ldr	r3, [pc, #8]	; (6300 <glissandoMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    62f6:	20bc      	movs	r0, #188	; 0xbc
    62f8:	8819      	ldrh	r1, [r3, #0]
    62fa:	f002 bfed 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    62fe:	bf00      	nop
    6300:	1fff9ad4 	.word	0x1fff9ad4

00006304 <pitchBendMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused){ writeSetting(PB_ADDR,PBdepth); }
    6304:	4b02      	ldr	r3, [pc, #8]	; (6310 <pitchBendMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6306:	201a      	movs	r0, #26
    6308:	8819      	ldrh	r1, [r3, #0]
    630a:	f002 bfe5 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    630e:	bf00      	nop
    6310:	1fff991a 	.word	0x1fff991a

00006314 <rollerMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
const MenuEntrySub rollerMenu = {
  MenuType::ESub, "ROLLRMODE",  "ROLLRMODE", &rollerMode, 0, 3, MenuEntryFlags::EMenuEntryWrap,
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    numToString(rollerMode+1, out);
  },
[](const MenuEntrySub & __unused sub) { writeSetting(ROLLER_ADDR,rollerMode); }
    6314:	4b02      	ldr	r3, [pc, #8]	; (6320 <rollerMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6316:	20ba      	movs	r0, #186	; 0xba
    6318:	8819      	ldrh	r1, [r3, #0]
    631a:	f002 bfdd 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    631e:	bf00      	nop
    6320:	1fff9b9c 	.word	0x1fff9b9c

00006324 <fingeringMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused sub) { writeSetting(FINGER_ADDR,fingering); }
    6324:	4b02      	ldr	r3, [pc, #8]	; (6330 <fingeringMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6326:	206c      	movs	r0, #108	; 0x6c
    6328:	8819      	ldrh	r1, [r3, #0]
    632a:	f002 bfd5 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    632e:	bf00      	nop
    6330:	1fff9ab8 	.word	0x1fff9ab8

00006334 <lpinky3Menu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
    else if (lpinky3 == MOD)
      strncpy(textBuffer, "MOD", 4);
    else
      numToString(lpinky3-13, textBuffer, true);
  },
  [](const MenuEntrySub & __unused sub) { writeSetting(LPINKY3_ADDR,lpinky3); }
    6334:	4b02      	ldr	r3, [pc, #8]	; (6340 <lpinky3Menu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6336:	206e      	movs	r0, #110	; 0x6e
    6338:	8819      	ldrh	r1, [r3, #0]
    633a:	f002 bfcd 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    633e:	bf00      	nop
    6340:	1fff9b2a 	.word	0x1fff9b2a

00006344 <lvlCtrlCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(LEVEL_CC_ADDR,levelCC); }
    6344:	4b02      	ldr	r3, [pc, #8]	; (6350 <lvlCtrlCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6346:	2068      	movs	r0, #104	; 0x68
    6348:	8819      	ldrh	r1, [r3, #0]
    634a:	f002 bfc5 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    634e:	bf00      	nop
    6350:	1fff9b12 	.word	0x1fff9b12

00006354 <pinkyMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(PINKY_KEY_ADDR,pinkySetting); }
    6354:	4b02      	ldr	r3, [pc, #8]	; (6360 <pinkyMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6356:	2032      	movs	r0, #50	; 0x32
    6358:	8819      	ldrh	r1, [r3, #0]
    635a:	f002 bfbd 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    635e:	bf00      	nop
    6360:	1fff9b74 	.word	0x1fff9b74

00006364 <deglitchMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(DEGLITCH_ADDR,deglitch); }
    6364:	4b02      	ldr	r3, [pc, #8]	; (6370 <deglitchMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6366:	2020      	movs	r0, #32
    6368:	8819      	ldrh	r1, [r3, #0]
    636a:	f002 bfb5 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    636e:	bf00      	nop
    6370:	1fff9a86 	.word	0x1fff9a86

00006374 <harmonicsMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(HARMSET_ADDR,harmSetting); }
    6374:	4b02      	ldr	r3, [pc, #8]	; (6380 <harmonicsMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6376:	2072      	movs	r0, #114	; 0x72
    6378:	8819      	ldrh	r1, [r3, #0]
    637a:	f002 bfad 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    637e:	bf00      	nop
    6380:	1fff9ae4 	.word	0x1fff9ae4

00006384 <extraCC2Menu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(EXTRA2_ADDR,extraCT2); }
    6384:	4b02      	ldr	r3, [pc, #8]	; (6390 <extraCC2Menu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6386:	2066      	movs	r0, #102	; 0x66
    6388:	8819      	ldrh	r1, [r3, #0]
    638a:	f002 bfa5 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    638e:	bf00      	nop
    6390:	1fff9a96 	.word	0x1fff9a96

00006394 <extraMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(EXTRA_ADDR,extraCT); }
    6394:	4b02      	ldr	r3, [pc, #8]	; (63a0 <extraMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6396:	201c      	movs	r0, #28
    6398:	8819      	ldrh	r1, [r3, #0]
    639a:	f002 bf9d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    639e:	bf00      	nop
    63a0:	1fff9a94 	.word	0x1fff9a94

000063a4 <portLimitMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused sub) { writeSetting(PORTLIMIT_ADDR,portLimit); }
    63a4:	4b02      	ldr	r3, [pc, #8]	; (63b0 <portLimitMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    63a6:	20a2      	movs	r0, #162	; 0xa2
    63a8:	8819      	ldrh	r1, [r3, #0]
    63aa:	f002 bf95 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    63ae:	bf00      	nop
    63b0:	1fff9b84 	.word	0x1fff9b84

000063b4 <portMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused sub) { writeSetting(PORTAM_ADDR,portamento); }
    63b4:	4b02      	ldr	r3, [pc, #8]	; (63c0 <portMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    63b6:	2018      	movs	r0, #24
    63b8:	8819      	ldrh	r1, [r3, #0]
    63ba:	f002 bf8d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    63be:	bf00      	nop
    63c0:	1fff9b8a 	.word	0x1fff9b8a

000063c4 <leverCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
[](const MenuEntrySub & __unused sub) { writeSetting(LEVERCC_ADDR,leverCC); }
    63c4:	4b02      	ldr	r3, [pc, #8]	; (63d0 <leverCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    63c6:	20b2      	movs	r0, #178	; 0xb2
    63c8:	8819      	ldrh	r1, [r3, #0]
    63ca:	f002 bf85 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    63ce:	bf00      	nop
    63d0:	1fff9b16 	.word	0x1fff9b16

000063d4 <leverCtlMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused sub) { writeSetting(LEVERCTL_ADDR,leverControl); }
    63d4:	4b02      	ldr	r3, [pc, #8]	; (63e0 <leverCtlMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    63d6:	20b0      	movs	r0, #176	; 0xb0
    63d8:	8819      	ldrh	r1, [r3, #0]
    63da:	f002 bf7d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    63de:	bf00      	nop
    63e0:	1fff9b18 	.word	0x1fff9b18

000063e4 <biteCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
[](const MenuEntrySub & __unused sub) { writeSetting(BITECC_ADDR,biteCC); }
    63e4:	4b02      	ldr	r3, [pc, #8]	; (63f0 <biteCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    63e6:	20ae      	movs	r0, #174	; 0xae
    63e8:	8819      	ldrh	r1, [r3, #0]
    63ea:	f002 bf75 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    63ee:	bf00      	nop
    63f0:	1fff9a08 	.word	0x1fff9a08

000063f4 <biteCtlMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused sub) { writeSetting(BITECTL_ADDR,biteControl); }
    63f4:	4b02      	ldr	r3, [pc, #8]	; (6400 <biteCtlMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    63f6:	20ac      	movs	r0, #172	; 0xac
    63f8:	8819      	ldrh	r1, [r3, #0]
    63fa:	f002 bf6d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    63fe:	bf00      	nop
    6400:	1fff9a0a 	.word	0x1fff9a0a

00006404 <vib2BrAmtMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
const MenuEntrySub vib2BrAmtMenu = {
  MenuType::ESub, "VIB2BRAMT", "AMOUNT", &vib2BreathAmount, 0, 10, MenuEntryFlags::ENone,
  [](SubMenuRef __unused, char* textBuffer, const char** __unused unit) {
    numToString(vib2BreathAmount, textBuffer);
  },
  [](const MenuEntrySub & __unused sub) { writeSetting(VIB2BR_AMOUNT_ADDR,vib2BreathAmount); }
    6404:	4b02      	ldr	r3, [pc, #8]	; (6410 <vib2BrAmtMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6406:	20c0      	movs	r0, #192	; 0xc0
    6408:	8819      	ldrh	r1, [r3, #0]
    640a:	f002 bf65 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    640e:	bf00      	nop
    6410:	1fff8e74 	.word	0x1fff8e74

00006414 <vib2BrDirMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VIB2BR_DIRECTION_ADDR,vib2BrDirection); }
    6414:	4b02      	ldr	r3, [pc, #8]	; (6420 <vib2BrDirMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6416:	20be      	movs	r0, #190	; 0xbe
    6418:	8819      	ldrh	r1, [r3, #0]
    641a:	f002 bf5d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    641e:	bf00      	nop
    6420:	1fff9bf8 	.word	0x1fff9bf8

00006424 <vibSquelchBiteMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VIB_SQUELCH_BITE_ADDR,vibSquelchBite); }
    6424:	4b02      	ldr	r3, [pc, #8]	; (6430 <vibSquelchBiteMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6426:	205e      	movs	r0, #94	; 0x5e
    6428:	8819      	ldrh	r1, [r3, #0]
    642a:	f002 bf55 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    642e:	bf00      	nop
    6430:	1fff8e7e 	.word	0x1fff8e7e

00006434 <vibSenseBiteMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VIB_SENS_BITE_ADDR,vibSensBite); }
    6434:	4b02      	ldr	r3, [pc, #8]	; (6440 <vibSenseBiteMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6436:	205c      	movs	r0, #92	; 0x5c
    6438:	8819      	ldrh	r1, [r3, #0]
    643a:	f002 bf4d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    643e:	bf00      	nop
    6440:	1fff8e7a 	.word	0x1fff8e7a

00006444 <vibSquelchMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VIB_SQUELCH_ADDR,vibSquelch); }
    6444:	4b02      	ldr	r3, [pc, #8]	; (6450 <vibSquelchMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6446:	2054      	movs	r0, #84	; 0x54
    6448:	8819      	ldrh	r1, [r3, #0]
    644a:	f002 bf45 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    644e:	bf00      	nop
    6450:	1fff8e7c 	.word	0x1fff8e7c

00006454 <vibSenseMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VIB_SENS_ADDR,vibSens); }
    6454:	4b02      	ldr	r3, [pc, #8]	; (6460 <vibSenseMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6456:	2050      	movs	r0, #80	; 0x50
    6458:	8819      	ldrh	r1, [r3, #0]
    645a:	f002 bf3d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    645e:	bf00      	nop
    6460:	1fff8e78 	.word	0x1fff8e78

00006464 <vibDirMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VIB_DIRECTION_ADDR,vibDirection); }
    6464:	4b02      	ldr	r3, [pc, #8]	; (6470 <vibDirMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6466:	2056      	movs	r0, #86	; 0x56
    6468:	8819      	ldrh	r1, [r3, #0]
    646a:	f002 bf35 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    646e:	bf00      	nop
    6470:	1fff9bfc 	.word	0x1fff9bfc

00006474 <vibRetnMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub) { writeSetting(VIB_RETN_ADDR,vibRetn); }
    6474:	4b02      	ldr	r3, [pc, #8]	; (6480 <vibRetnMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0xc>)
    6476:	2052      	movs	r0, #82	; 0x52
    6478:	8819      	ldrh	r1, [r3, #0]
    647a:	f002 bf2d 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    647e:	bf00      	nop
    6480:	1fff8e76 	.word	0x1fff8e76

00006484 <vibStore(MenuEntrySub const&)>:
  writeSetting(VIBRATO_ADDR,vibrato);
    6484:	4b02      	ldr	r3, [pc, #8]	; (6490 <vibStore(MenuEntrySub const&)+0xc>)
    6486:	201e      	movs	r0, #30
    6488:	8819      	ldrh	r1, [r3, #0]
    648a:	f002 bf25 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    648e:	bf00      	nop
    6490:	1fff9c1c 	.word	0x1fff9c1c

00006494 <fwcTypeOptionGet(MenuEntrySub const&, char*, char const**)>:
    switch (fwcType){
    6494:	4b0c      	ldr	r3, [pc, #48]	; (64c8 <fwcTypeOptionGet(MenuEntrySub const&, char*, char const**)+0x34>)
    6496:	881b      	ldrh	r3, [r3, #0]
static void fwcTypeOptionGet(SubMenuRef __unused, char* out, const char** __unused) {
    6498:	4608      	mov	r0, r1
    switch (fwcType){
    649a:	2b03      	cmp	r3, #3
    649c:	d813      	bhi.n	64c6 <fwcTypeOptionGet(MenuEntrySub const&, char*, char const**)+0x32>
    649e:	e8df f003 	tbb	[pc, r3]
    64a2:	0a0e      	.short	0x0a0e
    64a4:	0206      	.short	0x0206
      strncpy(out, "m7", 4);
    64a6:	4909      	ldr	r1, [pc, #36]	; (64cc <fwcTypeOptionGet(MenuEntrySub const&, char*, char const**)+0x38>)
    64a8:	2204      	movs	r2, #4
    64aa:	f00c b901 	b.w	126b0 <strncpy>
      strncpy(out, "7", 4);
    64ae:	4908      	ldr	r1, [pc, #32]	; (64d0 <fwcTypeOptionGet(MenuEntrySub const&, char*, char const**)+0x3c>)
    64b0:	2204      	movs	r2, #4
    64b2:	f00c b8fd 	b.w	126b0 <strncpy>
      strncpy(out, "m6", 4);
    64b6:	4907      	ldr	r1, [pc, #28]	; (64d4 <fwcTypeOptionGet(MenuEntrySub const&, char*, char const**)+0x40>)
    64b8:	2204      	movs	r2, #4
    64ba:	f00c b8f9 	b.w	126b0 <strncpy>
      strncpy(out, "6", 4);
    64be:	4906      	ldr	r1, [pc, #24]	; (64d8 <fwcTypeOptionGet(MenuEntrySub const&, char*, char const**)+0x44>)
    64c0:	2204      	movs	r2, #4
    64c2:	f00c b8f5 	b.w	126b0 <strncpy>
}
    64c6:	4770      	bx	lr
    64c8:	1fff9abe 	.word	0x1fff9abe
    64cc:	0001390c 	.word	0x0001390c
    64d0:	00013908 	.word	0x00013908
    64d4:	00013904 	.word	0x00013904
    64d8:	00013900 	.word	0x00013900

000064dc <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)>:
  switch (hmzKey){
    64dc:	4b1e      	ldr	r3, [pc, #120]	; (6558 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x7c>)
    64de:	881b      	ldrh	r3, [r3, #0]
static void hmzKeyOptionGet(SubMenuRef __unused, char* out, const char** __unused) {
    64e0:	4608      	mov	r0, r1
  switch (hmzKey){
    64e2:	2b0b      	cmp	r3, #11
    64e4:	d837      	bhi.n	6556 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x7a>
    64e6:	e8df f003 	tbb	[pc, r3]
    64ea:	0e0a      	.short	0x0e0a
    64ec:	1e1a1612 	.word	0x1e1a1612
    64f0:	2e2a2622 	.word	0x2e2a2622
    64f4:	0632      	.short	0x0632
      strncpy(out, "B", 4);
    64f6:	4919      	ldr	r1, [pc, #100]	; (655c <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x80>)
    64f8:	2204      	movs	r2, #4
    64fa:	f00c b8d9 	b.w	126b0 <strncpy>
      strncpy(out, "C", 4);
    64fe:	4918      	ldr	r1, [pc, #96]	; (6560 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x84>)
    6500:	2204      	movs	r2, #4
    6502:	f00c b8d5 	b.w	126b0 <strncpy>
      strncpy(out, "C#", 4);
    6506:	4917      	ldr	r1, [pc, #92]	; (6564 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x88>)
    6508:	2204      	movs	r2, #4
    650a:	f00c b8d1 	b.w	126b0 <strncpy>
      strncpy(out, "D", 4);
    650e:	4916      	ldr	r1, [pc, #88]	; (6568 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x8c>)
    6510:	2204      	movs	r2, #4
    6512:	f00c b8cd 	b.w	126b0 <strncpy>
      strncpy(out, "D#", 4);
    6516:	4915      	ldr	r1, [pc, #84]	; (656c <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x90>)
    6518:	2204      	movs	r2, #4
    651a:	f00c b8c9 	b.w	126b0 <strncpy>
      strncpy(out, "E", 4);
    651e:	4914      	ldr	r1, [pc, #80]	; (6570 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x94>)
    6520:	2204      	movs	r2, #4
    6522:	f00c b8c5 	b.w	126b0 <strncpy>
      strncpy(out, "F", 4);
    6526:	4913      	ldr	r1, [pc, #76]	; (6574 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x98>)
    6528:	2204      	movs	r2, #4
    652a:	f00c b8c1 	b.w	126b0 <strncpy>
      strncpy(out, "F#", 4);
    652e:	4912      	ldr	r1, [pc, #72]	; (6578 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x9c>)
    6530:	2204      	movs	r2, #4
    6532:	f00c b8bd 	b.w	126b0 <strncpy>
      strncpy(out, "G", 4);
    6536:	4911      	ldr	r1, [pc, #68]	; (657c <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0xa0>)
    6538:	2204      	movs	r2, #4
    653a:	f00c b8b9 	b.w	126b0 <strncpy>
      strncpy(out, "G#", 4);
    653e:	4910      	ldr	r1, [pc, #64]	; (6580 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0xa4>)
    6540:	2204      	movs	r2, #4
    6542:	f00c b8b5 	b.w	126b0 <strncpy>
      strncpy(out, "A", 4);
    6546:	490f      	ldr	r1, [pc, #60]	; (6584 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0xa8>)
    6548:	2204      	movs	r2, #4
    654a:	f00c b8b1 	b.w	126b0 <strncpy>
      strncpy(out, "Bb", 4);
    654e:	490e      	ldr	r1, [pc, #56]	; (6588 <hmzKeyOptionGet(MenuEntrySub const&, char*, char const**)+0xac>)
    6550:	2204      	movs	r2, #4
    6552:	f00c b8ad 	b.w	126b0 <strncpy>
}
    6556:	4770      	bx	lr
    6558:	1fff9aec 	.word	0x1fff9aec
    655c:	00013db8 	.word	0x00013db8
    6560:	00013ed4 	.word	0x00013ed4
    6564:	00013910 	.word	0x00013910
    6568:	00013a74 	.word	0x00013a74
    656c:	00013914 	.word	0x00013914
    6570:	00013f20 	.word	0x00013f20
    6574:	00013918 	.word	0x00013918
    6578:	0001391c 	.word	0x0001391c
    657c:	00013c3c 	.word	0x00013c3c
    6580:	00013920 	.word	0x00013920
    6584:	00013dc4 	.word	0x00013dc4
    6588:	00013924 	.word	0x00013924

0000658c <fastBootMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    strncpy(out, fastBoot?"ON":"OFF", 4);
    658c:	4b07      	ldr	r3, [pc, #28]	; (65ac <fastBootMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>)
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    658e:	b410      	push	{r4}
    strncpy(out, fastBoot?"ON":"OFF", 4);
    6590:	f8b3 c000 	ldrh.w	ip, [r3]
    6594:	4c06      	ldr	r4, [pc, #24]	; (65b0 <fastBootMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>)
    6596:	4b07      	ldr	r3, [pc, #28]	; (65b4 <fastBootMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x28>)
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6598:	4608      	mov	r0, r1
    strncpy(out, fastBoot?"ON":"OFF", 4);
    659a:	2204      	movs	r2, #4
    659c:	f1bc 0f00 	cmp.w	ip, #0
    65a0:	bf14      	ite	ne
    65a2:	4621      	movne	r1, r4
    65a4:	4619      	moveq	r1, r3
  },
    65a6:	bc10      	pop	{r4}
    strncpy(out, fastBoot?"ON":"OFF", 4);
    65a8:	f00c b882 	b.w	126b0 <strncpy>
    65ac:	1fff9a9e 	.word	0x1fff9a9e
    65b0:	00013928 	.word	0x00013928
    65b4:	0001392c 	.word	0x0001392c

000065b8 <gateOpenMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    strncpy(out, gateOpenEnable?"ON":"OFF", 4);
    65b8:	4b07      	ldr	r3, [pc, #28]	; (65d8 <gateOpenMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>)
  [](SubMenuRef __unused, char* out, const char ** __unused unit) {
    65ba:	b410      	push	{r4}
    strncpy(out, gateOpenEnable?"ON":"OFF", 4);
    65bc:	f8b3 c000 	ldrh.w	ip, [r3]
    65c0:	4c06      	ldr	r4, [pc, #24]	; (65dc <gateOpenMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>)
    65c2:	4b07      	ldr	r3, [pc, #28]	; (65e0 <gateOpenMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x28>)
  [](SubMenuRef __unused, char* out, const char ** __unused unit) {
    65c4:	4608      	mov	r0, r1
    strncpy(out, gateOpenEnable?"ON":"OFF", 4);
    65c6:	2204      	movs	r2, #4
    65c8:	f1bc 0f00 	cmp.w	ip, #0
    65cc:	bf14      	ite	ne
    65ce:	4621      	movne	r1, r4
    65d0:	4619      	moveq	r1, r3
  }, [](const MenuEntrySub & __unused sub) {
    65d2:	bc10      	pop	{r4}
    strncpy(out, gateOpenEnable?"ON":"OFF", 4);
    65d4:	f00c b86c 	b.w	126b0 <strncpy>
    65d8:	1fff9ac2 	.word	0x1fff9ac2
    65dc:	00013928 	.word	0x00013928
    65e0:	0001392c 	.word	0x0001392c

000065e4 <legacyBRMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    strncpy(out, legacyBrAct?"ON":"OFF", 4);
    65e4:	4b07      	ldr	r3, [pc, #28]	; (6604 <legacyBRMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>)
  [](SubMenuRef __unused, char* out, const char ** __unused unit) {
    65e6:	b410      	push	{r4}
    strncpy(out, legacyBrAct?"ON":"OFF", 4);
    65e8:	f8b3 c000 	ldrh.w	ip, [r3]
    65ec:	4c06      	ldr	r4, [pc, #24]	; (6608 <legacyBRMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>)
    65ee:	4b07      	ldr	r3, [pc, #28]	; (660c <legacyBRMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x28>)
  [](SubMenuRef __unused, char* out, const char ** __unused unit) {
    65f0:	4608      	mov	r0, r1
    strncpy(out, legacyBrAct?"ON":"OFF", 4);
    65f2:	2204      	movs	r2, #4
    65f4:	f1bc 0f00 	cmp.w	ip, #0
    65f8:	bf14      	ite	ne
    65fa:	4621      	movne	r1, r4
    65fc:	4619      	moveq	r1, r3
  }, [](const MenuEntrySub & __unused sub) {
    65fe:	bc10      	pop	{r4}
    strncpy(out, legacyBrAct?"ON":"OFF", 4);
    6600:	f00c b856 	b.w	126b0 <strncpy>
    6604:	1fff9b10 	.word	0x1fff9b10
    6608:	00013928 	.word	0x00013928
    660c:	0001392c 	.word	0x0001392c

00006610 <legacyPBMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    strncpy(out, legacy?"ON":"OFF", 4);
    6610:	4b07      	ldr	r3, [pc, #28]	; (6630 <legacyPBMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>)
  [](SubMenuRef __unused, char* out, const char ** __unused unit) {
    6612:	b410      	push	{r4}
    strncpy(out, legacy?"ON":"OFF", 4);
    6614:	f8b3 c000 	ldrh.w	ip, [r3]
    6618:	4c06      	ldr	r4, [pc, #24]	; (6634 <legacyPBMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>)
    661a:	4b07      	ldr	r3, [pc, #28]	; (6638 <legacyPBMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x28>)
  [](SubMenuRef __unused, char* out, const char ** __unused unit) {
    661c:	4608      	mov	r0, r1
    strncpy(out, legacy?"ON":"OFF", 4);
    661e:	2204      	movs	r2, #4
    6620:	f1bc 0f00 	cmp.w	ip, #0
    6624:	bf14      	ite	ne
    6626:	4621      	movne	r1, r4
    6628:	4619      	moveq	r1, r3
  }, [](const MenuEntrySub & __unused sub) {
    662a:	bc10      	pop	{r4}
    strncpy(out, legacy?"ON":"OFF", 4);
    662c:	f00c b840 	b.w	126b0 <strncpy>
    6630:	1fff9b0e 	.word	0x1fff9b0e
    6634:	00013928 	.word	0x00013928
    6638:	0001392c 	.word	0x0001392c

0000663c <breathATMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    strncpy(out, breathAT?"ON":"OFF", 4);
    663c:	4b07      	ldr	r3, [pc, #28]	; (665c <breathATMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>)
  [](SubMenuRef __unused, char* out, const char ** __unused unit) {
    663e:	b410      	push	{r4}
    strncpy(out, breathAT?"ON":"OFF", 4);
    6640:	f8b3 c000 	ldrh.w	ip, [r3]
    6644:	4c06      	ldr	r4, [pc, #24]	; (6660 <breathATMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>)
    6646:	4b07      	ldr	r3, [pc, #28]	; (6664 <breathATMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x28>)
  [](SubMenuRef __unused, char* out, const char ** __unused unit) {
    6648:	4608      	mov	r0, r1
    strncpy(out, breathAT?"ON":"OFF", 4);
    664a:	2204      	movs	r2, #4
    664c:	f1bc 0f00 	cmp.w	ip, #0
    6650:	bf14      	ite	ne
    6652:	4621      	movne	r1, r4
    6654:	4619      	moveq	r1, r3
  }, [](const MenuEntrySub & __unused sub) {
    6656:	bc10      	pop	{r4}
    strncpy(out, breathAT?"ON":"OFF", 4);
    6658:	f00c b82a 	b.w	126b0 <strncpy>
    665c:	1fff9a1c 	.word	0x1fff9a1c
    6660:	00013928 	.word	0x00013928
    6664:	0001392c 	.word	0x0001392c

00006668 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)>:
  switch (polySelect){
    6668:	4b1c      	ldr	r3, [pc, #112]	; (66dc <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x74>)
    666a:	881b      	ldrh	r3, [r3, #0]
static void polySelectOptionGet(SubMenuRef __unused, char* out, const char** __unused) {
    666c:	4608      	mov	r0, r1
  switch (polySelect){
    666e:	2b0a      	cmp	r3, #10
    6670:	d833      	bhi.n	66da <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x72>
    6672:	e8df f003 	tbb	[pc, r3]
    6676:	0e0a      	.short	0x0e0a
    6678:	1e1a1612 	.word	0x1e1a1612
    667c:	2e2a2622 	.word	0x2e2a2622
    6680:	06          	.byte	0x06
    6681:	00          	.byte	0x00
      strncpy(out, "RTC", 4);
    6682:	4917      	ldr	r1, [pc, #92]	; (66e0 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x78>)
    6684:	2204      	movs	r2, #4
    6686:	f007 beff 	b.w	e488 <memcpy>
      strncpy(out, "OFF", 4);
    668a:	4916      	ldr	r1, [pc, #88]	; (66e4 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x7c>)
    668c:	2204      	movs	r2, #4
    668e:	f007 befb 	b.w	e488 <memcpy>
      strncpy(out, "MGR", 4);
    6692:	4915      	ldr	r1, [pc, #84]	; (66e8 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x80>)
    6694:	2204      	movs	r2, #4
    6696:	f007 bef7 	b.w	e488 <memcpy>
      strncpy(out, "MGD", 4);
    669a:	4914      	ldr	r1, [pc, #80]	; (66ec <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x84>)
    669c:	2204      	movs	r2, #4
    669e:	f007 bef3 	b.w	e488 <memcpy>
      strncpy(out, "MA9", 4);
    66a2:	4913      	ldr	r1, [pc, #76]	; (66f0 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x88>)
    66a4:	2204      	movs	r2, #4
    66a6:	f007 beef 	b.w	e488 <memcpy>
      strncpy(out, "MND", 4);
    66aa:	4912      	ldr	r1, [pc, #72]	; (66f4 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x8c>)
    66ac:	2204      	movs	r2, #4
    66ae:	f007 beeb 	b.w	e488 <memcpy>
      strncpy(out, "MNA", 4);
    66b2:	4911      	ldr	r1, [pc, #68]	; (66f8 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x90>)
    66b4:	2204      	movs	r2, #4
    66b6:	f007 bee7 	b.w	e488 <memcpy>
      strncpy(out, "MNH", 4);
    66ba:	4910      	ldr	r1, [pc, #64]	; (66fc <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x94>)
    66bc:	2204      	movs	r2, #4
    66be:	f007 bee3 	b.w	e488 <memcpy>
      strncpy(out, "FWC", 4);
    66c2:	490f      	ldr	r1, [pc, #60]	; (6700 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x98>)
    66c4:	2204      	movs	r2, #4
    66c6:	f007 bedf 	b.w	e488 <memcpy>
      strncpy(out, "RTA", 4);
    66ca:	490e      	ldr	r1, [pc, #56]	; (6704 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0x9c>)
    66cc:	2204      	movs	r2, #4
    66ce:	f007 bedb 	b.w	e488 <memcpy>
      strncpy(out, "RTB", 4);
    66d2:	490d      	ldr	r1, [pc, #52]	; (6708 <polySelectOptionGet(MenuEntrySub const&, char*, char const**)+0xa0>)
    66d4:	2204      	movs	r2, #4
    66d6:	f007 bed7 	b.w	e488 <memcpy>
}
    66da:	4770      	bx	lr
    66dc:	1fff9b80 	.word	0x1fff9b80
    66e0:	00013954 	.word	0x00013954
    66e4:	0001392c 	.word	0x0001392c
    66e8:	00013930 	.word	0x00013930
    66ec:	00013934 	.word	0x00013934
    66f0:	00013938 	.word	0x00013938
    66f4:	0001393c 	.word	0x0001393c
    66f8:	00013940 	.word	0x00013940
    66fc:	00013944 	.word	0x00013944
    6700:	00013948 	.word	0x00013948
    6704:	0001394c 	.word	0x0001394c
    6708:	00013950 	.word	0x00013950

0000670c <transposeOptionGet(MenuEntrySub const&, char*, char const**)>:
  switch (transpose){
    670c:	4b3c      	ldr	r3, [pc, #240]	; (6800 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0xf4>)
    670e:	881b      	ldrh	r3, [r3, #0]
static void transposeOptionGet(SubMenuRef __unused, char* out, const char** __unused) {
    6710:	4608      	mov	r0, r1
  switch (transpose){
    6712:	2b18      	cmp	r3, #24
    6714:	d872      	bhi.n	67fc <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0xf0>
    6716:	e8df f003 	tbb	[pc, r3]
    671a:	696d      	.short	0x696d
    671c:	595d6165 	.word	0x595d6165
    6720:	494d5155 	.word	0x494d5155
    6724:	393d4145 	.word	0x393d4145
    6728:	292d3135 	.word	0x292d3135
    672c:	191d2125 	.word	0x191d2125
    6730:	1115      	.short	0x1115
    6732:	0d          	.byte	0x0d
    6733:	00          	.byte	0x00
      strncpy(out, "<C", 4);
    6734:	4933      	ldr	r1, [pc, #204]	; (6804 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0xf8>)
    6736:	2204      	movs	r2, #4
    6738:	f00b bfba 	b.w	126b0 <strncpy>
      strncpy(out, "<B", 4);
    673c:	4932      	ldr	r1, [pc, #200]	; (6808 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0xfc>)
    673e:	2204      	movs	r2, #4
    6740:	f00b bfb6 	b.w	126b0 <strncpy>
      strncpy(out, "<Bb", 4);
    6744:	4931      	ldr	r1, [pc, #196]	; (680c <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x100>)
    6746:	2204      	movs	r2, #4
    6748:	f007 be9e 	b.w	e488 <memcpy>
      strncpy(out, "<A", 4);
    674c:	4930      	ldr	r1, [pc, #192]	; (6810 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x104>)
    674e:	2204      	movs	r2, #4
    6750:	f00b bfae 	b.w	126b0 <strncpy>
      strncpy(out, "<G#", 4);
    6754:	492f      	ldr	r1, [pc, #188]	; (6814 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x108>)
    6756:	2204      	movs	r2, #4
    6758:	f007 be96 	b.w	e488 <memcpy>
      strncpy(out, "<G", 4);
    675c:	492e      	ldr	r1, [pc, #184]	; (6818 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x10c>)
    675e:	2204      	movs	r2, #4
    6760:	f00b bfa6 	b.w	126b0 <strncpy>
      strncpy(out, "<F#", 4);
    6764:	492d      	ldr	r1, [pc, #180]	; (681c <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x110>)
    6766:	2204      	movs	r2, #4
    6768:	f007 be8e 	b.w	e488 <memcpy>
      strncpy(out, "<F", 4);
    676c:	492c      	ldr	r1, [pc, #176]	; (6820 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x114>)
    676e:	2204      	movs	r2, #4
    6770:	f00b bf9e 	b.w	126b0 <strncpy>
      strncpy(out, "<E", 4);
    6774:	492b      	ldr	r1, [pc, #172]	; (6824 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x118>)
    6776:	2204      	movs	r2, #4
    6778:	f00b bf9a 	b.w	126b0 <strncpy>
      strncpy(out, "<D#", 4);
    677c:	492a      	ldr	r1, [pc, #168]	; (6828 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x11c>)
    677e:	2204      	movs	r2, #4
    6780:	f007 be82 	b.w	e488 <memcpy>
      strncpy(out, "<D", 4);
    6784:	4929      	ldr	r1, [pc, #164]	; (682c <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x120>)
    6786:	2204      	movs	r2, #4
    6788:	f00b bf92 	b.w	126b0 <strncpy>
      strncpy(out, "<C#", 4);
    678c:	4928      	ldr	r1, [pc, #160]	; (6830 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x124>)
    678e:	2204      	movs	r2, #4
    6790:	f007 be7a 	b.w	e488 <memcpy>
      strncpy(out, ">C<", 4);
    6794:	4927      	ldr	r1, [pc, #156]	; (6834 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x128>)
    6796:	2204      	movs	r2, #4
    6798:	f007 be76 	b.w	e488 <memcpy>
      strncpy(out, "B>", 4);
    679c:	4926      	ldr	r1, [pc, #152]	; (6838 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x12c>)
    679e:	2204      	movs	r2, #4
    67a0:	f00b bf86 	b.w	126b0 <strncpy>
      strncpy(out, "Bb>", 4);
    67a4:	4925      	ldr	r1, [pc, #148]	; (683c <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x130>)
    67a6:	2204      	movs	r2, #4
    67a8:	f007 be6e 	b.w	e488 <memcpy>
      strncpy(out, "A>", 4);
    67ac:	4924      	ldr	r1, [pc, #144]	; (6840 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x134>)
    67ae:	2204      	movs	r2, #4
    67b0:	f00b bf7e 	b.w	126b0 <strncpy>
      strncpy(out, "G#>", 4);
    67b4:	4923      	ldr	r1, [pc, #140]	; (6844 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x138>)
    67b6:	2204      	movs	r2, #4
    67b8:	f007 be66 	b.w	e488 <memcpy>
      strncpy(out, "G>", 4);
    67bc:	4922      	ldr	r1, [pc, #136]	; (6848 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x13c>)
    67be:	2204      	movs	r2, #4
    67c0:	f00b bf76 	b.w	126b0 <strncpy>
      strncpy(out, "F#>", 4);
    67c4:	4921      	ldr	r1, [pc, #132]	; (684c <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x140>)
    67c6:	2204      	movs	r2, #4
    67c8:	f007 be5e 	b.w	e488 <memcpy>
      strncpy(out, "F>", 4);
    67cc:	4920      	ldr	r1, [pc, #128]	; (6850 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x144>)
    67ce:	2204      	movs	r2, #4
    67d0:	f00b bf6e 	b.w	126b0 <strncpy>
      strncpy(out, "E>", 4);
    67d4:	491f      	ldr	r1, [pc, #124]	; (6854 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x148>)
    67d6:	2204      	movs	r2, #4
    67d8:	f00b bf6a 	b.w	126b0 <strncpy>
      strncpy(out, "D#>", 4);
    67dc:	491e      	ldr	r1, [pc, #120]	; (6858 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x14c>)
    67de:	2204      	movs	r2, #4
    67e0:	f007 be52 	b.w	e488 <memcpy>
      strncpy(out, "D>", 4);
    67e4:	491d      	ldr	r1, [pc, #116]	; (685c <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x150>)
    67e6:	2204      	movs	r2, #4
    67e8:	f00b bf62 	b.w	126b0 <strncpy>
      strncpy(out, "C#>", 4);
    67ec:	491c      	ldr	r1, [pc, #112]	; (6860 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x154>)
    67ee:	2204      	movs	r2, #4
    67f0:	f007 be4a 	b.w	e488 <memcpy>
      strncpy(out, "C>", 4);
    67f4:	491b      	ldr	r1, [pc, #108]	; (6864 <transposeOptionGet(MenuEntrySub const&, char*, char const**)+0x158>)
    67f6:	2204      	movs	r2, #4
    67f8:	f00b bf5a 	b.w	126b0 <strncpy>
}
    67fc:	4770      	bx	lr
    67fe:	bf00      	nop
    6800:	1fff9bec 	.word	0x1fff9bec
    6804:	000139b8 	.word	0x000139b8
    6808:	000139b4 	.word	0x000139b4
    680c:	000139b0 	.word	0x000139b0
    6810:	000139ac 	.word	0x000139ac
    6814:	000139a8 	.word	0x000139a8
    6818:	000139a4 	.word	0x000139a4
    681c:	000139a0 	.word	0x000139a0
    6820:	0001399c 	.word	0x0001399c
    6824:	00013998 	.word	0x00013998
    6828:	00013994 	.word	0x00013994
    682c:	00013990 	.word	0x00013990
    6830:	0001398c 	.word	0x0001398c
    6834:	00013988 	.word	0x00013988
    6838:	00013984 	.word	0x00013984
    683c:	00013980 	.word	0x00013980
    6840:	0001397c 	.word	0x0001397c
    6844:	00013978 	.word	0x00013978
    6848:	00013974 	.word	0x00013974
    684c:	00013970 	.word	0x00013970
    6850:	0001396c 	.word	0x0001396c
    6854:	00013968 	.word	0x00013968
    6858:	00013964 	.word	0x00013964
    685c:	00013960 	.word	0x00013960
    6860:	0001395c 	.word	0x0001395c
    6864:	00013958 	.word	0x00013958

00006868 <wlChannelMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused) { sendWLChannel(wireless_channel); }
    6868:	4b01      	ldr	r3, [pc, #4]	; (6870 <wlChannelMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x8>)
    686a:	7818      	ldrb	r0, [r3, #0]
    686c:	f002 bcb4 	b.w	91d8 <sendWLChannel(unsigned char)>
    6870:	1fff8e9e 	.word	0x1fff8e9e

00006874 <wlPowerMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused) { sendWLPower(wireless_power); }
    6874:	4b01      	ldr	r3, [pc, #4]	; (687c <wlPowerMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x8>)
    6876:	7818      	ldrb	r0, [r3, #0]
    6878:	f002 bc88 	b.w	918c <sendWLPower(unsigned char)>
    687c:	1fff9c30 	.word	0x1fff9c30

00006880 <mainTitleGetStr(char*)>:
static void mainTitleGetStr(char* out) {
    6880:	b570      	push	{r4, r5, r6, lr}
  int vMeterReading = battAvg;
    6882:	4b2e      	ldr	r3, [pc, #184]	; (693c <mainTitleGetStr(char*)+0xbc>)
  char menuTitle[] = "MENU         XXX Y.YV"; //Allocate string buffer of appropriate size with some placeholders
    6884:	4e2e      	ldr	r6, [pc, #184]	; (6940 <mainTitleGetStr(char*)+0xc0>)
  int vMeterReading = battAvg;
    6886:	681c      	ldr	r4, [r3, #0]
static void mainTitleGetStr(char* out) {
    6888:	4605      	mov	r5, r0
  char menuTitle[] = "MENU         XXX Y.YV"; //Allocate string buffer of appropriate size with some placeholders
    688a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
static void mainTitleGetStr(char* out) {
    688c:	b086      	sub	sp, #24
  char menuTitle[] = "MENU         XXX Y.YV"; //Allocate string buffer of appropriate size with some placeholders
    688e:	46ec      	mov	ip, sp
    6890:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6894:	e896 0003 	ldmia.w	r6, {r0, r1}
  memcpy(splice1, (vMeterReading > 3020) ? "USB" : "BAT", 3);
    6898:	f640 3ecc 	movw	lr, #3020	; 0xbcc
  char menuTitle[] = "MENU         XXX Y.YV"; //Allocate string buffer of appropriate size with some placeholders
    689c:	f84c 0b04 	str.w	r0, [ip], #4
  memcpy(splice1, (vMeterReading > 3020) ? "USB" : "BAT", 3);
    68a0:	4574      	cmp	r4, lr
  char menuTitle[] = "MENU         XXX Y.YV"; //Allocate string buffer of appropriate size with some placeholders
    68a2:	f8ac 1000 	strh.w	r1, [ip]
  memcpy(splice1, (vMeterReading > 3020) ? "USB" : "BAT", 3);
    68a6:	dc16      	bgt.n	68d6 <mainTitleGetStr(char*)+0x56>
    68a8:	4926      	ldr	r1, [pc, #152]	; (6944 <mainTitleGetStr(char*)+0xc4>)
    68aa:	2203      	movs	r2, #3
    68ac:	f10d 000d 	add.w	r0, sp, #13
    68b0:	f007 fdea 	bl	e488 <memcpy>
  switch (batteryType){
    68b4:	4b24      	ldr	r3, [pc, #144]	; (6948 <mainTitleGetStr(char*)+0xc8>)
    68b6:	881b      	ldrh	r3, [r3, #0]
    68b8:	2b00      	cmp	r3, #0
    68ba:	d03c      	beq.n	6936 <mainTitleGetStr(char*)+0xb6>
    68bc:	2b02      	cmp	r3, #2
    68be:	d037      	beq.n	6930 <mainTitleGetStr(char*)+0xb0>
    68c0:	f640 0398 	movw	r3, #2200	; 0x898
  if (vMeterReading <= vLowLimit) { //2300 alkaline, 2250 lipo, 2200 nimh
    68c4:	42a3      	cmp	r3, r4
    68c6:	db11      	blt.n	68ec <mainTitleGetStr(char*)+0x6c>
    memcpy(splice2, "LOW ", 4);
    68c8:	4920      	ldr	r1, [pc, #128]	; (694c <mainTitleGetStr(char*)+0xcc>)
    68ca:	2204      	movs	r2, #4
    68cc:	f10d 0011 	add.w	r0, sp, #17
    68d0:	f007 fdda 	bl	e488 <memcpy>
    68d4:	e025      	b.n	6922 <mainTitleGetStr(char*)+0xa2>
  memcpy(splice1, (vMeterReading > 3020) ? "USB" : "BAT", 3);
    68d6:	491e      	ldr	r1, [pc, #120]	; (6950 <mainTitleGetStr(char*)+0xd0>)
    68d8:	2203      	movs	r2, #3
    68da:	f10d 000d 	add.w	r0, sp, #13
    68de:	f007 fdd3 	bl	e488 <memcpy>
  switch (batteryType){
    68e2:	4b19      	ldr	r3, [pc, #100]	; (6948 <mainTitleGetStr(char*)+0xc8>)
    68e4:	881b      	ldrh	r3, [r3, #0]
    68e6:	b333      	cbz	r3, 6936 <mainTitleGetStr(char*)+0xb6>
    68e8:	2b02      	cmp	r3, #2
    68ea:	d021      	beq.n	6930 <mainTitleGetStr(char*)+0xb0>
	long num = (x - in_min) * out_range;
    68ec:	f6a4 0498 	subw	r4, r4, #2200	; 0x898
    68f0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
	long result = num / in_range + out_min;
    68f4:	4a17      	ldr	r2, [pc, #92]	; (6954 <mainTitleGetStr(char*)+0xd4>)
	long num = (x - in_min) * out_range;
    68f6:	0063      	lsls	r3, r4, #1
		num += in_range / 2;
    68f8:	f503 73d7 	add.w	r3, r3, #430	; 0x1ae
	long result = num / in_range + out_min;
    68fc:	fba2 2303 	umull	r2, r3, r2, r3
    6900:	0a1b      	lsrs	r3, r3, #8
    splice2[0] = (voltage/10)+'0';
    6902:	4a15      	ldr	r2, [pc, #84]	; (6958 <mainTitleGetStr(char*)+0xd8>)
    6904:	3324      	adds	r3, #36	; 0x24
    6906:	fba2 1203 	umull	r1, r2, r2, r3
    690a:	08d2      	lsrs	r2, r2, #3
    690c:	f102 0130 	add.w	r1, r2, #48	; 0x30
    splice2[2] = (voltage%10)+'0';
    6910:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    6914:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    6918:	3330      	adds	r3, #48	; 0x30
    splice2[0] = (voltage/10)+'0';
    691a:	f88d 1011 	strb.w	r1, [sp, #17]
    splice2[2] = (voltage%10)+'0';
    691e:	f88d 3013 	strb.w	r3, [sp, #19]
  strncpy(out, menuTitle, 22);
    6922:	2216      	movs	r2, #22
    6924:	4669      	mov	r1, sp
    6926:	4628      	mov	r0, r5
    6928:	f00b fec2 	bl	126b0 <strncpy>
}
    692c:	b006      	add	sp, #24
    692e:	bd70      	pop	{r4, r5, r6, pc}
      vLowLimit = LIP_BAT_LOW;
    6930:	f640 03ca 	movw	r3, #2250	; 0x8ca
    6934:	e7c6      	b.n	68c4 <mainTitleGetStr(char*)+0x44>
      vLowLimit = ALK_BAT_LOW;
    6936:	f640 03fc 	movw	r3, #2300	; 0x8fc
    693a:	e7c3      	b.n	68c4 <mainTitleGetStr(char*)+0x44>
    693c:	1fff9934 	.word	0x1fff9934
    6940:	000139cc 	.word	0x000139cc
    6944:	000139bc 	.word	0x000139bc
    6948:	1fff9a04 	.word	0x1fff9a04
    694c:	000139c0 	.word	0x000139c0
    6950:	000139c8 	.word	0x000139c8
    6954:	4c346405 	.word	0x4c346405
    6958:	cccccccd 	.word	0xcccccccd

0000695c <adjustPageUpdate(KeyState&, unsigned long)>:
}

//***********************************************************


bool adjustPageUpdate(KeyState &input, uint32_t timeNow) {
    695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // This is a hack to update touch_Thr is it was changed..
  int old_thr = ctouchThrVal;
  int result = updateAdjustMenu(timeNow, input, stateFirstRun, updateSensorPixelsFlag);
    695e:	4c1a      	ldr	r4, [pc, #104]	; (69c8 <adjustPageUpdate(KeyState&, unsigned long)+0x6c>)
    6960:	4e1a      	ldr	r6, [pc, #104]	; (69cc <adjustPageUpdate(KeyState&, unsigned long)+0x70>)
    6962:	7822      	ldrb	r2, [r4, #0]
  int old_thr = ctouchThrVal;
    6964:	4d1a      	ldr	r5, [pc, #104]	; (69d0 <adjustPageUpdate(KeyState&, unsigned long)+0x74>)
bool adjustPageUpdate(KeyState &input, uint32_t timeNow) {
    6966:	460b      	mov	r3, r1
  int result = updateAdjustMenu(timeNow, input, stateFirstRun, updateSensorPixelsFlag);
    6968:	3a00      	subs	r2, #0
    696a:	bf18      	it	ne
    696c:	2201      	movne	r2, #1
    696e:	4601      	mov	r1, r0
    6970:	4618      	mov	r0, r3
    6972:	7833      	ldrb	r3, [r6, #0]
  int old_thr = ctouchThrVal;
    6974:	882f      	ldrh	r7, [r5, #0]
  int result = updateAdjustMenu(timeNow, input, stateFirstRun, updateSensorPixelsFlag);
    6976:	f7ff fa59 	bl	5e2c <updateAdjustMenu(unsigned long, KeyState&, bool, bool)>
  bool redraw = false;

  updateSensorPixelsFlag = false;
    697a:	2300      	movs	r3, #0
  stateFirstRun = 0;

  if(result < 0) {
    697c:	4298      	cmp	r0, r3
  updateSensorPixelsFlag = false;
    697e:	7033      	strb	r3, [r6, #0]
  stateFirstRun = 0;
    6980:	7023      	strb	r3, [r4, #0]
  if(result < 0) {
    6982:	db1b      	blt.n	69bc <adjustPageUpdate(KeyState&, unsigned long)+0x60>
    // Go back to main menu
    menuState= MAIN_MENU;
    stateFirstRun = true;
  } else {
    redraw = result;
    6984:	bf14      	ite	ne
    6986:	2001      	movne	r0, #1
    6988:	2000      	moveq	r0, #0
  }

  if( old_thr != ctouchThrVal) {
    698a:	882b      	ldrh	r3, [r5, #0]
    698c:	429f      	cmp	r7, r3
    698e:	d014      	beq.n	69ba <adjustPageUpdate(KeyState&, unsigned long)+0x5e>
	long num = (x - in_min) * out_range;
    6990:	f240 723a 	movw	r2, #1850	; 0x73a
    6994:	f5a3 73af 	sub.w	r3, r3, #350	; 0x15e
    6998:	fb02 f303 	mul.w	r3, r2, r3
	long result = num / in_range + out_min;
    699c:	490d      	ldr	r1, [pc, #52]	; (69d4 <adjustPageUpdate(KeyState&, unsigned long)+0x78>)
		num += in_range / 2;
    699e:	3b96      	subs	r3, #150	; 0x96
	long result = num / in_range + out_min;
    69a0:	fb81 2103 	smull	r2, r1, r1, r3
    69a4:	17da      	asrs	r2, r3, #31
    69a6:	eba2 1261 	sub.w	r2, r2, r1, asr #5
		if (in_range * num < 0) return result - 1;
    69aa:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    69ac:	bfd4      	ite	le
    69ae:	f102 0332 	addle.w	r3, r2, #50	; 0x32
		if (in_range * num < 0) return result - 1;
    69b2:	f102 0331 	addgt.w	r3, r2, #49	; 0x31
    touch_Thr = map(ctouchThrVal,ctouchHiLimit,ctouchLoLimit,ttouchLoLimit,ttouchHiLimit);
    69b6:	4a08      	ldr	r2, [pc, #32]	; (69d8 <adjustPageUpdate(KeyState&, unsigned long)+0x7c>)
    69b8:	6013      	str	r3, [r2, #0]
  }
  return redraw;
}
    69ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    menuState= MAIN_MENU;
    69bc:	4a07      	ldr	r2, [pc, #28]	; (69dc <adjustPageUpdate(KeyState&, unsigned long)+0x80>)
  bool redraw = false;
    69be:	4618      	mov	r0, r3
    menuState= MAIN_MENU;
    69c0:	2301      	movs	r3, #1
    69c2:	7013      	strb	r3, [r2, #0]
    stateFirstRun = true;
    69c4:	7023      	strb	r3, [r4, #0]
    69c6:	e7e0      	b.n	698a <adjustPageUpdate(KeyState&, unsigned long)+0x2e>
    69c8:	1fff8e9c 	.word	0x1fff8e9c
    69cc:	1fff9c32 	.word	0x1fff9c32
    69d0:	1fff9a66 	.word	0x1fff9a66
    69d4:	1b4e81b5 	.word	0x1b4e81b5
    69d8:	1fff8e70 	.word	0x1fff8e70
    69dc:	1fff9c59 	.word	0x1fff9c59

000069e0 <rotatorPrioOptionGet(MenuEntrySub const&, char*, char const**)>:
    if (priority) strncpy(out, "LO", 4);
    69e0:	4b05      	ldr	r3, [pc, #20]	; (69f8 <rotatorPrioOptionGet(MenuEntrySub const&, char*, char const**)+0x18>)
    69e2:	881b      	ldrh	r3, [r3, #0]
static void rotatorPrioOptionGet(SubMenuRef __unused, char* out, const char** __unused) {
    69e4:	4608      	mov	r0, r1
    if (priority) strncpy(out, "LO", 4);
    69e6:	b11b      	cbz	r3, 69f0 <rotatorPrioOptionGet(MenuEntrySub const&, char*, char const**)+0x10>
    69e8:	4904      	ldr	r1, [pc, #16]	; (69fc <rotatorPrioOptionGet(MenuEntrySub const&, char*, char const**)+0x1c>)
    69ea:	2204      	movs	r2, #4
    69ec:	f00b be60 	b.w	126b0 <strncpy>
    else strncpy(out, "HI", 4);
    69f0:	4903      	ldr	r1, [pc, #12]	; (6a00 <rotatorPrioOptionGet(MenuEntrySub const&, char*, char const**)+0x20>)
    69f2:	2204      	movs	r2, #4
    69f4:	f00b be5c 	b.w	126b0 <strncpy>
    69f8:	1fff9b90 	.word	0x1fff9b90
    69fc:	000139e4 	.word	0x000139e4
    6a00:	000139e8 	.word	0x000139e8

00006a04 <fwcDrop2OptionGet(MenuEntrySub const&, char*, char const**)>:
    if (fwcDrop2) strncpy(out, "ON", 4);
    6a04:	4b05      	ldr	r3, [pc, #20]	; (6a1c <fwcDrop2OptionGet(MenuEntrySub const&, char*, char const**)+0x18>)
    6a06:	881b      	ldrh	r3, [r3, #0]
static void fwcDrop2OptionGet(SubMenuRef __unused, char* out, const char** __unused) {
    6a08:	4608      	mov	r0, r1
    if (fwcDrop2) strncpy(out, "ON", 4);
    6a0a:	b11b      	cbz	r3, 6a14 <fwcDrop2OptionGet(MenuEntrySub const&, char*, char const**)+0x10>
    6a0c:	4904      	ldr	r1, [pc, #16]	; (6a20 <fwcDrop2OptionGet(MenuEntrySub const&, char*, char const**)+0x1c>)
    6a0e:	2204      	movs	r2, #4
    6a10:	f00b be4e 	b.w	126b0 <strncpy>
    else strncpy(out, "OFF", 4);
    6a14:	4903      	ldr	r1, [pc, #12]	; (6a24 <fwcDrop2OptionGet(MenuEntrySub const&, char*, char const**)+0x20>)
    6a16:	2204      	movs	r2, #4
    6a18:	f007 bd36 	b.w	e488 <memcpy>
    6a1c:	1fff9aba 	.word	0x1fff9aba
    6a20:	00013928 	.word	0x00013928
    6a24:	0001392c 	.word	0x0001392c

00006a28 <midiEnterHandlerFunc()>:
static bool midiEnterHandlerFunc() {
    6a28:	b538      	push	{r3, r4, r5, lr}
  readSwitches();
    6a2a:	f7fc f943 	bl	2cb4 <readSwitches()>
  if (pinkyKey && widiJumper){
    6a2e:	4b15      	ldr	r3, [pc, #84]	; (6a84 <midiEnterHandlerFunc()+0x5c>)
    6a30:	781b      	ldrb	r3, [r3, #0]
    6a32:	b113      	cbz	r3, 6a3a <midiEnterHandlerFunc()+0x12>
    6a34:	4c14      	ldr	r4, [pc, #80]	; (6a88 <midiEnterHandlerFunc()+0x60>)
    6a36:	7823      	ldrb	r3, [r4, #0]
    6a38:	b933      	cbnz	r3, 6a48 <midiEnterHandlerFunc()+0x20>
    writeSetting(MIDI_ADDR, MIDIchannel);
    6a3a:	4b14      	ldr	r3, [pc, #80]	; (6a8c <midiEnterHandlerFunc()+0x64>)
    6a3c:	2010      	movs	r0, #16
    6a3e:	8819      	ldrh	r1, [r3, #0]
    6a40:	f002 fc4a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    return true;
    6a44:	2001      	movs	r0, #1
}
    6a46:	bd38      	pop	{r3, r4, r5, pc}
    widiOn = !widiOn;
    6a48:	4d11      	ldr	r5, [pc, #68]	; (6a90 <midiEnterHandlerFunc()+0x68>)
    dipSwBits = dipSwBits ^ (1<<3);
    6a4a:	4a12      	ldr	r2, [pc, #72]	; (6a94 <midiEnterHandlerFunc()+0x6c>)
    widiOn = !widiOn;
    6a4c:	782b      	ldrb	r3, [r5, #0]
    dipSwBits = dipSwBits ^ (1<<3);
    6a4e:	8811      	ldrh	r1, [r2, #0]
    widiOn = !widiOn;
    6a50:	fab3 f383 	clz	r3, r3
    6a54:	095b      	lsrs	r3, r3, #5
    dipSwBits = dipSwBits ^ (1<<3);
    6a56:	f081 0108 	eor.w	r1, r1, #8
    writeSetting(DIPSW_BITS_ADDR,dipSwBits);
    6a5a:	2042      	movs	r0, #66	; 0x42
    widiOn = !widiOn;
    6a5c:	702b      	strb	r3, [r5, #0]
    dipSwBits = dipSwBits ^ (1<<3);
    6a5e:	8011      	strh	r1, [r2, #0]
    writeSetting(DIPSW_BITS_ADDR,dipSwBits);
    6a60:	f002 fc3a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    if (widiJumper && widiOn) digitalWrite(widiPowerPin, HIGH); else digitalWrite(widiPowerPin, LOW);
    6a64:	7823      	ldrb	r3, [r4, #0]
    6a66:	b13b      	cbz	r3, 6a78 <midiEnterHandlerFunc()+0x50>
    6a68:	782b      	ldrb	r3, [r5, #0]
    6a6a:	b12b      	cbz	r3, 6a78 <midiEnterHandlerFunc()+0x50>
    6a6c:	2101      	movs	r1, #1
    6a6e:	2021      	movs	r0, #33	; 0x21
    6a70:	f008 f93c 	bl	ecec <digitalWrite>
    6a74:	2000      	movs	r0, #0
}
    6a76:	bd38      	pop	{r3, r4, r5, pc}
    if (widiJumper && widiOn) digitalWrite(widiPowerPin, HIGH); else digitalWrite(widiPowerPin, LOW);
    6a78:	2100      	movs	r1, #0
    6a7a:	2021      	movs	r0, #33	; 0x21
    6a7c:	f008 f936 	bl	ecec <digitalWrite>
    6a80:	2000      	movs	r0, #0
}
    6a82:	bd38      	pop	{r3, r4, r5, pc}
    6a84:	1fff9b72 	.word	0x1fff9b72
    6a88:	1fff9c1e 	.word	0x1fff9c1e
    6a8c:	1fff9918 	.word	0x1fff9918
    6a90:	1fff9c1f 	.word	0x1fff9c1f
    6a94:	1fff9a88 	.word	0x1fff9a88

00006a98 <vib2BrDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if (DNWD == vib2BrDirection)
    6a98:	4b05      	ldr	r3, [pc, #20]	; (6ab0 <vib2BrDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x18>)
    6a9a:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6a9c:	4608      	mov	r0, r1
    if (DNWD == vib2BrDirection)
    6a9e:	b91b      	cbnz	r3, 6aa8 <vib2BrDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x10>
      strncpy(out, "NEG", 4);
    6aa0:	4904      	ldr	r1, [pc, #16]	; (6ab4 <vib2BrDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x1c>)
    6aa2:	2204      	movs	r2, #4
    6aa4:	f007 bcf0 	b.w	e488 <memcpy>
      strncpy(out, "POS", 4);
    6aa8:	4903      	ldr	r1, [pc, #12]	; (6ab8 <vib2BrDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>)
    6aaa:	2204      	movs	r2, #4
    6aac:	f007 bcec 	b.w	e488 <memcpy>
    6ab0:	1fff9bf8 	.word	0x1fff9bf8
    6ab4:	000139ec 	.word	0x000139ec
    6ab8:	000139f0 	.word	0x000139f0

00006abc <vibDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if (DNWD == vibDirection)
    6abc:	4b05      	ldr	r3, [pc, #20]	; (6ad4 <vibDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x18>)
    6abe:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6ac0:	4608      	mov	r0, r1
    if (DNWD == vibDirection)
    6ac2:	b91b      	cbnz	r3, 6acc <vibDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x10>
      strncpy(out, "NRM", 4);
    6ac4:	4904      	ldr	r1, [pc, #16]	; (6ad8 <vibDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x1c>)
    6ac6:	2204      	movs	r2, #4
    6ac8:	f007 bcde 	b.w	e488 <memcpy>
      strncpy(out, "REV", 4);
    6acc:	4903      	ldr	r1, [pc, #12]	; (6adc <vibDirMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>)
    6ace:	2204      	movs	r2, #4
    6ad0:	f007 bcda 	b.w	e488 <memcpy>
    6ad4:	1fff9bfc 	.word	0x1fff9bfc
    6ad8:	000139f4 	.word	0x000139f4
    6adc:	000139f8 	.word	0x000139f8

00006ae0 <fingeringMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6ae0:	b530      	push	{r4, r5, lr}
    strncpy(out, labs[fingering], 4);
    6ae2:	4b0d      	ldr	r3, [pc, #52]	; (6b18 <fingeringMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x38>)
    const char* labs[] = { "EWI", "EWX", "SAX", "EVI", "EVR", "XVI", "XVR" };  //ws added XVI,XVR
    6ae4:	4c0d      	ldr	r4, [pc, #52]	; (6b1c <fingeringMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x3c>)
    strncpy(out, labs[fingering], 4);
    6ae6:	f8b3 e000 	ldrh.w	lr, [r3]
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6aea:	b089      	sub	sp, #36	; 0x24
    strncpy(out, labs[fingering], 4);
    6aec:	ab08      	add	r3, sp, #32
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6aee:	460d      	mov	r5, r1
    strncpy(out, labs[fingering], 4);
    6af0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    const char* labs[] = { "EWI", "EWX", "SAX", "EVI", "EVR", "XVI", "XVR" };  //ws added XVI,XVR
    6af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6af6:	f10d 0c04 	add.w	ip, sp, #4
    6afa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6afe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    6b02:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    strncpy(out, labs[fingering], 4);
    6b06:	f85e 1c1c 	ldr.w	r1, [lr, #-28]
    6b0a:	2204      	movs	r2, #4
    6b0c:	4628      	mov	r0, r5
  },
    6b0e:	b009      	add	sp, #36	; 0x24
    6b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    strncpy(out, labs[fingering], 4);
    6b14:	f00b bdcc 	b.w	126b0 <strncpy>
    6b18:	1fff9ab8 	.word	0x1fff9ab8
    6b1c:	00014058 	.word	0x00014058

00006b20 <harmSelectMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub){
    6b20:	b508      	push	{r3, lr}
    if (readSetting(HARMSEL_ADDR) != harmSelect) {
    6b22:	2074      	movs	r0, #116	; 0x74
    6b24:	f003 ff02 	bl	a92c <readSetting(unsigned short)>
    6b28:	4b04      	ldr	r3, [pc, #16]	; (6b3c <harmSelectMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x1c>)
    6b2a:	8819      	ldrh	r1, [r3, #0]
    6b2c:	4288      	cmp	r0, r1
    6b2e:	d100      	bne.n	6b32 <harmSelectMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x12>
  }
    6b30:	bd08      	pop	{r3, pc}
    6b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      writeSetting(HARMSEL_ADDR,harmSelect);
    6b36:	2074      	movs	r0, #116	; 0x74
    6b38:	f002 bbce 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    6b3c:	1fff9ae2 	.word	0x1fff9ae2

00006b40 <harmSelectMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6b40:	b530      	push	{r4, r5, lr}
    strncpy(out, harmSelectMenuLabels[harmSelect], 4);
    6b42:	4b0d      	ldr	r3, [pc, #52]	; (6b78 <harmSelectMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x38>)
    const char* harmSelectMenuLabels[] = { "HM1", "HM2", "5TH", "OCT", "H1R", "H2R", "5TR", "OCR" };
    6b44:	4c0d      	ldr	r4, [pc, #52]	; (6b7c <harmSelectMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x3c>)
    strncpy(out, harmSelectMenuLabels[harmSelect], 4);
    6b46:	f8b3 e000 	ldrh.w	lr, [r3]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6b4a:	b089      	sub	sp, #36	; 0x24
    strncpy(out, harmSelectMenuLabels[harmSelect], 4);
    6b4c:	ab08      	add	r3, sp, #32
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6b4e:	460d      	mov	r5, r1
    strncpy(out, harmSelectMenuLabels[harmSelect], 4);
    6b50:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    const char* harmSelectMenuLabels[] = { "HM1", "HM2", "5TH", "OCT", "H1R", "H2R", "5TR", "OCR" };
    6b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6b56:	46ec      	mov	ip, sp
    6b58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6b5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6b60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    strncpy(out, harmSelectMenuLabels[harmSelect], 4);
    6b64:	f85e 1c20 	ldr.w	r1, [lr, #-32]
    6b68:	2204      	movs	r2, #4
    6b6a:	4628      	mov	r0, r5
  },
    6b6c:	b009      	add	sp, #36	; 0x24
    6b6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    strncpy(out, harmSelectMenuLabels[harmSelect], 4);
    6b72:	f00b bd9d 	b.w	126b0 <strncpy>
    6b76:	bf00      	nop
    6b78:	1fff9ae2 	.word	0x1fff9ae2
    6b7c:	00014074 	.word	0x00014074

00006b80 <extraMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused,char* out, const char** __unused unit) {
    6b80:	b530      	push	{r4, r5, lr}
    strncpy(out, extraMenuLabels[extraCT], 12);
    6b82:	4b0d      	ldr	r3, [pc, #52]	; (6bb8 <extraMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x38>)
    const char* extraMenuLabels[] = { "OFF", "MW", "FP", "CF", "SP" };
    6b84:	4c0d      	ldr	r4, [pc, #52]	; (6bbc <extraMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x3c>)
    strncpy(out, extraMenuLabels[extraCT], 12);
    6b86:	f8b3 e000 	ldrh.w	lr, [r3]
  [](SubMenuRef __unused,char* out, const char** __unused unit) {
    6b8a:	b087      	sub	sp, #28
    strncpy(out, extraMenuLabels[extraCT], 12);
    6b8c:	ab06      	add	r3, sp, #24
  [](SubMenuRef __unused,char* out, const char** __unused unit) {
    6b8e:	460d      	mov	r5, r1
    strncpy(out, extraMenuLabels[extraCT], 12);
    6b90:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    const char* extraMenuLabels[] = { "OFF", "MW", "FP", "CF", "SP" };
    6b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6b96:	f10d 0c04 	add.w	ip, sp, #4
    6b9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6b9e:	6823      	ldr	r3, [r4, #0]
    6ba0:	f8cc 3000 	str.w	r3, [ip]
    strncpy(out, extraMenuLabels[extraCT], 12);
    6ba4:	f85e 1c14 	ldr.w	r1, [lr, #-20]
    6ba8:	220c      	movs	r2, #12
    6baa:	4628      	mov	r0, r5
  },
    6bac:	b007      	add	sp, #28
    6bae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    strncpy(out, extraMenuLabels[extraCT], 12);
    6bb2:	f00b bd7d 	b.w	126b0 <strncpy>
    6bb6:	bf00      	nop
    6bb8:	1fff9a94 	.word	0x1fff9a94
    6bbc:	00014094 	.word	0x00014094

00006bc0 <portMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6bc0:	b530      	push	{r4, r5, lr}
    strncpy(out, labs[portamento], 4);
    6bc2:	4b0d      	ldr	r3, [pc, #52]	; (6bf8 <portMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x38>)
    const char* labs[] = { "OFF", "ON", "SW", "SEL", "SEE", "SWO" };
    6bc4:	4c0d      	ldr	r4, [pc, #52]	; (6bfc <portMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x3c>)
    strncpy(out, labs[portamento], 4);
    6bc6:	f8b3 e000 	ldrh.w	lr, [r3]
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6bca:	b087      	sub	sp, #28
    strncpy(out, labs[portamento], 4);
    6bcc:	ab06      	add	r3, sp, #24
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6bce:	460d      	mov	r5, r1
    strncpy(out, labs[portamento], 4);
    6bd0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    const char* labs[] = { "OFF", "ON", "SW", "SEL", "SEE", "SWO" };
    6bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6bd6:	46ec      	mov	ip, sp
    6bd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
    6be0:	e88c 0003 	stmia.w	ip, {r0, r1}
    strncpy(out, labs[portamento], 4);
    6be4:	f85e 1c18 	ldr.w	r1, [lr, #-24]
    6be8:	2204      	movs	r2, #4
    6bea:	4628      	mov	r0, r5
  },
    6bec:	b007      	add	sp, #28
    6bee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    strncpy(out, labs[portamento], 4);
    6bf2:	f00b bd5d 	b.w	126b0 <strncpy>
    6bf6:	bf00      	nop
    6bf8:	1fff9b8a 	.word	0x1fff9b8a
    6bfc:	000140a8 	.word	0x000140a8

00006c00 <leverCtlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6c00:	b500      	push	{lr}
    const char* labs[] = { "OFF", "VIB", "GLD", "CC" };
    6c02:	4b0a      	ldr	r3, [pc, #40]	; (6c2c <leverCtlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x2c>)
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6c04:	468c      	mov	ip, r1
    const char* labs[] = { "OFF", "VIB", "GLD", "CC" };
    6c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6c08:	b085      	sub	sp, #20
    const char* labs[] = { "OFF", "VIB", "GLD", "CC" };
    6c0a:	f10d 0e10 	add.w	lr, sp, #16
    6c0e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
    strncpy(out, labs[leverControl], 4);
    6c12:	4b07      	ldr	r3, [pc, #28]	; (6c30 <leverCtlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x30>)
    6c14:	881b      	ldrh	r3, [r3, #0]
    6c16:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
    6c1a:	2204      	movs	r2, #4
    6c1c:	f853 1c10 	ldr.w	r1, [r3, #-16]
    6c20:	4660      	mov	r0, ip
  },
    6c22:	b005      	add	sp, #20
    6c24:	f85d eb04 	ldr.w	lr, [sp], #4
    strncpy(out, labs[leverControl], 4);
    6c28:	f00b bd42 	b.w	126b0 <strncpy>
    6c2c:	000140c0 	.word	0x000140c0
    6c30:	1fff9b18 	.word	0x1fff9b18

00006c34 <biteCtlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6c34:	b530      	push	{r4, r5, lr}
    strncpy(out, labs[biteControl], 4);
    6c36:	4b0d      	ldr	r3, [pc, #52]	; (6c6c <biteCtlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x38>)
    const char* labs[] = { "OFF", "VIB", "GLD", "CC", "GLS" }; // ws: added GLS for glissando
    6c38:	4c0d      	ldr	r4, [pc, #52]	; (6c70 <biteCtlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x3c>)
    strncpy(out, labs[biteControl], 4);
    6c3a:	f8b3 e000 	ldrh.w	lr, [r3]
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6c3e:	b087      	sub	sp, #28
    strncpy(out, labs[biteControl], 4);
    6c40:	ab06      	add	r3, sp, #24
  [](SubMenuRef __unused,char* out, const char ** __unused unit) {
    6c42:	460d      	mov	r5, r1
    strncpy(out, labs[biteControl], 4);
    6c44:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    const char* labs[] = { "OFF", "VIB", "GLD", "CC", "GLS" }; // ws: added GLS for glissando
    6c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6c4a:	f10d 0c04 	add.w	ip, sp, #4
    6c4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6c52:	6823      	ldr	r3, [r4, #0]
    6c54:	f8cc 3000 	str.w	r3, [ip]
    strncpy(out, labs[biteControl], 4);
    6c58:	f85e 1c14 	ldr.w	r1, [lr, #-20]
    6c5c:	2204      	movs	r2, #4
    6c5e:	4628      	mov	r0, r5
  },
    6c60:	b007      	add	sp, #28
    6c62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    strncpy(out, labs[biteControl], 4);
    6c66:	f00b bd23 	b.w	126b0 <strncpy>
    6c6a:	bf00      	nop
    6c6c:	1fff9a0a 	.word	0x1fff9a0a
    6c70:	000140d0 	.word	0x000140d0

00006c74 <breathATMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  }, [](const MenuEntrySub & __unused sub) {
    6c74:	b508      	push	{r3, lr}
    if (readSetting(BREATH_AT_ADDR) != breathAT) {
    6c76:	2014      	movs	r0, #20
    6c78:	f003 fe58 	bl	a92c <readSetting(unsigned short)>
    6c7c:	4b05      	ldr	r3, [pc, #20]	; (6c94 <breathATMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x20>)
    6c7e:	8819      	ldrh	r1, [r3, #0]
    6c80:	4288      	cmp	r0, r1
    6c82:	d100      	bne.n	6c86 <breathATMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x12>
  }
    6c84:	bd08      	pop	{r3, pc}
      writeSetting(BREATH_AT_ADDR, breathAT);
    6c86:	2014      	movs	r0, #20
    6c88:	f002 fb26 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  }
    6c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      midiReset();
    6c90:	f002 b9e4 	b.w	905c <midiReset()>
    6c94:	1fff9a1c 	.word	0x1fff9a1c

00006c98 <breathCC2Menu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub){
    6c98:	b508      	push	{r3, lr}
    if (readSetting(BREATH_CC2_ADDR) != breathCC2) {
    6c9a:	2058      	movs	r0, #88	; 0x58
    6c9c:	f003 fe46 	bl	a92c <readSetting(unsigned short)>
    6ca0:	4b05      	ldr	r3, [pc, #20]	; (6cb8 <breathCC2Menu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x20>)
    6ca2:	8819      	ldrh	r1, [r3, #0]
    6ca4:	4288      	cmp	r0, r1
    6ca6:	d100      	bne.n	6caa <breathCC2Menu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x12>
  }
    6ca8:	bd08      	pop	{r3, pc}
      writeSetting(BREATH_CC2_ADDR,breathCC2);
    6caa:	2058      	movs	r0, #88	; 0x58
    6cac:	f002 fb14 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  }
    6cb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      midiReset();
    6cb4:	f002 b9d2 	b.w	905c <midiReset()>
    6cb8:	1fff9a20 	.word	0x1fff9a20

00006cbc <breathCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub){
    6cbc:	b508      	push	{r3, lr}
    if (readSetting(BREATH_CC_ADDR) != breathCC) {
    6cbe:	2012      	movs	r0, #18
    6cc0:	f003 fe34 	bl	a92c <readSetting(unsigned short)>
    6cc4:	4b05      	ldr	r3, [pc, #20]	; (6cdc <breathCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x20>)
    6cc6:	8819      	ldrh	r1, [r3, #0]
    6cc8:	4288      	cmp	r0, r1
    6cca:	d100      	bne.n	6cce <breathCCMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x12>
  }
    6ccc:	bd08      	pop	{r3, pc}
      writeSetting(BREATH_CC_ADDR,breathCC);
    6cce:	2012      	movs	r0, #18
    6cd0:	f002 fb02 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  }
    6cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      midiReset();
    6cd8:	f002 b9c0 	b.w	905c <midiReset()>
    6cdc:	1fff9a1e 	.word	0x1fff9a1e

00006ce0 <breathCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6ce0:	b530      	push	{r4, r5, lr}
    strncpy(out, breathCCMenuLabels[breathCC], 4);
    6ce2:	4b0f      	ldr	r3, [pc, #60]	; (6d20 <breathCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x40>)
    const char* breathCCMenuLabels[] = { "OFF", "MW", "BR", "VL", "EX", "MW+",
    6ce4:	4c0f      	ldr	r4, [pc, #60]	; (6d24 <breathCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x44>)
    strncpy(out, breathCCMenuLabels[breathCC], 4);
    6ce6:	f8b3 e000 	ldrh.w	lr, [r3]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6cea:	b08d      	sub	sp, #52	; 0x34
    strncpy(out, breathCCMenuLabels[breathCC], 4);
    6cec:	ab0c      	add	r3, sp, #48	; 0x30
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6cee:	460d      	mov	r5, r1
    strncpy(out, breathCCMenuLabels[breathCC], 4);
    6cf0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    const char* breathCCMenuLabels[] = { "OFF", "MW", "BR", "VL", "EX", "MW+",
    6cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6cf6:	f10d 0c04 	add.w	ip, sp, #4
    6cfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6d00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6d04:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    6d08:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    strncpy(out, breathCCMenuLabels[breathCC], 4);
    6d0c:	f85e 1c2c 	ldr.w	r1, [lr, #-44]
    6d10:	2204      	movs	r2, #4
    6d12:	4628      	mov	r0, r5
  },
    6d14:	b00d      	add	sp, #52	; 0x34
    6d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    strncpy(out, breathCCMenuLabels[breathCC], 4);
    6d1a:	f00b bcc9 	b.w	126b0 <strncpy>
    6d1e:	bf00      	nop
    6d20:	1fff9a1e 	.word	0x1fff9a1e
    6d24:	000140e4 	.word	0x000140e4

00006d28 <batteryTypeMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub){
    6d28:	b508      	push	{r3, lr}
    if (readSetting(BATTYPE_ADDR) != batteryType) {
    6d2a:	2070      	movs	r0, #112	; 0x70
    6d2c:	f003 fdfe 	bl	a92c <readSetting(unsigned short)>
    6d30:	4b04      	ldr	r3, [pc, #16]	; (6d44 <batteryTypeMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x1c>)
    6d32:	8819      	ldrh	r1, [r3, #0]
    6d34:	4288      	cmp	r0, r1
    6d36:	d100      	bne.n	6d3a <batteryTypeMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x12>
  }
    6d38:	bd08      	pop	{r3, pc}
    6d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      writeSetting(BATTYPE_ADDR,batteryType);
    6d3e:	2070      	movs	r0, #112	; 0x70
    6d40:	f002 baca 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    6d44:	1fff9a04 	.word	0x1fff9a04

00006d48 <batteryTypeMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6d48:	b500      	push	{lr}
    const char* breathCCMenuLabels[] = { "ALK", "NMH", "LIP" };
    6d4a:	4b0b      	ldr	r3, [pc, #44]	; (6d78 <batteryTypeMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x30>)
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6d4c:	468c      	mov	ip, r1
    const char* breathCCMenuLabels[] = { "ALK", "NMH", "LIP" };
    6d4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6d52:	b085      	sub	sp, #20
    strncpy(out, breathCCMenuLabels[batteryType], 4);
    6d54:	4b09      	ldr	r3, [pc, #36]	; (6d7c <batteryTypeMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x34>)
    const char* breathCCMenuLabels[] = { "ALK", "NMH", "LIP" };
    6d56:	f10d 0e10 	add.w	lr, sp, #16
    6d5a:	e90e 0007 	stmdb	lr, {r0, r1, r2}
    strncpy(out, breathCCMenuLabels[batteryType], 4);
    6d5e:	881b      	ldrh	r3, [r3, #0]
    6d60:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
    6d64:	2204      	movs	r2, #4
    6d66:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    6d6a:	4660      	mov	r0, ip
  },
    6d6c:	b005      	add	sp, #20
    6d6e:	f85d eb04 	ldr.w	lr, [sp], #4
    strncpy(out, breathCCMenuLabels[batteryType], 4);
    6d72:	f00b bc9d 	b.w	126b0 <strncpy>
    6d76:	bf00      	nop
    6d78:	00014110 	.word	0x00014110
    6d7c:	1fff9a04 	.word	0x1fff9a04

00006d80 <cvEcVibMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](const MenuEntrySub & __unused sub){
    6d80:	b508      	push	{r3, lr}
    if (readSetting(CVRATE_ADDR) != cvVibRate) {
    6d82:	20b8      	movs	r0, #184	; 0xb8
    6d84:	f003 fdd2 	bl	a92c <readSetting(unsigned short)>
    6d88:	4b04      	ldr	r3, [pc, #16]	; (6d9c <cvEcVibMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x1c>)
    6d8a:	8819      	ldrh	r1, [r3, #0]
    6d8c:	4288      	cmp	r0, r1
    6d8e:	d100      	bne.n	6d92 <cvEcVibMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x12>
  }
    6d90:	bd08      	pop	{r3, pc}
    6d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      writeSetting(CVRATE_ADDR,cvVibRate);
    6d96:	20b8      	movs	r0, #184	; 0xb8
    6d98:	f002 ba9e 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    6d9c:	1fff9a82 	.word	0x1fff9a82

00006da0 <fastBootMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  [](SubMenuRef __unused) {
    6da0:	b510      	push	{r4, lr}
    setBit(dipSwBits, DIPSW_FASTBOOT, fastBoot);
    6da2:	4b06      	ldr	r3, [pc, #24]	; (6dbc <fastBootMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x1c>)
    6da4:	4c06      	ldr	r4, [pc, #24]	; (6dc0 <fastBootMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x20>)
    6da6:	881a      	ldrh	r2, [r3, #0]
    6da8:	4620      	mov	r0, r4
    6daa:	2100      	movs	r1, #0
    6dac:	f002 fa84 	bl	92b8 <setBit(unsigned short&, unsigned char, unsigned short)>
    writeSetting(DIPSW_BITS_ADDR, dipSwBits);
    6db0:	8821      	ldrh	r1, [r4, #0]
    6db2:	2042      	movs	r0, #66	; 0x42
  }
    6db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeSetting(DIPSW_BITS_ADDR, dipSwBits);
    6db8:	f002 ba8e 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    6dbc:	1fff9a9e 	.word	0x1fff9a9e
    6dc0:	1fff9a88 	.word	0x1fff9a88

00006dc4 <dacModeMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6dc4:	b410      	push	{r4}
    strncpy(out, dacModeLabels[dacMode], 5);
    6dc6:	4b09      	ldr	r3, [pc, #36]	; (6dec <dacModeMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x28>)
    const char* dacModeLabels[] = { "BRTH", "PTCH"};
    6dc8:	4c09      	ldr	r4, [pc, #36]	; (6df0 <dacModeMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x2c>)
    6dca:	4a0a      	ldr	r2, [pc, #40]	; (6df4 <dacModeMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x30>)
    strncpy(out, dacModeLabels[dacMode], 5);
    6dcc:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6dce:	b083      	sub	sp, #12
    const char* dacModeLabels[] = { "BRTH", "PTCH"};
    6dd0:	e9cd 4200 	strd	r4, r2, [sp]
    strncpy(out, dacModeLabels[dacMode], 5);
    6dd4:	a802      	add	r0, sp, #8
    6dd6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    6dda:	4608      	mov	r0, r1
    strncpy(out, dacModeLabels[dacMode], 5);
    6ddc:	f853 1c08 	ldr.w	r1, [r3, #-8]
    6de0:	2205      	movs	r2, #5
  },
    6de2:	b003      	add	sp, #12
    6de4:	bc10      	pop	{r4}
    strncpy(out, dacModeLabels[dacMode], 5);
    6de6:	f00b bc63 	b.w	126b0 <strncpy>
    6dea:	bf00      	nop
    6dec:	1fff9a84 	.word	0x1fff9a84
    6df0:	000139fc 	.word	0x000139fc
    6df4:	00013a04 	.word	0x00013a04

00006df8 <gateOpenMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  }, [](const MenuEntrySub & __unused sub) {
    6df8:	b510      	push	{r4, lr}
    setBit(dipSwBits, DIPSW_GATEOPEN, gateOpenEnable);
    6dfa:	4b06      	ldr	r3, [pc, #24]	; (6e14 <gateOpenMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x1c>)
    6dfc:	4c06      	ldr	r4, [pc, #24]	; (6e18 <gateOpenMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x20>)
    6dfe:	881a      	ldrh	r2, [r3, #0]
    6e00:	4620      	mov	r0, r4
    6e02:	2104      	movs	r1, #4
    6e04:	f002 fa58 	bl	92b8 <setBit(unsigned short&, unsigned char, unsigned short)>
    writeSetting(DIPSW_BITS_ADDR, dipSwBits);
    6e08:	8821      	ldrh	r1, [r4, #0]
    6e0a:	2042      	movs	r0, #66	; 0x42
  }
    6e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeSetting(DIPSW_BITS_ADDR, dipSwBits);
    6e10:	f002 ba62 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    6e14:	1fff9ac2 	.word	0x1fff9ac2
    6e18:	1fff9a88 	.word	0x1fff9a88

00006e1c <legacyBRMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  }, [](const MenuEntrySub & __unused sub) {
    6e1c:	b510      	push	{r4, lr}
    setBit(dipSwBits, DIPSW_LEGACYBRACT, legacyBrAct);
    6e1e:	4b06      	ldr	r3, [pc, #24]	; (6e38 <legacyBRMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x1c>)
    6e20:	4c06      	ldr	r4, [pc, #24]	; (6e3c <legacyBRMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x20>)
    6e22:	881a      	ldrh	r2, [r3, #0]
    6e24:	4620      	mov	r0, r4
    6e26:	2102      	movs	r1, #2
    6e28:	f002 fa46 	bl	92b8 <setBit(unsigned short&, unsigned char, unsigned short)>
    writeSetting(DIPSW_BITS_ADDR, dipSwBits);
    6e2c:	8821      	ldrh	r1, [r4, #0]
    6e2e:	2042      	movs	r0, #66	; 0x42
  }
    6e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeSetting(DIPSW_BITS_ADDR, dipSwBits);
    6e34:	f002 ba50 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    6e38:	1fff9b10 	.word	0x1fff9b10
    6e3c:	1fff9a88 	.word	0x1fff9a88

00006e40 <legacyPBMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)>:
  }, [](const MenuEntrySub & __unused sub) {
    6e40:	b510      	push	{r4, lr}
    setBit(dipSwBits, DIPSW_LEGACY, legacy);
    6e42:	4b06      	ldr	r3, [pc, #24]	; (6e5c <legacyPBMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x1c>)
    6e44:	4c06      	ldr	r4, [pc, #24]	; (6e60 <legacyPBMenu::{lambda(MenuEntrySub const&)#2}::_FUN(MenuEntrySub const)+0x20>)
    6e46:	881a      	ldrh	r2, [r3, #0]
    6e48:	4620      	mov	r0, r4
    6e4a:	2101      	movs	r1, #1
    6e4c:	f002 fa34 	bl	92b8 <setBit(unsigned short&, unsigned char, unsigned short)>
    writeSetting(DIPSW_BITS_ADDR,dipSwBits);
    6e50:	8821      	ldrh	r1, [r4, #0]
    6e52:	2042      	movs	r0, #66	; 0x42
  }
    6e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeSetting(DIPSW_BITS_ADDR,dipSwBits);
    6e58:	f002 ba3e 	b.w	92d8 <writeSetting(unsigned short, unsigned short)>
    6e5c:	1fff9b0e 	.word	0x1fff9b0e
    6e60:	1fff9a88 	.word	0x1fff9a88

00006e64 <numToString(short, char*, bool) [clone .isra.0]>:
  uint16_t absVal = abs(value);
    6e64:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
    6e68:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
  if(value < 0) {
    6e6c:	2800      	cmp	r0, #0
static const char* numToString(int16_t value, char* dest, bool plusSign = false) {
    6e6e:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    6e70:	fa1f fc8c 	uxth.w	ip, ip
  if(value < 0) {
    6e74:	db20      	blt.n	6eb8 <numToString(short, char*, bool) [clone .isra.0]+0x54>
  } else if(plusSign && value) {
    6e76:	b9ca      	cbnz	r2, 6eac <numToString(short, char*, bool) [clone .isra.0]+0x48>
  while((c*10) < absVal+1) c *= 10;
    6e78:	2001      	movs	r0, #1
    6e7a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    6e7e:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
    6e82:	4603      	mov	r3, r0
    6e84:	ea4f 0042 	mov.w	r0, r2, lsl #1
    6e88:	daf7      	bge.n	6e7a <numToString(short, char*, bool) [clone .isra.0]+0x16>
    c /= 10;
    6e8a:	4c0d      	ldr	r4, [pc, #52]	; (6ec0 <numToString(short, char*, bool) [clone .isra.0]+0x5c>)
    int tmp = absVal / c;
    6e8c:	fbbc f2f3 	udiv	r2, ip, r3
    c /= 10;
    6e90:	fba4 e003 	umull	lr, r0, r4, r3
    *ptr++ = tmp + '0';
    6e94:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    absVal %= c;
    6e98:	fb03 c212 	mls	r2, r3, r2, ip
  while(c > 0) {
    6e9c:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    6e9e:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    6ea2:	fa1f fc82 	uxth.w	ip, r2
  while(c > 0) {
    6ea6:	d1f1      	bne.n	6e8c <numToString(short, char*, bool) [clone .isra.0]+0x28>
  *ptr = 0;
    6ea8:	700b      	strb	r3, [r1, #0]
}
    6eaa:	bd10      	pop	{r4, pc}
  } else if(plusSign && value) {
    6eac:	2800      	cmp	r0, #0
    6eae:	d0e3      	beq.n	6e78 <numToString(short, char*, bool) [clone .isra.0]+0x14>
    *ptr++ = '+';
    6eb0:	232b      	movs	r3, #43	; 0x2b
    6eb2:	f801 3b01 	strb.w	r3, [r1], #1
    6eb6:	e7df      	b.n	6e78 <numToString(short, char*, bool) [clone .isra.0]+0x14>
    *ptr++ = '-';
    6eb8:	232d      	movs	r3, #45	; 0x2d
    6eba:	f801 3b01 	strb.w	r3, [r1], #1
    6ebe:	e7db      	b.n	6e78 <numToString(short, char*, bool) [clone .isra.0]+0x14>
    6ec0:	cccccccd 	.word	0xcccccccd

00006ec4 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if (pinkySetting == PBD)
    6ec4:	4b1a      	ldr	r3, [pc, #104]	; (6f30 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x6c>)
    6ec6:	881b      	ldrh	r3, [r3, #0]
    6ec8:	2b0c      	cmp	r3, #12
  [](SubMenuRef __unused,char* textBuffer, const char** __unused unit) {
    6eca:	4608      	mov	r0, r1
    if (pinkySetting == PBD)
    6ecc:	d009      	beq.n	6ee2 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x1e>
    else if (pinkySetting == EC2)
    6ece:	f1a3 0219 	sub.w	r2, r3, #25
    6ed2:	2a06      	cmp	r2, #6
    6ed4:	d825      	bhi.n	6f22 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5e>
    6ed6:	e8df f002 	tbb	[pc, r2]
    6eda:	100c      	.short	0x100c
    6edc:	201c1814 	.word	0x201c1814
    6ee0:	08          	.byte	0x08
    6ee1:	00          	.byte	0x00
      strncpy(textBuffer, "PBD", 4);
    6ee2:	4914      	ldr	r1, [pc, #80]	; (6f34 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x70>)
    6ee4:	2204      	movs	r2, #4
    6ee6:	f007 bacf 	b.w	e488 <memcpy>
      strncpy(textBuffer, "QTN", 4);
    6eea:	4913      	ldr	r1, [pc, #76]	; (6f38 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x74>)
    6eec:	2204      	movs	r2, #4
    6eee:	f007 bacb 	b.w	e488 <memcpy>
      strncpy(textBuffer, "ECB", 4);
    6ef2:	4912      	ldr	r1, [pc, #72]	; (6f3c <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x78>)
    6ef4:	2204      	movs	r2, #4
    6ef6:	f007 bac7 	b.w	e488 <memcpy>
      strncpy(textBuffer, "ECS", 4);
    6efa:	4911      	ldr	r1, [pc, #68]	; (6f40 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x7c>)
    6efc:	2204      	movs	r2, #4
    6efe:	f007 bac3 	b.w	e488 <memcpy>
      strncpy(textBuffer, "LVL", 4);
    6f02:	4910      	ldr	r1, [pc, #64]	; (6f44 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x80>)
    6f04:	2204      	movs	r2, #4
    6f06:	f007 babf 	b.w	e488 <memcpy>
      strncpy(textBuffer, "LVP", 4);
    6f0a:	490f      	ldr	r1, [pc, #60]	; (6f48 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x84>)
    6f0c:	2204      	movs	r2, #4
    6f0e:	f007 babb 	b.w	e488 <memcpy>
      strncpy(textBuffer, "GLD", 4);
    6f12:	490e      	ldr	r1, [pc, #56]	; (6f4c <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x88>)
    6f14:	2204      	movs	r2, #4
    6f16:	f007 bab7 	b.w	e488 <memcpy>
      strncpy(textBuffer, "ECH", 4);
    6f1a:	490d      	ldr	r1, [pc, #52]	; (6f50 <pinkyMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x8c>)
    6f1c:	2204      	movs	r2, #4
    6f1e:	f007 bab3 	b.w	e488 <memcpy>
      numToString(pinkySetting-12, textBuffer, true);
    6f22:	3b0c      	subs	r3, #12
    6f24:	4601      	mov	r1, r0
    6f26:	2201      	movs	r2, #1
    6f28:	b218      	sxth	r0, r3
    6f2a:	f7ff bf9b 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    6f2e:	bf00      	nop
    6f30:	1fff9b74 	.word	0x1fff9b74
    6f34:	00013a0c 	.word	0x00013a0c
    6f38:	00013a28 	.word	0x00013a28
    6f3c:	00013a10 	.word	0x00013a10
    6f40:	00013a14 	.word	0x00013a14
    6f44:	00013a18 	.word	0x00013a18
    6f48:	00013a1c 	.word	0x00013a1c
    6f4c:	00013a20 	.word	0x00013a20
    6f50:	00013a24 	.word	0x00013a24

00006f54 <lpinky3Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if (lpinky3 == 0)
    6f54:	4b09      	ldr	r3, [pc, #36]	; (6f7c <lpinky3Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x28>)
    6f56:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused,char* textBuffer, const char** __unused unit) {
    6f58:	4608      	mov	r0, r1
    if (lpinky3 == 0)
    6f5a:	b15b      	cbz	r3, 6f74 <lpinky3Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    else if (lpinky3 == MOD)
    6f5c:	2b0d      	cmp	r3, #13
    6f5e:	d005      	beq.n	6f6c <lpinky3Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x18>
      numToString(lpinky3-13, textBuffer, true);
    6f60:	f1a3 000d 	sub.w	r0, r3, #13
    6f64:	2201      	movs	r2, #1
    6f66:	b200      	sxth	r0, r0
    6f68:	f7ff bf7c 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
      strncpy(textBuffer, "MOD", 4);
    6f6c:	4904      	ldr	r1, [pc, #16]	; (6f80 <lpinky3Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x2c>)
    6f6e:	2204      	movs	r2, #4
    6f70:	f007 ba8a 	b.w	e488 <memcpy>
      strncpy(textBuffer, "OFF", 4);
    6f74:	4903      	ldr	r1, [pc, #12]	; (6f84 <lpinky3Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x30>)
    6f76:	2204      	movs	r2, #4
    6f78:	f007 ba86 	b.w	e488 <memcpy>
    6f7c:	1fff9b2a 	.word	0x1fff9b2a
    6f80:	00013a2c 	.word	0x00013a2c
    6f84:	0001392c 	.word	0x0001392c

00006f88 <wlPowerMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(-6*wireless_power, out, true);
    6f88:	4b04      	ldr	r3, [pc, #16]	; (6f9c <wlPowerMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x14>)
    6f8a:	8818      	ldrh	r0, [r3, #0]
    6f8c:	2201      	movs	r2, #1
    6f8e:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    6f92:	4090      	lsls	r0, r2
    6f94:	b200      	sxth	r0, r0
    6f96:	f7ff bf65 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    6f9a:	bf00      	nop
    6f9c:	1fff9c30 	.word	0x1fff9c30

00006fa0 <cvScaleMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(cvScale-100, out, true);
    6fa0:	4b03      	ldr	r3, [pc, #12]	; (6fb0 <cvScaleMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x10>)
    6fa2:	8818      	ldrh	r0, [r3, #0]
    6fa4:	3864      	subs	r0, #100	; 0x64
    6fa6:	2201      	movs	r2, #1
    6fa8:	b200      	sxth	r0, r0
    6faa:	f7ff bf5b 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    6fae:	bf00      	nop
    6fb0:	1fff9a76 	.word	0x1fff9a76

00006fb4 <cvTuneMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(cvTune-100, out, true);
    6fb4:	4b03      	ldr	r3, [pc, #12]	; (6fc4 <cvTuneMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x10>)
    6fb6:	8818      	ldrh	r0, [r3, #0]
    6fb8:	3864      	subs	r0, #100	; 0x64
    6fba:	2201      	movs	r2, #1
    6fbc:	b200      	sxth	r0, r0
    6fbe:	f7ff bf51 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    6fc2:	bf00      	nop
    6fc4:	1fff9a80 	.word	0x1fff9a80

00006fc8 <octaveMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(octave-3, out, true);
    6fc8:	4b03      	ldr	r3, [pc, #12]	; (6fd8 <octaveMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x10>)
    6fca:	8818      	ldrh	r0, [r3, #0]
    6fcc:	3803      	subs	r0, #3
    6fce:	2201      	movs	r2, #1
    6fd0:	b200      	sxth	r0, r0
    6fd2:	f7ff bf47 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    6fd6:	bf00      	nop
    6fd8:	1fff9b36 	.word	0x1fff9b36

00006fdc <parallelCOptionGet(MenuEntrySub const&, char*, char const**)>:
  numToString(rotations_c.parallel-24, out, true);
    6fdc:	4b03      	ldr	r3, [pc, #12]	; (6fec <parallelCOptionGet(MenuEntrySub const&, char*, char const**)+0x10>)
    6fde:	8818      	ldrh	r0, [r3, #0]
    6fe0:	3818      	subs	r0, #24
    6fe2:	2201      	movs	r2, #1
    6fe4:	b200      	sxth	r0, r0
    6fe6:	f7ff bf3d 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    6fea:	bf00      	nop
    6fec:	1fff9bb8 	.word	0x1fff9bb8

00006ff0 <parallelBOptionGet(MenuEntrySub const&, char*, char const**)>:
  numToString(rotations_b.parallel-24, out, true);
    6ff0:	4b03      	ldr	r3, [pc, #12]	; (7000 <parallelBOptionGet(MenuEntrySub const&, char*, char const**)+0x10>)
    6ff2:	8818      	ldrh	r0, [r3, #0]
    6ff4:	3818      	subs	r0, #24
    6ff6:	2201      	movs	r2, #1
    6ff8:	b200      	sxth	r0, r0
    6ffa:	f7ff bf33 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    6ffe:	bf00      	nop
    7000:	1fff9bac 	.word	0x1fff9bac

00007004 <parallelOptionGet(MenuEntrySub const&, char*, char const**)>:
  numToString(rotations_a.parallel-24, out, true);
    7004:	4b03      	ldr	r3, [pc, #12]	; (7014 <parallelOptionGet(MenuEntrySub const&, char*, char const**)+0x10>)
    7006:	8818      	ldrh	r0, [r3, #0]
    7008:	3818      	subs	r0, #24
    700a:	2201      	movs	r2, #1
    700c:	b200      	sxth	r0, r0
    700e:	f7ff bf29 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    7012:	bf00      	nop
    7014:	1fff9ba0 	.word	0x1fff9ba0

00007018 <rotatorOptionGet(MenuEntrySub const&, char*, char const**)>:
  numToString((*sub.valuePtr) - 24, out, true);
    7018:	68c3      	ldr	r3, [r0, #12]
    701a:	8818      	ldrh	r0, [r3, #0]
    701c:	3818      	subs	r0, #24
    701e:	2201      	movs	r2, #1
    7020:	b200      	sxth	r0, r0
    7022:	f7ff bf1f 	b.w	6e64 <numToString(short, char*, bool) [clone .isra.0]>
    7026:	bf00      	nop

00007028 <otfKeyOptionGet(MenuEntrySub const&, char*, char const**)>:
    if (otfKey) strncpy(out, "ON", 4);
    7028:	4b05      	ldr	r3, [pc, #20]	; (7040 <otfKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x18>)
    702a:	881b      	ldrh	r3, [r3, #0]
static void otfKeyOptionGet(SubMenuRef __unused, char* out, const char** __unused) {
    702c:	4608      	mov	r0, r1
    if (otfKey) strncpy(out, "ON", 4);
    702e:	b11b      	cbz	r3, 7038 <otfKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x10>
    if (fwcDrop2) strncpy(out, "ON", 4);
    7030:	4904      	ldr	r1, [pc, #16]	; (7044 <otfKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x1c>)
    7032:	2204      	movs	r2, #4
    7034:	f00b bb3c 	b.w	126b0 <strncpy>
    else strncpy(out, "OFF", 4);
    7038:	4903      	ldr	r1, [pc, #12]	; (7048 <otfKeyOptionGet(MenuEntrySub const&, char*, char const**)+0x20>)
    703a:	2204      	movs	r2, #4
    703c:	f007 ba24 	b.w	e488 <memcpy>
    7040:	1fff9b5e 	.word	0x1fff9b5e
    7044:	00013928 	.word	0x00013928
    7048:	0001392c 	.word	0x0001392c

0000704c <fwcLockHOptionGet(MenuEntrySub const&, char*, char const**)>:
    if (fwcLockH) strncpy(out, "ON", 4);
    704c:	4b05      	ldr	r3, [pc, #20]	; (7064 <fwcLockHOptionGet(MenuEntrySub const&, char*, char const**)+0x18>)
    704e:	881b      	ldrh	r3, [r3, #0]
static void fwcLockHOptionGet(SubMenuRef __unused, char* out, const char** __unused) {
    7050:	4608      	mov	r0, r1
    if (fwcLockH) strncpy(out, "ON", 4);
    7052:	b11b      	cbz	r3, 705c <fwcLockHOptionGet(MenuEntrySub const&, char*, char const**)+0x10>
    if (fwcDrop2) strncpy(out, "ON", 4);
    7054:	4904      	ldr	r1, [pc, #16]	; (7068 <fwcLockHOptionGet(MenuEntrySub const&, char*, char const**)+0x1c>)
    7056:	2204      	movs	r2, #4
    7058:	f00b bb2a 	b.w	126b0 <strncpy>
    else strncpy(out, "OFF", 4);
    705c:	4903      	ldr	r1, [pc, #12]	; (706c <fwcLockHOptionGet(MenuEntrySub const&, char*, char const**)+0x20>)
    705e:	2204      	movs	r2, #4
    7060:	f007 ba12 	b.w	e488 <memcpy>
    7064:	1fff9abc 	.word	0x1fff9abc
    7068:	00013928 	.word	0x00013928
    706c:	0001392c 	.word	0x0001392c

00007070 <rotatorSave(MenuEntrySub const&)>:
static void rotatorSave(const MenuEntrySub& __unused sub) {
    7070:	b538      	push	{r3, r4, r5, lr}
    7072:	4d09      	ldr	r5, [pc, #36]	; (7098 <rotatorSave(MenuEntrySub const&)+0x28>)
    7074:	2446      	movs	r4, #70	; 0x46
    stored = readSetting(settingAddr+2*i);
    7076:	4620      	mov	r0, r4
    7078:	f003 fc58 	bl	a92c <readSetting(unsigned short)>
    if(stored != rotator->rotations[i])
    707c:	f835 1f02 	ldrh.w	r1, [r5, #2]!
    7080:	b200      	sxth	r0, r0
    7082:	4288      	cmp	r0, r1
      writeSetting(settingAddr+2*i,(rotator->rotations[i]));
    7084:	4620      	mov	r0, r4
    if(stored != rotator->rotations[i])
    7086:	d001      	beq.n	708c <rotatorSave(MenuEntrySub const&)+0x1c>
      writeSetting(settingAddr+2*i,(rotator->rotations[i]));
    7088:	f002 f926 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  for(int i = 0; i < 4; ++i) {
    708c:	3402      	adds	r4, #2
    708e:	b2a4      	uxth	r4, r4
    7090:	2c4e      	cmp	r4, #78	; 0x4e
    7092:	d1f0      	bne.n	7076 <rotatorSave(MenuEntrySub const&)+0x6>
}
    7094:	bd38      	pop	{r3, r4, r5, pc}
    7096:	bf00      	nop
    7098:	1fff9ba0 	.word	0x1fff9ba0

0000709c <rotatorBSave(MenuEntrySub const&)>:
static void rotatorBSave(const MenuEntrySub& __unused sub) {
    709c:	b538      	push	{r3, r4, r5, lr}
    709e:	4d09      	ldr	r5, [pc, #36]	; (70c4 <rotatorBSave(MenuEntrySub const&)+0x28>)
    70a0:	2478      	movs	r4, #120	; 0x78
    stored = readSetting(settingAddr+2*i);
    70a2:	4620      	mov	r0, r4
    70a4:	f003 fc42 	bl	a92c <readSetting(unsigned short)>
    if(stored != rotator->rotations[i])
    70a8:	f835 1f02 	ldrh.w	r1, [r5, #2]!
    70ac:	b200      	sxth	r0, r0
    70ae:	4288      	cmp	r0, r1
      writeSetting(settingAddr+2*i,(rotator->rotations[i]));
    70b0:	4620      	mov	r0, r4
    if(stored != rotator->rotations[i])
    70b2:	d001      	beq.n	70b8 <rotatorBSave(MenuEntrySub const&)+0x1c>
      writeSetting(settingAddr+2*i,(rotator->rotations[i]));
    70b4:	f002 f910 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  for(int i = 0; i < 4; ++i) {
    70b8:	3402      	adds	r4, #2
    70ba:	b2a4      	uxth	r4, r4
    70bc:	2c80      	cmp	r4, #128	; 0x80
    70be:	d1f0      	bne.n	70a2 <rotatorBSave(MenuEntrySub const&)+0x6>
}
    70c0:	bd38      	pop	{r3, r4, r5, pc}
    70c2:	bf00      	nop
    70c4:	1fff9bac 	.word	0x1fff9bac

000070c8 <idlePageUpdate(KeyState&, unsigned long)>:

  return redraw;
}


static bool idlePageUpdate(KeyState& __unused input, uint32_t __unused timeNow) {
    70c8:	b570      	push	{r4, r5, r6, lr}
  bool redraw = false;
  if (stateFirstRun) {
    70ca:	4e3d      	ldr	r6, [pc, #244]	; (71c0 <idlePageUpdate(KeyState&, unsigned long)+0xf8>)
    70cc:	7835      	ldrb	r5, [r6, #0]
static bool idlePageUpdate(KeyState& __unused input, uint32_t __unused timeNow) {
    70ce:	4604      	mov	r4, r0
  if (stateFirstRun) {
    70d0:	b91d      	cbnz	r5, 70da <idlePageUpdate(KeyState&, unsigned long)+0x12>
    display.ssd1306_command(SSD1306_DISPLAYOFF);
    display.clearDisplay();
    redraw = true;
    stateFirstRun = 0;
  }
  if (input.changed) {
    70d2:	7863      	ldrb	r3, [r4, #1]
    70d4:	b973      	cbnz	r3, 70f4 <idlePageUpdate(KeyState&, unsigned long)+0x2c>
        //all keys depressed, reboot to programming mode
        _reboot_Teensyduino_();
    }
  }
  return redraw;
}
    70d6:	4628      	mov	r0, r5
    70d8:	bd70      	pop	{r4, r5, r6, pc}
    display.ssd1306_command(SSD1306_DISPLAYOFF);
    70da:	483a      	ldr	r0, [pc, #232]	; (71c4 <idlePageUpdate(KeyState&, unsigned long)+0xfc>)
    70dc:	21ae      	movs	r1, #174	; 0xae
    70de:	f005 fbc9 	bl	c874 <Adafruit_SSD1306::ssd1306_command(unsigned char)>
    display.clearDisplay();
    70e2:	4838      	ldr	r0, [pc, #224]	; (71c4 <idlePageUpdate(KeyState&, unsigned long)+0xfc>)
    70e4:	f005 fe24 	bl	cd30 <Adafruit_SSD1306::clearDisplay()>
    stateFirstRun = 0;
    70e8:	2300      	movs	r3, #0
    70ea:	7033      	strb	r3, [r6, #0]
  if (input.changed) {
    70ec:	7863      	ldrb	r3, [r4, #1]
    redraw = true;
    70ee:	2501      	movs	r5, #1
  if (input.changed) {
    70f0:	2b00      	cmp	r3, #0
    70f2:	d0f0      	beq.n	70d6 <idlePageUpdate(KeyState&, unsigned long)+0xe>
  readSwitches();
    70f4:	f7fb fdde 	bl	2cb4 <readSwitches()>
  return LH1+2*LH2+4*LH3;
    70f8:	4933      	ldr	r1, [pc, #204]	; (71c8 <idlePageUpdate(KeyState&, unsigned long)+0x100>)
    70fa:	4b34      	ldr	r3, [pc, #208]	; (71cc <idlePageUpdate(KeyState&, unsigned long)+0x104>)
    70fc:	7809      	ldrb	r1, [r1, #0]
    70fe:	4a34      	ldr	r2, [pc, #208]	; (71d0 <idlePageUpdate(KeyState&, unsigned long)+0x108>)
    7100:	781b      	ldrb	r3, [r3, #0]
    7102:	7812      	ldrb	r2, [r2, #0]
    7104:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    switch (input.current){
    7108:	7821      	ldrb	r1, [r4, #0]
  return LH1+2*LH2+4*LH3;
    710a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    switch (input.current){
    710e:	1e4a      	subs	r2, r1, #1
    7110:	2a0e      	cmp	r2, #14
    7112:	d8e0      	bhi.n	70d6 <idlePageUpdate(KeyState&, unsigned long)+0xe>
    7114:	a001      	add	r0, pc, #4	; (adr r0, 711c <idlePageUpdate(KeyState&, unsigned long)+0x54>)
    7116:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    711a:	bf00      	nop
    711c:	00007159 	.word	0x00007159
    7120:	00007185 	.word	0x00007185
    7124:	000070d7 	.word	0x000070d7
    7128:	00007159 	.word	0x00007159
    712c:	000070d7 	.word	0x000070d7
    7130:	000070d7 	.word	0x000070d7
    7134:	000070d7 	.word	0x000070d7
    7138:	000071ab 	.word	0x000071ab
    713c:	000070d7 	.word	0x000070d7
    7140:	000070d7 	.word	0x000070d7
    7144:	000070d7 	.word	0x000070d7
    7148:	000070d7 	.word	0x000070d7
    714c:	000070d7 	.word	0x000070d7
    7150:	000070d7 	.word	0x000070d7
    7154:	000071bd 	.word	0x000071bd
        if (!trills) {
    7158:	b9b3      	cbnz	r3, 7188 <idlePageUpdate(KeyState&, unsigned long)+0xc0>
          patch = (((patch-1u) + ((input.current == BTN_UP)?1u:-1u))&127u) + 1u;
    715a:	481e      	ldr	r0, [pc, #120]	; (71d4 <idlePageUpdate(KeyState&, unsigned long)+0x10c>)
    715c:	8802      	ldrh	r2, [r0, #0]
    715e:	2904      	cmp	r1, #4
    7160:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7164:	f102 32ff 	add.w	r2, r2, #4294967295
    7168:	bf08      	it	eq
    716a:	2301      	moveq	r3, #1
    716c:	4413      	add	r3, r2
    716e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7172:	3301      	adds	r3, #1
    7174:	8003      	strh	r3, [r0, #0]
        menuState= PATCH_VIEW;
    7176:	4a18      	ldr	r2, [pc, #96]	; (71d8 <idlePageUpdate(KeyState&, unsigned long)+0x110>)
    7178:	2102      	movs	r1, #2
        stateFirstRun = 1;
    717a:	2301      	movs	r3, #1
        menuState= PATCH_VIEW;
    717c:	7011      	strb	r1, [r2, #0]
        stateFirstRun = 1;
    717e:	7033      	strb	r3, [r6, #0]
}
    7180:	4628      	mov	r0, r5
    7182:	bd70      	pop	{r4, r5, r6, pc}
        if (trills && (fastPatch[trills-1] > 0)){
    7184:	2b00      	cmp	r3, #0
    7186:	d0f6      	beq.n	7176 <idlePageUpdate(KeyState&, unsigned long)+0xae>
    7188:	4a14      	ldr	r2, [pc, #80]	; (71dc <idlePageUpdate(KeyState&, unsigned long)+0x114>)
    718a:	3b01      	subs	r3, #1
    718c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7190:	2b00      	cmp	r3, #0
    7192:	d0f0      	beq.n	7176 <idlePageUpdate(KeyState&, unsigned long)+0xae>
          patch = fastPatch[trills-1];
    7194:	4a0f      	ldr	r2, [pc, #60]	; (71d4 <idlePageUpdate(KeyState&, unsigned long)+0x10c>)
          doPatchUpdate = 1;
    7196:	4812      	ldr	r0, [pc, #72]	; (71e0 <idlePageUpdate(KeyState&, unsigned long)+0x118>)
          patch = fastPatch[trills-1];
    7198:	8013      	strh	r3, [r2, #0]
          activePatch = 0;
    719a:	4912      	ldr	r1, [pc, #72]	; (71e4 <idlePageUpdate(KeyState&, unsigned long)+0x11c>)
          FPD = 1;
    719c:	4a12      	ldr	r2, [pc, #72]	; (71e8 <idlePageUpdate(KeyState&, unsigned long)+0x120>)
          doPatchUpdate = 1;
    719e:	2301      	movs	r3, #1
    71a0:	7003      	strb	r3, [r0, #0]
          activePatch = 0;
    71a2:	2000      	movs	r0, #0
    71a4:	7008      	strb	r0, [r1, #0]
          FPD = 1;
    71a6:	7013      	strb	r3, [r2, #0]
    71a8:	e7e5      	b.n	7176 <idlePageUpdate(KeyState&, unsigned long)+0xae>
        display.ssd1306_command(SSD1306_DISPLAYON);
    71aa:	4806      	ldr	r0, [pc, #24]	; (71c4 <idlePageUpdate(KeyState&, unsigned long)+0xfc>)
    71ac:	21af      	movs	r1, #175	; 0xaf
    71ae:	f005 fb61 	bl	c874 <Adafruit_SSD1306::ssd1306_command(unsigned char)>
        menuState = MAIN_MENU;
    71b2:	4a09      	ldr	r2, [pc, #36]	; (71d8 <idlePageUpdate(KeyState&, unsigned long)+0x110>)
    71b4:	2301      	movs	r3, #1
    71b6:	7013      	strb	r3, [r2, #0]
        stateFirstRun = 1;
    71b8:	7033      	strb	r3, [r6, #0]
        break;
    71ba:	e78c      	b.n	70d6 <idlePageUpdate(KeyState&, unsigned long)+0xe>
        _reboot_Teensyduino_();
    71bc:	f008 ff9c 	bl	100f8 <_reboot_Teensyduino_>
    71c0:	1fff8e9c 	.word	0x1fff8e9c
    71c4:	1fff9c74 	.word	0x1fff9c74
    71c8:	1fff9910 	.word	0x1fff9910
    71cc:	1fff990f 	.word	0x1fff990f
    71d0:	1fff9911 	.word	0x1fff9911
    71d4:	1fff9b62 	.word	0x1fff9b62
    71d8:	1fff9c59 	.word	0x1fff9c59
    71dc:	1fff9aa0 	.word	0x1fff9aa0
    71e0:	1fff9a8a 	.word	0x1fff9a8a
    71e4:	1fff9932 	.word	0x1fff9932
    71e8:	1fff9c33 	.word	0x1fff9c33

000071ec <wlChannelMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(wireless_channel, out, false);
    71ec:	4b13      	ldr	r3, [pc, #76]	; (723c <wlChannelMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    71ee:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    71f2:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    71f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    71f8:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    71fa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    71fe:	bfbc      	itt	lt
    7200:	232d      	movlt	r3, #45	; 0x2d
    7202:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    7206:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7208:	f04f 0c01 	mov.w	ip, #1
    720c:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7210:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    7214:	4663      	mov	r3, ip
    7216:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    721a:	daf7      	bge.n	720c <wlChannelMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    721c:	4c08      	ldr	r4, [pc, #32]	; (7240 <wlChannelMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    721e:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    7222:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    7226:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    722a:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    722e:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    7230:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    7234:	b292      	uxth	r2, r2
  while(c > 0) {
    7236:	d1f2      	bne.n	721e <wlChannelMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    7238:	700b      	strb	r3, [r1, #0]
  },
    723a:	bd10      	pop	{r4, pc}
    723c:	1fff8e9e 	.word	0x1fff8e9e
    7240:	cccccccd 	.word	0xcccccccd

00007244 <portLimitMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(portLimit, out);
    7244:	4b13      	ldr	r3, [pc, #76]	; (7294 <portLimitMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    7246:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    724a:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    724c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7250:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7252:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    7256:	bfbc      	itt	lt
    7258:	232d      	movlt	r3, #45	; 0x2d
    725a:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    725e:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7260:	f04f 0c01 	mov.w	ip, #1
    7264:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7268:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    726c:	4663      	mov	r3, ip
    726e:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    7272:	daf7      	bge.n	7264 <portLimitMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    7274:	4c08      	ldr	r4, [pc, #32]	; (7298 <portLimitMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    7276:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    727a:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    727e:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    7282:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    7286:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    7288:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    728c:	b292      	uxth	r2, r2
  while(c > 0) {
    728e:	d1f2      	bne.n	7276 <portLimitMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    7290:	700b      	strb	r3, [r1, #0]
  },
    7292:	bd10      	pop	{r4, pc}
    7294:	1fff9b84 	.word	0x1fff9b84
    7298:	cccccccd 	.word	0xcccccccd

0000729c <vib2BrAmtMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(vib2BreathAmount, textBuffer);
    729c:	4b13      	ldr	r3, [pc, #76]	; (72ec <vib2BrAmtMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    729e:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* textBuffer, const char** __unused unit) {
    72a2:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    72a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    72a8:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    72aa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    72ae:	bfbc      	itt	lt
    72b0:	232d      	movlt	r3, #45	; 0x2d
    72b2:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    72b6:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    72b8:	f04f 0c01 	mov.w	ip, #1
    72bc:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    72c0:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    72c4:	4663      	mov	r3, ip
    72c6:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    72ca:	daf7      	bge.n	72bc <vib2BrAmtMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    72cc:	4c08      	ldr	r4, [pc, #32]	; (72f0 <vib2BrAmtMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    72ce:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    72d2:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    72d6:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    72da:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    72de:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    72e0:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    72e4:	b292      	uxth	r2, r2
  while(c > 0) {
    72e6:	d1f2      	bne.n	72ce <vib2BrAmtMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    72e8:	700b      	strb	r3, [r1, #0]
  },
    72ea:	bd10      	pop	{r4, pc}
    72ec:	1fff8e74 	.word	0x1fff8e74
    72f0:	cccccccd 	.word	0xcccccccd

000072f4 <breathIntervalMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(breathInterval, out, false);
    72f4:	4b13      	ldr	r3, [pc, #76]	; (7344 <breathIntervalMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    72f6:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    72fa:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    72fc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7300:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7302:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    7306:	bfbc      	itt	lt
    7308:	232d      	movlt	r3, #45	; 0x2d
    730a:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    730e:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7310:	f04f 0c01 	mov.w	ip, #1
    7314:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7318:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    731c:	4663      	mov	r3, ip
    731e:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    7322:	daf7      	bge.n	7314 <breathIntervalMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    7324:	4c08      	ldr	r4, [pc, #32]	; (7348 <breathIntervalMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    7326:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    732a:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    732e:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    7332:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    7336:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    7338:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    733c:	b292      	uxth	r2, r2
  while(c > 0) {
    733e:	d1f2      	bne.n	7326 <breathIntervalMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    7340:	700b      	strb	r3, [r1, #0]
  },
    7342:	bd10      	pop	{r4, pc}
    7344:	1fff8d3a 	.word	0x1fff8d3a
    7348:	cccccccd 	.word	0xcccccccd

0000734c <biteCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(biteCC, out);
    734c:	4b13      	ldr	r3, [pc, #76]	; (739c <biteCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    734e:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7352:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    7354:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7358:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    735a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    735e:	bfbc      	itt	lt
    7360:	232d      	movlt	r3, #45	; 0x2d
    7362:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    7366:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7368:	f04f 0c01 	mov.w	ip, #1
    736c:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7370:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    7374:	4663      	mov	r3, ip
    7376:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    737a:	daf7      	bge.n	736c <biteCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    737c:	4c08      	ldr	r4, [pc, #32]	; (73a0 <biteCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    737e:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    7382:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    7386:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    738a:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    738e:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    7390:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    7394:	b292      	uxth	r2, r2
  while(c > 0) {
    7396:	d1f2      	bne.n	737e <biteCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    7398:	700b      	strb	r3, [r1, #0]
  },
    739a:	bd10      	pop	{r4, pc}
    739c:	1fff9a08 	.word	0x1fff9a08
    73a0:	cccccccd 	.word	0xcccccccd

000073a4 <vibRetnMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(vibRetn, textBuffer);
    73a4:	4b13      	ldr	r3, [pc, #76]	; (73f4 <vibRetnMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    73a6:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* textBuffer, const char** __unused unit) {
    73aa:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    73ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    73b0:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    73b2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    73b6:	bfbc      	itt	lt
    73b8:	232d      	movlt	r3, #45	; 0x2d
    73ba:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    73be:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    73c0:	f04f 0c01 	mov.w	ip, #1
    73c4:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    73c8:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    73cc:	4663      	mov	r3, ip
    73ce:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    73d2:	daf7      	bge.n	73c4 <vibRetnMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    73d4:	4c08      	ldr	r4, [pc, #32]	; (73f8 <vibRetnMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    73d6:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    73da:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    73de:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    73e2:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    73e6:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    73e8:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    73ec:	b292      	uxth	r2, r2
  while(c > 0) {
    73ee:	d1f2      	bne.n	73d6 <vibRetnMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    73f0:	700b      	strb	r3, [r1, #0]
  },
    73f2:	bd10      	pop	{r4, pc}
    73f4:	1fff8e76 	.word	0x1fff8e76
    73f8:	cccccccd 	.word	0xcccccccd

000073fc <vibSenseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(vibSens, textBuffer);
    73fc:	4b13      	ldr	r3, [pc, #76]	; (744c <vibSenseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    73fe:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused,char* textBuffer, const char** __unused unit) {
    7402:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    7404:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7408:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    740a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    740e:	bfbc      	itt	lt
    7410:	232d      	movlt	r3, #45	; 0x2d
    7412:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    7416:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7418:	f04f 0c01 	mov.w	ip, #1
    741c:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7420:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    7424:	4663      	mov	r3, ip
    7426:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    742a:	daf7      	bge.n	741c <vibSenseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    742c:	4c08      	ldr	r4, [pc, #32]	; (7450 <vibSenseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    742e:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    7432:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    7436:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    743a:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    743e:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    7440:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    7444:	b292      	uxth	r2, r2
  while(c > 0) {
    7446:	d1f2      	bne.n	742e <vibSenseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    7448:	700b      	strb	r3, [r1, #0]
  },
    744a:	bd10      	pop	{r4, pc}
    744c:	1fff8e78 	.word	0x1fff8e78
    7450:	cccccccd 	.word	0xcccccccd

00007454 <leverCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(leverCC, out);
    7454:	4b13      	ldr	r3, [pc, #76]	; (74a4 <leverCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    7456:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    745a:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    745c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7460:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7462:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    7466:	bfbc      	itt	lt
    7468:	232d      	movlt	r3, #45	; 0x2d
    746a:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    746e:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7470:	f04f 0c01 	mov.w	ip, #1
    7474:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7478:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    747c:	4663      	mov	r3, ip
    747e:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    7482:	daf7      	bge.n	7474 <leverCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    7484:	4c08      	ldr	r4, [pc, #32]	; (74a8 <leverCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    7486:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    748a:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    748e:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    7492:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    7496:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    7498:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    749c:	b292      	uxth	r2, r2
  while(c > 0) {
    749e:	d1f2      	bne.n	7486 <leverCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    74a0:	700b      	strb	r3, [r1, #0]
  },
    74a2:	bd10      	pop	{r4, pc}
    74a4:	1fff9b16 	.word	0x1fff9b16
    74a8:	cccccccd 	.word	0xcccccccd

000074ac <vibSquelchBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(vibSquelchBite, textBuffer);
    74ac:	4b13      	ldr	r3, [pc, #76]	; (74fc <vibSquelchBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    74ae:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* textBuffer, const char** __unused unit) {
    74b2:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    74b4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    74b8:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    74ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    74be:	bfbc      	itt	lt
    74c0:	232d      	movlt	r3, #45	; 0x2d
    74c2:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    74c6:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    74c8:	f04f 0c01 	mov.w	ip, #1
    74cc:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    74d0:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    74d4:	4663      	mov	r3, ip
    74d6:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    74da:	daf7      	bge.n	74cc <vibSquelchBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    74dc:	4c08      	ldr	r4, [pc, #32]	; (7500 <vibSquelchBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    74de:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    74e2:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    74e6:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    74ea:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    74ee:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    74f0:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    74f4:	b292      	uxth	r2, r2
  while(c > 0) {
    74f6:	d1f2      	bne.n	74de <vibSquelchBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    74f8:	700b      	strb	r3, [r1, #0]
  },
    74fa:	bd10      	pop	{r4, pc}
    74fc:	1fff8e7e 	.word	0x1fff8e7e
    7500:	cccccccd 	.word	0xcccccccd

00007504 <vibSquelchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(vibSquelch, textBuffer);
    7504:	4b13      	ldr	r3, [pc, #76]	; (7554 <vibSquelchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    7506:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused, char* textBuffer, const char** __unused unit) {
    750a:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    750c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7510:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7512:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    7516:	bfbc      	itt	lt
    7518:	232d      	movlt	r3, #45	; 0x2d
    751a:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    751e:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7520:	f04f 0c01 	mov.w	ip, #1
    7524:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7528:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    752c:	4663      	mov	r3, ip
    752e:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    7532:	daf7      	bge.n	7524 <vibSquelchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    7534:	4c08      	ldr	r4, [pc, #32]	; (7558 <vibSquelchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    7536:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    753a:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    753e:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    7542:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    7546:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    7548:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    754c:	b292      	uxth	r2, r2
  while(c > 0) {
    754e:	d1f2      	bne.n	7536 <vibSquelchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    7550:	700b      	strb	r3, [r1, #0]
  },
    7552:	bd10      	pop	{r4, pc}
    7554:	1fff8e7c 	.word	0x1fff8e7c
    7558:	cccccccd 	.word	0xcccccccd

0000755c <vibSenseBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(vibSensBite, textBuffer);
    755c:	4b13      	ldr	r3, [pc, #76]	; (75ac <vibSenseBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x50>)
    755e:	f9b3 3000 	ldrsh.w	r3, [r3]
  [](SubMenuRef __unused,char* textBuffer, const char** __unused unit) {
    7562:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    7564:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7568:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    756a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    756e:	bfbc      	itt	lt
    7570:	232d      	movlt	r3, #45	; 0x2d
    7572:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    7576:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7578:	f04f 0c01 	mov.w	ip, #1
    757c:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7580:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    7584:	4663      	mov	r3, ip
    7586:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    758a:	daf7      	bge.n	757c <vibSenseBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    758c:	4c08      	ldr	r4, [pc, #32]	; (75b0 <vibSenseBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    int tmp = absVal / c;
    758e:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    7592:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    7596:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    759a:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    759e:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    75a0:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    75a4:	b292      	uxth	r2, r2
  while(c > 0) {
    75a6:	d1f2      	bne.n	758e <vibSenseBiteMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
  *ptr = 0;
    75a8:	700b      	strb	r3, [r1, #0]
  },
    75aa:	bd10      	pop	{r4, pc}
    75ac:	1fff8e7a 	.word	0x1fff8e7a
    75b0:	cccccccd 	.word	0xcccccccd

000075b4 <rollerMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(rollerMode+1, out);
    75b4:	4b14      	ldr	r3, [pc, #80]	; (7608 <rollerMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>)
    75b6:	881b      	ldrh	r3, [r3, #0]
    75b8:	3301      	adds	r3, #1
    75ba:	b21b      	sxth	r3, r3
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    75bc:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    75be:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    75c2:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    75c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    75c8:	bfbc      	itt	lt
    75ca:	232d      	movlt	r3, #45	; 0x2d
    75cc:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    75d0:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    75d2:	f04f 0c01 	mov.w	ip, #1
    75d6:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    75da:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    75de:	4663      	mov	r3, ip
    75e0:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    75e4:	daf7      	bge.n	75d6 <rollerMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x22>
    c /= 10;
    75e6:	4c09      	ldr	r4, [pc, #36]	; (760c <rollerMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x58>)
    int tmp = absVal / c;
    75e8:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    75ec:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    75f0:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    75f4:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    75f8:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    75fa:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    75fe:	b292      	uxth	r2, r2
  while(c > 0) {
    7600:	d1f2      	bne.n	75e8 <rollerMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x34>
  *ptr = 0;
    7602:	700b      	strb	r3, [r1, #0]
  },
    7604:	bd10      	pop	{r4, pc}
    7606:	bf00      	nop
    7608:	1fff9b9c 	.word	0x1fff9b9c
    760c:	cccccccd 	.word	0xcccccccd

00007610 <breathCC2RiseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    numToString(breathCC2Rise, out);
    7610:	4b15      	ldr	r3, [pc, #84]	; (7668 <breathCC2RiseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x58>)
    7612:	f9b3 3000 	ldrsh.w	r3, [r3]
  uint16_t absVal = abs(value);
    7616:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  if(value < 0) {
    761a:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    761c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    *ptr++ = '-';
    7620:	bfbc      	itt	lt
    7622:	232d      	movlt	r3, #45	; 0x2d
    7624:	f801 3b01 	strblt.w	r3, [r1], #1
  [](SubMenuRef __unused, char *out, const char** label) {
    7628:	b530      	push	{r4, r5, lr}
  uint16_t absVal = abs(value);
    762a:	b280      	uxth	r0, r0
  while((c*10) < absVal+1) c *= 10;
    762c:	f04f 0e01 	mov.w	lr, #1
    7630:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    7634:	ebb0 0f4c 	cmp.w	r0, ip, lsl #1
    7638:	4673      	mov	r3, lr
    763a:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
    763e:	daf7      	bge.n	7630 <breathCC2RiseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x20>
    c /= 10;
    7640:	4d0a      	ldr	r5, [pc, #40]	; (766c <breathCC2RiseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>)
    int tmp = absVal / c;
    7642:	fbb0 fef3 	udiv	lr, r0, r3
    c /= 10;
    7646:	fba5 4c03 	umull	r4, ip, r5, r3
    absVal %= c;
    764a:	fb03 001e 	mls	r0, r3, lr, r0
    *ptr++ = tmp + '0';
    764e:	f10e 0430 	add.w	r4, lr, #48	; 0x30
  while(c > 0) {
    7652:	ea5f 03dc 	movs.w	r3, ip, lsr #3
    *ptr++ = tmp + '0';
    7656:	f801 4b01 	strb.w	r4, [r1], #1
    absVal %= c;
    765a:	b280      	uxth	r0, r0
  while(c > 0) {
    765c:	d1f1      	bne.n	7642 <breathCC2RiseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x32>
    *label = "X";
    765e:	4804      	ldr	r0, [pc, #16]	; (7670 <breathCC2RiseMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x60>)
  *ptr = 0;
    7660:	700b      	strb	r3, [r1, #0]
    *label = "X";
    7662:	6010      	str	r0, [r2, #0]
  },
    7664:	bd30      	pop	{r4, r5, pc}
    7666:	bf00      	nop
    7668:	1fff9a22 	.word	0x1fff9a22
    766c:	cccccccd 	.word	0xcccccccd
    7670:	00013a30 	.word	0x00013a30

00007674 <hmzLimitOptionGet(MenuEntrySub const&, char*, char const**)>:
  numToString((*sub.valuePtr), out, false);
    7674:	68c3      	ldr	r3, [r0, #12]
    7676:	f9b3 3000 	ldrsh.w	r3, [r3]
static void hmzLimitOptionGet(SubMenuRef sub, char *out, const char** __unused unit) {
    767a:	b510      	push	{r4, lr}
  uint16_t absVal = abs(value);
    767c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7680:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7682:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    7686:	bfbc      	itt	lt
    7688:	232d      	movlt	r3, #45	; 0x2d
    768a:	f801 3b01 	strblt.w	r3, [r1], #1
  uint16_t absVal = abs(value);
    768e:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7690:	f04f 0c01 	mov.w	ip, #1
    7694:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    7698:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
    769c:	4663      	mov	r3, ip
    769e:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    76a2:	daf7      	bge.n	7694 <hmzLimitOptionGet(MenuEntrySub const&, char*, char const**)+0x20>
    c /= 10;
    76a4:	4c07      	ldr	r4, [pc, #28]	; (76c4 <hmzLimitOptionGet(MenuEntrySub const&, char*, char const**)+0x50>)
    int tmp = absVal / c;
    76a6:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    76aa:	fba4 e003 	umull	lr, r0, r4, r3
    absVal %= c;
    76ae:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    76b2:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    76b6:	08c3      	lsrs	r3, r0, #3
    *ptr++ = tmp + '0';
    76b8:	f801 eb01 	strb.w	lr, [r1], #1
    absVal %= c;
    76bc:	b292      	uxth	r2, r2
  while(c > 0) {
    76be:	d1f2      	bne.n	76a6 <hmzLimitOptionGet(MenuEntrySub const&, char*, char const**)+0x32>
  *ptr = 0;
    76c0:	700b      	strb	r3, [r1, #0]
}
    76c2:	bd10      	pop	{r4, pc}
    76c4:	cccccccd 	.word	0xcccccccd

000076c8 <vibGetStr(MenuEntrySub const&, char*, char const**)>:
  if(vibrato)
    76c8:	4b16      	ldr	r3, [pc, #88]	; (7724 <vibGetStr(MenuEntrySub const&, char*, char const**)+0x5c>)
    76ca:	881b      	ldrh	r3, [r3, #0]
static void vibGetStr(SubMenuRef __unused, char* textBuffer, const char** __unused unit) {
    76cc:	4608      	mov	r0, r1
  if(vibrato)
    76ce:	b32b      	cbz	r3, 771c <vibGetStr(MenuEntrySub const&, char*, char const**)+0x54>
    numToString(vibrato, textBuffer);
    76d0:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    76d2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    76d6:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    76d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    76dc:	bfb8      	it	lt
    76de:	232d      	movlt	r3, #45	; 0x2d
static void vibGetStr(SubMenuRef __unused, char* textBuffer, const char** __unused unit) {
    76e0:	b510      	push	{r4, lr}
    *ptr++ = '-';
    76e2:	bfb8      	it	lt
    76e4:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    76e8:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    76ea:	2101      	movs	r1, #1
    76ec:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    76f0:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
    76f4:	460b      	mov	r3, r1
    76f6:	ea4f 014c 	mov.w	r1, ip, lsl #1
    76fa:	daf7      	bge.n	76ec <vibGetStr(MenuEntrySub const&, char*, char const**)+0x24>
    c /= 10;
    76fc:	4c0a      	ldr	r4, [pc, #40]	; (7728 <vibGetStr(MenuEntrySub const&, char*, char const**)+0x60>)
    int tmp = absVal / c;
    76fe:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    7702:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    7706:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    770a:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    770e:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7710:	f800 eb01 	strb.w	lr, [r0], #1
    absVal %= c;
    7714:	b292      	uxth	r2, r2
  while(c > 0) {
    7716:	d1f2      	bne.n	76fe <vibGetStr(MenuEntrySub const&, char*, char const**)+0x36>
  *ptr = 0;
    7718:	7003      	strb	r3, [r0, #0]
}
    771a:	bd10      	pop	{r4, pc}
    strncpy(textBuffer, "OFF", 4);
    771c:	4903      	ldr	r1, [pc, #12]	; (772c <vibGetStr(MenuEntrySub const&, char*, char const**)+0x64>)
    771e:	2204      	movs	r2, #4
    7720:	f006 beb2 	b.w	e488 <memcpy>
    7724:	1fff9c1c 	.word	0x1fff9c1c
    7728:	cccccccd 	.word	0xcccccccd
    772c:	0001392c 	.word	0x0001392c

00007730 <cvEcVibMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if(cvVibRate) numToString(cvVibRate, out);
    7730:	4b16      	ldr	r3, [pc, #88]	; (778c <cvEcVibMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>)
    7732:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7734:	4608      	mov	r0, r1
    if(cvVibRate) numToString(cvVibRate, out);
    7736:	b32b      	cbz	r3, 7784 <cvEcVibMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>
    7738:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    773a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    773e:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7740:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    7744:	bfb8      	it	lt
    7746:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7748:	b510      	push	{r4, lr}
    *ptr++ = '-';
    774a:	bfb8      	it	lt
    774c:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    7750:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7752:	2101      	movs	r1, #1
    7754:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    7758:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
    775c:	460b      	mov	r3, r1
    775e:	ea4f 014c 	mov.w	r1, ip, lsl #1
    7762:	daf7      	bge.n	7754 <cvEcVibMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>
    c /= 10;
    7764:	4c0a      	ldr	r4, [pc, #40]	; (7790 <cvEcVibMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x60>)
    int tmp = absVal / c;
    7766:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    776a:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    776e:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    7772:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    7776:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7778:	f800 eb01 	strb.w	lr, [r0], #1
    absVal %= c;
    777c:	b292      	uxth	r2, r2
  while(c > 0) {
    777e:	d1f2      	bne.n	7766 <cvEcVibMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x36>
  *ptr = 0;
    7780:	7003      	strb	r3, [r0, #0]
  },
    7782:	bd10      	pop	{r4, pc}
    else strncpy(out, "OFF", 4);
    7784:	4903      	ldr	r1, [pc, #12]	; (7794 <cvEcVibMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    7786:	2204      	movs	r2, #4
    7788:	f006 be7e 	b.w	e488 <memcpy>
    778c:	1fff9a82 	.word	0x1fff9a82
    7790:	cccccccd 	.word	0xcccccccd
    7794:	0001392c 	.word	0x0001392c

00007798 <lvlCtrlCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if(levelCC) numToString(levelCC, out);
    7798:	4b16      	ldr	r3, [pc, #88]	; (77f4 <lvlCtrlCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>)
    779a:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    779c:	4608      	mov	r0, r1
    if(levelCC) numToString(levelCC, out);
    779e:	b32b      	cbz	r3, 77ec <lvlCtrlCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>
    77a0:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    77a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    77a6:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    77a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    77ac:	bfb8      	it	lt
    77ae:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    77b0:	b510      	push	{r4, lr}
    *ptr++ = '-';
    77b2:	bfb8      	it	lt
    77b4:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    77b8:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    77ba:	2101      	movs	r1, #1
    77bc:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    77c0:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
    77c4:	460b      	mov	r3, r1
    77c6:	ea4f 014c 	mov.w	r1, ip, lsl #1
    77ca:	daf7      	bge.n	77bc <lvlCtrlCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>
    c /= 10;
    77cc:	4c0a      	ldr	r4, [pc, #40]	; (77f8 <lvlCtrlCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x60>)
    int tmp = absVal / c;
    77ce:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    77d2:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    77d6:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    77da:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    77de:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    77e0:	f800 eb01 	strb.w	lr, [r0], #1
    absVal %= c;
    77e4:	b292      	uxth	r2, r2
  while(c > 0) {
    77e6:	d1f2      	bne.n	77ce <lvlCtrlCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x36>
  *ptr = 0;
    77e8:	7003      	strb	r3, [r0, #0]
  },
    77ea:	bd10      	pop	{r4, pc}
    else strncpy(out, "AT", 4);
    77ec:	4903      	ldr	r1, [pc, #12]	; (77fc <lvlCtrlCCMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    77ee:	2204      	movs	r2, #4
    77f0:	f00a bf5e 	b.w	126b0 <strncpy>
    77f4:	1fff9b12 	.word	0x1fff9b12
    77f8:	cccccccd 	.word	0xcccccccd
    77fc:	00013a34 	.word	0x00013a34

00007800 <harmonicsMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if(harmSetting) numToString(harmSetting, out);
    7800:	4b16      	ldr	r3, [pc, #88]	; (785c <harmonicsMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>)
    7802:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7804:	4608      	mov	r0, r1
    if(harmSetting) numToString(harmSetting, out);
    7806:	b32b      	cbz	r3, 7854 <harmonicsMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>
    7808:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    780a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    780e:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7810:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    7814:	bfb8      	it	lt
    7816:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7818:	b510      	push	{r4, lr}
    *ptr++ = '-';
    781a:	bfb8      	it	lt
    781c:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    7820:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7822:	2101      	movs	r1, #1
    7824:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    7828:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
    782c:	460b      	mov	r3, r1
    782e:	ea4f 014c 	mov.w	r1, ip, lsl #1
    7832:	daf7      	bge.n	7824 <harmonicsMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>
    c /= 10;
    7834:	4c0a      	ldr	r4, [pc, #40]	; (7860 <harmonicsMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x60>)
    int tmp = absVal / c;
    7836:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    783a:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    783e:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    7842:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    7846:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7848:	f800 eb01 	strb.w	lr, [r0], #1
    absVal %= c;
    784c:	b292      	uxth	r2, r2
  while(c > 0) {
    784e:	d1f2      	bne.n	7836 <harmonicsMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x36>
  *ptr = 0;
    7850:	7003      	strb	r3, [r0, #0]
  },
    7852:	bd10      	pop	{r4, pc}
    else strncpy(out, "OFF", 4);
    7854:	4903      	ldr	r1, [pc, #12]	; (7864 <harmonicsMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    7856:	2204      	movs	r2, #4
    7858:	f006 be16 	b.w	e488 <memcpy>
    785c:	1fff9ae4 	.word	0x1fff9ae4
    7860:	cccccccd 	.word	0xcccccccd
    7864:	0001392c 	.word	0x0001392c

00007868 <velocityMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if(velocity) numToString(velocity, out);
    7868:	4b16      	ldr	r3, [pc, #88]	; (78c4 <velocityMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>)
    786a:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    786c:	4608      	mov	r0, r1
    if(velocity) numToString(velocity, out);
    786e:	b32b      	cbz	r3, 78bc <velocityMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>
    7870:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    7872:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7876:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7878:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    787c:	bfb8      	it	lt
    787e:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7880:	b510      	push	{r4, lr}
    *ptr++ = '-';
    7882:	bfb8      	it	lt
    7884:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    7888:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    788a:	2101      	movs	r1, #1
    788c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    7890:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
    7894:	460b      	mov	r3, r1
    7896:	ea4f 014c 	mov.w	r1, ip, lsl #1
    789a:	daf7      	bge.n	788c <velocityMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>
    c /= 10;
    789c:	4c0a      	ldr	r4, [pc, #40]	; (78c8 <velocityMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x60>)
    int tmp = absVal / c;
    789e:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    78a2:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    78a6:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    78aa:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    78ae:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    78b0:	f800 eb01 	strb.w	lr, [r0], #1
    absVal %= c;
    78b4:	b292      	uxth	r2, r2
  while(c > 0) {
    78b6:	d1f2      	bne.n	789e <velocityMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x36>
  *ptr = 0;
    78b8:	7003      	strb	r3, [r0, #0]
  },
    78ba:	bd10      	pop	{r4, pc}
    else strncpy(out, "DYN", 4);
    78bc:	4903      	ldr	r1, [pc, #12]	; (78cc <velocityMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    78be:	2204      	movs	r2, #4
    78c0:	f006 bde2 	b.w	e488 <memcpy>
    78c4:	1fff9bf4 	.word	0x1fff9bf4
    78c8:	cccccccd 	.word	0xcccccccd
    78cc:	00013a38 	.word	0x00013a38

000078d0 <breathCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if(breathCC2) numToString(breathCC2, out);
    78d0:	4b16      	ldr	r3, [pc, #88]	; (792c <breathCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>)
    78d2:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    78d4:	4608      	mov	r0, r1
    if(breathCC2) numToString(breathCC2, out);
    78d6:	b32b      	cbz	r3, 7924 <breathCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>
    78d8:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    78da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    78de:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    78e0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    78e4:	bfb8      	it	lt
    78e6:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    78e8:	b510      	push	{r4, lr}
    *ptr++ = '-';
    78ea:	bfb8      	it	lt
    78ec:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    78f0:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    78f2:	2101      	movs	r1, #1
    78f4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    78f8:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
    78fc:	460b      	mov	r3, r1
    78fe:	ea4f 014c 	mov.w	r1, ip, lsl #1
    7902:	daf7      	bge.n	78f4 <breathCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>
    c /= 10;
    7904:	4c0a      	ldr	r4, [pc, #40]	; (7930 <breathCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x60>)
    int tmp = absVal / c;
    7906:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    790a:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    790e:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    7912:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    7916:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7918:	f800 eb01 	strb.w	lr, [r0], #1
    absVal %= c;
    791c:	b292      	uxth	r2, r2
  while(c > 0) {
    791e:	d1f2      	bne.n	7906 <breathCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x36>
  *ptr = 0;
    7920:	7003      	strb	r3, [r0, #0]
  },
    7922:	bd10      	pop	{r4, pc}
    else strncpy(out, "OFF", 4);
    7924:	4903      	ldr	r1, [pc, #12]	; (7934 <breathCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    7926:	2204      	movs	r2, #4
    7928:	f006 bdae 	b.w	e488 <memcpy>
    792c:	1fff9a20 	.word	0x1fff9a20
    7930:	cccccccd 	.word	0xcccccccd
    7934:	0001392c 	.word	0x0001392c

00007938 <extraCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if(extraCT2) numToString(extraCT2, out);
    7938:	4b16      	ldr	r3, [pc, #88]	; (7994 <extraCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>)
    793a:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    793c:	4608      	mov	r0, r1
    if(extraCT2) numToString(extraCT2, out);
    793e:	b32b      	cbz	r3, 798c <extraCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>
    7940:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    7942:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    7946:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7948:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    794c:	bfb8      	it	lt
    794e:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7950:	b510      	push	{r4, lr}
    *ptr++ = '-';
    7952:	bfb8      	it	lt
    7954:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    7958:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    795a:	2101      	movs	r1, #1
    795c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    7960:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
    7964:	460b      	mov	r3, r1
    7966:	ea4f 014c 	mov.w	r1, ip, lsl #1
    796a:	daf7      	bge.n	795c <extraCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>
    c /= 10;
    796c:	4c0a      	ldr	r4, [pc, #40]	; (7998 <extraCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x60>)
    int tmp = absVal / c;
    796e:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    7972:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    7976:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    797a:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    797e:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7980:	f800 eb01 	strb.w	lr, [r0], #1
    absVal %= c;
    7984:	b292      	uxth	r2, r2
  while(c > 0) {
    7986:	d1f2      	bne.n	796e <extraCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x36>
  *ptr = 0;
    7988:	7003      	strb	r3, [r0, #0]
  },
    798a:	bd10      	pop	{r4, pc}
    else strncpy(out, "OFF", 4);
    798c:	4903      	ldr	r1, [pc, #12]	; (799c <extraCC2Menu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    798e:	2204      	movs	r2, #4
    7990:	f006 bd7a 	b.w	e488 <memcpy>
    7994:	1fff9a96 	.word	0x1fff9a96
    7998:	cccccccd 	.word	0xcccccccd
    799c:	0001392c 	.word	0x0001392c

000079a0 <velBiasMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if (velBias) numToString(velBias, out);
    79a0:	4b16      	ldr	r3, [pc, #88]	; (79fc <velBiasMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>)
    79a2:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    79a4:	4608      	mov	r0, r1
    if (velBias) numToString(velBias, out);
    79a6:	b32b      	cbz	r3, 79f4 <velBiasMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x54>
    79a8:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    79aa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  if(value < 0) {
    79ae:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    79b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    *ptr++ = '-';
    79b4:	bfb8      	it	lt
    79b6:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    79b8:	b510      	push	{r4, lr}
    *ptr++ = '-';
    79ba:	bfb8      	it	lt
    79bc:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    79c0:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    79c2:	2101      	movs	r1, #1
    79c4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    79c8:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
    79cc:	460b      	mov	r3, r1
    79ce:	ea4f 014c 	mov.w	r1, ip, lsl #1
    79d2:	daf7      	bge.n	79c4 <velBiasMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x24>
    c /= 10;
    79d4:	4c0a      	ldr	r4, [pc, #40]	; (7a00 <velBiasMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x60>)
    int tmp = absVal / c;
    79d6:	fbb2 fcf3 	udiv	ip, r2, r3
    c /= 10;
    79da:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    79de:	fb03 221c 	mls	r2, r3, ip, r2
    *ptr++ = tmp + '0';
    79e2:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
  while(c > 0) {
    79e6:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    79e8:	f800 eb01 	strb.w	lr, [r0], #1
    absVal %= c;
    79ec:	b292      	uxth	r2, r2
  while(c > 0) {
    79ee:	d1f2      	bne.n	79d6 <velBiasMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x36>
  *ptr = 0;
    79f0:	7003      	strb	r3, [r0, #0]
  },
    79f2:	bd10      	pop	{r4, pc}
    else strncpy(out, "OFF", 4);
    79f4:	4903      	ldr	r1, [pc, #12]	; (7a04 <velBiasMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    79f6:	2204      	movs	r2, #4
    79f8:	f006 bd46 	b.w	e488 <memcpy>
    79fc:	1fff9bf0 	.word	0x1fff9bf0
    7a00:	cccccccd 	.word	0xcccccccd
    7a04:	0001392c 	.word	0x0001392c

00007a08 <velSmpDlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if (velSmpDl) {
    7a08:	4b18      	ldr	r3, [pc, #96]	; (7a6c <velSmpDlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    7a0a:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused, char *out, const char** label) {
    7a0c:	4608      	mov	r0, r1
    if (velSmpDl) {
    7a0e:	b34b      	cbz	r3, 7a64 <velSmpDlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>
      numToString(velSmpDl, out);
    7a10:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    7a12:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
  if(value < 0) {
    7a16:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7a18:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
    *ptr++ = '-';
    7a1c:	bfb8      	it	lt
    7a1e:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char *out, const char** label) {
    7a20:	b530      	push	{r4, r5, lr}
    *ptr++ = '-';
    7a22:	bfb8      	it	lt
    7a24:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    7a28:	fa1f fc8c 	uxth.w	ip, ip
  while((c*10) < absVal+1) c *= 10;
    7a2c:	2101      	movs	r1, #1
    7a2e:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
    7a32:	ebbc 0f4e 	cmp.w	ip, lr, lsl #1
    7a36:	460b      	mov	r3, r1
    7a38:	ea4f 014e 	mov.w	r1, lr, lsl #1
    7a3c:	daf7      	bge.n	7a2e <velSmpDlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x26>
    c /= 10;
    7a3e:	4d0c      	ldr	r5, [pc, #48]	; (7a70 <velSmpDlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x68>)
    int tmp = absVal / c;
    7a40:	fbbc fef3 	udiv	lr, ip, r3
    c /= 10;
    7a44:	fba5 4103 	umull	r4, r1, r5, r3
    absVal %= c;
    7a48:	fb03 cc1e 	mls	ip, r3, lr, ip
    *ptr++ = tmp + '0';
    7a4c:	f10e 0430 	add.w	r4, lr, #48	; 0x30
  while(c > 0) {
    7a50:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7a52:	f800 4b01 	strb.w	r4, [r0], #1
    absVal %= c;
    7a56:	fa1f fc8c 	uxth.w	ip, ip
  while(c > 0) {
    7a5a:	d1f1      	bne.n	7a40 <velSmpDlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x38>
      *label = "ms";
    7a5c:	4905      	ldr	r1, [pc, #20]	; (7a74 <velSmpDlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x6c>)
  *ptr = 0;
    7a5e:	7003      	strb	r3, [r0, #0]
      *label = "ms";
    7a60:	6011      	str	r1, [r2, #0]
  },
    7a62:	bd30      	pop	{r4, r5, pc}
    } else strncpy(out, "OFF", 4);
    7a64:	4904      	ldr	r1, [pc, #16]	; (7a78 <velSmpDlMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x70>)
    7a66:	2204      	movs	r2, #4
    7a68:	f006 bd0e 	b.w	e488 <memcpy>
    7a6c:	1fff9bf2 	.word	0x1fff9bf2
    7a70:	cccccccd 	.word	0xcccccccd
    7a74:	00013a3c 	.word	0x00013a3c
    7a78:	0001392c 	.word	0x0001392c

00007a7c <deglitchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if(deglitch) {
    7a7c:	4b18      	ldr	r3, [pc, #96]	; (7ae0 <deglitchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x64>)
    7a7e:	881b      	ldrh	r3, [r3, #0]
  [](SubMenuRef __unused,char* textBuffer, const char** label) {
    7a80:	4608      	mov	r0, r1
    if(deglitch) {
    7a82:	b34b      	cbz	r3, 7ad8 <deglitchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5c>
      numToString(deglitch, textBuffer);
    7a84:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    7a86:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
  if(value < 0) {
    7a8a:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7a8c:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
    *ptr++ = '-';
    7a90:	bfb8      	it	lt
    7a92:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused,char* textBuffer, const char** label) {
    7a94:	b530      	push	{r4, r5, lr}
    *ptr++ = '-';
    7a96:	bfb8      	it	lt
    7a98:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    7a9c:	fa1f fc8c 	uxth.w	ip, ip
  while((c*10) < absVal+1) c *= 10;
    7aa0:	2101      	movs	r1, #1
    7aa2:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
    7aa6:	ebbc 0f4e 	cmp.w	ip, lr, lsl #1
    7aaa:	460b      	mov	r3, r1
    7aac:	ea4f 014e 	mov.w	r1, lr, lsl #1
    7ab0:	daf7      	bge.n	7aa2 <deglitchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x26>
    c /= 10;
    7ab2:	4d0c      	ldr	r5, [pc, #48]	; (7ae4 <deglitchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x68>)
    int tmp = absVal / c;
    7ab4:	fbbc fef3 	udiv	lr, ip, r3
    c /= 10;
    7ab8:	fba5 4103 	umull	r4, r1, r5, r3
    absVal %= c;
    7abc:	fb03 cc1e 	mls	ip, r3, lr, ip
    *ptr++ = tmp + '0';
    7ac0:	f10e 0430 	add.w	r4, lr, #48	; 0x30
  while(c > 0) {
    7ac4:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7ac6:	f800 4b01 	strb.w	r4, [r0], #1
    absVal %= c;
    7aca:	fa1f fc8c 	uxth.w	ip, ip
  while(c > 0) {
    7ace:	d1f1      	bne.n	7ab4 <deglitchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x38>
      *label = "ms";
    7ad0:	4905      	ldr	r1, [pc, #20]	; (7ae8 <deglitchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x6c>)
  *ptr = 0;
    7ad2:	7003      	strb	r3, [r0, #0]
      *label = "ms";
    7ad4:	6011      	str	r1, [r2, #0]
  },
    7ad6:	bd30      	pop	{r4, r5, pc}
      strncpy(textBuffer, "OFF", 4);
    7ad8:	4904      	ldr	r1, [pc, #16]	; (7aec <deglitchMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x70>)
    7ada:	2204      	movs	r2, #4
    7adc:	f006 bcd4 	b.w	e488 <memcpy>
    7ae0:	1fff9a86 	.word	0x1fff9a86
    7ae4:	cccccccd 	.word	0xcccccccd
    7ae8:	00013a3c 	.word	0x00013a3c
    7aec:	0001392c 	.word	0x0001392c

00007af0 <glissandoMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
    if(glissSetting>=8){
    7af0:	4b19      	ldr	r3, [pc, #100]	; (7b58 <glissandoMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x68>)
    7af2:	881b      	ldrh	r3, [r3, #0]
    7af4:	2b07      	cmp	r3, #7
  [](SubMenuRef __unused, char* out, const char** label) {
    7af6:	4608      	mov	r0, r1
    if(glissSetting>=8){
    7af8:	d929      	bls.n	7b4e <glissandoMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x5e>
      numToString(glissSetting, out); //0-7 is off; 8-127 is 8-127mS
    7afa:	b21b      	sxth	r3, r3
  uint16_t absVal = abs(value);
    7afc:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
  if(value < 0) {
    7b00:	2b00      	cmp	r3, #0
  uint16_t absVal = abs(value);
    7b02:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
    *ptr++ = '-';
    7b06:	bfb8      	it	lt
    7b08:	232d      	movlt	r3, #45	; 0x2d
  [](SubMenuRef __unused, char* out, const char** label) {
    7b0a:	b530      	push	{r4, r5, lr}
    *ptr++ = '-';
    7b0c:	bfb8      	it	lt
    7b0e:	f800 3b01 	strblt.w	r3, [r0], #1
  uint16_t absVal = abs(value);
    7b12:	fa1f fc8c 	uxth.w	ip, ip
  while((c*10) < absVal+1) c *= 10;
    7b16:	2101      	movs	r1, #1
    7b18:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
    7b1c:	ebbc 0f4e 	cmp.w	ip, lr, lsl #1
    7b20:	460b      	mov	r3, r1
    7b22:	ea4f 014e 	mov.w	r1, lr, lsl #1
    7b26:	daf7      	bge.n	7b18 <glissandoMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x28>
    c /= 10;
    7b28:	4d0c      	ldr	r5, [pc, #48]	; (7b5c <glissandoMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x6c>)
    int tmp = absVal / c;
    7b2a:	fbbc fef3 	udiv	lr, ip, r3
    c /= 10;
    7b2e:	fba5 4103 	umull	r4, r1, r5, r3
    absVal %= c;
    7b32:	fb03 cc1e 	mls	ip, r3, lr, ip
    *ptr++ = tmp + '0';
    7b36:	f10e 0430 	add.w	r4, lr, #48	; 0x30
  while(c > 0) {
    7b3a:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7b3c:	f800 4b01 	strb.w	r4, [r0], #1
    absVal %= c;
    7b40:	fa1f fc8c 	uxth.w	ip, ip
  while(c > 0) {
    7b44:	d1f1      	bne.n	7b2a <glissandoMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x3a>
      *label = "ms";
    7b46:	4906      	ldr	r1, [pc, #24]	; (7b60 <glissandoMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x70>)
  *ptr = 0;
    7b48:	7003      	strb	r3, [r0, #0]
      *label = "ms";
    7b4a:	6011      	str	r1, [r2, #0]
  },
    7b4c:	bd30      	pop	{r4, r5, pc}
      strncpy(out, "OFF", 4);
    7b4e:	4905      	ldr	r1, [pc, #20]	; (7b64 <glissandoMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x74>)
    7b50:	2204      	movs	r2, #4
    7b52:	f006 bc99 	b.w	e488 <memcpy>
    7b56:	bf00      	nop
    7b58:	1fff9ad4 	.word	0x1fff9ad4
    7b5c:	cccccccd 	.word	0xcccccccd
    7b60:	00013a3c 	.word	0x00013a3c
    7b64:	0001392c 	.word	0x0001392c

00007b68 <pitchBendMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)>:
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7b68:	b510      	push	{r4, lr}
    if(PBdepth) {
    7b6a:	4c1c      	ldr	r4, [pc, #112]	; (7bdc <pitchBendMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x74>)
    7b6c:	8822      	ldrh	r2, [r4, #0]
  [](SubMenuRef __unused, char* out, const char** __unused unit) {
    7b6e:	460b      	mov	r3, r1
    if(PBdepth) {
    7b70:	b36a      	cbz	r2, 7bce <pitchBendMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x66>
      memcpy(out, "1/", 2);
    7b72:	491b      	ldr	r1, [pc, #108]	; (7be0 <pitchBendMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x78>)
    7b74:	2202      	movs	r2, #2
    7b76:	4618      	mov	r0, r3
    7b78:	f006 fc86 	bl	e488 <memcpy>
      numToString(PBdepth, &out[2]);
    7b7c:	f9b4 1000 	ldrsh.w	r1, [r4]
  if(value < 0) {
    7b80:	2900      	cmp	r1, #0
  uint16_t absVal = abs(value);
    7b82:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
    7b86:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    *ptr++ = '-';
    7b8a:	bfb7      	itett	lt
    7b8c:	212d      	movlt	r1, #45	; 0x2d
      numToString(PBdepth, &out[2]);
    7b8e:	f100 0c02 	addge.w	ip, r0, #2
    *ptr++ = '-';
    7b92:	f100 0c03 	addlt.w	ip, r0, #3
    7b96:	7081      	strblt	r1, [r0, #2]
  uint16_t absVal = abs(value);
    7b98:	b292      	uxth	r2, r2
  while((c*10) < absVal+1) c *= 10;
    7b9a:	2001      	movs	r0, #1
    7b9c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    7ba0:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
    7ba4:	4603      	mov	r3, r0
    7ba6:	ea4f 0041 	mov.w	r0, r1, lsl #1
    7baa:	daf7      	bge.n	7b9c <pitchBendMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x34>
    c /= 10;
    7bac:	4c0d      	ldr	r4, [pc, #52]	; (7be4 <pitchBendMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x7c>)
    int tmp = absVal / c;
    7bae:	fbb2 f0f3 	udiv	r0, r2, r3
    c /= 10;
    7bb2:	fba4 e103 	umull	lr, r1, r4, r3
    absVal %= c;
    7bb6:	fb03 2210 	mls	r2, r3, r0, r2
    *ptr++ = tmp + '0';
    7bba:	f100 0e30 	add.w	lr, r0, #48	; 0x30
  while(c > 0) {
    7bbe:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    7bc0:	f80c eb01 	strb.w	lr, [ip], #1
    absVal %= c;
    7bc4:	b292      	uxth	r2, r2
  while(c > 0) {
    7bc6:	d1f2      	bne.n	7bae <pitchBendMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x46>
  *ptr = 0;
    7bc8:	f88c 3000 	strb.w	r3, [ip]
  },
    7bcc:	bd10      	pop	{r4, pc}
    7bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else strncpy(out, "OFF", 4);
    7bd2:	4905      	ldr	r1, [pc, #20]	; (7be8 <pitchBendMenu::{lambda(MenuEntrySub const&, char*, char const**)#1}::_FUN(MenuEntrySub const, MenuEntrySub const&, char const*)+0x80>)
    7bd4:	2204      	movs	r2, #4
    7bd6:	4618      	mov	r0, r3
    7bd8:	f006 bc56 	b.w	e488 <memcpy>
    7bdc:	1fff991a 	.word	0x1fff991a
    7be0:	00013a40 	.word	0x00013a40
    7be4:	cccccccd 	.word	0xcccccccd
    7be8:	0001392c 	.word	0x0001392c

00007bec <initDisplay()>:
void initDisplay() {
    7bec:	b530      	push	{r4, r5, lr}
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
    7bee:	4c15      	ldr	r4, [pc, #84]	; (7c44 <initDisplay()+0x58>)
void initDisplay() {
    7bf0:	b085      	sub	sp, #20
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
    7bf2:	2501      	movs	r5, #1
    7bf4:	462b      	mov	r3, r5
    7bf6:	223c      	movs	r2, #60	; 0x3c
    7bf8:	2102      	movs	r1, #2
    7bfa:	9500      	str	r5, [sp, #0]
    7bfc:	4620      	mov	r0, r4
    7bfe:	f004 feb3 	bl	c968 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>
  display.clearDisplay();
    7c02:	4620      	mov	r0, r4
    7c04:	f005 f894 	bl	cd30 <Adafruit_SSD1306::clearDisplay()>
  display.drawBitmap(0,0,nurad_logo_bmp,LOGO16_GLCD_WIDTH,LOGO16_GLCD_HEIGHT,1);
    7c08:	2200      	movs	r2, #0
    7c0a:	2340      	movs	r3, #64	; 0x40
    7c0c:	2080      	movs	r0, #128	; 0x80
    7c0e:	4611      	mov	r1, r2
    7c10:	9301      	str	r3, [sp, #4]
    7c12:	9000      	str	r0, [sp, #0]
    7c14:	4b0c      	ldr	r3, [pc, #48]	; (7c48 <initDisplay()+0x5c>)
    7c16:	9502      	str	r5, [sp, #8]
    7c18:	4620      	mov	r0, r4
    7c1a:	f005 fc09 	bl	d430 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  display.display();
    7c1e:	4620      	mov	r0, r4
    7c20:	f005 f896 	bl	cd50 <Adafruit_SSD1306::display()>
  memset(cursors, 0, sizeof(cursors));
    7c24:	4809      	ldr	r0, [pc, #36]	; (7c4c <initDisplay()+0x60>)
  memset(offsets, 0, sizeof(offsets));
    7c26:	490a      	ldr	r1, [pc, #40]	; (7c50 <initDisplay()+0x64>)
  memset(activeSub, 0, sizeof(activeSub));
    7c28:	4a0a      	ldr	r2, [pc, #40]	; (7c54 <initDisplay()+0x68>)
  memset(cursors, 0, sizeof(cursors));
    7c2a:	2300      	movs	r3, #0
    7c2c:	6003      	str	r3, [r0, #0]
    7c2e:	6043      	str	r3, [r0, #4]
    7c30:	7203      	strb	r3, [r0, #8]
  memset(offsets, 0, sizeof(offsets));
    7c32:	600b      	str	r3, [r1, #0]
    7c34:	604b      	str	r3, [r1, #4]
    7c36:	720b      	strb	r3, [r1, #8]
  memset(activeSub, 0, sizeof(activeSub));
    7c38:	6013      	str	r3, [r2, #0]
    7c3a:	6053      	str	r3, [r2, #4]
    7c3c:	7213      	strb	r3, [r2, #8]
}
    7c3e:	b005      	add	sp, #20
    7c40:	bd30      	pop	{r4, r5, pc}
    7c42:	bf00      	nop
    7c44:	1fff9c74 	.word	0x1fff9c74
    7c48:	00014a04 	.word	0x00014a04
    7c4c:	1fff9c34 	.word	0x1fff9c34
    7c50:	1fff9c40 	.word	0x1fff9c40
    7c54:	1fff9c50 	.word	0x1fff9c50

00007c58 <drawSensorPixels()>:
  updateSensorPixelsFlag = true;
    7c58:	4b01      	ldr	r3, [pc, #4]	; (7c60 <drawSensorPixels()+0x8>)
    7c5a:	2201      	movs	r2, #1
    7c5c:	701a      	strb	r2, [r3, #0]
}
    7c5e:	4770      	bx	lr
    7c60:	1fff9c32 	.word	0x1fff9c32

00007c64 <_GLOBAL__sub_I_cursorNow>:
  }

  if(redraw) {
    display.display();
  }
}
    7c64:	b530      	push	{r4, r5, lr}
Adafruit_SSD1306 display(128, 64, &Wire, OLED_RESET,1000000,1000000);
    7c66:	4c0a      	ldr	r4, [pc, #40]	; (7c90 <_GLOBAL__sub_I_cursorNow+0x2c>)
    7c68:	480a      	ldr	r0, [pc, #40]	; (7c94 <_GLOBAL__sub_I_cursorNow+0x30>)
    7c6a:	4b0b      	ldr	r3, [pc, #44]	; (7c98 <_GLOBAL__sub_I_cursorNow+0x34>)
}
    7c6c:	b085      	sub	sp, #20
Adafruit_SSD1306 display(128, 64, &Wire, OLED_RESET,1000000,1000000);
    7c6e:	2504      	movs	r5, #4
    7c70:	9002      	str	r0, [sp, #8]
    7c72:	9001      	str	r0, [sp, #4]
    7c74:	2240      	movs	r2, #64	; 0x40
    7c76:	2180      	movs	r1, #128	; 0x80
    7c78:	9500      	str	r5, [sp, #0]
    7c7a:	4620      	mov	r0, r4
    7c7c:	f004 fc80 	bl	c580 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>
    7c80:	4a06      	ldr	r2, [pc, #24]	; (7c9c <_GLOBAL__sub_I_cursorNow+0x38>)
    7c82:	4907      	ldr	r1, [pc, #28]	; (7ca0 <_GLOBAL__sub_I_cursorNow+0x3c>)
    7c84:	4620      	mov	r0, r4
}
    7c86:	b005      	add	sp, #20
    7c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
Adafruit_SSD1306 display(128, 64, &Wire, OLED_RESET,1000000,1000000);
    7c8c:	f009 bc12 	b.w	114b4 <__aeabi_atexit>
    7c90:	1fff9c74 	.word	0x1fff9c74
    7c94:	000f4240 	.word	0x000f4240
    7c98:	1fff9004 	.word	0x1fff9004
    7c9c:	1fff8d34 	.word	0x1fff8d34
    7ca0:	0000c5d5 	.word	0x0000c5d5

00007ca4 <drawBatt(int, int)>:
int drawBatt(int x,int y){
    7ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  display.drawRect(x+1,y,3,3,WHITE);
    7ca6:	1c46      	adds	r6, r0, #1
int drawBatt(int x,int y){
    7ca8:	b083      	sub	sp, #12
  display.drawRect(x+1,y,3,3,WHITE);
    7caa:	2701      	movs	r7, #1
    7cac:	2303      	movs	r3, #3
    7cae:	b236      	sxth	r6, r6
int drawBatt(int x,int y){
    7cb0:	4605      	mov	r5, r0
  display.drawRect(x+1,y,3,3,WHITE);
    7cb2:	b20a      	sxth	r2, r1
    7cb4:	e9cd 3700 	strd	r3, r7, [sp]
    7cb8:	4835      	ldr	r0, [pc, #212]	; (7d90 <drawBatt(int, int)+0xec>)
  display.drawRect(x,y+2,5,12,WHITE);
    7cba:	b28c      	uxth	r4, r1
  display.drawRect(x+1,y,3,3,WHITE);
    7cbc:	4631      	mov	r1, r6
    7cbe:	f005 fa8d 	bl	d1dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>
  display.drawRect(x,y+2,5,12,WHITE);
    7cc2:	230c      	movs	r3, #12
    7cc4:	1ca2      	adds	r2, r4, #2
    7cc6:	9300      	str	r3, [sp, #0]
    7cc8:	b212      	sxth	r2, r2
    7cca:	2305      	movs	r3, #5
    7ccc:	b229      	sxth	r1, r5
    7cce:	4830      	ldr	r0, [pc, #192]	; (7d90 <drawBatt(int, int)+0xec>)
    7cd0:	9701      	str	r7, [sp, #4]
    7cd2:	f005 fa83 	bl	d1dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>
  switch (batteryType){
    7cd6:	4b2f      	ldr	r3, [pc, #188]	; (7d94 <drawBatt(int, int)+0xf0>)
  int vMeterReading = battAvg;
    7cd8:	4a2f      	ldr	r2, [pc, #188]	; (7d98 <drawBatt(int, int)+0xf4>)
  switch (batteryType){
    7cda:	881b      	ldrh	r3, [r3, #0]
  int vMeterReading = battAvg;
    7cdc:	6815      	ldr	r5, [r2, #0]
  switch (batteryType){
    7cde:	42bb      	cmp	r3, r7
    7ce0:	d014      	beq.n	7d0c <drawBatt(int, int)+0x68>
    7ce2:	2b02      	cmp	r3, #2
    7ce4:	d038      	beq.n	7d58 <drawBatt(int, int)+0xb4>
    7ce6:	b323      	cbz	r3, 7d32 <drawBatt(int, int)+0x8e>
    7ce8:	2100      	movs	r1, #0
    7cea:	460b      	mov	r3, r1
      bar = constrain((10 *(vMeterReading - ALK_BAT_LOW)) / (ALK_BAT_FULL - ALK_BAT_LOW),0,10);
    7cec:	460d      	mov	r5, r1
  display.fillRect(x+1,y+13-bar,3,constrain(bar,0,10),WHITE);
    7cee:	f104 020d 	add.w	r2, r4, #13
    7cf2:	1ad2      	subs	r2, r2, r3
    7cf4:	2301      	movs	r3, #1
    7cf6:	9301      	str	r3, [sp, #4]
    7cf8:	9100      	str	r1, [sp, #0]
    7cfa:	4825      	ldr	r0, [pc, #148]	; (7d90 <drawBatt(int, int)+0xec>)
    7cfc:	2303      	movs	r3, #3
    7cfe:	b212      	sxth	r2, r2
    7d00:	4631      	mov	r1, r6
    7d02:	f005 fa21 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
}
    7d06:	4628      	mov	r0, r5
    7d08:	b003      	add	sp, #12
    7d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bar = constrain((10 * (vMeterReading - NMH_BAT_LOW)) / (NMH_BAT_FULL - NMH_BAT_LOW),0,10);
    7d0c:	f640 0386 	movw	r3, #2182	; 0x886
    7d10:	429d      	cmp	r5, r3
    7d12:	dde9      	ble.n	7ce8 <drawBatt(int, int)+0x44>
    7d14:	f640 135d 	movw	r3, #2397	; 0x95d
    7d18:	429d      	cmp	r5, r3
    7d1a:	dc34      	bgt.n	7d86 <drawBatt(int, int)+0xe2>
    7d1c:	4b1f      	ldr	r3, [pc, #124]	; (7d9c <drawBatt(int, int)+0xf8>)
    7d1e:	f6a5 0598 	subw	r5, r5, #2200	; 0x898
    7d22:	fb83 2305 	smull	r2, r3, r3, r5
    7d26:	17ed      	asrs	r5, r5, #31
    7d28:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
  display.fillRect(x+1,y+13-bar,3,constrain(bar,0,10),WHITE);
    7d2c:	b2ab      	uxth	r3, r5
    7d2e:	b229      	sxth	r1, r5
    7d30:	e7dd      	b.n	7cee <drawBatt(int, int)+0x4a>
      bar = constrain((10 *(vMeterReading - ALK_BAT_LOW)) / (ALK_BAT_FULL - ALK_BAT_LOW),0,10);
    7d32:	f640 02ca 	movw	r2, #2250	; 0x8ca
    7d36:	4295      	cmp	r5, r2
    7d38:	dd22      	ble.n	7d80 <drawBatt(int, int)+0xdc>
    7d3a:	f640 3321 	movw	r3, #2849	; 0xb21
    7d3e:	429d      	cmp	r5, r3
    7d40:	dc21      	bgt.n	7d86 <drawBatt(int, int)+0xe2>
    7d42:	4b17      	ldr	r3, [pc, #92]	; (7da0 <drawBatt(int, int)+0xfc>)
    7d44:	f6a5 05fc 	subw	r5, r5, #2300	; 0x8fc
    7d48:	fb83 2305 	smull	r2, r3, r3, r5
    7d4c:	17ed      	asrs	r5, r5, #31
    7d4e:	ebc5 1523 	rsb	r5, r5, r3, asr #4
  display.fillRect(x+1,y+13-bar,3,constrain(bar,0,10),WHITE);
    7d52:	b2ab      	uxth	r3, r5
    7d54:	b229      	sxth	r1, r5
    7d56:	e7ca      	b.n	7cee <drawBatt(int, int)+0x4a>
      bar = constrain((10 *(vMeterReading - LIP_BAT_LOW)) / (LIP_BAT_FULL - LIP_BAT_LOW),0,10);
    7d58:	f640 03ad 	movw	r3, #2221	; 0x8ad
    7d5c:	429d      	cmp	r5, r3
    7d5e:	ddc3      	ble.n	7ce8 <drawBatt(int, int)+0x44>
    7d60:	f640 2308 	movw	r3, #2568	; 0xa08
    7d64:	429d      	cmp	r5, r3
    7d66:	dc0e      	bgt.n	7d86 <drawBatt(int, int)+0xe2>
    7d68:	4b0e      	ldr	r3, [pc, #56]	; (7da4 <drawBatt(int, int)+0x100>)
    7d6a:	f6a5 05ca 	subw	r5, r5, #2250	; 0x8ca
    7d6e:	fb83 2305 	smull	r2, r3, r3, r5
    7d72:	442b      	add	r3, r5
    7d74:	17ed      	asrs	r5, r5, #31
    7d76:	ebc5 1523 	rsb	r5, r5, r3, asr #4
  display.fillRect(x+1,y+13-bar,3,constrain(bar,0,10),WHITE);
    7d7a:	b2ab      	uxth	r3, r5
    7d7c:	b229      	sxth	r1, r5
    7d7e:	e7b6      	b.n	7cee <drawBatt(int, int)+0x4a>
    7d80:	4619      	mov	r1, r3
      bar = constrain((10 *(vMeterReading - ALK_BAT_LOW)) / (ALK_BAT_FULL - ALK_BAT_LOW),0,10);
    7d82:	461d      	mov	r5, r3
    7d84:	e7b3      	b.n	7cee <drawBatt(int, int)+0x4a>
    7d86:	210a      	movs	r1, #10
    7d88:	460b      	mov	r3, r1
    7d8a:	460d      	mov	r5, r1
    7d8c:	e7af      	b.n	7cee <drawBatt(int, int)+0x4a>
    7d8e:	bf00      	nop
    7d90:	1fff9c74 	.word	0x1fff9c74
    7d94:	1fff9a04 	.word	0x1fff9a04
    7d98:	1fff9934 	.word	0x1fff9934
    7d9c:	38e38e39 	.word	0x38e38e39
    7da0:	51eb851f 	.word	0x51eb851f
    7da4:	8d3dcb09 	.word	0x8d3dcb09

00007da8 <drawFlash(int, int)>:
void drawFlash(int x, int y){
    7da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  display.drawLine(x+5,y,x,y+6,WHITE);
    7dac:	b28f      	uxth	r7, r1
void drawFlash(int x, int y){
    7dae:	b083      	sub	sp, #12
  display.drawLine(x+5,y,x,y+6,WHITE);
    7db0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 7e00 <drawFlash(int, int)+0x58>
    7db4:	1d46      	adds	r6, r0, #5
    7db6:	1dbd      	adds	r5, r7, #6
    7db8:	b204      	sxth	r4, r0
    7dba:	b22d      	sxth	r5, r5
    7dbc:	b236      	sxth	r6, r6
    7dbe:	f04f 0901 	mov.w	r9, #1
    7dc2:	b20a      	sxth	r2, r1
    7dc4:	4623      	mov	r3, r4
    7dc6:	4631      	mov	r1, r6
    7dc8:	4640      	mov	r0, r8
    7dca:	9500      	str	r5, [sp, #0]
    7dcc:	f8cd 9004 	str.w	r9, [sp, #4]
    7dd0:	f005 f968 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.drawLine(x,y+6,x+5,y+6,WHITE);
    7dd4:	4633      	mov	r3, r6
    7dd6:	462a      	mov	r2, r5
    7dd8:	4621      	mov	r1, r4
    7dda:	4640      	mov	r0, r8
    7ddc:	e9cd 5900 	strd	r5, r9, [sp]
    7de0:	f005 f960 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  display.drawLine(x,y+12,x+5,y+6,WHITE);
    7de4:	f107 020c 	add.w	r2, r7, #12
    7de8:	f8cd 9004 	str.w	r9, [sp, #4]
    7dec:	9500      	str	r5, [sp, #0]
    7dee:	4633      	mov	r3, r6
    7df0:	b212      	sxth	r2, r2
    7df2:	4621      	mov	r1, r4
    7df4:	4640      	mov	r0, r8
    7df6:	f005 f955 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
}
    7dfa:	b003      	add	sp, #12
    7dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7e00:	1fff9c74 	.word	0x1fff9c74

00007e04 <plotMenuEntries(MenuPage const*, bool)>:
static void plotMenuEntries(const MenuPage *page, bool clear = false) {
    7e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e08:	4607      	mov	r7, r0
    7e0a:	b084      	sub	sp, #16
  if(clear) {
    7e0c:	2900      	cmp	r1, #0
    7e0e:	d136      	bne.n	7e7e <plotMenuEntries(MenuPage const*, bool)+0x7a>
  display.setTextSize(1);
    7e10:	2101      	movs	r1, #1
    7e12:	482f      	ldr	r0, [pc, #188]	; (7ed0 <plotMenuEntries(MenuPage const*, bool)+0xcc>)
    7e14:	f005 fdfc 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
  int offset = offsets[page->cursor];
    7e18:	492e      	ldr	r1, [pc, #184]	; (7ed4 <plotMenuEntries(MenuPage const*, bool)+0xd0>)
    7e1a:	79ba      	ldrb	r2, [r7, #6]
  for(int item = offset; (item < page->numEntries) && (row < MENU_NUM_ROWS); item++, row++) {
    7e1c:	7a3b      	ldrb	r3, [r7, #8]
  int offset = offsets[page->cursor];
    7e1e:	f811 8002 	ldrb.w	r8, [r1, r2]
  for(int item = offset; (item < page->numEntries) && (row < MENU_NUM_ROWS); item++, row++) {
    7e22:	4598      	cmp	r8, r3
    7e24:	da21      	bge.n	7e6a <plotMenuEntries(MenuPage const*, bool)+0x66>
    7e26:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 7ed0 <plotMenuEntries(MenuPage const*, bool)+0xcc>
    7e2a:	4646      	mov	r6, r8
    7e2c:	240c      	movs	r4, #12
    7e2e:	f04f 0900 	mov.w	r9, #0
    const char* lineText = page->entries[item]->title;
    7e32:	68fb      	ldr	r3, [r7, #12]
    7e34:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7e38:	685d      	ldr	r5, [r3, #4]
    cursor_y = y;
    7e3a:	f8aa 4012 	strh.w	r4, [sl, #18]
  for(int item = offset; (item < page->numEntries) && (row < MENU_NUM_ROWS); item++, row++) {
    7e3e:	3601      	adds	r6, #1
							  return write((const uint8_t *)str, strlen(str)); }
    7e40:	4628      	mov	r0, r5
    cursor_x = x;
    7e42:	f8aa 9010 	strh.w	r9, [sl, #16]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    7e46:	b135      	cbz	r5, 7e56 <plotMenuEntries(MenuPage const*, bool)+0x52>
							  return write((const uint8_t *)str, strlen(str)); }
    7e48:	f00a fcba 	bl	127c0 <strlen>
    7e4c:	4629      	mov	r1, r5
    7e4e:	4602      	mov	r2, r0
    7e50:	4650      	mov	r0, sl
    7e52:	f006 f8a7 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    7e56:	4650      	mov	r0, sl
    7e58:	f006 f906 	bl	e068 <Print::println()>
    7e5c:	7a3b      	ldrb	r3, [r7, #8]
    7e5e:	3409      	adds	r4, #9
    7e60:	42b3      	cmp	r3, r6
    7e62:	b2a4      	uxth	r4, r4
    7e64:	dd01      	ble.n	7e6a <plotMenuEntries(MenuPage const*, bool)+0x66>
    7e66:	2c42      	cmp	r4, #66	; 0x42
    7e68:	d1e3      	bne.n	7e32 <plotMenuEntries(MenuPage const*, bool)+0x2e>
  if(offset)
    7e6a:	f1b8 0f00 	cmp.w	r8, #0
    7e6e:	d120      	bne.n	7eb2 <plotMenuEntries(MenuPage const*, bool)+0xae>
  if((offset+MENU_NUM_ROWS) < page->numEntries)
    7e70:	f108 0806 	add.w	r8, r8, #6
    7e74:	4598      	cmp	r8, r3
    7e76:	db0c      	blt.n	7e92 <plotMenuEntries(MenuPage const*, bool)+0x8e>
}
    7e78:	b004      	add	sp, #16
    7e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    display.fillRect( 0, MENU_HEADER_OFFSET, 63, 64-MENU_HEADER_OFFSET, BLACK);
    7e7e:	2100      	movs	r1, #0
    7e80:	2334      	movs	r3, #52	; 0x34
    7e82:	9300      	str	r3, [sp, #0]
    7e84:	4812      	ldr	r0, [pc, #72]	; (7ed0 <plotMenuEntries(MenuPage const*, bool)+0xcc>)
    7e86:	9101      	str	r1, [sp, #4]
    7e88:	233f      	movs	r3, #63	; 0x3f
    7e8a:	220c      	movs	r2, #12
    7e8c:	f005 f95c 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    7e90:	e7be      	b.n	7e10 <plotMenuEntries(MenuPage const*, bool)+0xc>
    display.drawTriangle(58, 63, 57, 60, 59, 60, WHITE);
    7e92:	233c      	movs	r3, #60	; 0x3c
    7e94:	2101      	movs	r1, #1
    7e96:	223b      	movs	r2, #59	; 0x3b
    7e98:	9103      	str	r1, [sp, #12]
    7e9a:	9302      	str	r3, [sp, #8]
    7e9c:	9201      	str	r2, [sp, #4]
    7e9e:	9300      	str	r3, [sp, #0]
    7ea0:	480b      	ldr	r0, [pc, #44]	; (7ed0 <plotMenuEntries(MenuPage const*, bool)+0xcc>)
    7ea2:	2339      	movs	r3, #57	; 0x39
    7ea4:	223f      	movs	r2, #63	; 0x3f
    7ea6:	213a      	movs	r1, #58	; 0x3a
    7ea8:	f005 fa94 	bl	d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>
}
    7eac:	b004      	add	sp, #16
    7eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    display.drawTriangle(58, MENU_HEADER_OFFSET, 57, MENU_HEADER_OFFSET+3, 59, MENU_HEADER_OFFSET+3, WHITE);
    7eb2:	230f      	movs	r3, #15
    7eb4:	2101      	movs	r1, #1
    7eb6:	223b      	movs	r2, #59	; 0x3b
    7eb8:	9103      	str	r1, [sp, #12]
    7eba:	9302      	str	r3, [sp, #8]
    7ebc:	9201      	str	r2, [sp, #4]
    7ebe:	9300      	str	r3, [sp, #0]
    7ec0:	4803      	ldr	r0, [pc, #12]	; (7ed0 <plotMenuEntries(MenuPage const*, bool)+0xcc>)
    7ec2:	2339      	movs	r3, #57	; 0x39
    7ec4:	220c      	movs	r2, #12
    7ec6:	213a      	movs	r1, #58	; 0x3a
    7ec8:	f005 fa84 	bl	d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>
    7ecc:	7a3b      	ldrb	r3, [r7, #8]
    7ece:	e7cf      	b.n	7e70 <plotMenuEntries(MenuPage const*, bool)+0x6c>
    7ed0:	1fff9c74 	.word	0x1fff9c74
    7ed4:	1fff9c40 	.word	0x1fff9c40

00007ed8 <showVersion()>:
void showVersion() {
    7ed8:	b510      	push	{r4, lr}
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    7eda:	4c0e      	ldr	r4, [pc, #56]	; (7f14 <showVersion()+0x3c>)
    7edc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextSize(1);
    7ee0:	4620      	mov	r0, r4
    7ee2:	2101      	movs	r1, #1
    7ee4:	6163      	str	r3, [r4, #20]
    7ee6:	f005 fd93 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    cursor_x = x;
    7eea:	4b0b      	ldr	r3, [pc, #44]	; (7f18 <showVersion()+0x40>)
							  return write((const uint8_t *)str, strlen(str)); }
    7eec:	490b      	ldr	r1, [pc, #44]	; (7f1c <showVersion()+0x44>)
    7eee:	6123      	str	r3, [r4, #16]
    7ef0:	2202      	movs	r2, #2
    7ef2:	4620      	mov	r0, r4
    7ef4:	f006 f856 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
    7ef8:	4909      	ldr	r1, [pc, #36]	; (7f20 <showVersion()+0x48>)
    7efa:	2205      	movs	r2, #5
    7efc:	4620      	mov	r0, r4
    7efe:	f006 f851 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    7f02:	4620      	mov	r0, r4
    7f04:	f006 f8b0 	bl	e068 <Print::println()>
  display.display();
    7f08:	4620      	mov	r0, r4
}
    7f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
    7f0e:	f004 bf1f 	b.w	cd50 <Adafruit_SSD1306::display()>
    7f12:	bf00      	nop
    7f14:	1fff9c74 	.word	0x1fff9c74
    7f18:	00340055 	.word	0x00340055
    7f1c:	00013a44 	.word	0x00013a44
    7f20:	00013a48 	.word	0x00013a48

00007f24 <curveCustomDraw(MenuEntrySub const&, char*, char const**)>:
static void curveCustomDraw(SubMenuRef __unused, char* __unused out, const char** __unused unit) {
    7f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const char* curveMenuLabels[] = {"-4", "-3", "-2", "-1", "LIN", "+1", "+2",
    7f28:	4d31      	ldr	r5, [pc, #196]	; (7ff0 <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xcc>)
    7f2a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 7ff4 <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xd0>
    7f2e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7ff8 <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xd4>
    7f32:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7ffc <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xd8>
    int y = multiMap(x*scale, curveIn, curves[curve], 17);
    7f36:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000 <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xdc>
  const char* curveMenuLabels[] = {"-4", "-3", "-2", "-1", "LIN", "+1", "+2",
    7f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static void curveCustomDraw(SubMenuRef __unused, char* __unused out, const char** __unused unit) {
    7f3c:	b091      	sub	sp, #68	; 0x44
  const char* curveMenuLabels[] = {"-4", "-3", "-2", "-1", "LIN", "+1", "+2",
    7f3e:	ac03      	add	r4, sp, #12
    7f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  for(int x = x0; x < 60; x+=1) {
    7f4a:	2600      	movs	r6, #0
  const char* curveMenuLabels[] = {"-4", "-3", "-2", "-1", "LIN", "+1", "+2",
    7f4c:	682b      	ldr	r3, [r5, #0]
    7f4e:	6023      	str	r3, [r4, #0]
  int y0 = 0, x0 = 0;
    7f50:	4635      	mov	r5, r6
    7f52:	4637      	mov	r7, r6
    int y = multiMap(x*scale, curveIn, curves[curve], 17);
    7f54:	b2b4      	uxth	r4, r6
    7f56:	f8b8 3000 	ldrh.w	r3, [r8]
    7f5a:	eb04 1004 	add.w	r0, r4, r4, lsl #4
    7f5e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    7f62:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
    7f66:	4651      	mov	r1, sl
    7f68:	2311      	movs	r3, #17
    7f6a:	b280      	uxth	r0, r0
    7f6c:	f7f9 f966 	bl	123c <multiMap(unsigned short, unsigned short const*, unsigned short const*, unsigned char)>
    y = (y*37) / ((1<<14)-1);
    7f70:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    7f74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7f78:	4b22      	ldr	r3, [pc, #136]	; (8004 <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xe0>)
    7f7a:	fb83 2300 	smull	r2, r3, r3, r0
    7f7e:	4403      	add	r3, r0
    7f80:	17c0      	asrs	r0, r0, #31
    7f82:	463a      	mov	r2, r7
    7f84:	ebc0 3763 	rsb	r7, r0, r3, asr #13
    display.drawLine(x0 + 65, 60 - y0, x + 65, 60 - y, WHITE);
    7f88:	f1c7 003c 	rsb	r0, r7, #60	; 0x3c
    7f8c:	f105 0141 	add.w	r1, r5, #65	; 0x41
    7f90:	b200      	sxth	r0, r0
    7f92:	f104 0341 	add.w	r3, r4, #65	; 0x41
    7f96:	f1c2 023c 	rsb	r2, r2, #60	; 0x3c
    7f9a:	2401      	movs	r4, #1
    7f9c:	e9cd 0400 	strd	r0, r4, [sp]
    7fa0:	4635      	mov	r5, r6
    7fa2:	b21b      	sxth	r3, r3
    7fa4:	b212      	sxth	r2, r2
    7fa6:	b209      	sxth	r1, r1
    7fa8:	4648      	mov	r0, r9
    7faa:	f005 f87b 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  for(int x = x0; x < 60; x+=1) {
    7fae:	2d3b      	cmp	r5, #59	; 0x3b
    7fb0:	4426      	add	r6, r4
    7fb2:	d1cf      	bne.n	7f54 <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0x30>
    7fb4:	4b14      	ldr	r3, [pc, #80]	; (8008 <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xe4>)
  display.setTextSize(0);
    7fb6:	4811      	ldr	r0, [pc, #68]	; (7ffc <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xd8>)
    7fb8:	f8c9 3010 	str.w	r3, [r9, #16]
    7fbc:	2100      	movs	r1, #0
    7fbe:	f005 fd27 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
  display.print(curveMenuLabels[curve]);
    7fc2:	f8b8 3000 	ldrh.w	r3, [r8]
    7fc6:	aa10      	add	r2, sp, #64	; 0x40
    7fc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7fcc:	f853 4c34 	ldr.w	r4, [r3, #-52]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    7fd0:	b154      	cbz	r4, 7fe8 <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xc4>
							  return write((const uint8_t *)str, strlen(str)); }
    7fd2:	4620      	mov	r0, r4
    7fd4:	f00a fbf4 	bl	127c0 <strlen>
    7fd8:	4602      	mov	r2, r0
    7fda:	4808      	ldr	r0, [pc, #32]	; (7ffc <curveCustomDraw(MenuEntrySub const&, char*, char const**)+0xd8>)
    7fdc:	4621      	mov	r1, r4
}
    7fde:	b011      	add	sp, #68	; 0x44
    7fe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fe4:	f005 bfde 	b.w	dfa4 <Print::write(unsigned char const*, unsigned int)>
    7fe8:	b011      	add	sp, #68	; 0x44
    7fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fee:	bf00      	nop
    7ff0:	0001411c 	.word	0x0001411c
    7ff4:	000137f4 	.word	0x000137f4
    7ff8:	1fff9a6c 	.word	0x1fff9a6c
    7ffc:	1fff9c74 	.word	0x1fff9c74
    8000:	000137d0 	.word	0x000137d0
    8004:	80020009 	.word	0x80020009
    8008:	0034006b 	.word	0x0034006b

0000800c <drawPatchView()>:
static void drawPatchView(){
    800c:	b530      	push	{r4, r5, lr}
  display.clearDisplay();
    800e:	4c3d      	ldr	r4, [pc, #244]	; (8104 <drawPatchView()+0xf8>)
  if (FPD){
    8010:	4d3d      	ldr	r5, [pc, #244]	; (8108 <drawPatchView()+0xfc>)
static void drawPatchView(){
    8012:	b083      	sub	sp, #12
  display.clearDisplay();
    8014:	4620      	mov	r0, r4
    8016:	f004 fe8b 	bl	cd30 <Adafruit_SSD1306::clearDisplay()>
  if (FPD){
    801a:	782b      	ldrb	r3, [r5, #0]
    801c:	bb5b      	cbnz	r3, 8076 <drawPatchView()+0x6a>
  display.setTextSize(6);
    801e:	4839      	ldr	r0, [pc, #228]	; (8104 <drawPatchView()+0xf8>)
    8020:	2106      	movs	r1, #6
    8022:	f005 fcf5 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
  if (FPD < 2){
    8026:	782b      	ldrb	r3, [r5, #0]
    8028:	2b01      	cmp	r3, #1
    802a:	d910      	bls.n	804e <drawPatchView()+0x42>
  } else if (FPD == 2){
    802c:	2b02      	cmp	r3, #2
    802e:	bf0c      	ite	eq
    8030:	4936      	ldreq	r1, [pc, #216]	; (810c <drawPatchView()+0x100>)
    8032:	4937      	ldrne	r1, [pc, #220]	; (8110 <drawPatchView()+0x104>)
    8034:	4833      	ldr	r0, [pc, #204]	; (8104 <drawPatchView()+0xf8>)
    8036:	f04f 130a 	mov.w	r3, #655370	; 0xa000a
    803a:	2203      	movs	r2, #3
    803c:	6123      	str	r3, [r4, #16]
    803e:	f005 ffb1 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8042:	4830      	ldr	r0, [pc, #192]	; (8104 <drawPatchView()+0xf8>)
}
    8044:	b003      	add	sp, #12
    8046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    804a:	f006 b80d 	b.w	e068 <Print::println()>
    if (patch < 10) { // 1-9
    804e:	4b31      	ldr	r3, [pc, #196]	; (8114 <drawPatchView()+0x108>)
    8050:	8819      	ldrh	r1, [r3, #0]
    8052:	2909      	cmp	r1, #9
    8054:	d933      	bls.n	80be <drawPatchView()+0xb2>
    } else if (patch < 100) { // 10-99
    8056:	2964      	cmp	r1, #100	; 0x64
    8058:	bf34      	ite	cc
    805a:	221f      	movcc	r2, #31
    805c:	220a      	movcs	r2, #10
    cursor_y = y;
    805e:	230a      	movs	r3, #10
	size_t print(int n)				{ return print((long)n); }
    8060:	4828      	ldr	r0, [pc, #160]	; (8104 <drawPatchView()+0xf8>)
    cursor_x = x;
    8062:	8222      	strh	r2, [r4, #16]
    cursor_y = y;
    8064:	8263      	strh	r3, [r4, #18]
    8066:	f005 fff7 	bl	e058 <Print::print(long)>
	size_t println(const char s[])			{ return print(s) + println(); }
    806a:	4826      	ldr	r0, [pc, #152]	; (8104 <drawPatchView()+0xf8>)
}
    806c:	b003      	add	sp, #12
    806e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8072:	f005 bff9 	b.w	e068 <Print::println()>
  if (LH1) display.fillRect(0,0,5,5,WHITE); else display.drawRect(0,0,5,5,WHITE);
    8076:	4b28      	ldr	r3, [pc, #160]	; (8118 <drawPatchView()+0x10c>)
    8078:	781a      	ldrb	r2, [r3, #0]
    807a:	2101      	movs	r1, #1
    807c:	2305      	movs	r3, #5
    807e:	bb02      	cbnz	r2, 80c2 <drawPatchView()+0xb6>
    8080:	9101      	str	r1, [sp, #4]
    8082:	9300      	str	r3, [sp, #0]
    8084:	4611      	mov	r1, r2
    8086:	4620      	mov	r0, r4
    8088:	f005 f8a8 	bl	d1dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>
  if (LH2) display.fillRect(10,0,5,5,WHITE); else display.drawRect(10,0,5,5,WHITE);
    808c:	4b23      	ldr	r3, [pc, #140]	; (811c <drawPatchView()+0x110>)
    808e:	781a      	ldrb	r2, [r3, #0]
    8090:	2305      	movs	r3, #5
    8092:	b312      	cbz	r2, 80da <drawPatchView()+0xce>
    8094:	2201      	movs	r2, #1
    8096:	9201      	str	r2, [sp, #4]
    8098:	9300      	str	r3, [sp, #0]
    809a:	2200      	movs	r2, #0
    809c:	4819      	ldr	r0, [pc, #100]	; (8104 <drawPatchView()+0xf8>)
    809e:	210a      	movs	r1, #10
    80a0:	f005 f852 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  if (LH3) display.fillRect(20,0,5,5,WHITE); else display.drawRect(20,0,5,5,WHITE);
    80a4:	4b1e      	ldr	r3, [pc, #120]	; (8120 <drawPatchView()+0x114>)
    80a6:	781a      	ldrb	r2, [r3, #0]
    80a8:	2305      	movs	r3, #5
    80aa:	b312      	cbz	r2, 80f2 <drawPatchView()+0xe6>
    80ac:	2201      	movs	r2, #1
    80ae:	9201      	str	r2, [sp, #4]
    80b0:	4814      	ldr	r0, [pc, #80]	; (8104 <drawPatchView()+0xf8>)
    80b2:	9300      	str	r3, [sp, #0]
    80b4:	2200      	movs	r2, #0
    80b6:	2114      	movs	r1, #20
    80b8:	f005 f846 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    80bc:	e7af      	b.n	801e <drawPatchView()+0x12>
    80be:	2230      	movs	r2, #48	; 0x30
    80c0:	e7cd      	b.n	805e <drawPatchView()+0x52>
  if (LH1) display.fillRect(0,0,5,5,WHITE); else display.drawRect(0,0,5,5,WHITE);
    80c2:	2200      	movs	r2, #0
    80c4:	9101      	str	r1, [sp, #4]
    80c6:	9300      	str	r3, [sp, #0]
    80c8:	4611      	mov	r1, r2
    80ca:	4620      	mov	r0, r4
    80cc:	f005 f83c 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  if (LH2) display.fillRect(10,0,5,5,WHITE); else display.drawRect(10,0,5,5,WHITE);
    80d0:	4b12      	ldr	r3, [pc, #72]	; (811c <drawPatchView()+0x110>)
    80d2:	781a      	ldrb	r2, [r3, #0]
    80d4:	2305      	movs	r3, #5
    80d6:	2a00      	cmp	r2, #0
    80d8:	d1dc      	bne.n	8094 <drawPatchView()+0x88>
    80da:	2101      	movs	r1, #1
    80dc:	9101      	str	r1, [sp, #4]
    80de:	9300      	str	r3, [sp, #0]
    80e0:	4808      	ldr	r0, [pc, #32]	; (8104 <drawPatchView()+0xf8>)
    80e2:	210a      	movs	r1, #10
    80e4:	f005 f87a 	bl	d1dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>
  if (LH3) display.fillRect(20,0,5,5,WHITE); else display.drawRect(20,0,5,5,WHITE);
    80e8:	4b0d      	ldr	r3, [pc, #52]	; (8120 <drawPatchView()+0x114>)
    80ea:	781a      	ldrb	r2, [r3, #0]
    80ec:	2305      	movs	r3, #5
    80ee:	2a00      	cmp	r2, #0
    80f0:	d1dc      	bne.n	80ac <drawPatchView()+0xa0>
    80f2:	2101      	movs	r1, #1
    80f4:	9101      	str	r1, [sp, #4]
    80f6:	4803      	ldr	r0, [pc, #12]	; (8104 <drawPatchView()+0xf8>)
    80f8:	9300      	str	r3, [sp, #0]
    80fa:	2114      	movs	r1, #20
    80fc:	f005 f86e 	bl	d1dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>
    8100:	e78d      	b.n	801e <drawPatchView()+0x12>
    8102:	bf00      	nop
    8104:	1fff9c74 	.word	0x1fff9c74
    8108:	1fff9c33 	.word	0x1fff9c33
    810c:	00013a50 	.word	0x00013a50
    8110:	00013a54 	.word	0x00013a54
    8114:	1fff9b62 	.word	0x1fff9b62
    8118:	1fff990f 	.word	0x1fff990f
    811c:	1fff9910 	.word	0x1fff9910
    8120:	1fff9911 	.word	0x1fff9911

00008124 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)>:
  numToString(MIDIchannel, buff);
    8124:	4b30      	ldr	r3, [pc, #192]	; (81e8 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0xc4>)
static void midiCustomDrawFunc(SubMenuRef __unused, char* __unused, const char** __unused) {
    8126:	b570      	push	{r4, r5, r6, lr}
  numToString(MIDIchannel, buff);
    8128:	f9b3 3000 	ldrsh.w	r3, [r3]
  uint16_t absVal = abs(value);
    812c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
    8130:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  if(value < 0) {
    8134:	2b00      	cmp	r3, #0
static void midiCustomDrawFunc(SubMenuRef __unused, char* __unused, const char** __unused) {
    8136:	b082      	sub	sp, #8
  uint16_t absVal = abs(value);
    8138:	b292      	uxth	r2, r2
  if(value < 0) {
    813a:	db40      	blt.n	81be <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0x9a>
  char* ptr = dest;
    813c:	466c      	mov	r4, sp
    813e:	46a4      	mov	ip, r4
  while((c*10) < absVal+1) c *= 10;
    8140:	2001      	movs	r0, #1
    8142:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    8146:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
    814a:	4603      	mov	r3, r0
    814c:	ea4f 0041 	mov.w	r0, r1, lsl #1
    8150:	daf7      	bge.n	8142 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0x1e>
    c /= 10;
    8152:	4d26      	ldr	r5, [pc, #152]	; (81ec <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0xc8>)
    int tmp = absVal / c;
    8154:	fbb2 f0f3 	udiv	r0, r2, r3
    c /= 10;
    8158:	fba5 6103 	umull	r6, r1, r5, r3
    absVal %= c;
    815c:	fb03 2210 	mls	r2, r3, r0, r2
    *ptr++ = tmp + '0';
    8160:	f100 0e30 	add.w	lr, r0, #48	; 0x30
  while(c > 0) {
    8164:	08cb      	lsrs	r3, r1, #3
    *ptr++ = tmp + '0';
    8166:	f80c eb01 	strb.w	lr, [ip], #1
    absVal %= c;
    816a:	b292      	uxth	r2, r2
  while(c > 0) {
    816c:	d1f2      	bne.n	8154 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0x30>
  *ptr = 0;
    816e:	f88c 3000 	strb.w	r3, [ip]
  int label_pixel_width = strlen(label)*12;
    8172:	4620      	mov	r0, r4
    8174:	f00a fb24 	bl	127c0 <strlen>
    display.setTextSize(2);
    8178:	4e1d      	ldr	r6, [pc, #116]	; (81f0 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0xcc>)
    817a:	2102      	movs	r1, #2
  int label_pixel_width = strlen(label)*12;
    817c:	4605      	mov	r5, r0
    display.setTextSize(2);
    817e:	4630      	mov	r0, r6
    8180:	f005 fc46 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
  int label_pixel_width = strlen(label)*12;
    8184:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    text_x = 96 - (label_pixel_width/2);
    8188:	f343 031d 	sbfx	r3, r3, #0, #30
    818c:	005b      	lsls	r3, r3, #1
    818e:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
    8192:	2221      	movs	r2, #33	; 0x21
							  return write((const uint8_t *)str, strlen(str)); }
    8194:	4620      	mov	r0, r4
    display.setCursor(text_x,33);
    8196:	8233      	strh	r3, [r6, #16]
    8198:	8272      	strh	r2, [r6, #18]
    819a:	f00a fb11 	bl	127c0 <strlen>
    819e:	4621      	mov	r1, r4
    81a0:	4602      	mov	r2, r0
    81a2:	4630      	mov	r0, r6
    81a4:	f005 fefe 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    81a8:	4630      	mov	r0, r6
    81aa:	f005 ff5d 	bl	e068 <Print::println()>
  if (widiJumper && widiOn) {
    81ae:	4b11      	ldr	r3, [pc, #68]	; (81f4 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0xd0>)
    81b0:	781b      	ldrb	r3, [r3, #0]
    81b2:	b113      	cbz	r3, 81ba <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0x96>
    81b4:	4b10      	ldr	r3, [pc, #64]	; (81f8 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0xd4>)
    81b6:	781b      	ldrb	r3, [r3, #0]
    81b8:	b943      	cbnz	r3, 81cc <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0xa8>
}
    81ba:	b002      	add	sp, #8
    81bc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = '-';
    81be:	232d      	movs	r3, #45	; 0x2d
    81c0:	f88d 3000 	strb.w	r3, [sp]
    81c4:	f10d 0c01 	add.w	ip, sp, #1
    81c8:	466c      	mov	r4, sp
    81ca:	e7b9      	b.n	8140 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0x1c>
    display.setTextSize(1);
    81cc:	4630      	mov	r0, r6
    81ce:	2101      	movs	r1, #1
    81d0:	f005 fc1e 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    cursor_x = x;
    81d4:	4b09      	ldr	r3, [pc, #36]	; (81fc <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0xd8>)
							  return write((const uint8_t *)str, strlen(str)); }
    81d6:	490a      	ldr	r1, [pc, #40]	; (8200 <midiCustomDrawFunc(MenuEntrySub const&, char*, char const**)+0xdc>)
    81d8:	6133      	str	r3, [r6, #16]
    81da:	2204      	movs	r2, #4
    81dc:	4630      	mov	r0, r6
    81de:	f005 fee1 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
}
    81e2:	b002      	add	sp, #8
    81e4:	bd70      	pop	{r4, r5, r6, pc}
    81e6:	bf00      	nop
    81e8:	1fff9918 	.word	0x1fff9918
    81ec:	cccccccd 	.word	0xcccccccd
    81f0:	1fff9c74 	.word	0x1fff9c74
    81f4:	1fff9c1e 	.word	0x1fff9c1e
    81f8:	1fff9c1f 	.word	0x1fff9c1f
    81fc:	00330064 	.word	0x00330064
    8200:	00013a58 	.word	0x00013a58

00008204 <drawSubMenu(MenuPage const*) [clone .isra.0]>:
static bool drawSubMenu(const MenuPage *page) {
    8204:	b5f0      	push	{r4, r5, r6, r7, lr}
    int index = cursors[page->cursor];
    8206:	4b2a      	ldr	r3, [pc, #168]	; (82b0 <drawSubMenu(MenuPage const*) [clone .isra.0]+0xac>)
    const MenuEntry* subEntry =  page->entries[index];
    8208:	5c1b      	ldrb	r3, [r3, r0]
    820a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    switch(subEntry->type) {
    820e:	7823      	ldrb	r3, [r4, #0]
static bool drawSubMenu(const MenuPage *page) {
    8210:	b085      	sub	sp, #20
    switch(subEntry->type) {
    8212:	b943      	cbnz	r3, 8226 <drawSubMenu(MenuPage const*) [clone .isra.0]+0x22>
          const char* labelPtr = nullptr;
    8214:	9300      	str	r3, [sp, #0]
          sub->getSubTextFunc(*sub, buffer, &labelPtr);
    8216:	466a      	mov	r2, sp
    8218:	69a3      	ldr	r3, [r4, #24]
    821a:	a901      	add	r1, sp, #4
    821c:	4620      	mov	r0, r4
    821e:	4798      	blx	r3
          if( !(sub->flags & EMenuEntryCustom)) {
    8220:	8aa3      	ldrh	r3, [r4, #20]
    8222:	079b      	lsls	r3, r3, #30
    8224:	d502      	bpl.n	822c <drawSubMenu(MenuPage const*) [clone .isra.0]+0x28>
}
    8226:	2001      	movs	r0, #1
    8228:	b005      	add	sp, #20
    822a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int label_pixel_width = strlen(label)*12;
    822c:	a801      	add	r0, sp, #4
    822e:	f00a fac7 	bl	127c0 <strlen>
            plotSubOption(buffer, labelPtr);
    8232:	9e00      	ldr	r6, [sp, #0]
  int label_pixel_width = strlen(label)*12;
    8234:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8238:	0084      	lsls	r4, r0, #2
  if(unit == nullptr) {
    823a:	b3a6      	cbz	r6, 82a6 <drawSubMenu(MenuPage const*) [clone .isra.0]+0xa2>
      int unit_pixel_width = strlen(unit)*6;
    823c:	4630      	mov	r0, r6
    823e:	f00a fabf 	bl	127c0 <strlen>
    8242:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      int halfSum = (label_pixel_width + unit_pixel_width)/2;
    8246:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    824a:	4d1a      	ldr	r5, [pc, #104]	; (82b4 <drawSubMenu(MenuPage const*) [clone .isra.0]+0xb0>)
    824c:	1064      	asrs	r4, r4, #1
      text_x = 96 - halfSum;
    824e:	f1c4 0760 	rsb	r7, r4, #96	; 0x60
      unit_x = 96 + halfSum - unit_pixel_width;
    8252:	3460      	adds	r4, #96	; 0x60
    cursor_y = y;
    8254:	2328      	movs	r3, #40	; 0x28
      display.setTextSize(1);
    8256:	2101      	movs	r1, #1
      unit_x = 96 + halfSum - unit_pixel_width;
    8258:	eba4 0440 	sub.w	r4, r4, r0, lsl #1
      display.setTextSize(1);
    825c:	4628      	mov	r0, r5
    825e:	826b      	strh	r3, [r5, #18]
      display.setCursor(unit_x,40);
    8260:	822c      	strh	r4, [r5, #16]
      display.setTextSize(1);
    8262:	f005 fbd5 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    8266:	4630      	mov	r0, r6
    8268:	f00a faaa 	bl	127c0 <strlen>
    826c:	4631      	mov	r1, r6
    826e:	4602      	mov	r2, r0
    8270:	4628      	mov	r0, r5
    8272:	f005 fe97 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8276:	4628      	mov	r0, r5
    8278:	f005 fef6 	bl	e068 <Print::println()>
    display.setTextSize(2);
    827c:	2102      	movs	r1, #2
    827e:	480d      	ldr	r0, [pc, #52]	; (82b4 <drawSubMenu(MenuPage const*) [clone .isra.0]+0xb0>)
    8280:	f005 fbc6 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    8284:	2321      	movs	r3, #33	; 0x21
							  return write((const uint8_t *)str, strlen(str)); }
    8286:	a801      	add	r0, sp, #4
    8288:	826b      	strh	r3, [r5, #18]
    display.setCursor(text_x,33);
    828a:	822f      	strh	r7, [r5, #16]
    828c:	f00a fa98 	bl	127c0 <strlen>
    8290:	a901      	add	r1, sp, #4
    8292:	4602      	mov	r2, r0
    8294:	4807      	ldr	r0, [pc, #28]	; (82b4 <drawSubMenu(MenuPage const*) [clone .isra.0]+0xb0>)
    8296:	f005 fe85 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    829a:	4806      	ldr	r0, [pc, #24]	; (82b4 <drawSubMenu(MenuPage const*) [clone .isra.0]+0xb0>)
    829c:	f005 fee4 	bl	e068 <Print::println()>
}
    82a0:	2001      	movs	r0, #1
    82a2:	b005      	add	sp, #20
    82a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    text_x = 96 - (label_pixel_width/2);
    82a6:	1060      	asrs	r0, r4, #1
    82a8:	4d02      	ldr	r5, [pc, #8]	; (82b4 <drawSubMenu(MenuPage const*) [clone .isra.0]+0xb0>)
    82aa:	f1c0 0760 	rsb	r7, r0, #96	; 0x60
    82ae:	e7e5      	b.n	827c <drawSubMenu(MenuPage const*) [clone .isra.0]+0x78>
    82b0:	1fff9c34 	.word	0x1fff9c34
    82b4:	1fff9c74 	.word	0x1fff9c74

000082b8 <patchPageUpdate(KeyState&, unsigned long)>:
static bool patchPageUpdate(KeyState& input, uint32_t timeNow) {
    82b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool redraw = stateFirstRun;
    82bc:	4f72      	ldr	r7, [pc, #456]	; (8488 <patchPageUpdate(KeyState&, unsigned long)+0x1d0>)
    82be:	783a      	ldrb	r2, [r7, #0]
    82c0:	2a00      	cmp	r2, #0
static bool patchPageUpdate(KeyState& input, uint32_t timeNow) {
    82c2:	4604      	mov	r4, r0
    82c4:	460d      	mov	r5, r1
  bool redraw = stateFirstRun;
    82c6:	bf14      	ite	ne
    82c8:	f04f 0801 	movne.w	r8, #1
    82cc:	f04f 0800 	moveq.w	r8, #0
  if (stateFirstRun) {
    82d0:	d14c      	bne.n	836c <patchPageUpdate(KeyState&, unsigned long)+0xb4>
  if ((timeNow - patchViewTime) > patchViewTimeUp) {
    82d2:	4e6e      	ldr	r6, [pc, #440]	; (848c <patchPageUpdate(KeyState&, unsigned long)+0x1d4>)
    82d4:	6833      	ldr	r3, [r6, #0]
    82d6:	1acb      	subs	r3, r1, r3
    82d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    82dc:	d804      	bhi.n	82e8 <patchPageUpdate(KeyState&, unsigned long)+0x30>
  if (input.changed) {
    82de:	7863      	ldrb	r3, [r4, #1]
    82e0:	b993      	cbnz	r3, 8308 <patchPageUpdate(KeyState&, unsigned long)+0x50>
}
    82e2:	4640      	mov	r0, r8
    82e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    writeSetting(PATCH_ADDR,patch);
    82e8:	4b69      	ldr	r3, [pc, #420]	; (8490 <patchPageUpdate(KeyState&, unsigned long)+0x1d8>)
    doPatchUpdate = 1;
    82ea:	486a      	ldr	r0, [pc, #424]	; (8494 <patchPageUpdate(KeyState&, unsigned long)+0x1dc>)
    writeSetting(PATCH_ADDR,patch);
    82ec:	8819      	ldrh	r1, [r3, #0]
    menuState= DISPLAYOFF_IDL;
    82ee:	4b6a      	ldr	r3, [pc, #424]	; (8498 <patchPageUpdate(KeyState&, unsigned long)+0x1e0>)
    82f0:	701a      	strb	r2, [r3, #0]
    FPD = 0;
    82f2:	4b6a      	ldr	r3, [pc, #424]	; (849c <patchPageUpdate(KeyState&, unsigned long)+0x1e4>)
    82f4:	701a      	strb	r2, [r3, #0]
    stateFirstRun = 1;
    82f6:	2301      	movs	r3, #1
    doPatchUpdate = 1;
    82f8:	7003      	strb	r3, [r0, #0]
    writeSetting(PATCH_ADDR,patch);
    82fa:	2026      	movs	r0, #38	; 0x26
    stateFirstRun = 1;
    82fc:	703b      	strb	r3, [r7, #0]
    writeSetting(PATCH_ADDR,patch);
    82fe:	f000 ffeb 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  if (input.changed) {
    8302:	7863      	ldrb	r3, [r4, #1]
    8304:	2b00      	cmp	r3, #0
    8306:	d0ec      	beq.n	82e2 <patchPageUpdate(KeyState&, unsigned long)+0x2a>
    patchViewTime = timeNow;
    8308:	6035      	str	r5, [r6, #0]
  readSwitches();
    830a:	f7fa fcd3 	bl	2cb4 <readSwitches()>
  return LH1+2*LH2+4*LH3;
    830e:	4964      	ldr	r1, [pc, #400]	; (84a0 <patchPageUpdate(KeyState&, unsigned long)+0x1e8>)
    8310:	4b64      	ldr	r3, [pc, #400]	; (84a4 <patchPageUpdate(KeyState&, unsigned long)+0x1ec>)
    8312:	7809      	ldrb	r1, [r1, #0]
    8314:	4a64      	ldr	r2, [pc, #400]	; (84a8 <patchPageUpdate(KeyState&, unsigned long)+0x1f0>)
    8316:	781b      	ldrb	r3, [r3, #0]
    8318:	7812      	ldrb	r2, [r2, #0]
    831a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    switch (input.current){
    831e:	7821      	ldrb	r1, [r4, #0]
  return LH1+2*LH2+4*LH3;
    8320:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    switch (input.current){
    8324:	1e4a      	subs	r2, r1, #1
    8326:	2a0e      	cmp	r2, #14
    8328:	d8db      	bhi.n	82e2 <patchPageUpdate(KeyState&, unsigned long)+0x2a>
    832a:	a001      	add	r0, pc, #4	; (adr r0, 8330 <patchPageUpdate(KeyState&, unsigned long)+0x78>)
    832c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    8330:	00008383 	.word	0x00008383
    8334:	000083f9 	.word	0x000083f9
    8338:	000082e3 	.word	0x000082e3
    833c:	00008383 	.word	0x00008383
    8340:	000082e3 	.word	0x000082e3
    8344:	000082e3 	.word	0x000082e3
    8348:	000082e3 	.word	0x000082e3
    834c:	000083e1 	.word	0x000083e1
    8350:	000082e3 	.word	0x000082e3
    8354:	0000839d 	.word	0x0000839d
    8358:	000082e3 	.word	0x000082e3
    835c:	000082e3 	.word	0x000082e3
    8360:	000082e3 	.word	0x000082e3
    8364:	000082e3 	.word	0x000082e3
    8368:	00008459 	.word	0x00008459
    display.ssd1306_command(SSD1306_DISPLAYON);
    836c:	484f      	ldr	r0, [pc, #316]	; (84ac <patchPageUpdate(KeyState&, unsigned long)+0x1f4>)
    patchViewTime = timeNow;
    836e:	4e47      	ldr	r6, [pc, #284]	; (848c <patchPageUpdate(KeyState&, unsigned long)+0x1d4>)
    display.ssd1306_command(SSD1306_DISPLAYON);
    8370:	21af      	movs	r1, #175	; 0xaf
    8372:	f004 fa7f 	bl	c874 <Adafruit_SSD1306::ssd1306_command(unsigned char)>
    drawPatchView();
    8376:	f7ff fe49 	bl	800c <drawPatchView()>
    stateFirstRun = 0;
    837a:	2300      	movs	r3, #0
    patchViewTime = timeNow;
    837c:	6035      	str	r5, [r6, #0]
    stateFirstRun = 0;
    837e:	703b      	strb	r3, [r7, #0]
  if ((timeNow - patchViewTime) > patchViewTimeUp) {
    8380:	e7ad      	b.n	82de <patchPageUpdate(KeyState&, unsigned long)+0x26>
        if (trills && (fastPatch[trills-1] > 0)){
    8382:	2b00      	cmp	r3, #0
    8384:	d052      	beq.n	842c <patchPageUpdate(KeyState&, unsigned long)+0x174>
    8386:	4a4a      	ldr	r2, [pc, #296]	; (84b0 <patchPageUpdate(KeyState&, unsigned long)+0x1f8>)
    8388:	3b01      	subs	r3, #1
    838a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    838e:	2900      	cmp	r1, #0
    8390:	d16c      	bne.n	846c <patchPageUpdate(KeyState&, unsigned long)+0x1b4>
        drawPatchView();
    8392:	f7ff fe3b 	bl	800c <drawPatchView()>
        redraw = true;
    8396:	f04f 0801 	mov.w	r8, #1
        break;
    839a:	e7a2      	b.n	82e2 <patchPageUpdate(KeyState&, unsigned long)+0x2a>
          display.clearDisplay();
    839c:	4c43      	ldr	r4, [pc, #268]	; (84ac <patchPageUpdate(KeyState&, unsigned long)+0x1f4>)
    839e:	4620      	mov	r0, r4
    83a0:	f004 fcc6 	bl	cd30 <Adafruit_SSD1306::clearDisplay()>
          display.setTextSize(2);
    83a4:	4620      	mov	r0, r4
    83a6:	2102      	movs	r1, #2
    83a8:	f005 fb32 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    cursor_x = x;
    83ac:	4b41      	ldr	r3, [pc, #260]	; (84b4 <patchPageUpdate(KeyState&, unsigned long)+0x1fc>)
    83ae:	6123      	str	r3, [r4, #16]
							  return write((const uint8_t *)str, strlen(str)); }
    83b0:	4941      	ldr	r1, [pc, #260]	; (84b8 <patchPageUpdate(KeyState&, unsigned long)+0x200>)
    83b2:	2205      	movs	r2, #5
    83b4:	4620      	mov	r0, r4
    83b6:	f005 fdf5 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    83ba:	4620      	mov	r0, r4
    83bc:	f005 fe54 	bl	e068 <Print::println()>
    83c0:	4b3e      	ldr	r3, [pc, #248]	; (84bc <patchPageUpdate(KeyState&, unsigned long)+0x204>)
							  return write((const uint8_t *)str, strlen(str)); }
    83c2:	493f      	ldr	r1, [pc, #252]	; (84c0 <patchPageUpdate(KeyState&, unsigned long)+0x208>)
    83c4:	6123      	str	r3, [r4, #16]
    83c6:	2205      	movs	r2, #5
    83c8:	4620      	mov	r0, r4
    83ca:	f005 fdeb 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    83ce:	4620      	mov	r0, r4
    83d0:	f005 fe4a 	bl	e068 <Print::println()>
          display.display(); // call display explicitly _before_ we call midiPanic
    83d4:	4620      	mov	r0, r4
    83d6:	f004 fcbb 	bl	cd50 <Adafruit_SSD1306::display()>
          midiPanic();
    83da:	f000 fe9b 	bl	9114 <midiPanic()>
          break;
    83de:	e780      	b.n	82e2 <patchPageUpdate(KeyState&, unsigned long)+0x2a>
        if (FPD < 2){
    83e0:	4c2e      	ldr	r4, [pc, #184]	; (849c <patchPageUpdate(KeyState&, unsigned long)+0x1e4>)
    83e2:	7823      	ldrb	r3, [r4, #0]
    83e4:	2b01      	cmp	r3, #1
    83e6:	d939      	bls.n	845c <patchPageUpdate(KeyState&, unsigned long)+0x1a4>
        writeSetting(PATCH_ADDR,patch);
    83e8:	4b29      	ldr	r3, [pc, #164]	; (8490 <patchPageUpdate(KeyState&, unsigned long)+0x1d8>)
    83ea:	2026      	movs	r0, #38	; 0x26
    83ec:	8819      	ldrh	r1, [r3, #0]
    83ee:	f000 ff73 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        FPD = 0;
    83f2:	2300      	movs	r3, #0
    83f4:	7023      	strb	r3, [r4, #0]
        break;
    83f6:	e774      	b.n	82e2 <patchPageUpdate(KeyState&, unsigned long)+0x2a>
        if (trills && (fastPatch[trills-1] > 0)){
    83f8:	2b00      	cmp	r3, #0
    83fa:	f43f af72 	beq.w	82e2 <patchPageUpdate(KeyState&, unsigned long)+0x2a>
    83fe:	4a2c      	ldr	r2, [pc, #176]	; (84b0 <patchPageUpdate(KeyState&, unsigned long)+0x1f8>)
    8400:	3b01      	subs	r3, #1
    8402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    8406:	2b00      	cmp	r3, #0
    8408:	f43f af6b 	beq.w	82e2 <patchPageUpdate(KeyState&, unsigned long)+0x2a>
          doPatchUpdate = 1;
    840c:	4c21      	ldr	r4, [pc, #132]	; (8494 <patchPageUpdate(KeyState&, unsigned long)+0x1dc>)
          patch = fastPatch[trills-1];
    840e:	4920      	ldr	r1, [pc, #128]	; (8490 <patchPageUpdate(KeyState&, unsigned long)+0x1d8>)
          activePatch = 0;
    8410:	482c      	ldr	r0, [pc, #176]	; (84c4 <patchPageUpdate(KeyState&, unsigned long)+0x20c>)
          FPD = 1;
    8412:	4a22      	ldr	r2, [pc, #136]	; (849c <patchPageUpdate(KeyState&, unsigned long)+0x1e4>)
          patch = fastPatch[trills-1];
    8414:	800b      	strh	r3, [r1, #0]
          doPatchUpdate = 1;
    8416:	f04f 0801 	mov.w	r8, #1
    841a:	f884 8000 	strb.w	r8, [r4]
          activePatch = 0;
    841e:	2400      	movs	r4, #0
    8420:	7004      	strb	r4, [r0, #0]
          FPD = 1;
    8422:	f882 8000 	strb.w	r8, [r2]
          drawPatchView();
    8426:	f7ff fdf1 	bl	800c <drawPatchView()>
          redraw = true;
    842a:	e75a      	b.n	82e2 <patchPageUpdate(KeyState&, unsigned long)+0x2a>
          patch = (((patch-1u) + ((input.current == BTN_UP)?1u:-1u))&127u) + 1u;
    842c:	4c18      	ldr	r4, [pc, #96]	; (8490 <patchPageUpdate(KeyState&, unsigned long)+0x1d8>)
    842e:	8820      	ldrh	r0, [r4, #0]
    8430:	2904      	cmp	r1, #4
    8432:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8436:	f100 31ff 	add.w	r1, r0, #4294967295
    843a:	bf08      	it	eq
    843c:	2201      	moveq	r2, #1
    843e:	440a      	add	r2, r1
    8440:	f002 027f 	and.w	r2, r2, #127	; 0x7f
          activePatch = 0;
    8444:	481f      	ldr	r0, [pc, #124]	; (84c4 <patchPageUpdate(KeyState&, unsigned long)+0x20c>)
          doPatchUpdate = 1;
    8446:	4913      	ldr	r1, [pc, #76]	; (8494 <patchPageUpdate(KeyState&, unsigned long)+0x1dc>)
          activePatch = 0;
    8448:	7003      	strb	r3, [r0, #0]
          patch = (((patch-1u) + ((input.current == BTN_UP)?1u:-1u))&127u) + 1u;
    844a:	3201      	adds	r2, #1
    844c:	8022      	strh	r2, [r4, #0]
          FPD = 0;
    844e:	4a13      	ldr	r2, [pc, #76]	; (849c <patchPageUpdate(KeyState&, unsigned long)+0x1e4>)
          doPatchUpdate = 1;
    8450:	2001      	movs	r0, #1
    8452:	7008      	strb	r0, [r1, #0]
          FPD = 0;
    8454:	7013      	strb	r3, [r2, #0]
    8456:	e79c      	b.n	8392 <patchPageUpdate(KeyState&, unsigned long)+0xda>
        _reboot_Teensyduino_();
    8458:	f007 fe4e 	bl	100f8 <_reboot_Teensyduino_>
          menuState= DISPLAYOFF_IDL;
    845c:	4b0e      	ldr	r3, [pc, #56]	; (8498 <patchPageUpdate(KeyState&, unsigned long)+0x1e0>)
    845e:	2200      	movs	r2, #0
    8460:	701a      	strb	r2, [r3, #0]
          doPatchUpdate = 1;
    8462:	4a0c      	ldr	r2, [pc, #48]	; (8494 <patchPageUpdate(KeyState&, unsigned long)+0x1dc>)
          stateFirstRun = 1;
    8464:	2301      	movs	r3, #1
    8466:	703b      	strb	r3, [r7, #0]
          doPatchUpdate = 1;
    8468:	7013      	strb	r3, [r2, #0]
    846a:	e7bd      	b.n	83e8 <patchPageUpdate(KeyState&, unsigned long)+0x130>
          patch = fastPatch[trills-1];
    846c:	4808      	ldr	r0, [pc, #32]	; (8490 <patchPageUpdate(KeyState&, unsigned long)+0x1d8>)
          doPatchUpdate = 1;
    846e:	4d09      	ldr	r5, [pc, #36]	; (8494 <patchPageUpdate(KeyState&, unsigned long)+0x1dc>)
          activePatch = 0;
    8470:	4c14      	ldr	r4, [pc, #80]	; (84c4 <patchPageUpdate(KeyState&, unsigned long)+0x20c>)
          FPD = 1;
    8472:	4a0a      	ldr	r2, [pc, #40]	; (849c <patchPageUpdate(KeyState&, unsigned long)+0x1e4>)
          patch = fastPatch[trills-1];
    8474:	8001      	strh	r1, [r0, #0]
          doPatchUpdate = 1;
    8476:	2301      	movs	r3, #1
    8478:	702b      	strb	r3, [r5, #0]
          writeSetting(PATCH_ADDR,patch);
    847a:	2026      	movs	r0, #38	; 0x26
          activePatch = 0;
    847c:	2500      	movs	r5, #0
    847e:	7025      	strb	r5, [r4, #0]
          FPD = 1;
    8480:	7013      	strb	r3, [r2, #0]
          writeSetting(PATCH_ADDR,patch);
    8482:	f000 ff29 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    8486:	e784      	b.n	8392 <patchPageUpdate(KeyState&, unsigned long)+0xda>
    8488:	1fff8e9c 	.word	0x1fff8e9c
    848c:	1fff9c2c 	.word	0x1fff9c2c
    8490:	1fff9b62 	.word	0x1fff9b62
    8494:	1fff9a8a 	.word	0x1fff9a8a
    8498:	1fff9c59 	.word	0x1fff9c59
    849c:	1fff9c33 	.word	0x1fff9c33
    84a0:	1fff9910 	.word	0x1fff9910
    84a4:	1fff990f 	.word	0x1fff990f
    84a8:	1fff9911 	.word	0x1fff9911
    84ac:	1fff9c74 	.word	0x1fff9c74
    84b0:	1fff9aa0 	.word	0x1fff9aa0
    84b4:	000f0023 	.word	0x000f0023
    84b8:	00013a60 	.word	0x00013a60
    84bc:	001e0023 	.word	0x001e0023
    84c0:	00013a68 	.word	0x00013a68
    84c4:	1fff9932 	.word	0x1fff9932

000084c8 <updatePage(MenuPage const*, KeyState&, unsigned long)>:
static bool updatePage(const MenuPage *page, KeyState &input, uint32_t timeNow) {
    84c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    84cc:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 8784 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2bc>
    84d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    84d4:	f8cb 3014 	str.w	r3, [fp, #20]
  if(page->flags & EMenuPageCustom) {
    84d8:	8883      	ldrh	r3, [r0, #4]
    84da:	f013 0601 	ands.w	r6, r3, #1
static bool updatePage(const MenuPage *page, KeyState &input, uint32_t timeNow) {
    84de:	b08b      	sub	sp, #44	; 0x2c
    84e0:	4604      	mov	r4, r0
    84e2:	460d      	mov	r5, r1
    84e4:	4691      	mov	r9, r2
  if(page->flags & EMenuPageCustom) {
    84e6:	d006      	beq.n	84f6 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2e>
    return custom->menuUpdateFunc(input, timeNow);
    84e8:	6883      	ldr	r3, [r0, #8]
    84ea:	4611      	mov	r1, r2
    84ec:	4628      	mov	r0, r5
}
    84ee:	b00b      	add	sp, #44	; 0x2c
    84f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return custom->menuUpdateFunc(input, timeNow);
    84f4:	4718      	bx	r3
  bool redraw = stateFirstRun;
    84f6:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8788 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2c0>
  if (stateFirstRun) {
    84fa:	f898 3000 	ldrb.w	r3, [r8]
    84fe:	2b00      	cmp	r3, #0
    8500:	f040 8097 	bne.w	8632 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x16a>
  if (activeSub[page->cursor]) {
    8504:	79a0      	ldrb	r0, [r4, #6]
    8506:	4ba1      	ldr	r3, [pc, #644]	; (878c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2c4>)
    8508:	5c1f      	ldrb	r7, [r3, r0]
    850a:	b1b7      	cbz	r7, 853a <updatePage(MenuPage const*, KeyState&, unsigned long)+0x72>
  if (input.changed) {
    850c:	7869      	ldrb	r1, [r5, #1]
    850e:	782a      	ldrb	r2, [r5, #0]
    8510:	2900      	cmp	r1, #0
    8512:	d058      	beq.n	85c6 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xfe>
    auto sub = (const MenuEntrySub*)page->entries[current_sub];
    8514:	68e1      	ldr	r1, [r4, #12]
    8516:	3f01      	subs	r7, #1
    switch (input.current){
    8518:	3a01      	subs	r2, #1
    auto sub = (const MenuEntrySub*)page->entries[current_sub];
    851a:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
    uint16_t currentVal = *sub->valuePtr;
    851e:	68e9      	ldr	r1, [r5, #12]
    8520:	880e      	ldrh	r6, [r1, #0]
    switch (input.current){
    8522:	2a07      	cmp	r2, #7
    8524:	d86c      	bhi.n	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
    8526:	e8df f012 	tbh	[pc, r2, lsl #1]
    852a:	0117      	.short	0x0117
    852c:	006b0107 	.word	0x006b0107
    8530:	006b011e 	.word	0x006b011e
    8534:	006b006b 	.word	0x006b006b
    8538:	0065      	.short	0x0065
  byte cursorPos = cursors[page->cursor];
    853a:	f8df a254 	ldr.w	sl, [pc, #596]	; 8790 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2c8>
  if (input.changed) {
    853e:	7869      	ldrb	r1, [r5, #1]
    8540:	782a      	ldrb	r2, [r5, #0]
  byte cursorPos = cursors[page->cursor];
    8542:	f81a 6000 	ldrb.w	r6, [sl, r0]
  if (input.changed) {
    8546:	2900      	cmp	r1, #0
    8548:	d12f      	bne.n	85aa <updatePage(MenuPage const*, KeyState&, unsigned long)+0xe2>
  } else if ((timeNow - cursorBlinkTime) > cursorBlinkInterval) {
    854a:	4f92      	ldr	r7, [pc, #584]	; (8794 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2cc>)
    854c:	683b      	ldr	r3, [r7, #0]
    854e:	eba9 0303 	sub.w	r3, r9, r3
    8552:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8556:	f240 8097 	bls.w	8688 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x1c0>
    drawMenuCursor(cursorPos-offsets[page->cursor], cursorNow);
    855a:	4b8f      	ldr	r3, [pc, #572]	; (8798 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2d0>)
    855c:	5c1b      	ldrb	r3, [r3, r0]
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    855e:	488f      	ldr	r0, [pc, #572]	; (879c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2d4>)
    drawMenuCursor(cursorPos-offsets[page->cursor], cursorNow);
    8560:	1af6      	subs	r6, r6, r3
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    8562:	7801      	ldrb	r1, [r0, #0]
  byte ymid = 15 + 9 * itemNo;
    8564:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    8568:	3901      	subs	r1, #1
  byte ymid = 15 + 9 * itemNo;
    856a:	f106 020f 	add.w	r2, r6, #15
    if (cursorNow == WHITE) cursorNow = BLACK; else cursorNow = WHITE;
    856e:	bf18      	it	ne
    8570:	2101      	movne	r1, #1
  display.drawTriangle(57, ymid,61, ymid+2,61, ymid-2, color);
    8572:	b2d3      	uxtb	r3, r2
    8574:	7001      	strb	r1, [r0, #0]
    8576:	461a      	mov	r2, r3
    8578:	9103      	str	r1, [sp, #12]
    857a:	1e99      	subs	r1, r3, #2
    857c:	3302      	adds	r3, #2
    857e:	9300      	str	r3, [sp, #0]
    8580:	233d      	movs	r3, #61	; 0x3d
    8582:	9102      	str	r1, [sp, #8]
    8584:	487f      	ldr	r0, [pc, #508]	; (8784 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2bc>)
    8586:	9301      	str	r3, [sp, #4]
    8588:	2139      	movs	r1, #57	; 0x39
    858a:	f004 ff23 	bl	d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>
    cursorBlinkTime = timeNow;
    858e:	f8c7 9000 	str.w	r9, [r7]
    redraw = true;
    8592:	2701      	movs	r7, #1
    if((page->flags & EMenuPageRoot) && input.changed) {
    8594:	88a3      	ldrh	r3, [r4, #4]
    8596:	079b      	lsls	r3, r3, #30
    8598:	d503      	bpl.n	85a2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xda>
    859a:	786b      	ldrb	r3, [r5, #1]
    859c:	2b00      	cmp	r3, #0
    859e:	f040 8129 	bne.w	87f4 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x32c>
}
    85a2:	4638      	mov	r0, r7
    85a4:	b00b      	add	sp, #44	; 0x2c
    85a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (input.current) {
    85aa:	3a01      	subs	r2, #1
    int lastEntry = page->numEntries-1;
    85ac:	7a21      	ldrb	r1, [r4, #8]
    switch (input.current) {
    85ae:	2a07      	cmp	r2, #7
    85b0:	d87a      	bhi.n	86a8 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x1e0>
    85b2:	e8df f012 	tbh	[pc, r2, lsl #1]
    85b6:	0110      	.short	0x0110
    85b8:	007900f7 	.word	0x007900f7
    85bc:	00790118 	.word	0x00790118
    85c0:	00790079 	.word	0x00790079
    85c4:	00df      	.short	0x00df
  if ((timeNow - cursorBlinkTime) > cursorBlinkInterval) {
    85c6:	4a73      	ldr	r2, [pc, #460]	; (8794 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2cc>)
    85c8:	6813      	ldr	r3, [r2, #0]
    85ca:	eba9 0303 	sub.w	r3, r9, r3
    85ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    85d2:	f240 80af 	bls.w	8734 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x26c>
    if (cursorNow == WHITE) {
    85d6:	4d71      	ldr	r5, [pc, #452]	; (879c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2d4>)
    cursorBlinkTime = timeNow;
    85d8:	f8c2 9000 	str.w	r9, [r2]
    if (cursorNow == WHITE) {
    85dc:	782e      	ldrb	r6, [r5, #0]
    85de:	2e01      	cmp	r6, #1
    85e0:	f000 8178 	beq.w	88d4 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x40c>
      return drawSubMenu(page);
    85e4:	68e1      	ldr	r1, [r4, #12]
      cursorNow = WHITE;
    85e6:	2301      	movs	r3, #1
    85e8:	702b      	strb	r3, [r5, #0]
}
    85ea:	b00b      	add	sp, #44	; 0x2c
    85ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return drawSubMenu(page);
    85f0:	f7ff be08 	b.w	8204 <drawSubMenu(MenuPage const*) [clone .isra.0]>
        activeSub[page->cursor] = 0;
    85f4:	2200      	movs	r2, #0
    85f6:	541a      	strb	r2, [r3, r0]
        sub->applyFunc(*sub);
    85f8:	69eb      	ldr	r3, [r5, #28]
    85fa:	4628      	mov	r0, r5
    85fc:	4798      	blx	r3
    *sub->valuePtr = currentVal;
    85fe:	68e9      	ldr	r1, [r5, #12]
    8600:	800e      	strh	r6, [r1, #0]
  display.fillRect(65, 24, 60, 37, BLACK);
    8602:	2500      	movs	r5, #0
    8604:	2225      	movs	r2, #37	; 0x25
    8606:	e9cd 2500 	strd	r2, r5, [sp]
    860a:	233c      	movs	r3, #60	; 0x3c
    860c:	2218      	movs	r2, #24
    860e:	485d      	ldr	r0, [pc, #372]	; (8784 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2bc>)
    8610:	2141      	movs	r1, #65	; 0x41
    8612:	f004 fd99 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    redraw |= drawSubMenu(page);
    8616:	68e1      	ldr	r1, [r4, #12]
    8618:	79a0      	ldrb	r0, [r4, #6]
    861a:	f7ff fdf3 	bl	8204 <drawSubMenu(MenuPage const*) [clone .isra.0]>
    cursorNow = BLACK;
    861e:	4a5f      	ldr	r2, [pc, #380]	; (879c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2d4>)
    cursorBlinkTime = timeNow;
    8620:	4b5c      	ldr	r3, [pc, #368]	; (8794 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2cc>)
    cursorNow = BLACK;
    8622:	7015      	strb	r5, [r2, #0]
    redraw |= drawSubMenu(page);
    8624:	4607      	mov	r7, r0
}
    8626:	4638      	mov	r0, r7
    cursorBlinkTime = timeNow;
    8628:	f8c3 9000 	str.w	r9, [r3]
}
    862c:	b00b      	add	sp, #44	; 0x2c
    862e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  display.clearDisplay();
    8632:	4658      	mov	r0, fp
    8634:	f004 fb7c 	bl	cd30 <Adafruit_SSD1306::clearDisplay()>
  display.setTextSize(1);
    8638:	2101      	movs	r1, #1
    863a:	4658      	mov	r0, fp
    863c:	f005 f9e8 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    cursor_x = x;
    8640:	f8cb 6010 	str.w	r6, [fp, #16]
  if(page->flags & EMenuCustomTitle) {
    8644:	88a3      	ldrh	r3, [r4, #4]
    8646:	075e      	lsls	r6, r3, #29
    8648:	d520      	bpl.n	868c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x1c4>
    func(buffer);
    864a:	6823      	ldr	r3, [r4, #0]
    864c:	a804      	add	r0, sp, #16
    864e:	4798      	blx	r3
							  return write((const uint8_t *)str, strlen(str)); }
    8650:	a804      	add	r0, sp, #16
    8652:	f00a f8b5 	bl	127c0 <strlen>
    8656:	a904      	add	r1, sp, #16
    8658:	4602      	mov	r2, r0
    865a:	4658      	mov	r0, fp
    865c:	f005 fca2 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8660:	4658      	mov	r0, fp
    8662:	f005 fd01 	bl	e068 <Print::println()>
  display.drawLine(0, MENU_ROW_HEIGHT, 127, MENU_ROW_HEIGHT, WHITE);
    8666:	2209      	movs	r2, #9
    8668:	2301      	movs	r3, #1
    866a:	e9cd 2300 	strd	r2, r3, [sp]
    866e:	4845      	ldr	r0, [pc, #276]	; (8784 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2bc>)
    8670:	237f      	movs	r3, #127	; 0x7f
    8672:	2100      	movs	r1, #0
    8674:	f004 fd16 	bl	d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>
  plotMenuEntries(page);
    8678:	2100      	movs	r1, #0
    867a:	4620      	mov	r0, r4
    867c:	f7ff fbc2 	bl	7e04 <plotMenuEntries(MenuPage const*, bool)>
    stateFirstRun = 0;
    8680:	2300      	movs	r3, #0
    8682:	f888 3000 	strb.w	r3, [r8]
    8686:	e73d      	b.n	8504 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x3c>
  bool redraw = false;
    8688:	460f      	mov	r7, r1
    868a:	e783      	b.n	8594 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xcc>
    display.println(page->title);
    868c:	6826      	ldr	r6, [r4, #0]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    868e:	b13e      	cbz	r6, 86a0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x1d8>
							  return write((const uint8_t *)str, strlen(str)); }
    8690:	4630      	mov	r0, r6
    8692:	f00a f895 	bl	127c0 <strlen>
    8696:	4631      	mov	r1, r6
    8698:	4602      	mov	r2, r0
    869a:	4658      	mov	r0, fp
    869c:	f005 fc82 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    86a0:	4838      	ldr	r0, [pc, #224]	; (8784 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2bc>)
    86a2:	f005 fce1 	bl	e068 <Print::println()>
    86a6:	e7de      	b.n	8666 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x19e>
  byte cursorPos = cursors[page->cursor];
    86a8:	46b3      	mov	fp, r6
    if(newPos != cursorPos) {
    86aa:	455e      	cmp	r6, fp
    86ac:	f000 8091 	beq.w	87d2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x30a>
      int offset = offsets[page->cursor];
    86b0:	4b39      	ldr	r3, [pc, #228]	; (8798 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2d0>)
    86b2:	f813 9000 	ldrb.w	r9, [r3, r0]
  display.drawTriangle(57, ymid,61, ymid+2,61, ymid-2, color);
    86b6:	4833      	ldr	r0, [pc, #204]	; (8784 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2bc>)
      drawMenuCursor(cursorPos-offset, BLACK); // Clear old cursor
    86b8:	eba6 0609 	sub.w	r6, r6, r9
  byte ymid = 15 + 9 * itemNo;
    86bc:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
    86c0:	f106 020f 	add.w	r2, r6, #15
  display.drawTriangle(57, ymid,61, ymid+2,61, ymid-2, color);
    86c4:	b2d3      	uxtb	r3, r2
    86c6:	1e99      	subs	r1, r3, #2
    86c8:	461a      	mov	r2, r3
    86ca:	3302      	adds	r3, #2
    86cc:	9102      	str	r1, [sp, #8]
    86ce:	9300      	str	r3, [sp, #0]
    86d0:	2100      	movs	r1, #0
    86d2:	233d      	movs	r3, #61	; 0x3d
    86d4:	9301      	str	r3, [sp, #4]
    86d6:	9103      	str	r1, [sp, #12]
    86d8:	2139      	movs	r1, #57	; 0x39
    86da:	f004 fe7b 	bl	d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>
      if(page->numEntries >= MENU_NUM_ROWS) {
    86de:	7a23      	ldrb	r3, [r4, #8]
    86e0:	2b05      	cmp	r3, #5
    86e2:	f200 80b0 	bhi.w	8846 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x37e>
      drawMenuCursor(newPos-offset, WHITE);
    86e6:	ebab 0909 	sub.w	r9, fp, r9
    86ea:	fa5f f989 	uxtb.w	r9, r9
  byte ymid = 15 + 9 * itemNo;
    86ee:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
    86f2:	f109 020f 	add.w	r2, r9, #15
  display.drawTriangle(57, ymid,61, ymid+2,61, ymid-2, color);
    86f6:	b2d3      	uxtb	r3, r2
    86f8:	461a      	mov	r2, r3
    86fa:	1e99      	subs	r1, r3, #2
    86fc:	3302      	adds	r3, #2
    86fe:	9300      	str	r3, [sp, #0]
    8700:	2701      	movs	r7, #1
    8702:	233d      	movs	r3, #61	; 0x3d
    8704:	481f      	ldr	r0, [pc, #124]	; (8784 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2bc>)
    8706:	9102      	str	r1, [sp, #8]
    8708:	9301      	str	r3, [sp, #4]
    870a:	2139      	movs	r1, #57	; 0x39
    870c:	9703      	str	r7, [sp, #12]
    870e:	f004 fe61 	bl	d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>
      cursorNow = BLACK;
    8712:	4a22      	ldr	r2, [pc, #136]	; (879c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2d4>)
  display.fillRect(63,11,64,52,BLACK);
    8714:	481b      	ldr	r0, [pc, #108]	; (8784 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2bc>)
      cursorNow = BLACK;
    8716:	2300      	movs	r3, #0
  display.fillRect(63,11,64,52,BLACK);
    8718:	9301      	str	r3, [sp, #4]
      cursorNow = BLACK;
    871a:	7013      	strb	r3, [r2, #0]
  display.fillRect(63,11,64,52,BLACK);
    871c:	2334      	movs	r3, #52	; 0x34
    871e:	9300      	str	r3, [sp, #0]
    8720:	220b      	movs	r2, #11
    8722:	2340      	movs	r3, #64	; 0x40
    8724:	213f      	movs	r1, #63	; 0x3f
    8726:	f004 fd0f 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    cursors[page->cursor] = newPos;
    872a:	79a0      	ldrb	r0, [r4, #6]
}
    872c:	465e      	mov	r6, fp
    cursors[page->cursor] = newPos;
    872e:	f80a 6000 	strb.w	r6, [sl, r0]
    8732:	e72f      	b.n	8594 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xcc>
  return false;
    8734:	460f      	mov	r7, r1
    8736:	e734      	b.n	85a2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xda>
        if(sub->flags & EMenuEntryEnterHandler) {
    8738:	8aaa      	ldrh	r2, [r5, #20]
    873a:	f012 0204 	ands.w	r2, r2, #4
    873e:	f43f af5a 	beq.w	85f6 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x12e>
          bool result = sub->onEnterFunc();
    8742:	6a2a      	ldr	r2, [r5, #32]
    8744:	4790      	blx	r2
          if(result) {
    8746:	4b11      	ldr	r3, [pc, #68]	; (878c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2c4>)
    *sub->valuePtr = currentVal;
    8748:	68e9      	ldr	r1, [r5, #12]
          if(result) {
    874a:	2800      	cmp	r0, #0
    874c:	f43f af58 	beq.w	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
            activeSub[page->cursor] = 0;
    8750:	79a2      	ldrb	r2, [r4, #6]
    8752:	2000      	movs	r0, #0
    8754:	5498      	strb	r0, [r3, r2]
    8756:	e753      	b.n	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
        if(currentVal > sub->min) {
    8758:	8a2b      	ldrh	r3, [r5, #16]
    875a:	42b3      	cmp	r3, r6
    875c:	f080 80b4 	bcs.w	88c8 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x400>
          currentVal -= 1;
    8760:	3e01      	subs	r6, #1
    8762:	b2b6      	uxth	r6, r6
    8764:	e74c      	b.n	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
        if(currentVal < sub->max) {
    8766:	8a6b      	ldrh	r3, [r5, #18]
    8768:	42b3      	cmp	r3, r6
    876a:	f240 80a7 	bls.w	88bc <updatePage(MenuPage const*, KeyState&, unsigned long)+0x3f4>
          currentVal += 1;
    876e:	3601      	adds	r6, #1
    8770:	b2b6      	uxth	r6, r6
    8772:	e745      	b.n	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
        menuState= page->parentPage;
    8774:	4b0a      	ldr	r3, [pc, #40]	; (87a0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x2d8>)
    8776:	79e2      	ldrb	r2, [r4, #7]
    8778:	701a      	strb	r2, [r3, #0]
        stateFirstRun = 1;
    877a:	2301      	movs	r3, #1
    877c:	f888 3000 	strb.w	r3, [r8]
  bool redraw = false;
    8780:	2700      	movs	r7, #0
        break;
    8782:	e7d4      	b.n	872e <updatePage(MenuPage const*, KeyState&, unsigned long)+0x266>
    8784:	1fff9c74 	.word	0x1fff9c74
    8788:	1fff8e9c 	.word	0x1fff8e9c
    878c:	1fff9c50 	.word	0x1fff9c50
    8790:	1fff9c34 	.word	0x1fff9c34
    8794:	1fff9c6c 	.word	0x1fff9c6c
    8798:	1fff9c40 	.word	0x1fff9c40
    879c:	1fff9c70 	.word	0x1fff9c70
    87a0:	1fff9c59 	.word	0x1fff9c59
  const MenuEntry* menuEntry = page->entries[cursorPosition];
    87a4:	68e2      	ldr	r2, [r4, #12]
    87a6:	b231      	sxth	r1, r6
    87a8:	f852 9021 	ldr.w	r9, [r2, r1, lsl #2]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    87ac:	4a76      	ldr	r2, [pc, #472]	; (8988 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4c0>)
  switch(menuEntry->type) {
    87ae:	f899 7000 	ldrb.w	r7, [r9]
    87b2:	6812      	ldr	r2, [r2, #0]
    87b4:	9204      	str	r2, [sp, #16]
  cursorBlinkTime = millis();
    87b6:	4a75      	ldr	r2, [pc, #468]	; (898c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4c4>)
	return ret;
    87b8:	9904      	ldr	r1, [sp, #16]
    87ba:	6011      	str	r1, [r2, #0]
  switch(menuEntry->type) {
    87bc:	2f00      	cmp	r7, #0
    87be:	f000 8095 	beq.w	88ec <updatePage(MenuPage const*, KeyState&, unsigned long)+0x424>
    87c2:	2f01      	cmp	r7, #1
    87c4:	d105      	bne.n	87d2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x30a>
      menuState= ((const MenuEntryStateCh*)menuEntry)->state;
    87c6:	4b72      	ldr	r3, [pc, #456]	; (8990 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4c8>)
    87c8:	f899 2008 	ldrb.w	r2, [r9, #8]
      stateFirstRun = 1;
    87cc:	f888 7000 	strb.w	r7, [r8]
      menuState= ((const MenuEntryStateCh*)menuEntry)->state;
    87d0:	701a      	strb	r2, [r3, #0]
      break;
    87d2:	2700      	movs	r7, #0
    87d4:	e7ab      	b.n	872e <updatePage(MenuPage const*, KeyState&, unsigned long)+0x266>
    int lastEntry = page->numEntries-1;
    87d6:	3901      	subs	r1, #1
        if (cursorPos < lastEntry)
    87d8:	42b1      	cmp	r1, r6
    87da:	ddfa      	ble.n	87d2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x30a>
          newPos = cursorPos+1;
    87dc:	f106 0b01 	add.w	fp, r6, #1
    87e0:	fa5f fb8b 	uxtb.w	fp, fp
    87e4:	e761      	b.n	86aa <updatePage(MenuPage const*, KeyState&, unsigned long)+0x1e2>
        if (cursorPos > 0)
    87e6:	2e00      	cmp	r6, #0
    87e8:	d0f3      	beq.n	87d2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x30a>
          newPos = cursorPos-1;
    87ea:	f106 3bff 	add.w	fp, r6, #4294967295
    87ee:	fa5f fb8b 	uxtb.w	fp, fp
    87f2:	e75a      	b.n	86aa <updatePage(MenuPage const*, KeyState&, unsigned long)+0x1e2>
  readSwitches();
    87f4:	f7fa fa5e 	bl	2cb4 <readSwitches()>
  return LH1+2*LH2+4*LH3;
    87f8:	4966      	ldr	r1, [pc, #408]	; (8994 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4cc>)
    87fa:	4a67      	ldr	r2, [pc, #412]	; (8998 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4d0>)
    87fc:	4b67      	ldr	r3, [pc, #412]	; (899c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4d4>)
    87fe:	7808      	ldrb	r0, [r1, #0]
    8800:	781b      	ldrb	r3, [r3, #0]
    8802:	7811      	ldrb	r1, [r2, #0]
        switch (input.current) {
    8804:	782a      	ldrb	r2, [r5, #0]
  return LH1+2*LH2+4*LH3;
    8806:	2402      	movs	r4, #2
    8808:	fb14 0303 	smlabb	r3, r4, r3, r0
        switch (input.current) {
    880c:	2a0a      	cmp	r2, #10
  return LH1+2*LH2+4*LH3;
    880e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
        switch (input.current) {
    8812:	d03e      	beq.n	8892 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x3ca>
    8814:	2a0c      	cmp	r2, #12
    8816:	f47f aec4 	bne.w	85a2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xda>
            if (trills) {
    881a:	2b00      	cmp	r3, #0
    881c:	f43f aec1 	beq.w	85a2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xda>
              menuState = PATCH_VIEW;
    8820:	4a5b      	ldr	r2, [pc, #364]	; (8990 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4c8>)
  fastPatch[trills-1] = 0;
    8822:	1e58      	subs	r0, r3, #1
              menuState = PATCH_VIEW;
    8824:	7014      	strb	r4, [r2, #0]
  fastPatch[trills-1] = 0;
    8826:	4a5e      	ldr	r2, [pc, #376]	; (89a0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4d8>)
    8828:	2100      	movs	r1, #0
    882a:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
  writeSetting(FP1_ADDR+2*(trills-1),0);
    882e:	3319      	adds	r3, #25
              stateFirstRun = 1;
    8830:	2201      	movs	r2, #1
  writeSetting(FP1_ADDR+2*(trills-1),0);
    8832:	fa03 f002 	lsl.w	r0, r3, r2
              stateFirstRun = 1;
    8836:	f888 2000 	strb.w	r2, [r8]
  writeSetting(FP1_ADDR+2*(trills-1),0);
    883a:	f000 fd4d 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  FPD = 3;
    883e:	4b59      	ldr	r3, [pc, #356]	; (89a4 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4dc>)
    8840:	2203      	movs	r2, #3
    8842:	701a      	strb	r2, [r3, #0]
}
    8844:	e6ad      	b.n	85a2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xda>
        if((newPos - offset) > (MENU_NUM_ROWS-2) ) {
    8846:	ebab 0209 	sub.w	r2, fp, r9
    884a:	2a04      	cmp	r2, #4
    884c:	dd1c      	ble.n	8888 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x3c0>
          offset = newPos - (MENU_NUM_ROWS-2);
    884e:	f1ab 0904 	sub.w	r9, fp, #4
        offset = constrain(offset, 0, page->numEntries - MENU_NUM_ROWS);
    8852:	f1b9 3fff 	cmp.w	r9, #4294967295
    8856:	d10d      	bne.n	8874 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x3ac>
    8858:	46d9      	mov	r9, fp
    885a:	2300      	movs	r3, #0
        if( offset != offsets[page->cursor]) {
    885c:	79a2      	ldrb	r2, [r4, #6]
    885e:	4852      	ldr	r0, [pc, #328]	; (89a8 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e0>)
    8860:	5c81      	ldrb	r1, [r0, r2]
    8862:	4299      	cmp	r1, r3
    8864:	f43f af43 	beq.w	86ee <updatePage(MenuPage const*, KeyState&, unsigned long)+0x226>
          offsets[page->cursor] = offset;
    8868:	5487      	strb	r7, [r0, r2]
          plotMenuEntries(page, true);
    886a:	2101      	movs	r1, #1
    886c:	4620      	mov	r0, r4
    886e:	f7ff fac9 	bl	7e04 <plotMenuEntries(MenuPage const*, bool)>
    8872:	e73c      	b.n	86ee <updatePage(MenuPage const*, KeyState&, unsigned long)+0x226>
        offset = constrain(offset, 0, page->numEntries - MENU_NUM_ROWS);
    8874:	3b06      	subs	r3, #6
    8876:	454b      	cmp	r3, r9
    8878:	bfa8      	it	ge
    887a:	464b      	movge	r3, r9
          offsets[page->cursor] = offset;
    887c:	b2df      	uxtb	r7, r3
      drawMenuCursor(newPos-offset, WHITE);
    887e:	ebab 0907 	sub.w	r9, fp, r7
    8882:	fa5f f989 	uxtb.w	r9, r9
    8886:	e7e9      	b.n	885c <updatePage(MenuPage const*, KeyState&, unsigned long)+0x394>
        } else if( (newPos - offset) < 1) {
    8888:	2a00      	cmp	r2, #0
    888a:	dcf3      	bgt.n	8874 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x3ac>
          offset = newPos - 1;
    888c:	f10b 39ff 	add.w	r9, fp, #4294967295
    8890:	e7df      	b.n	8852 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x38a>
            if (trills) {
    8892:	2b00      	cmp	r3, #0
    8894:	f43f ae85 	beq.w	85a2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xda>
              menuState = PATCH_VIEW;
    8898:	4a3d      	ldr	r2, [pc, #244]	; (8990 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4c8>)
              setFPS(trills, patch);
    889a:	4944      	ldr	r1, [pc, #272]	; (89ac <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e4>)
              menuState = PATCH_VIEW;
    889c:	7014      	strb	r4, [r2, #0]
              stateFirstRun = 1;
    889e:	2201      	movs	r2, #1
  fastPatch[trills-1] = patchNum;
    88a0:	1e58      	subs	r0, r3, #1
              stateFirstRun = 1;
    88a2:	f888 2000 	strb.w	r2, [r8]
  fastPatch[trills-1] = patchNum;
    88a6:	4a3e      	ldr	r2, [pc, #248]	; (89a0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4d8>)
              setFPS(trills, patch);
    88a8:	8809      	ldrh	r1, [r1, #0]
  fastPatch[trills-1] = patchNum;
    88aa:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
  writeSetting(FP1_ADDR+2*(trills-1), patchNum);
    88ae:	3319      	adds	r3, #25
    88b0:	0058      	lsls	r0, r3, #1
    88b2:	f000 fd11 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  FPD = 2;
    88b6:	4b3b      	ldr	r3, [pc, #236]	; (89a4 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4dc>)
    88b8:	701c      	strb	r4, [r3, #0]
}
    88ba:	e672      	b.n	85a2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xda>
        } else if(sub->flags & MenuEntryFlags::EMenuEntryWrap) {
    88bc:	8aab      	ldrh	r3, [r5, #20]
    88be:	07da      	lsls	r2, r3, #31
    88c0:	f57f ae9e 	bpl.w	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
          currentVal = sub->min;
    88c4:	8a2e      	ldrh	r6, [r5, #16]
    88c6:	e69b      	b.n	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
        } else if(sub->flags & MenuEntryFlags::EMenuEntryWrap) {
    88c8:	8aab      	ldrh	r3, [r5, #20]
    88ca:	07d8      	lsls	r0, r3, #31
    88cc:	f57f ae98 	bpl.w	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
          currentVal = sub->max;
    88d0:	8a6e      	ldrh	r6, [r5, #18]
    88d2:	e695      	b.n	8600 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x138>
  display.fillRect(65, 24, 60, 37, BLACK);
    88d4:	2325      	movs	r3, #37	; 0x25
    88d6:	9101      	str	r1, [sp, #4]
    88d8:	9300      	str	r3, [sp, #0]
    88da:	4835      	ldr	r0, [pc, #212]	; (89b0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e8>)
      cursorNow = BLACK;
    88dc:	7029      	strb	r1, [r5, #0]
  display.fillRect(65, 24, 60, 37, BLACK);
    88de:	233c      	movs	r3, #60	; 0x3c
    88e0:	2218      	movs	r2, #24
    88e2:	2141      	movs	r1, #65	; 0x41
      return true;
    88e4:	4637      	mov	r7, r6
  display.fillRect(65, 24, 60, 37, BLACK);
    88e6:	f004 fc2f 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
}
    88ea:	e65a      	b.n	85a2 <updatePage(MenuPage const*, KeyState&, unsigned long)+0xda>
      activeSub[page->cursor] = cursorPosition+1;
    88ec:	1c72      	adds	r2, r6, #1
    88ee:	541a      	strb	r2, [r3, r0]
      drawMenuCursor(cursorPosition-offsets[page->cursor], WHITE);
    88f0:	4a2d      	ldr	r2, [pc, #180]	; (89a8 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e0>)
    88f2:	79a3      	ldrb	r3, [r4, #6]
  display.drawTriangle(57, ymid,61, ymid+2,61, ymid-2, color);
    88f4:	482e      	ldr	r0, [pc, #184]	; (89b0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e8>)
      drawMenuCursor(cursorPosition-offsets[page->cursor], WHITE);
    88f6:	5cd2      	ldrb	r2, [r2, r3]
    88f8:	1ab2      	subs	r2, r6, r2
  byte ymid = 15 + 9 * itemNo;
    88fa:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    88fe:	320f      	adds	r2, #15
  display.drawTriangle(57, ymid,61, ymid+2,61, ymid-2, color);
    8900:	b2d3      	uxtb	r3, r2
    8902:	2101      	movs	r1, #1
    8904:	461a      	mov	r2, r3
    8906:	9103      	str	r1, [sp, #12]
    8908:	1e99      	subs	r1, r3, #2
    890a:	3302      	adds	r3, #2
    890c:	9300      	str	r3, [sp, #0]
    890e:	233d      	movs	r3, #61	; 0x3d
    8910:	9102      	str	r1, [sp, #8]
    8912:	9301      	str	r3, [sp, #4]
    8914:	2139      	movs	r1, #57	; 0x39
    8916:	f004 fd5d 	bl	d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>
      drawSubBox( ((const MenuEntrySub*)menuEntry)->subTitle);
    891a:	f8d9 9008 	ldr.w	r9, [r9, #8]
  display.fillRect(63,11,64,52,BLACK);
    891e:	9701      	str	r7, [sp, #4]
    8920:	2734      	movs	r7, #52	; 0x34
    8922:	4823      	ldr	r0, [pc, #140]	; (89b0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e8>)
    8924:	9700      	str	r7, [sp, #0]
    8926:	2340      	movs	r3, #64	; 0x40
    8928:	220b      	movs	r2, #11
    892a:	213f      	movs	r1, #63	; 0x3f
    892c:	f004 fc0c 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  display.drawRect(63,11,64,52,WHITE);
    8930:	2101      	movs	r1, #1
    8932:	220b      	movs	r2, #11
    8934:	2340      	movs	r3, #64	; 0x40
    8936:	481e      	ldr	r0, [pc, #120]	; (89b0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e8>)
    8938:	9700      	str	r7, [sp, #0]
    893a:	9101      	str	r1, [sp, #4]
    893c:	213f      	movs	r1, #63	; 0x3f
    893e:	f004 fc4d 	bl	d1dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>
  display.setTextSize(1);
    8942:	2101      	movs	r1, #1
    8944:	481a      	ldr	r0, [pc, #104]	; (89b0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e8>)
      return true;
    8946:	460f      	mov	r7, r1
  display.setTextSize(1);
    8948:	f005 f862 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
  int len = strlen(label);
    894c:	4648      	mov	r0, r9
    894e:	f009 ff37 	bl	127c0 <strlen>
  display.setCursor(95-len*3,15);
    8952:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    8956:	f100 035f 	add.w	r3, r0, #95	; 0x5f
    895a:	f8ab 3010 	strh.w	r3, [fp, #16]
    cursor_y = y;
    895e:	230f      	movs	r3, #15
    8960:	f8ab 3012 	strh.w	r3, [fp, #18]
							  return write((const uint8_t *)str, strlen(str)); }
    8964:	4648      	mov	r0, r9
    8966:	f009 ff2b 	bl	127c0 <strlen>
    896a:	4649      	mov	r1, r9
    896c:	4602      	mov	r2, r0
    896e:	4810      	ldr	r0, [pc, #64]	; (89b0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e8>)
    8970:	f005 fb18 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8974:	480e      	ldr	r0, [pc, #56]	; (89b0 <updatePage(MenuPage const*, KeyState&, unsigned long)+0x4e8>)
    8976:	f005 fb77 	bl	e068 <Print::println()>
      drawSubMenu(page);
    897a:	68e1      	ldr	r1, [r4, #12]
    897c:	79a0      	ldrb	r0, [r4, #6]
    897e:	f7ff fc41 	bl	8204 <drawSubMenu(MenuPage const*) [clone .isra.0]>
    cursors[page->cursor] = newPos;
    8982:	79a0      	ldrb	r0, [r4, #6]
      return true;
    8984:	e6d3      	b.n	872e <updatePage(MenuPage const*, KeyState&, unsigned long)+0x266>
    8986:	bf00      	nop
    8988:	1fff9d70 	.word	0x1fff9d70
    898c:	1fff9c6c 	.word	0x1fff9c6c
    8990:	1fff9c59 	.word	0x1fff9c59
    8994:	1fff990f 	.word	0x1fff990f
    8998:	1fff9911 	.word	0x1fff9911
    899c:	1fff9910 	.word	0x1fff9910
    89a0:	1fff9aa0 	.word	0x1fff9aa0
    89a4:	1fff9c33 	.word	0x1fff9c33
    89a8:	1fff9c40 	.word	0x1fff9c40
    89ac:	1fff9b62 	.word	0x1fff9b62
    89b0:	1fff9c74 	.word	0x1fff9c74

000089b4 <menu()>:
void menu() {
    89b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool redraw = stateFirstRun;
    89b8:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8b0c <menu()+0x158>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89bc:	4b54      	ldr	r3, [pc, #336]	; (8b10 <menu()+0x15c>)
    89be:	f899 5000 	ldrb.w	r5, [r9]
    89c2:	681b      	ldr	r3, [r3, #0]
  KeyState keys = { deumButtonState, 0 };
    89c4:	4f53      	ldr	r7, [pc, #332]	; (8b14 <menu()+0x160>)
void menu() {
    89c6:	b083      	sub	sp, #12
  bool redraw = stateFirstRun;
    89c8:	3d00      	subs	r5, #0
    89ca:	9301      	str	r3, [sp, #4]
  uint8_t deumButtons = 0x0f ^(digitalRead(dPin) | (digitalRead(ePin) << 1) | (digitalRead(uPin) << 2) | (digitalRead(mPin)<<3));
    89cc:	f04f 0003 	mov.w	r0, #3
  bool redraw = stateFirstRun;
    89d0:	bf18      	it	ne
    89d2:	2501      	movne	r5, #1
	return ret;
    89d4:	9e01      	ldr	r6, [sp, #4]
  KeyState keys = { deumButtonState, 0 };
    89d6:	f897 8000 	ldrb.w	r8, [r7]
  uint8_t deumButtons = 0x0f ^(digitalRead(dPin) | (digitalRead(ePin) << 1) | (digitalRead(uPin) << 2) | (digitalRead(mPin)<<3));
    89da:	f006 f9ad 	bl	ed38 <digitalRead>
    89de:	4682      	mov	sl, r0
    89e0:	2004      	movs	r0, #4
    89e2:	f006 f9a9 	bl	ed38 <digitalRead>
    89e6:	4683      	mov	fp, r0
    89e8:	2005      	movs	r0, #5
    89ea:	f006 f9a5 	bl	ed38 <digitalRead>
    89ee:	0084      	lsls	r4, r0, #2
    89f0:	2006      	movs	r0, #6
    89f2:	f006 f9a1 	bl	ed38 <digitalRead>
    89f6:	ea44 044b 	orr.w	r4, r4, fp, lsl #1
    89fa:	ea44 040a 	orr.w	r4, r4, sl
    89fe:	b264      	sxtb	r4, r4
  if (deumButtons != lastDeumButtons) {
    8a00:	4945      	ldr	r1, [pc, #276]	; (8b18 <menu()+0x164>)
  uint8_t deumButtons = 0x0f ^(digitalRead(dPin) | (digitalRead(ePin) << 1) | (digitalRead(uPin) << 2) | (digitalRead(mPin)<<3));
    8a02:	ea44 00c0 	orr.w	r0, r4, r0, lsl #3
    8a06:	b240      	sxtb	r0, r0
  if (deumButtons != lastDeumButtons) {
    8a08:	780a      	ldrb	r2, [r1, #0]
  uint8_t deumButtons = 0x0f ^(digitalRead(dPin) | (digitalRead(ePin) << 1) | (digitalRead(uPin) << 2) | (digitalRead(mPin)<<3));
    8a0a:	f080 030f 	eor.w	r3, r0, #15
    8a0e:	b2db      	uxtb	r3, r3
  if (deumButtons != lastDeumButtons) {
    8a10:	429a      	cmp	r2, r3
    lastDebounceTime = timeNow;
    8a12:	4a42      	ldr	r2, [pc, #264]	; (8b1c <menu()+0x168>)
  if (deumButtons != lastDeumButtons) {
    8a14:	d015      	beq.n	8a42 <menu()+0x8e>
    lastDebounceTime = timeNow;
    8a16:	6016      	str	r6, [r2, #0]
  KeyState keys = { deumButtonState, 0 };
    8a18:	2200      	movs	r2, #0
  lastDeumButtons = deumButtons;
    8a1a:	700b      	strb	r3, [r1, #0]
  if (menuState&& ((timeNow - menuTime) > menuTimeUp)) {
    8a1c:	4940      	ldr	r1, [pc, #256]	; (8b20 <menu()+0x16c>)
  KeyState input = readInput(timeNow);
    8a1e:	f88d 8000 	strb.w	r8, [sp]
  if (menuState&& ((timeNow - menuTime) > menuTimeUp)) {
    8a22:	780b      	ldrb	r3, [r1, #0]
  KeyState input = readInput(timeNow);
    8a24:	f88d 2001 	strb.w	r2, [sp, #1]
  if (menuState&& ((timeNow - menuTime) > menuTimeUp)) {
    8a28:	bb63      	cbnz	r3, 8a84 <menu()+0xd0>
    redraw |= updatePage((const MenuPage*)&idleMenuPage, input, timeNow);
    8a2a:	483e      	ldr	r0, [pc, #248]	; (8b24 <menu()+0x170>)
    redraw |= updatePage((const MenuPage*)&rotSubCMenuPage, input, timeNow);
    8a2c:	4632      	mov	r2, r6
    8a2e:	4669      	mov	r1, sp
    8a30:	f7ff fd4a 	bl	84c8 <updatePage(MenuPage const*, KeyState&, unsigned long)>
    8a34:	4328      	orrs	r0, r5
    8a36:	b2c5      	uxtb	r5, r0
  if(redraw) {
    8a38:	2d00      	cmp	r5, #0
    8a3a:	d135      	bne.n	8aa8 <menu()+0xf4>
}
    8a3c:	b003      	add	sp, #12
    8a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((timeNow - lastDebounceTime) > debounceDelay) {
    8a42:	6812      	ldr	r2, [r2, #0]
    8a44:	1ab2      	subs	r2, r6, r2
    8a46:	2a1e      	cmp	r2, #30
    8a48:	d95d      	bls.n	8b06 <menu()+0x152>
    if (deumButtons != deumButtonState) {
    8a4a:	783a      	ldrb	r2, [r7, #0]
    8a4c:	4293      	cmp	r3, r2
    8a4e:	d049      	beq.n	8ae4 <menu()+0x130>
      menuTime = timeNow;
    8a50:	4c35      	ldr	r4, [pc, #212]	; (8b28 <menu()+0x174>)
      deumButtonState = deumButtons;
    8a52:	703b      	strb	r3, [r7, #0]
      menuTime = timeNow;
    8a54:	6026      	str	r6, [r4, #0]
      buttonPressedTime = timeNow;
    8a56:	4c35      	ldr	r4, [pc, #212]	; (8b2c <menu()+0x178>)
    if (((deumButtons == BTN_DOWN) || (deumButtons == BTN_UP)) && (timeNow - buttonPressedTime > buttonRepeatDelay) && (timeNow - buttonRepeatTime > buttonRepeatInterval)){
    8a58:	280e      	cmp	r0, #14
      keys.changed = deumButtonState ^ deumButtons;
    8a5a:	ea82 0203 	eor.w	r2, r2, r3
      buttonPressedTime = timeNow;
    8a5e:	6026      	str	r6, [r4, #0]
    if (((deumButtons == BTN_DOWN) || (deumButtons == BTN_UP)) && (timeNow - buttonPressedTime > buttonRepeatDelay) && (timeNow - buttonRepeatTime > buttonRepeatInterval)){
    8a60:	4698      	mov	r8, r3
    8a62:	d0da      	beq.n	8a1a <menu()+0x66>
    8a64:	280b      	cmp	r0, #11
    8a66:	d1d8      	bne.n	8a1a <menu()+0x66>
    8a68:	4830      	ldr	r0, [pc, #192]	; (8b2c <menu()+0x178>)
    8a6a:	6800      	ldr	r0, [r0, #0]
    8a6c:	1a30      	subs	r0, r6, r0
    8a6e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
    8a72:	d9d2      	bls.n	8a1a <menu()+0x66>
    8a74:	4c2e      	ldr	r4, [pc, #184]	; (8b30 <menu()+0x17c>)
    8a76:	6820      	ldr	r0, [r4, #0]
    8a78:	1a30      	subs	r0, r6, r0
    8a7a:	2832      	cmp	r0, #50	; 0x32
    8a7c:	d9cd      	bls.n	8a1a <menu()+0x66>
      buttonRepeatTime = timeNow;
    8a7e:	6026      	str	r6, [r4, #0]
      keys.changed = deumButtons; // Key repeat
    8a80:	461a      	mov	r2, r3
    8a82:	e7ca      	b.n	8a1a <menu()+0x66>
  if (menuState&& ((timeNow - menuTime) > menuTimeUp)) {
    8a84:	4a28      	ldr	r2, [pc, #160]	; (8b28 <menu()+0x174>)
    8a86:	6812      	ldr	r2, [r2, #0]
    8a88:	f64e 2060 	movw	r0, #60000	; 0xea60
    8a8c:	1ab2      	subs	r2, r6, r2
    8a8e:	4282      	cmp	r2, r0
    8a90:	d82d      	bhi.n	8aee <menu()+0x13a>
  } else if (menuState== PATCH_VIEW) {
    8a92:	3b01      	subs	r3, #1
    8a94:	2b0b      	cmp	r3, #11
    8a96:	d8cf      	bhi.n	8a38 <menu()+0x84>
    8a98:	e8df f003 	tbb	[pc, r3]
    8a9c:	1c1e2022 	.word	0x1c1e2022
    8aa0:	1416181a 	.word	0x1416181a
    8aa4:	0c0e1012 	.word	0x0c0e1012
    display.display();
    8aa8:	4822      	ldr	r0, [pc, #136]	; (8b34 <menu()+0x180>)
    8aaa:	f004 f951 	bl	cd50 <Adafruit_SSD1306::display()>
}
    8aae:	b003      	add	sp, #12
    8ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    redraw |= updatePage((const MenuPage*)&rotSubCMenuPage, input, timeNow);
    8ab4:	4820      	ldr	r0, [pc, #128]	; (8b38 <menu()+0x184>)
    8ab6:	e7b9      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage((const MenuPage*)&rotSubBMenuPage, input, timeNow);
    8ab8:	4820      	ldr	r0, [pc, #128]	; (8b3c <menu()+0x188>)
    8aba:	e7b7      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage((const MenuPage*)&rotSubAMenuPage, input, timeNow);
    8abc:	4820      	ldr	r0, [pc, #128]	; (8b40 <menu()+0x18c>)
    8abe:	e7b5      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage((const MenuPage*)&extrasMenuPage, input, timeNow);
    8ac0:	4820      	ldr	r0, [pc, #128]	; (8b44 <menu()+0x190>)
    8ac2:	e7b3      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage((const MenuPage*)&aboutMenuPage, input, timeNow);
    8ac4:	4820      	ldr	r0, [pc, #128]	; (8b48 <menu()+0x194>)
    8ac6:	e7b1      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage(&vibratoMenuPage, input, timeNow);
    8ac8:	4820      	ldr	r0, [pc, #128]	; (8b4c <menu()+0x198>)
    8aca:	e7af      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage(&rotatorMenuPage, input, timeNow);
    8acc:	4820      	ldr	r0, [pc, #128]	; (8b50 <menu()+0x19c>)
    8ace:	e7ad      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage(&controlMenuPage, input, timeNow);
    8ad0:	4820      	ldr	r0, [pc, #128]	; (8b54 <menu()+0x1a0>)
    8ad2:	e7ab      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage(&breathMenuPage, input, timeNow);
    8ad4:	4820      	ldr	r0, [pc, #128]	; (8b58 <menu()+0x1a4>)
    8ad6:	e7a9      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage((const MenuPage*)&adjustMenuPage, input, timeNow);
    8ad8:	4820      	ldr	r0, [pc, #128]	; (8b5c <menu()+0x1a8>)
    8ada:	e7a7      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage((const MenuPage*)&patchMenuPage, input, timeNow);
    8adc:	4820      	ldr	r0, [pc, #128]	; (8b60 <menu()+0x1ac>)
    8ade:	e7a5      	b.n	8a2c <menu()+0x78>
    redraw |= updatePage(&mainMenuPage, input, timeNow);
    8ae0:	4820      	ldr	r0, [pc, #128]	; (8b64 <menu()+0x1b0>)
    8ae2:	e7a3      	b.n	8a2c <menu()+0x78>
    if (((deumButtons == BTN_DOWN) || (deumButtons == BTN_UP)) && (timeNow - buttonPressedTime > buttonRepeatDelay) && (timeNow - buttonRepeatTime > buttonRepeatInterval)){
    8ae4:	280e      	cmp	r0, #14
  KeyState keys = { deumButtonState, 0 };
    8ae6:	f04f 0200 	mov.w	r2, #0
    if (((deumButtons == BTN_DOWN) || (deumButtons == BTN_UP)) && (timeNow - buttonPressedTime > buttonRepeatDelay) && (timeNow - buttonRepeatTime > buttonRepeatInterval)){
    8aea:	d1bb      	bne.n	8a64 <menu()+0xb0>
    8aec:	e7bc      	b.n	8a68 <menu()+0xb4>
    menuState= DISPLAYOFF_IDL;
    8aee:	2300      	movs	r3, #0
    stateFirstRun = 1;
    8af0:	2201      	movs	r2, #1
    menuState= DISPLAYOFF_IDL;
    8af2:	700b      	strb	r3, [r1, #0]
    stateFirstRun = 1;
    8af4:	f889 2000 	strb.w	r2, [r9]
    subVibSquelch = 0;
    8af8:	491b      	ldr	r1, [pc, #108]	; (8b68 <menu()+0x1b4>)
    memset(activeSub, 0, sizeof(activeSub));
    8afa:	4a1c      	ldr	r2, [pc, #112]	; (8b6c <menu()+0x1b8>)
    subVibSquelch = 0;
    8afc:	700b      	strb	r3, [r1, #0]
    memset(activeSub, 0, sizeof(activeSub));
    8afe:	6013      	str	r3, [r2, #0]
    8b00:	6053      	str	r3, [r2, #4]
    8b02:	7213      	strb	r3, [r2, #8]
    8b04:	e791      	b.n	8a2a <menu()+0x76>
  KeyState keys = { deumButtonState, 0 };
    8b06:	2200      	movs	r2, #0
    8b08:	e787      	b.n	8a1a <menu()+0x66>
    8b0a:	bf00      	nop
    8b0c:	1fff8e9c 	.word	0x1fff8e9c
    8b10:	1fff9d70 	.word	0x1fff9d70
    8b14:	1fff9c5a 	.word	0x1fff9c5a
    8b18:	1fff9c5b 	.word	0x1fff9c5b
    8b1c:	1fff9c60 	.word	0x1fff9c60
    8b20:	1fff9c59 	.word	0x1fff9c59
    8b24:	00014558 	.word	0x00014558
    8b28:	1fff9c4c 	.word	0x1fff9c4c
    8b2c:	1fff9c64 	.word	0x1fff9c64
    8b30:	1fff9c5c 	.word	0x1fff9c5c
    8b34:	1fff9c74 	.word	0x1fff9c74
    8b38:	00014eac 	.word	0x00014eac
    8b3c:	00014e9c 	.word	0x00014e9c
    8b40:	00014e8c 	.word	0x00014e8c
    8b44:	000149d0 	.word	0x000149d0
    8b48:	000146f0 	.word	0x000146f0
    8b4c:	00014f14 	.word	0x00014f14
    8b50:	00014ebc 	.word	0x00014ebc
    8b54:	00014e7c 	.word	0x00014e7c
    8b58:	000149c0 	.word	0x000149c0
    8b5c:	000149b4 	.word	0x000149b4
    8b60:	000147b0 	.word	0x000147b0
    8b64:	000150c0 	.word	0x000150c0
    8b68:	1fff9cdc 	.word	0x1fff9cdc
    8b6c:	1fff9c50 	.word	0x1fff9c50

00008b70 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)>:
  [](KeyState& __unused input, uint32_t __unused timeNow) -> bool {
    8b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(stateFirstRun) {
    8b72:	4e69      	ldr	r6, [pc, #420]	; (8d18 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1a8>)
    8b74:	7830      	ldrb	r0, [r6, #0]
  [](KeyState& __unused input, uint32_t __unused timeNow) -> bool {
    8b76:	460c      	mov	r4, r1
    if(stateFirstRun) {
    8b78:	b940      	cbnz	r0, 8b8c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1c>
      if(timeNow >= timer) {
    8b7a:	4b68      	ldr	r3, [pc, #416]	; (8d1c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1ac>)
    8b7c:	681b      	ldr	r3, [r3, #0]
    8b7e:	4299      	cmp	r1, r3
    8b80:	d303      	bcc.n	8b8a <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1a>
        menuState = MAIN_MENU;
    8b82:	4a67      	ldr	r2, [pc, #412]	; (8d20 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b0>)
    8b84:	2301      	movs	r3, #1
    8b86:	7013      	strb	r3, [r2, #0]
        stateFirstRun = 1;
    8b88:	7033      	strb	r3, [r6, #0]
  }
    8b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      display.clearDisplay();
    8b8c:	4d65      	ldr	r5, [pc, #404]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8b8e:	4628      	mov	r0, r5
    8b90:	f004 f8ce 	bl	cd30 <Adafruit_SSD1306::clearDisplay()>
      timer = timeNow + 3500;
    8b94:	4b61      	ldr	r3, [pc, #388]	; (8d1c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1ac>)
    8b96:	f604 54ac 	addw	r4, r4, #3500	; 0xdac
    8b9a:	601c      	str	r4, [r3, #0]
    cursor_x = x;
    8b9c:	2331      	movs	r3, #49	; 0x31
    8b9e:	612b      	str	r3, [r5, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    8ba0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8ba4:	616b      	str	r3, [r5, #20]
      stateFirstRun = 0;
    8ba6:	2100      	movs	r1, #0
      display.setTextSize(0);
    8ba8:	4628      	mov	r0, r5
      stateFirstRun = 0;
    8baa:	7031      	strb	r1, [r6, #0]
      display.setTextSize(0);
    8bac:	f004 ff30 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    8bb0:	495d      	ldr	r1, [pc, #372]	; (8d28 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b8>)
    8bb2:	2205      	movs	r2, #5
    8bb4:	4628      	mov	r0, r5
    8bb6:	f005 f9f5 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8bba:	4628      	mov	r0, r5
    8bbc:	f005 fa54 	bl	e068 <Print::println()>
    cursor_x = x;
    8bc0:	4b5a      	ldr	r3, [pc, #360]	; (8d2c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1bc>)
    8bc2:	612b      	str	r3, [r5, #16]
							  return write((const uint8_t *)str, strlen(str)); }
    8bc4:	495a      	ldr	r1, [pc, #360]	; (8d30 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1c0>)
    8bc6:	220b      	movs	r2, #11
    8bc8:	4628      	mov	r0, r5
    8bca:	f005 f9eb 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
    8bce:	4959      	ldr	r1, [pc, #356]	; (8d34 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1c4>)
    8bd0:	2205      	movs	r2, #5
    8bd2:	4628      	mov	r0, r5
    8bd4:	f005 f9e6 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8bd8:	4628      	mov	r0, r5
    8bda:	f005 fa45 	bl	e068 <Print::println()>
      int vMeterReading = battAvg;
    8bde:	4b56      	ldr	r3, [pc, #344]	; (8d38 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1c8>)
	long result = num / in_range + out_min;
    8be0:	4a56      	ldr	r2, [pc, #344]	; (8d3c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1cc>)
    8be2:	6819      	ldr	r1, [r3, #0]
	long num = (x - in_min) * out_range;
    8be4:	f6a1 0398 	subw	r3, r1, #2200	; 0x898
    8be8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    8bec:	005b      	lsls	r3, r3, #1
		num += in_range / 2;
    8bee:	f503 73d7 	add.w	r3, r3, #430	; 0x1ae
	long result = num / in_range + out_min;
    8bf2:	fb82 0203 	smull	r0, r2, r2, r3
    8bf6:	17de      	asrs	r6, r3, #31
		if (in_range * num < 0) return result - 1;
    8bf8:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    8bfa:	ebc6 2622 	rsb	r6, r6, r2, asr #8
      if (vMeterReading > 3020){
    8bfe:	f640 33cc 	movw	r3, #3020	; 0xbcc
    8c02:	4a4f      	ldr	r2, [pc, #316]	; (8d40 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1d0>)
    8c04:	612a      	str	r2, [r5, #16]
    8c06:	bfac      	ite	ge
    8c08:	3624      	addge	r6, #36	; 0x24
		if (in_range * num < 0) return result - 1;
    8c0a:	3623      	addlt	r6, #35	; 0x23
    8c0c:	4299      	cmp	r1, r3
        drawFlash(4,34);
    8c0e:	f04f 0004 	mov.w	r0, #4
    8c12:	f04f 0122 	mov.w	r1, #34	; 0x22
      if (vMeterReading > 3020){
    8c16:	dc0b      	bgt.n	8c30 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0xc0>
        int bar = drawBatt(4,34);
    8c18:	f7ff f844 	bl	7ca4 <drawBatt(int, int)>
        if (0 == batteryType) {
    8c1c:	4b49      	ldr	r3, [pc, #292]	; (8d44 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1d4>)
    8c1e:	881c      	ldrh	r4, [r3, #0]
        int bar = drawBatt(4,34);
    8c20:	4607      	mov	r7, r0
        if (0 == batteryType) {
    8c22:	b35c      	cbz	r4, 8c7c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x10c>
        } else if (1 == batteryType) {
    8c24:	2c01      	cmp	r4, #1
    8c26:	d044      	beq.n	8cb2 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x142>
        } else if (2 == batteryType) {
    8c28:	2c02      	cmp	r4, #2
    8c2a:	d072      	beq.n	8d12 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1a2>
      return true;
    8c2c:	2001      	movs	r0, #1
  }
    8c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        drawFlash(4,34);
    8c30:	f7ff f8ba 	bl	7da8 <drawFlash(int, int)>
							  return write((const uint8_t *)str, strlen(str)); }
    8c34:	4944      	ldr	r1, [pc, #272]	; (8d48 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1d8>)
    8c36:	483b      	ldr	r0, [pc, #236]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c38:	2209      	movs	r2, #9
    8c3a:	f005 f9b3 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
        display.print(voltage/10);
    8c3e:	4b43      	ldr	r3, [pc, #268]	; (8d4c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1dc>)
    8c40:	17f4      	asrs	r4, r6, #31
    8c42:	fb83 2306 	smull	r2, r3, r3, r6
    8c46:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    8c4a:	4b41      	ldr	r3, [pc, #260]	; (8d50 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1e0>)
    8c4c:	612b      	str	r3, [r5, #16]
	size_t print(int n)				{ return print((long)n); }
    8c4e:	4621      	mov	r1, r4
    8c50:	4834      	ldr	r0, [pc, #208]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c52:	f005 fa01 	bl	e058 <Print::print(long)>
          display.print(voltage%10);
    8c56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
							  return write((const uint8_t *)str, strlen(str)); }
    8c5a:	2201      	movs	r2, #1
    8c5c:	493d      	ldr	r1, [pc, #244]	; (8d54 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1e4>)
    8c5e:	4831      	ldr	r0, [pc, #196]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c60:	f005 f9a0 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    8c64:	eba6 0144 	sub.w	r1, r6, r4, lsl #1
    8c68:	482e      	ldr	r0, [pc, #184]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c6a:	f005 f9f5 	bl	e058 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    8c6e:	493a      	ldr	r1, [pc, #232]	; (8d58 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1e8>)
    8c70:	482c      	ldr	r0, [pc, #176]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c72:	2201      	movs	r2, #1
    8c74:	f005 f996 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
      return true;
    8c78:	2001      	movs	r0, #1
  }
    8c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c7c:	4937      	ldr	r1, [pc, #220]	; (8d5c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1ec>)
    8c7e:	2210      	movs	r2, #16
    8c80:	4828      	ldr	r0, [pc, #160]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c82:	f005 f98f 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8c86:	4827      	ldr	r0, [pc, #156]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c88:	f005 f9ee 	bl	e068 <Print::println()>
    8c8c:	4b30      	ldr	r3, [pc, #192]	; (8d50 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1e0>)
    8c8e:	612b      	str	r3, [r5, #16]
	size_t print(int n)				{ return print((long)n); }
    8c90:	4639      	mov	r1, r7
    8c92:	4824      	ldr	r0, [pc, #144]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c94:	f005 f9e0 	bl	e058 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    8c98:	4931      	ldr	r1, [pc, #196]	; (8d60 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1f0>)
    8c9a:	4822      	ldr	r0, [pc, #136]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8c9c:	2207      	movs	r2, #7
    8c9e:	f005 f981 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
          display.print(voltage/10);
    8ca2:	4b2a      	ldr	r3, [pc, #168]	; (8d4c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1dc>)
    8ca4:	17f4      	asrs	r4, r6, #31
    8ca6:	fb83 2306 	smull	r2, r3, r3, r6
    8caa:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
	size_t print(int n)				{ return print((long)n); }
    8cae:	4621      	mov	r1, r4
    8cb0:	e7ce      	b.n	8c50 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
    8cb2:	220c      	movs	r2, #12
    8cb4:	492b      	ldr	r1, [pc, #172]	; (8d64 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1f4>)
    8cb6:	481b      	ldr	r0, [pc, #108]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8cb8:	f005 f974 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8cbc:	4819      	ldr	r0, [pc, #100]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8cbe:	f005 f9d3 	bl	e068 <Print::println()>
    8cc2:	4b23      	ldr	r3, [pc, #140]	; (8d50 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1e0>)
    8cc4:	612b      	str	r3, [r5, #16]
	size_t print(int n)				{ return print((long)n); }
    8cc6:	4639      	mov	r1, r7
    8cc8:	4816      	ldr	r0, [pc, #88]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8cca:	f005 f9c5 	bl	e058 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    8cce:	2207      	movs	r2, #7
    8cd0:	4923      	ldr	r1, [pc, #140]	; (8d60 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1f0>)
    8cd2:	4814      	ldr	r0, [pc, #80]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8cd4:	f005 f966 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
          display.print(voltage/10);
    8cd8:	4b1c      	ldr	r3, [pc, #112]	; (8d4c <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1dc>)
	size_t print(int n)				{ return print((long)n); }
    8cda:	4812      	ldr	r0, [pc, #72]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8cdc:	fb83 2306 	smull	r2, r3, r3, r6
    8ce0:	17f5      	asrs	r5, r6, #31
    8ce2:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
    8ce6:	4629      	mov	r1, r5
    8ce8:	f005 f9b6 	bl	e058 <Print::print(long)>
          display.print(voltage%10);
    8cec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
							  return write((const uint8_t *)str, strlen(str)); }
    8cf0:	4622      	mov	r2, r4
    8cf2:	4918      	ldr	r1, [pc, #96]	; (8d54 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1e4>)
    8cf4:	480b      	ldr	r0, [pc, #44]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8cf6:	f005 f955 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    8cfa:	eba6 0145 	sub.w	r1, r6, r5, lsl #1
    8cfe:	4809      	ldr	r0, [pc, #36]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8d00:	f005 f9aa 	bl	e058 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    8d04:	4914      	ldr	r1, [pc, #80]	; (8d58 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1e8>)
    8d06:	4807      	ldr	r0, [pc, #28]	; (8d24 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1b4>)
    8d08:	4622      	mov	r2, r4
    8d0a:	f005 f94b 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
      return true;
    8d0e:	4620      	mov	r0, r4
  }
    8d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d12:	4915      	ldr	r1, [pc, #84]	; (8d68 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x1f8>)
    8d14:	220c      	movs	r2, #12
    8d16:	e7b3      	b.n	8c80 <aboutMenuPage::{lambda(KeyState&, unsigned long)#1}::_FUN(KeyState, unsigned long)+0x110>
    8d18:	1fff8e9c 	.word	0x1fff8e9c
    8d1c:	1fff9c68 	.word	0x1fff9c68
    8d20:	1fff9c59 	.word	0x1fff9c59
    8d24:	1fff9c74 	.word	0x1fff9c74
    8d28:	00013a70 	.word	0x00013a70
    8d2c:	000c0010 	.word	0x000c0010
    8d30:	00013a78 	.word	0x00013a78
    8d34:	00013a48 	.word	0x00013a48
    8d38:	1fff9934 	.word	0x1fff9934
    8d3c:	4c346405 	.word	0x4c346405
    8d40:	00200010 	.word	0x00200010
    8d44:	1fff9a04 	.word	0x1fff9a04
    8d48:	00013a84 	.word	0x00013a84
    8d4c:	66666667 	.word	0x66666667
    8d50:	002a0010 	.word	0x002a0010
    8d54:	0001519c 	.word	0x0001519c
    8d58:	0001510c 	.word	0x0001510c
    8d5c:	00013a90 	.word	0x00013a90
    8d60:	00013aa4 	.word	0x00013aa4
    8d64:	00013aac 	.word	0x00013aac
    8d68:	00013abc 	.word	0x00013abc

00008d6c <midiSetChannel(unsigned char)>:

int midiChannel;


void midiSetChannel(uint8_t channel) {
  midiChannel = constrain(channel, 1, 16);
    8d6c:	b128      	cbz	r0, 8d7a <midiSetChannel(unsigned char)+0xe>
    8d6e:	4b05      	ldr	r3, [pc, #20]	; (8d84 <midiSetChannel(unsigned char)+0x18>)
    8d70:	2810      	cmp	r0, #16
    8d72:	bfa8      	it	ge
    8d74:	2010      	movge	r0, #16
    8d76:	6018      	str	r0, [r3, #0]
}
    8d78:	4770      	bx	lr
  midiChannel = constrain(channel, 1, 16);
    8d7a:	4b02      	ldr	r3, [pc, #8]	; (8d84 <midiSetChannel(unsigned char)+0x18>)
    8d7c:	2001      	movs	r0, #1
    8d7e:	6018      	str	r0, [r3, #0]
}
    8d80:	4770      	bx	lr
    8d82:	bf00      	nop
    8d84:	1fff9ce0 	.word	0x1fff9ce0

00008d88 <midiSendProgramChange(unsigned char)>:
byte midiGetChannel() {
  return midiChannel;
}


void midiSendProgramChange(uint8_t patch) {
    8d88:	b538      	push	{r3, r4, r5, lr}
	usbMIDI.sendProgramChange(patch-1, midiChannel);
    8d8a:	4c16      	ldr	r4, [pc, #88]	; (8de4 <midiSendProgramChange(unsigned char)+0x5c>)
		if (cable >= MIDI_NUM_CABLES) return;
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    8d8c:	7823      	ldrb	r3, [r4, #0]
    8d8e:	1e45      	subs	r5, r0, #1
    8d90:	b2ed      	uxtb	r5, r5
    8d92:	1e58      	subs	r0, r3, #1
    8d94:	0200      	lsls	r0, r0, #8
    8d96:	042b      	lsls	r3, r5, #16
    8d98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
    8d9c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    8da0:	4318      	orrs	r0, r3
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    8da2:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
    8da6:	f040 000c 	orr.w	r0, r0, #12
    8daa:	f007 fe0f 	bl	109cc <usb_midi_write_packed>
	dinMIDIsendProgramChange(patch-1, midiChannel-1);
    8dae:	6824      	ldr	r4, [r4, #0]
    8db0:	3c01      	subs	r4, #1

//**************************************************************

//  Send din program change
void dinMIDIsendProgramChange(uint8_t value, uint8_t ch) {
    midiSend2B((0xC0 | ch), value);
    8db2:	f064 043f 	orn	r4, r4, #63	; 0x3f
	virtual void clear(void)	{ serial3_clear(); }
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
	using Print::write;
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8db6:	b2e4      	uxtb	r4, r4
    8db8:	4620      	mov	r0, r4
    8dba:	f006 ff0d 	bl	fbd8 <serial3_putchar>
    8dbe:	4628      	mov	r0, r5
    8dc0:	f006 ff0a 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    8dc4:	4b08      	ldr	r3, [pc, #32]	; (8de8 <midiSendProgramChange(unsigned char)+0x60>)
    8dc6:	781b      	ldrb	r3, [r3, #0]
    8dc8:	b113      	cbz	r3, 8dd0 <midiSendProgramChange(unsigned char)+0x48>
    8dca:	4b08      	ldr	r3, [pc, #32]	; (8dec <midiSendProgramChange(unsigned char)+0x64>)
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	b903      	cbnz	r3, 8dd2 <midiSendProgramChange(unsigned char)+0x4a>
}
    8dd0:	bd38      	pop	{r3, r4, r5, pc}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8dd2:	4620      	mov	r0, r4
    8dd4:	f006 fa64 	bl	f2a0 <serial2_putchar>
    8dd8:	4628      	mov	r0, r5
    8dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8dde:	f006 ba5f 	b.w	f2a0 <serial2_putchar>
    8de2:	bf00      	nop
    8de4:	1fff9ce0 	.word	0x1fff9ce0
    8de8:	1fff9c1e 	.word	0x1fff9c1e
    8dec:	1fff9c1f 	.word	0x1fff9c1f

00008df0 <midiSendControlChange(unsigned char, unsigned char)>:
void midiSendControlChange(uint8_t ccParam, uint8_t ccValue) {
    8df0:	b570      	push	{r4, r5, r6, lr}
      usbMIDI.sendControlChange(ccParam, ccValue, midiChannel);
    8df2:	4c1b      	ldr	r4, [pc, #108]	; (8e60 <midiSendControlChange(unsigned char, unsigned char)+0x70>)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    8df4:	7823      	ldrb	r3, [r4, #0]
    8df6:	3b01      	subs	r3, #1
    8df8:	0402      	lsls	r2, r0, #16
    8dfa:	021b      	lsls	r3, r3, #8
    8dfc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
    8e00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			  | ((data2 & 0x7F) << 24));
    8e04:	4313      	orrs	r3, r2
    8e06:	060a      	lsls	r2, r1, #24
    8e08:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
    8e0c:	4313      	orrs	r3, r2
void midiSendControlChange(uint8_t ccParam, uint8_t ccValue) {
    8e0e:	4605      	mov	r5, r0
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    8e10:	f443 4030 	orr.w	r0, r3, #45056	; 0xb000
    8e14:	f040 000b 	orr.w	r0, r0, #11
    8e18:	460e      	mov	r6, r1
    8e1a:	f007 fdd7 	bl	109cc <usb_midi_write_packed>
      dinMIDIsendControlChange(ccParam, ccValue, midiChannel - 1);
    8e1e:	6824      	ldr	r4, [r4, #0]
    8e20:	3c01      	subs	r4, #1
    midiSend3B((0xB0 | ch), ccNumber, cc);
    8e22:	f064 044f 	orn	r4, r4, #79	; 0x4f
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8e26:	b2e4      	uxtb	r4, r4
    8e28:	4620      	mov	r0, r4
    8e2a:	f006 fed5 	bl	fbd8 <serial3_putchar>
    8e2e:	4628      	mov	r0, r5
    8e30:	f006 fed2 	bl	fbd8 <serial3_putchar>
    8e34:	4630      	mov	r0, r6
    8e36:	f006 fecf 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    8e3a:	4b0a      	ldr	r3, [pc, #40]	; (8e64 <midiSendControlChange(unsigned char, unsigned char)+0x74>)
    8e3c:	781b      	ldrb	r3, [r3, #0]
    8e3e:	b113      	cbz	r3, 8e46 <midiSendControlChange(unsigned char, unsigned char)+0x56>
    8e40:	4b09      	ldr	r3, [pc, #36]	; (8e68 <midiSendControlChange(unsigned char, unsigned char)+0x78>)
    8e42:	781b      	ldrb	r3, [r3, #0]
    8e44:	b903      	cbnz	r3, 8e48 <midiSendControlChange(unsigned char, unsigned char)+0x58>
}
    8e46:	bd70      	pop	{r4, r5, r6, pc}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8e48:	4620      	mov	r0, r4
    8e4a:	f006 fa29 	bl	f2a0 <serial2_putchar>
    8e4e:	4628      	mov	r0, r5
    8e50:	f006 fa26 	bl	f2a0 <serial2_putchar>
    8e54:	4630      	mov	r0, r6
    8e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e5a:	f006 ba21 	b.w	f2a0 <serial2_putchar>
    8e5e:	bf00      	nop
    8e60:	1fff9ce0 	.word	0x1fff9ce0
    8e64:	1fff9c1e 	.word	0x1fff9c1e
    8e68:	1fff9c1f 	.word	0x1fff9c1f

00008e6c <midiSendNoteOn(unsigned char, unsigned char)>:
void midiSendNoteOn(uint8_t note, uint8_t velocity) {
    8e6c:	b570      	push	{r4, r5, r6, lr}
  usbMIDI.sendNoteOn(note, velocity, midiChannel);
    8e6e:	4c1b      	ldr	r4, [pc, #108]	; (8edc <midiSendNoteOn(unsigned char, unsigned char)+0x70>)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    8e70:	7823      	ldrb	r3, [r4, #0]
    8e72:	3b01      	subs	r3, #1
    8e74:	0402      	lsls	r2, r0, #16
    8e76:	021b      	lsls	r3, r3, #8
    8e78:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
    8e7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			  | ((data2 & 0x7F) << 24));
    8e80:	4313      	orrs	r3, r2
    8e82:	060a      	lsls	r2, r1, #24
    8e84:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
    8e88:	4313      	orrs	r3, r2
void midiSendNoteOn(uint8_t note, uint8_t velocity) {
    8e8a:	4605      	mov	r5, r0
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    8e8c:	f443 4010 	orr.w	r0, r3, #36864	; 0x9000
    8e90:	f040 0009 	orr.w	r0, r0, #9
    8e94:	460e      	mov	r6, r1
    8e96:	f007 fd99 	bl	109cc <usb_midi_write_packed>
  dinMIDIsendNoteOn(note, velocity, midiChannel - 1);
    8e9a:	6824      	ldr	r4, [r4, #0]
    8e9c:	3c01      	subs	r4, #1
    midiSend3B((0x90 | ch), note, vel);
    8e9e:	f064 046f 	orn	r4, r4, #111	; 0x6f
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8ea2:	b2e4      	uxtb	r4, r4
    8ea4:	4620      	mov	r0, r4
    8ea6:	f006 fe97 	bl	fbd8 <serial3_putchar>
    8eaa:	4628      	mov	r0, r5
    8eac:	f006 fe94 	bl	fbd8 <serial3_putchar>
    8eb0:	4630      	mov	r0, r6
    8eb2:	f006 fe91 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    8eb6:	4b0a      	ldr	r3, [pc, #40]	; (8ee0 <midiSendNoteOn(unsigned char, unsigned char)+0x74>)
    8eb8:	781b      	ldrb	r3, [r3, #0]
    8eba:	b113      	cbz	r3, 8ec2 <midiSendNoteOn(unsigned char, unsigned char)+0x56>
    8ebc:	4b09      	ldr	r3, [pc, #36]	; (8ee4 <midiSendNoteOn(unsigned char, unsigned char)+0x78>)
    8ebe:	781b      	ldrb	r3, [r3, #0]
    8ec0:	b903      	cbnz	r3, 8ec4 <midiSendNoteOn(unsigned char, unsigned char)+0x58>
}
    8ec2:	bd70      	pop	{r4, r5, r6, pc}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8ec4:	4620      	mov	r0, r4
    8ec6:	f006 f9eb 	bl	f2a0 <serial2_putchar>
    8eca:	4628      	mov	r0, r5
    8ecc:	f006 f9e8 	bl	f2a0 <serial2_putchar>
    8ed0:	4630      	mov	r0, r6
    8ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8ed6:	f006 b9e3 	b.w	f2a0 <serial2_putchar>
    8eda:	bf00      	nop
    8edc:	1fff9ce0 	.word	0x1fff9ce0
    8ee0:	1fff9c1e 	.word	0x1fff9c1e
    8ee4:	1fff9c1f 	.word	0x1fff9c1f

00008ee8 <midiSendNoteOff(unsigned char)>:
void midiSendNoteOff(uint8_t note) {
    8ee8:	b538      	push	{r3, r4, r5, lr}
  usbMIDI.sendNoteOn(note, 0, midiChannel);
    8eea:	4c18      	ldr	r4, [pc, #96]	; (8f4c <midiSendNoteOff(unsigned char)+0x64>)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    8eec:	7823      	ldrb	r3, [r4, #0]
    8eee:	3b01      	subs	r3, #1
    8ef0:	0402      	lsls	r2, r0, #16
    8ef2:	021b      	lsls	r3, r3, #8
    8ef4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
    8ef8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8efc:	4313      	orrs	r3, r2
void midiSendNoteOff(uint8_t note) {
    8efe:	4605      	mov	r5, r0
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    8f00:	f443 4010 	orr.w	r0, r3, #36864	; 0x9000
    8f04:	f040 0009 	orr.w	r0, r0, #9
    8f08:	f007 fd60 	bl	109cc <usb_midi_write_packed>
  dinMIDIsendNoteOn(note, 0, midiChannel - 1);
    8f0c:	6824      	ldr	r4, [r4, #0]
    8f0e:	3c01      	subs	r4, #1
    midiSend3B((0x90 | ch), note, vel);
    8f10:	f064 046f 	orn	r4, r4, #111	; 0x6f
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8f14:	b2e4      	uxtb	r4, r4
    8f16:	4620      	mov	r0, r4
    8f18:	f006 fe5e 	bl	fbd8 <serial3_putchar>
    8f1c:	4628      	mov	r0, r5
    8f1e:	f006 fe5b 	bl	fbd8 <serial3_putchar>
    8f22:	2000      	movs	r0, #0
    8f24:	f006 fe58 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    8f28:	4b09      	ldr	r3, [pc, #36]	; (8f50 <midiSendNoteOff(unsigned char)+0x68>)
    8f2a:	781b      	ldrb	r3, [r3, #0]
    8f2c:	b113      	cbz	r3, 8f34 <midiSendNoteOff(unsigned char)+0x4c>
    8f2e:	4b09      	ldr	r3, [pc, #36]	; (8f54 <midiSendNoteOff(unsigned char)+0x6c>)
    8f30:	781b      	ldrb	r3, [r3, #0]
    8f32:	b903      	cbnz	r3, 8f36 <midiSendNoteOff(unsigned char)+0x4e>
}
    8f34:	bd38      	pop	{r3, r4, r5, pc}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8f36:	4620      	mov	r0, r4
    8f38:	f006 f9b2 	bl	f2a0 <serial2_putchar>
    8f3c:	4628      	mov	r0, r5
    8f3e:	f006 f9af 	bl	f2a0 <serial2_putchar>
    8f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f46:	2000      	movs	r0, #0
    8f48:	f006 b9aa 	b.w	f2a0 <serial2_putchar>
    8f4c:	1fff9ce0 	.word	0x1fff9ce0
    8f50:	1fff9c1e 	.word	0x1fff9c1e
    8f54:	1fff9c1f 	.word	0x1fff9c1f

00008f58 <midiSendAfterTouch(unsigned char)>:
void midiSendAfterTouch(uint8_t value) {
    8f58:	b538      	push	{r3, r4, r5, lr}
  usbMIDI.sendAfterTouch(value, midiChannel);
    8f5a:	4c15      	ldr	r4, [pc, #84]	; (8fb0 <midiSendAfterTouch(unsigned char)+0x58>)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    8f5c:	7823      	ldrb	r3, [r4, #0]
    8f5e:	3b01      	subs	r3, #1
    8f60:	0402      	lsls	r2, r0, #16
    8f62:	021b      	lsls	r3, r3, #8
    8f64:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
    8f68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8f6c:	4313      	orrs	r3, r2
void midiSendAfterTouch(uint8_t value) {
    8f6e:	4605      	mov	r5, r0
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    8f70:	f443 4050 	orr.w	r0, r3, #53248	; 0xd000
    8f74:	f040 000d 	orr.w	r0, r0, #13
    8f78:	f007 fd28 	bl	109cc <usb_midi_write_packed>
  dinMIDIsendAfterTouch(value, midiChannel - 1);
    8f7c:	6824      	ldr	r4, [r4, #0]
    8f7e:	3c01      	subs	r4, #1
    midiSend2B((0xD0 | ch), value);
    8f80:	f064 042f 	orn	r4, r4, #47	; 0x2f
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8f84:	b2e4      	uxtb	r4, r4
    8f86:	4620      	mov	r0, r4
    8f88:	f006 fe26 	bl	fbd8 <serial3_putchar>
    8f8c:	4628      	mov	r0, r5
    8f8e:	f006 fe23 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    8f92:	4b08      	ldr	r3, [pc, #32]	; (8fb4 <midiSendAfterTouch(unsigned char)+0x5c>)
    8f94:	781b      	ldrb	r3, [r3, #0]
    8f96:	b113      	cbz	r3, 8f9e <midiSendAfterTouch(unsigned char)+0x46>
    8f98:	4b07      	ldr	r3, [pc, #28]	; (8fb8 <midiSendAfterTouch(unsigned char)+0x60>)
    8f9a:	781b      	ldrb	r3, [r3, #0]
    8f9c:	b903      	cbnz	r3, 8fa0 <midiSendAfterTouch(unsigned char)+0x48>
}
    8f9e:	bd38      	pop	{r3, r4, r5, pc}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8fa0:	4620      	mov	r0, r4
    8fa2:	f006 f97d 	bl	f2a0 <serial2_putchar>
    8fa6:	4628      	mov	r0, r5
    8fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8fac:	f006 b978 	b.w	f2a0 <serial2_putchar>
    8fb0:	1fff9ce0 	.word	0x1fff9ce0
    8fb4:	1fff9c1e 	.word	0x1fff9c1e
    8fb8:	1fff9c1f 	.word	0x1fff9c1f

00008fbc <midiSendPitchBend(unsigned short)>:
void midiSendPitchBend(uint16_t value) {
    8fbc:	b570      	push	{r4, r5, r6, lr}
    usbMIDI.sendPitchBend(value-8192, midiChannel); // newer teensyduino "pitchBend-8192" older just "pitchBend"... strange thing to change
    8fbe:	f5a0 5200 	sub.w	r2, r0, #8192	; 0x2000
		value += 8192;
    8fc2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8fc6:	4d1e      	ldr	r5, [pc, #120]	; (9040 <midiSendPitchBend(unsigned short)+0x84>)
    8fc8:	428a      	cmp	r2, r1
    8fca:	bfa8      	it	ge
    8fcc:	460a      	movge	r2, r1
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    8fce:	782b      	ldrb	r3, [r5, #0]
		value += 8192;
    8fd0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    8fd4:	0411      	lsls	r1, r2, #16
    8fd6:	3b01      	subs	r3, #1
    8fd8:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
    8fdc:	021b      	lsls	r3, r3, #8
		send(0xE0, value, value >> 7, channel, cable);
    8fde:	11d2      	asrs	r2, r2, #7
			  | ((data2 & 0x7F) << 24));
    8fe0:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    8fe4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			  | ((data2 & 0x7F) << 24));
    8fe8:	4313      	orrs	r3, r2
void midiSendPitchBend(uint16_t value) {
    8fea:	4604      	mov	r4, r0
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    8fec:	f443 4060 	orr.w	r0, r3, #57344	; 0xe000
    8ff0:	f040 000e 	orr.w	r0, r0, #14
    8ff4:	f007 fcea 	bl	109cc <usb_midi_write_packed>
    dinMIDIsendPitchBend(value, midiChannel - 1);
    8ff8:	682d      	ldr	r5, [r5, #0]
    8ffa:	3d01      	subs	r5, #1
    midiSend3B((0xE0 | ch), pitchLSB, pitchMSB);
    8ffc:	f065 051f 	orn	r5, r5, #31
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9000:	b2ed      	uxtb	r5, r5
    9002:	f004 067f 	and.w	r6, r4, #127	; 0x7f
    9006:	4628      	mov	r0, r5
    9008:	f006 fde6 	bl	fbd8 <serial3_putchar>
    900c:	f3c4 14c6 	ubfx	r4, r4, #7, #7
    9010:	4630      	mov	r0, r6
    9012:	f006 fde1 	bl	fbd8 <serial3_putchar>
    9016:	4620      	mov	r0, r4
    9018:	f006 fdde 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    901c:	4b09      	ldr	r3, [pc, #36]	; (9044 <midiSendPitchBend(unsigned short)+0x88>)
    901e:	781b      	ldrb	r3, [r3, #0]
    9020:	b113      	cbz	r3, 9028 <midiSendPitchBend(unsigned short)+0x6c>
    9022:	4b09      	ldr	r3, [pc, #36]	; (9048 <midiSendPitchBend(unsigned short)+0x8c>)
    9024:	781b      	ldrb	r3, [r3, #0]
    9026:	b903      	cbnz	r3, 902a <midiSendPitchBend(unsigned short)+0x6e>
}
    9028:	bd70      	pop	{r4, r5, r6, pc}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    902a:	4628      	mov	r0, r5
    902c:	f006 f938 	bl	f2a0 <serial2_putchar>
    9030:	4630      	mov	r0, r6
    9032:	f006 f935 	bl	f2a0 <serial2_putchar>
    9036:	4620      	mov	r0, r4
    9038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    903c:	f006 b930 	b.w	f2a0 <serial2_putchar>
    9040:	1fff9ce0 	.word	0x1fff9ce0
    9044:	1fff9c1e 	.word	0x1fff9c1e
    9048:	1fff9c1f 	.word	0x1fff9c1f

0000904c <midiDiscardInput()>:
{
    904c:	b508      	push	{r3, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
    904e:	2000      	movs	r0, #0
    9050:	f007 fd8e 	bl	10b70 <usb_midi_read>
  while (usbMIDI.read()) {
    9054:	2800      	cmp	r0, #0
    9056:	d1fa      	bne.n	904e <midiDiscardInput()+0x2>
}
    9058:	bd08      	pop	{r3, pc}
    905a:	bf00      	nop

0000905c <midiReset()>:
void midiReset() { // reset controllers
    905c:	b570      	push	{r4, r5, r6, lr}
      usbMIDI.sendControlChange(ccParam, ccValue, midiChannel);
    905e:	4e28      	ldr	r6, [pc, #160]	; (9100 <midiReset()+0xa4>)
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    9060:	4828      	ldr	r0, [pc, #160]	; (9104 <midiReset()+0xa8>)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    9062:	7833      	ldrb	r3, [r6, #0]
  if (widiJumper && widiOn){
    9064:	4d28      	ldr	r5, [pc, #160]	; (9108 <midiReset()+0xac>)
    9066:	3b01      	subs	r3, #1
    9068:	021b      	lsls	r3, r3, #8
    906a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    906e:	4318      	orrs	r0, r3
    9070:	f007 fcac 	bl	109cc <usb_midi_write_packed>
      dinMIDIsendControlChange(ccParam, ccValue, midiChannel - 1);
    9074:	6834      	ldr	r4, [r6, #0]
    9076:	3c01      	subs	r4, #1
    midiSend3B((0xB0 | ch), ccNumber, cc);
    9078:	f064 044f 	orn	r4, r4, #79	; 0x4f
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    907c:	b2e4      	uxtb	r4, r4
    907e:	4620      	mov	r0, r4
    9080:	f006 fdaa 	bl	fbd8 <serial3_putchar>
    9084:	2007      	movs	r0, #7
    9086:	f006 fda7 	bl	fbd8 <serial3_putchar>
    908a:	2064      	movs	r0, #100	; 0x64
    908c:	f006 fda4 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    9090:	782b      	ldrb	r3, [r5, #0]
    9092:	b113      	cbz	r3, 909a <midiReset()+0x3e>
    9094:	4b1d      	ldr	r3, [pc, #116]	; (910c <midiReset()+0xb0>)
    9096:	781b      	ldrb	r3, [r3, #0]
    9098:	bb3b      	cbnz	r3, 90ea <midiReset()+0x8e>
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    909a:	7833      	ldrb	r3, [r6, #0]
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    909c:	481c      	ldr	r0, [pc, #112]	; (9110 <midiReset()+0xb4>)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    909e:	3b01      	subs	r3, #1
    90a0:	021b      	lsls	r3, r3, #8
    90a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    90a6:	4318      	orrs	r0, r3
    90a8:	f007 fc90 	bl	109cc <usb_midi_write_packed>
      dinMIDIsendControlChange(ccParam, ccValue, midiChannel - 1);
    90ac:	6834      	ldr	r4, [r6, #0]
    90ae:	3c01      	subs	r4, #1
    midiSend3B((0xB0 | ch), ccNumber, cc);
    90b0:	f064 044f 	orn	r4, r4, #79	; 0x4f
    90b4:	b2e4      	uxtb	r4, r4
    90b6:	4620      	mov	r0, r4
    90b8:	f006 fd8e 	bl	fbd8 <serial3_putchar>
    90bc:	200b      	movs	r0, #11
    90be:	f006 fd8b 	bl	fbd8 <serial3_putchar>
    90c2:	207f      	movs	r0, #127	; 0x7f
    90c4:	f006 fd88 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    90c8:	782b      	ldrb	r3, [r5, #0]
    90ca:	b113      	cbz	r3, 90d2 <midiReset()+0x76>
    90cc:	4b0f      	ldr	r3, [pc, #60]	; (910c <midiReset()+0xb0>)
    90ce:	781b      	ldrb	r3, [r3, #0]
    90d0:	b903      	cbnz	r3, 90d4 <midiReset()+0x78>
}
    90d2:	bd70      	pop	{r4, r5, r6, pc}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    90d4:	4620      	mov	r0, r4
    90d6:	f006 f8e3 	bl	f2a0 <serial2_putchar>
    90da:	200b      	movs	r0, #11
    90dc:	f006 f8e0 	bl	f2a0 <serial2_putchar>
    90e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90e4:	207f      	movs	r0, #127	; 0x7f
    90e6:	f006 b8db 	b.w	f2a0 <serial2_putchar>
    90ea:	4620      	mov	r0, r4
    90ec:	f006 f8d8 	bl	f2a0 <serial2_putchar>
    90f0:	2007      	movs	r0, #7
    90f2:	f006 f8d5 	bl	f2a0 <serial2_putchar>
    90f6:	2064      	movs	r0, #100	; 0x64
    90f8:	f006 f8d2 	bl	f2a0 <serial2_putchar>
    90fc:	e7cd      	b.n	909a <midiReset()+0x3e>
    90fe:	bf00      	nop
    9100:	1fff9ce0 	.word	0x1fff9ce0
    9104:	6407b00b 	.word	0x6407b00b
    9108:	1fff9c1e 	.word	0x1fff9c1e
    910c:	1fff9c1f 	.word	0x1fff9c1f
    9110:	7f0bb00b 	.word	0x7f0bb00b

00009114 <midiPanic()>:
void midiPanic() { // all notes off
    9114:	b510      	push	{r4, lr}
      usbMIDI.sendControlChange(ccParam, ccValue, midiChannel);
    9116:	4c19      	ldr	r4, [pc, #100]	; (917c <midiPanic()+0x68>)
    9118:	4819      	ldr	r0, [pc, #100]	; (9180 <midiPanic()+0x6c>)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
    911a:	7823      	ldrb	r3, [r4, #0]
    911c:	3b01      	subs	r3, #1
    911e:	021b      	lsls	r3, r3, #8
    9120:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
    9124:	4318      	orrs	r0, r3
    9126:	f007 fc51 	bl	109cc <usb_midi_write_packed>
      dinMIDIsendControlChange(ccParam, ccValue, midiChannel - 1);
    912a:	6824      	ldr	r4, [r4, #0]
    912c:	3c01      	subs	r4, #1
    midiSend3B((0xB0 | ch), ccNumber, cc);
    912e:	f064 044f 	orn	r4, r4, #79	; 0x4f
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9132:	b2e4      	uxtb	r4, r4
    9134:	4620      	mov	r0, r4
    9136:	f006 fd4f 	bl	fbd8 <serial3_putchar>
    913a:	207b      	movs	r0, #123	; 0x7b
    913c:	f006 fd4c 	bl	fbd8 <serial3_putchar>
    9140:	2000      	movs	r0, #0
    9142:	f006 fd49 	bl	fbd8 <serial3_putchar>
  if (widiJumper && widiOn){
    9146:	4b0f      	ldr	r3, [pc, #60]	; (9184 <midiPanic()+0x70>)
    9148:	781b      	ldrb	r3, [r3, #0]
    914a:	b113      	cbz	r3, 9152 <midiPanic()+0x3e>
    914c:	4b0e      	ldr	r3, [pc, #56]	; (9188 <midiPanic()+0x74>)
    914e:	781b      	ldrb	r3, [r3, #0]
    9150:	b953      	cbnz	r3, 9168 <midiPanic()+0x54>
void midiPanic() { // all notes off
    9152:	2400      	movs	r4, #0
    midiSendNoteOff(i);
    9154:	b2e0      	uxtb	r0, r4
    9156:	f7ff fec7 	bl	8ee8 <midiSendNoteOff(unsigned char)>
  for (int i = 0; i < 128; i++){
    915a:	3401      	adds	r4, #1
    delay(2);
    915c:	2002      	movs	r0, #2
    915e:	f005 fe55 	bl	ee0c <delay>
  for (int i = 0; i < 128; i++){
    9162:	2c80      	cmp	r4, #128	; 0x80
    9164:	d1f6      	bne.n	9154 <midiPanic()+0x40>
}
    9166:	bd10      	pop	{r4, pc}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9168:	4620      	mov	r0, r4
    916a:	f006 f899 	bl	f2a0 <serial2_putchar>
    916e:	207b      	movs	r0, #123	; 0x7b
    9170:	f006 f896 	bl	f2a0 <serial2_putchar>
    9174:	2000      	movs	r0, #0
    9176:	f006 f893 	bl	f2a0 <serial2_putchar>
    917a:	e7ea      	b.n	9152 <midiPanic()+0x3e>
    917c:	1fff9ce0 	.word	0x1fff9ce0
    9180:	007bb00b 	.word	0x007bb00b
    9184:	1fff9c1e 	.word	0x1fff9c1e
    9188:	1fff9c1f 	.word	0x1fff9c1f

0000918c <sendWLPower(unsigned char)>:
    MIDI_SERIAL.write(data[i]);
  }
  MIDI_SERIAL.write(0xF7); //Sysex end
}

void sendWLPower(const uint8_t level) {
    918c:	b530      	push	{r4, r5, lr}
  uint8_t buf[6] = {
    918e:	4a11      	ldr	r2, [pc, #68]	; (91d4 <sendWLPower(unsigned char)+0x48>)
void sendWLPower(const uint8_t level) {
    9190:	4603      	mov	r3, r0
  uint8_t buf[6] = {
    9192:	e892 0003 	ldmia.w	r2, {r0, r1}
void sendWLPower(const uint8_t level) {
    9196:	b083      	sub	sp, #12
    0x02,             //TX02
    0x02,             //Set power level
    0x00              //Power level value (0-3)
  };

  if(level>3) return; //Don't send invalid values
    9198:	2b03      	cmp	r3, #3
  uint8_t buf[6] = {
    919a:	9000      	str	r0, [sp, #0]
    919c:	f8ad 1004 	strh.w	r1, [sp, #4]
  if(level>3) return; //Don't send invalid values
    91a0:	d901      	bls.n	91a6 <sendWLPower(unsigned char)+0x1a>

  buf[5] = level;
  dinMIDIsendSysex(buf, 6);

}
    91a2:	b003      	add	sp, #12
    91a4:	bd30      	pop	{r4, r5, pc}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    91a6:	20f0      	movs	r0, #240	; 0xf0
  buf[5] = level;
    91a8:	f88d 3005 	strb.w	r3, [sp, #5]
    91ac:	466c      	mov	r4, sp
    91ae:	f006 fd13 	bl	fbd8 <serial3_putchar>
  for(int i=0; i<length; ++i) {
    91b2:	f10d 0505 	add.w	r5, sp, #5
    91b6:	2000      	movs	r0, #0
    91b8:	e001      	b.n	91be <sendWLPower(unsigned char)+0x32>
    MIDI_SERIAL.write(data[i]);
    91ba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    91be:	f006 fd0b 	bl	fbd8 <serial3_putchar>
  for(int i=0; i<length; ++i) {
    91c2:	42ac      	cmp	r4, r5
    91c4:	d1f9      	bne.n	91ba <sendWLPower(unsigned char)+0x2e>
    91c6:	20f7      	movs	r0, #247	; 0xf7
}
    91c8:	b003      	add	sp, #12
    91ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    91ce:	f006 bd03 	b.w	fbd8 <serial3_putchar>
    91d2:	bf00      	nop
    91d4:	000150d0 	.word	0x000150d0

000091d8 <sendWLChannel(unsigned char)>:

void sendWLChannel(const uint8_t channel) {
    91d8:	b530      	push	{r4, r5, lr}
  uint8_t buf[6] = {
    91da:	4a11      	ldr	r2, [pc, #68]	; (9220 <sendWLChannel(unsigned char)+0x48>)
void sendWLChannel(const uint8_t channel) {
    91dc:	4603      	mov	r3, r0
  uint8_t buf[6] = {
    91de:	e892 0003 	ldmia.w	r2, {r0, r1}
void sendWLChannel(const uint8_t channel) {
    91e2:	b083      	sub	sp, #12
    0x02,             //TX02
    0x05,             //Set channel
    0x04              //Channel value (4-80)
  };

  if(channel<4 || channel>80) return; //Don't send invalid values
    91e4:	1f1a      	subs	r2, r3, #4
    91e6:	2a4c      	cmp	r2, #76	; 0x4c
  uint8_t buf[6] = {
    91e8:	9000      	str	r0, [sp, #0]
    91ea:	f8ad 1004 	strh.w	r1, [sp, #4]
  if(channel<4 || channel>80) return; //Don't send invalid values
    91ee:	d901      	bls.n	91f4 <sendWLChannel(unsigned char)+0x1c>

  buf[5] = channel;
  dinMIDIsendSysex(buf, 6);

}
    91f0:	b003      	add	sp, #12
    91f2:	bd30      	pop	{r4, r5, pc}
    91f4:	20f0      	movs	r0, #240	; 0xf0
  buf[5] = channel;
    91f6:	f88d 3005 	strb.w	r3, [sp, #5]
    91fa:	466c      	mov	r4, sp
    91fc:	f006 fcec 	bl	fbd8 <serial3_putchar>
  for(int i=0; i<length; ++i) {
    9200:	f10d 0505 	add.w	r5, sp, #5
    9204:	2000      	movs	r0, #0
    9206:	e001      	b.n	920c <sendWLChannel(unsigned char)+0x34>
    MIDI_SERIAL.write(data[i]);
    9208:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    920c:	f006 fce4 	bl	fbd8 <serial3_putchar>
  for(int i=0; i<length; ++i) {
    9210:	42ac      	cmp	r4, r5
    9212:	d1f9      	bne.n	9208 <sendWLChannel(unsigned char)+0x30>
    9214:	20f7      	movs	r0, #247	; 0xf7
}
    9216:	b003      	add	sp, #12
    9218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    921c:	f006 bcdc 	b.w	fbd8 <serial3_putchar>
    9220:	000150d8 	.word	0x000150d8

00009224 <convertToMidiValue(unsigned short)>:
//Translate between "midi data" (only use 7 LSB per byte, big endian) and "teensy data" (little endian)
//Only 14 LSB of int value are used (2MSB are discarded), so only works for unsigned data 0-16383

//NOTE: This assumes code is running on a little-endian CPU, both for real device (Teensy) and simulator.
uint16_t convertToMidiValue(const uint16_t realdata) {
  return (realdata & 0x3F80) >>7 | (realdata & 0x007F) <<8;
    9224:	0203      	lsls	r3, r0, #8
    9226:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
    922a:	f3c0 10c6 	ubfx	r0, r0, #7, #7
}
    922e:	4318      	orrs	r0, r3
    9230:	4770      	bx	lr
    9232:	bf00      	nop

00009234 <convertFromMidiValue(unsigned char const*)>:
//Read from a memory location, such as MIDI receive buffer
uint16_t convertFromMidiValue(const uint8_t* mididata) {
  uint8_t msb = *mididata;
  uint8_t lsb = *(mididata+1);

  return (msb & 0x007F) <<7 | (lsb & 0x007F);
    9234:	7803      	ldrb	r3, [r0, #0]
    9236:	7840      	ldrb	r0, [r0, #1]
    9238:	01db      	lsls	r3, r3, #7
    923a:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
    923e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
    9242:	4318      	orrs	r0, r3
    9244:	4770      	bx	lr
    9246:	bf00      	nop

00009248 <convertToMidiCRC(unsigned long)>:

//This is a bit different. MSB of each byte is just discarded (instead of discarding MSB for whole value). Just used for CRC (easier to compare)
uint32_t convertToMidiCRC(const uint32_t realdata) {
    9248:	b082      	sub	sp, #8
  uint8_t* p = (uint8_t*)&realdata;

  uint32_t r=0;
  for(int i=0; i<4; ++i) {
    924a:	aa01      	add	r2, sp, #4
uint32_t convertToMidiCRC(const uint32_t realdata) {
    924c:	9001      	str	r0, [sp, #4]
    924e:	a902      	add	r1, sp, #8
  uint32_t r=0;
    9250:	2000      	movs	r0, #0
    r = r<<8 | (p[i] & 0x7F);
    9252:	f812 3b01 	ldrb.w	r3, [r2], #1
    9256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  for(int i=0; i<4; ++i) {
    925a:	4291      	cmp	r1, r2
    r = r<<8 | (p[i] & 0x7F);
    925c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  for(int i=0; i<4; ++i) {
    9260:	d1f7      	bne.n	9252 <convertToMidiCRC(unsigned long)+0xa>
  }
  return r;
}
    9262:	b002      	add	sp, #8
    9264:	4770      	bx	lr
    9266:	bf00      	nop

00009268 <midiInitialize(unsigned char)>:
void midiInitialize(uint8_t channel) {
    9268:	b510      	push	{r4, lr}
  MIDI_SERIAL.begin(31250);   // start serial with midi baudrate 31250
    926a:	f647 2112 	movw	r1, #31250	; 0x7a12
void midiInitialize(uint8_t channel) {
    926e:	4604      	mov	r4, r0
  MIDI_SERIAL.begin(31250);   // start serial with midi baudrate 31250
    9270:	480d      	ldr	r0, [pc, #52]	; (92a8 <midiInitialize(unsigned char)+0x40>)
    9272:	f004 fcb7 	bl	dbe4 <HardwareSerial3::begin(unsigned long)>
	virtual void flush(void)        { serial3_flush(); }
    9276:	f006 fccd 	bl	fc14 <serial3_flush>
  if(widiJumper){
    927a:	4b0c      	ldr	r3, [pc, #48]	; (92ac <midiInitialize(unsigned char)+0x44>)
    927c:	781b      	ldrb	r3, [r3, #0]
    927e:	b953      	cbnz	r3, 9296 <midiInitialize(unsigned char)+0x2e>
  midiChannel = constrain(channel, 1, 16);
    9280:	b12c      	cbz	r4, 928e <midiInitialize(unsigned char)+0x26>
    9282:	4b0b      	ldr	r3, [pc, #44]	; (92b0 <midiInitialize(unsigned char)+0x48>)
    9284:	2c10      	cmp	r4, #16
    9286:	bfa8      	it	ge
    9288:	2410      	movge	r4, #16
    928a:	601c      	str	r4, [r3, #0]
}
    928c:	bd10      	pop	{r4, pc}
  midiChannel = constrain(channel, 1, 16);
    928e:	4b08      	ldr	r3, [pc, #32]	; (92b0 <midiInitialize(unsigned char)+0x48>)
    9290:	2401      	movs	r4, #1
    9292:	601c      	str	r4, [r3, #0]
}
    9294:	bd10      	pop	{r4, pc}
    WIDI_SERIAL.begin(31250);   // start serial with midi baudrate 31250
    9296:	4807      	ldr	r0, [pc, #28]	; (92b4 <midiInitialize(unsigned char)+0x4c>)
    9298:	f647 2112 	movw	r1, #31250	; 0x7a12
    929c:	f004 fbea 	bl	da74 <HardwareSerial2::begin(unsigned long)>
	virtual void flush(void)        { serial2_flush(); }
    92a0:	f006 f902 	bl	f4a8 <serial2_flush>
    92a4:	e7ec      	b.n	9280 <midiInitialize(unsigned char)+0x18>
    92a6:	bf00      	nop
    92a8:	1fff9190 	.word	0x1fff9190
    92ac:	1fff9c1e 	.word	0x1fff9c1e
    92b0:	1fff9ce0 	.word	0x1fff9ce0
    92b4:	1fff917c 	.word	0x1fff917c

000092b8 <setBit(unsigned short&, unsigned char, unsigned short)>:



//Poke at a certain bit in a bit field
void setBit(uint16_t &bitfield, const uint8_t pos, const uint16_t value) {
  bitfield = (bitfield & ~(1<<pos)) | ((value?1:0)<<pos);
    92b8:	8803      	ldrh	r3, [r0, #0]
    92ba:	3a00      	subs	r2, #0
    92bc:	f04f 0c01 	mov.w	ip, #1
    92c0:	fa0c fc01 	lsl.w	ip, ip, r1
    92c4:	bf18      	it	ne
    92c6:	2201      	movne	r2, #1
    92c8:	ea23 030c 	bic.w	r3, r3, ip
    92cc:	fa02 f101 	lsl.w	r1, r2, r1
    92d0:	430b      	orrs	r3, r1
    92d2:	8003      	strh	r3, [r0, #0]
}
    92d4:	4770      	bx	lr
    92d6:	bf00      	nop

000092d8 <writeSetting(unsigned short, unsigned short)>:


//Read and write EEPROM data
void writeSetting(const uint16_t address, const uint16_t value) {
    92d8:	b570      	push	{r4, r5, r6, lr}
    92da:	b2ce      	uxtb	r6, r1
    92dc:	460c      	mov	r4, r1
    92de:	4605      	mov	r5, r0
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    92e0:	f005 f88a 	bl	e3f8 <eeprom_read_byte>
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    92e4:	4286      	cmp	r6, r0
    92e6:	d003      	beq.n	92f0 <writeSetting(unsigned short, unsigned short)+0x18>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    92e8:	4631      	mov	r1, r6
    92ea:	4628      	mov	r0, r5
    92ec:	f005 f89e 	bl	e42c <eeprom_write_byte>
        uint8_t v[2];
        uint16_t val;
    } data;
    data.val = value;
    EEPROM.update(address, data.v[0]);
    EEPROM.update(address+1, data.v[1]);
    92f0:	3501      	adds	r5, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    92f2:	4628      	mov	r0, r5
    92f4:	f005 f880 	bl	e3f8 <eeprom_read_byte>
    92f8:	0a21      	lsrs	r1, r4, #8
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    92fa:	4281      	cmp	r1, r0
    92fc:	d100      	bne.n	9300 <writeSetting(unsigned short, unsigned short)+0x28>
}
    92fe:	bd70      	pop	{r4, r5, r6, pc}
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    9300:	4628      	mov	r0, r5
    9302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9306:	f005 b891 	b.w	e42c <eeprom_write_byte>
    930a:	bf00      	nop

0000930c <readEEPROM(bool)>:
void readEEPROM(const bool factoryReset) {
    930c:	b570      	push	{r4, r5, r6, lr}
    930e:	4605      	mov	r5, r0
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    9310:	2000      	movs	r0, #0
    9312:	f005 f871 	bl	e3f8 <eeprom_read_byte>
uint16_t readSetting(const uint16_t address) {
    union {
        uint8_t v[2];
        uint16_t val;
    } data;
    data.v[0] = EEPROM.read(address);
    9316:	f04f 0400 	mov.w	r4, #0
    931a:	4603      	mov	r3, r0
    931c:	2001      	movs	r0, #1
    931e:	f363 0407 	bfi	r4, r3, #0, #8
    9322:	f005 f869 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9326:	f360 240f 	bfi	r4, r0, #8, #8
    if (factoryReset || settingsVersion == 0xffffu) {
    932a:	2d00      	cmp	r5, #0
    932c:	f001 82b3 	beq.w	a896 <readEEPROM(bool)+0x158a>
            writeSetting(BREATH_THR_ADDR, BREATH_THR_FACTORY);
    9330:	f44f 61af 	mov.w	r1, #1400	; 0x578
    9334:	2002      	movs	r0, #2
    9336:	f7ff ffcf 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BREATH_MAX_ADDR, BREATH_MAX_FACTORY);
    933a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
    933e:	2004      	movs	r0, #4
    9340:	f7ff ffca 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PORTAM_THR_ADDR, PORTPR_THR_FACTORY);
    9344:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
    9348:	2006      	movs	r0, #6
    934a:	f7ff ffc5 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PORTAM_MAX_ADDR, PORTPR_MAX_FACTORY);
    934e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    9352:	2008      	movs	r0, #8
    9354:	f7ff ffc0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PITCHB_THR_ADDR, PITCHB_THR_FACTORY);
    9358:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    935c:	200a      	movs	r0, #10
    935e:	f7ff ffbb 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PITCHB_MAX_ADDR, PITCHB_MAX_FACTORY);
    9362:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9366:	200c      	movs	r0, #12
    9368:	f7ff ffb6 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(EXTRAC_THR_ADDR, EXTRAC_THR_FACTORY);
    936c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    9370:	2022      	movs	r0, #34	; 0x22
    9372:	f7ff ffb1 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(EXTRAC_MAX_ADDR, EXTRAC_MAX_FACTORY);
    9376:	f640 51ac 	movw	r1, #3500	; 0xdac
    937a:	2024      	movs	r0, #36	; 0x24
    937c:	f7ff ffac 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(CTOUCH_THR_ADDR, CTOUCH_THR_FACTORY);
    9380:	217d      	movs	r1, #125	; 0x7d
    9382:	202a      	movs	r0, #42	; 0x2a
    9384:	f7ff ffa8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(TRANSP_ADDR, TRANSP_FACTORY);
    9388:	210c      	movs	r1, #12
    938a:	200e      	movs	r0, #14
    938c:	f7ff ffa4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(MIDI_ADDR, MIDI_FACTORY);
    9390:	2101      	movs	r1, #1
    9392:	2010      	movs	r0, #16
    9394:	f7ff ffa0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BREATH_CC_ADDR, BREATH_CC_FACTORY);
    9398:	2102      	movs	r1, #2
    939a:	2012      	movs	r0, #18
    939c:	f7ff ff9c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BREATH_AT_ADDR, BREATH_AT_FACTORY);
    93a0:	2100      	movs	r1, #0
    93a2:	2014      	movs	r0, #20
    93a4:	f7ff ff98 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VELOCITY_ADDR, VELOCITY_FACTORY);
    93a8:	2100      	movs	r1, #0
    93aa:	2016      	movs	r0, #22
    93ac:	f7ff ff94 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PORTAM_ADDR, PORTAM_FACTORY);
    93b0:	2102      	movs	r1, #2
    93b2:	2018      	movs	r0, #24
    93b4:	f7ff ff90 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PB_ADDR, PB_FACTORY);
    93b8:	2101      	movs	r1, #1
    93ba:	201a      	movs	r0, #26
    93bc:	f7ff ff8c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(EXTRA_ADDR, EXTRA_FACTORY);
    93c0:	2101      	movs	r1, #1
    93c2:	201c      	movs	r0, #28
    93c4:	f7ff ff88 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIBRATO_ADDR, VIBRATO_FACTORY);
    93c8:	2104      	movs	r1, #4
    93ca:	201e      	movs	r0, #30
    93cc:	f7ff ff84 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(DEGLITCH_ADDR, DEGLITCH_FACTORY);
    93d0:	2114      	movs	r1, #20
    93d2:	2020      	movs	r0, #32
    93d4:	f7ff ff80 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PATCH_ADDR, PATCH_FACTORY);
    93d8:	2101      	movs	r1, #1
    93da:	2026      	movs	r0, #38	; 0x26
    93dc:	f7ff ff7c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(OCTAVE_ADDR, OCTAVE_FACTORY);
    93e0:	2103      	movs	r1, #3
    93e2:	2028      	movs	r0, #40	; 0x28
    93e4:	f7ff ff78 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BREATHCURVE_ADDR, BREATHCURVE_FACTORY);
    93e8:	2104      	movs	r1, #4
    93ea:	202c      	movs	r0, #44	; 0x2c
    93ec:	f7ff ff74 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VEL_SMP_DL_ADDR, VEL_SMP_DL_FACTORY);
    93f0:	2114      	movs	r1, #20
    93f2:	202e      	movs	r0, #46	; 0x2e
    93f4:	f7ff ff70 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VEL_BIAS_ADDR, VEL_BIAS_FACTORY);
    93f8:	2100      	movs	r1, #0
    93fa:	2030      	movs	r0, #48	; 0x30
    93fc:	f7ff ff6c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PINKY_KEY_ADDR, PINKY_KEY_FACTORY);
    9400:	210c      	movs	r1, #12
    9402:	2032      	movs	r0, #50	; 0x32
    9404:	f7ff ff68 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FP1_ADDR, 0);
    9408:	2100      	movs	r1, #0
    940a:	2034      	movs	r0, #52	; 0x34
    940c:	f7ff ff64 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FP2_ADDR, 0);
    9410:	2100      	movs	r1, #0
    9412:	2036      	movs	r0, #54	; 0x36
    9414:	f7ff ff60 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FP3_ADDR, 0);
    9418:	2100      	movs	r1, #0
    941a:	2038      	movs	r0, #56	; 0x38
    941c:	f7ff ff5c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FP4_ADDR, 0);
    9420:	2100      	movs	r1, #0
    9422:	203a      	movs	r0, #58	; 0x3a
    9424:	f7ff ff58 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FP5_ADDR, 0);
    9428:	2100      	movs	r1, #0
    942a:	203c      	movs	r0, #60	; 0x3c
    942c:	f7ff ff54 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FP6_ADDR, 0);
    9430:	2100      	movs	r1, #0
    9432:	203e      	movs	r0, #62	; 0x3e
    9434:	f7ff ff50 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FP7_ADDR, 0);
    9438:	2100      	movs	r1, #0
    943a:	2040      	movs	r0, #64	; 0x40
    943c:	f7ff ff4c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(DIPSW_BITS_ADDR, DIPSW_BITS_FACTORY);
    9440:	2100      	movs	r1, #0
    9442:	2042      	movs	r0, #66	; 0x42
    9444:	f7ff ff48 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PARAL_ADDR, PARAL_FACTORY);
    9448:	211f      	movs	r1, #31
    944a:	2044      	movs	r0, #68	; 0x44
    944c:	f7ff ff44 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTN1_ADDR, ROTN1_FACTORY);
    9450:	2113      	movs	r1, #19
    9452:	2046      	movs	r0, #70	; 0x46
    9454:	f7ff ff40 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTN2_ADDR, ROTN2_FACTORY);
    9458:	210e      	movs	r1, #14
    945a:	2048      	movs	r0, #72	; 0x48
    945c:	f7ff ff3c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTN3_ADDR, ROTN3_FACTORY);
    9460:	2111      	movs	r1, #17
    9462:	204a      	movs	r0, #74	; 0x4a
    9464:	f7ff ff38 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTN4_ADDR, ROTN4_FACTORY);
    9468:	210a      	movs	r1, #10
    946a:	204c      	movs	r0, #76	; 0x4c
    946c:	f7ff ff34 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PRIO_ADDR, PRIO_FACTORY);
    9470:	2100      	movs	r1, #0
    9472:	204e      	movs	r0, #78	; 0x4e
    9474:	f7ff ff30 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB_SENS_ADDR, VIB_SENS_FACTORY);
    9478:	2106      	movs	r1, #6
    947a:	2050      	movs	r0, #80	; 0x50
    947c:	f7ff ff2c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB_RETN_ADDR, VIB_RETN_FACTORY);
    9480:	2102      	movs	r1, #2
    9482:	2052      	movs	r0, #82	; 0x52
    9484:	f7ff ff28 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB_SQUELCH_ADDR, VIB_SQUELCH_FACTORY);
    9488:	210c      	movs	r1, #12
    948a:	2054      	movs	r0, #84	; 0x54
    948c:	f7ff ff24 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB_DIRECTION_ADDR, VIB_DIRECTION_FACTORY);
    9490:	2100      	movs	r1, #0
    9492:	2056      	movs	r0, #86	; 0x56
    9494:	f7ff ff20 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BREATH_CC2_ADDR, BREATH_CC2_FACTORY);
    9498:	2100      	movs	r1, #0
    949a:	2058      	movs	r0, #88	; 0x58
    949c:	f7ff ff1c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BREATH_CC2_RISE_ADDR, BREATH_CC2_RISE_FACTORY);
    94a0:	2101      	movs	r1, #1
    94a2:	205a      	movs	r0, #90	; 0x5a
    94a4:	f7ff ff18 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB_SENS_BITE_ADDR, VIB_SENS_BITE_FACTORY);
    94a8:	2108      	movs	r1, #8
    94aa:	205c      	movs	r0, #92	; 0x5c
    94ac:	f7ff ff14 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB_SQUELCH_BITE_ADDR, VIB_SQUELCH_BITE_FACTORY);
    94b0:	210f      	movs	r1, #15
    94b2:	205e      	movs	r0, #94	; 0x5e
    94b4:	f7ff ff10 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB_CONTROL_ADDR, VIB_CONTROL_FACTORY);
    94b8:	2100      	movs	r1, #0
    94ba:	2060      	movs	r0, #96	; 0x60
    94bc:	f7ff ff0c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(TRILL3_INTERVAL_ADDR, TRILL3_INTERVAL_FACTORY);
    94c0:	2104      	movs	r1, #4
    94c2:	2062      	movs	r0, #98	; 0x62
    94c4:	f7ff ff08 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(DAC_MODE_ADDR, DAC_MODE_FACTORY);
    94c8:	2101      	movs	r1, #1
    94ca:	2064      	movs	r0, #100	; 0x64
    94cc:	f7ff ff04 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(EXTRA2_ADDR, EXTRA2_FACTORY);
    94d0:	2100      	movs	r1, #0
    94d2:	2066      	movs	r0, #102	; 0x66
    94d4:	f7ff ff00 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(LEVEL_CC_ADDR, LEVEL_CC_FACTORY);
    94d8:	210b      	movs	r1, #11
    94da:	2068      	movs	r0, #104	; 0x68
    94dc:	f7ff fefc 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(LEVEL_VAL_ADDR, LEVEL_VAL_FACTORY);
    94e0:	217f      	movs	r1, #127	; 0x7f
    94e2:	206a      	movs	r0, #106	; 0x6a
    94e4:	f7ff fef8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FINGER_ADDR, FINGER_FACTORY);
    94e8:	2100      	movs	r1, #0
    94ea:	206c      	movs	r0, #108	; 0x6c
    94ec:	f7ff fef4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(LPINKY3_ADDR, LPINKY3_FACTORY);
    94f0:	2100      	movs	r1, #0
    94f2:	206e      	movs	r0, #110	; 0x6e
    94f4:	f7ff fef0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BATTYPE_ADDR, BATTYPE_FACTORY);
    94f8:	2100      	movs	r1, #0
    94fa:	2070      	movs	r0, #112	; 0x70
    94fc:	f7ff feec 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(HARMSET_ADDR, HARMSET_FACTORY);
    9500:	2100      	movs	r1, #0
    9502:	2072      	movs	r0, #114	; 0x72
    9504:	f7ff fee8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(HARMSEL_ADDR, HARMSEL_FACTORY);
    9508:	2100      	movs	r1, #0
    950a:	2074      	movs	r0, #116	; 0x74
    950c:	f7ff fee4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PARAB_ADDR, PARAB_FACTORY);
    9510:	211f      	movs	r1, #31
    9512:	2076      	movs	r0, #118	; 0x76
    9514:	f7ff fee0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTB1_ADDR, ROTB1_FACTORY);
    9518:	2113      	movs	r1, #19
    951a:	2078      	movs	r0, #120	; 0x78
    951c:	f7ff fedc 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTB2_ADDR, ROTB2_FACTORY);
    9520:	210e      	movs	r1, #14
    9522:	207a      	movs	r0, #122	; 0x7a
    9524:	f7ff fed8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTB3_ADDR, ROTB3_FACTORY);
    9528:	2111      	movs	r1, #17
    952a:	207c      	movs	r0, #124	; 0x7c
    952c:	f7ff fed4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTB4_ADDR, ROTB4_FACTORY);
    9530:	210a      	movs	r1, #10
    9532:	207e      	movs	r0, #126	; 0x7e
    9534:	f7ff fed0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PARAC_ADDR, PARAC_FACTORY);
    9538:	211f      	movs	r1, #31
    953a:	2080      	movs	r0, #128	; 0x80
    953c:	f7ff fecc 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTC1_ADDR, ROTC1_FACTORY);
    9540:	2113      	movs	r1, #19
    9542:	2082      	movs	r0, #130	; 0x82
    9544:	f7ff fec8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTC2_ADDR, ROTC2_FACTORY);
    9548:	210e      	movs	r1, #14
    954a:	2084      	movs	r0, #132	; 0x84
    954c:	f7ff fec4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTC3_ADDR, ROTC3_FACTORY);
    9550:	2111      	movs	r1, #17
    9552:	2086      	movs	r0, #134	; 0x86
    9554:	f7ff fec0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROTC4_ADDR, ROTC4_FACTORY);
    9558:	210a      	movs	r1, #10
    955a:	2088      	movs	r0, #136	; 0x88
    955c:	f7ff febc 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(POLYSEL_ADDR, POLYSEL_FACTORY);
    9560:	2100      	movs	r1, #0
    9562:	208a      	movs	r0, #138	; 0x8a
    9564:	f7ff feb8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FWCTYPE_ADDR, FWCTYPE_FACTORY);
    9568:	2100      	movs	r1, #0
    956a:	208c      	movs	r0, #140	; 0x8c
    956c:	f7ff feb4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(HMZKEY_ADDR, HMZKEY_FACTORY);
    9570:	2100      	movs	r1, #0
    9572:	2096      	movs	r0, #150	; 0x96
    9574:	f7ff feb0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FWCLCH_ADDR, FWCLCH_FACTORY);
    9578:	2100      	movs	r1, #0
    957a:	2098      	movs	r0, #152	; 0x98
    957c:	f7ff feac 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(FWCDP2_ADDR, FWCDP2_FACTORY);
    9580:	2100      	movs	r1, #0
    9582:	209a      	movs	r0, #154	; 0x9a
    9584:	f7ff fea8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(HMZLIMIT_ADDR, HMZLIMIT_FACTORY);
    9588:	2105      	movs	r1, #5
    958a:	209c      	movs	r0, #156	; 0x9c
    958c:	f7ff fea4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BRINTERV_ADDR, BRINTERV_FACTORY);
    9590:	2106      	movs	r1, #6
    9592:	209e      	movs	r0, #158	; 0x9e
    9594:	f7ff fea0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(OTFKEY_ADDR, OTFKEY_FACTORY);
    9598:	2100      	movs	r1, #0
    959a:	20a0      	movs	r0, #160	; 0xa0
    959c:	f7ff fe9c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(PORTLIMIT_ADDR, PORTLIMIT_FACTORY);
    95a0:	217f      	movs	r1, #127	; 0x7f
    95a2:	20a2      	movs	r0, #162	; 0xa2
    95a4:	f7ff fe98 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(LEVER_THR_ADDR, LEVER_THR_FACTORY);
    95a8:	f240 61a4 	movw	r1, #1700	; 0x6a4
    95ac:	20a4      	movs	r0, #164	; 0xa4
    95ae:	f7ff fe93 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(LEVER_MAX_ADDR, LEVER_MAX_FACTORY);
    95b2:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    95b6:	20a6      	movs	r0, #166	; 0xa6
    95b8:	f7ff fe8e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BRHARMSET_ADDR, BRHARMSET_FACTORY);
    95bc:	2100      	movs	r1, #0
    95be:	20a8      	movs	r0, #168	; 0xa8
    95c0:	f7ff fe8a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BRHARMSEL_ADDR, BRHARMSEL_FACTORY);
    95c4:	2100      	movs	r1, #0
    95c6:	20aa      	movs	r0, #170	; 0xaa
    95c8:	f7ff fe86 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BITECTL_ADDR, BITECTL_FACTORY);
    95cc:	2102      	movs	r1, #2
    95ce:	20ac      	movs	r0, #172	; 0xac
    95d0:	f7ff fe82 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(BITECC_ADDR, BITECC_FACTORY);
    95d4:	2101      	movs	r1, #1
    95d6:	20ae      	movs	r0, #174	; 0xae
    95d8:	f7ff fe7e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(LEVERCTL_ADDR, LEVERCTL_FACTORY);
    95dc:	2101      	movs	r1, #1
    95de:	20b0      	movs	r0, #176	; 0xb0
    95e0:	f7ff fe7a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(LEVERCC_ADDR, LEVERCC_FACTORY);
    95e4:	210b      	movs	r1, #11
    95e6:	20b2      	movs	r0, #178	; 0xb2
    95e8:	f7ff fe76 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(CVTUNE_ADDR, CVTUNE_FACTORY);
    95ec:	2164      	movs	r1, #100	; 0x64
    95ee:	20b4      	movs	r0, #180	; 0xb4
    95f0:	f7ff fe72 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(CVSCALE_ADDR, CVSCALE_FACTORY);
    95f4:	2164      	movs	r1, #100	; 0x64
    95f6:	20b6      	movs	r0, #182	; 0xb6
    95f8:	f7ff fe6e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(CVRATE_ADDR, CVRATE_FACTORY);
    95fc:	2103      	movs	r1, #3
    95fe:	20b8      	movs	r0, #184	; 0xb8
    9600:	f7ff fe6a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(ROLLER_ADDR, ROLLER_FACTORY);
    9604:	2101      	movs	r1, #1
    9606:	20ba      	movs	r0, #186	; 0xba
    9608:	f7ff fe66 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(GLISSSET_ADDR, GLISSSEL_FACTORY);  // ws
    960c:	2100      	movs	r1, #0
    960e:	20bc      	movs	r0, #188	; 0xbc
    9610:	f7ff fe62 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB2BR_DIRECTION_ADDR, VIB2BRDIR_FACTORY);  // ws
    9614:	2101      	movs	r1, #1
    9616:	20be      	movs	r0, #190	; 0xbe
    9618:	f7ff fe5e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
            writeSetting(VIB2BR_AMOUNT_ADDR, VIB2BRAMT_FACTORY);  // ws
    961c:	210a      	movs	r1, #10
    961e:	20c0      	movs	r0, #192	; 0xc0
    9620:	f7ff fe5a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        writeSetting(VERSION_ADDR, EEPROM_VERSION);
    9624:	212d      	movs	r1, #45	; 0x2d
    9626:	2000      	movs	r0, #0
    9628:	f7ff fe56 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
    962c:	2002      	movs	r0, #2
    962e:	f004 fee3 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9632:	f04f 0400 	mov.w	r4, #0
    9636:	4603      	mov	r3, r0
    9638:	2003      	movs	r0, #3
    963a:	f363 0407 	bfi	r4, r3, #0, #8
    963e:	f004 fedb 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9642:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9646:	b2a4      	uxth	r4, r4
}

uint16_t readSettingBounded(const uint16_t address, const uint16_t min, const uint16_t max, const uint16_t defaultValue) {
    uint16_t val = readSetting(address);
    if(val < min || val > max) {
    9648:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    964c:	d306      	bcc.n	965c <readEEPROM(bool)+0x350>
        val = defaultValue;
        writeSetting(address, val);
    964e:	f44f 61af 	mov.w	r1, #1400	; 0x578
    9652:	2002      	movs	r0, #2
    9654:	f7ff fe40 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9658:	f44f 64af 	mov.w	r4, #1400	; 0x578
    breathThrVal    = readSettingBounded(BREATH_THR_ADDR, breathLoLimit, breathHiLimit, BREATH_THR_FACTORY);
    965c:	4bd2      	ldr	r3, [pc, #840]	; (99a8 <readEEPROM(bool)+0x69c>)
    965e:	2004      	movs	r0, #4
    9660:	801c      	strh	r4, [r3, #0]
    9662:	f004 fec9 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9666:	f04f 0400 	mov.w	r4, #0
    966a:	4603      	mov	r3, r0
    966c:	2005      	movs	r0, #5
    966e:	f363 0407 	bfi	r4, r3, #0, #8
    9672:	f004 fec1 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9676:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    967a:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    967c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    9680:	d306      	bcc.n	9690 <readEEPROM(bool)+0x384>
        writeSetting(address, val);
    9682:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
    9686:	2004      	movs	r0, #4
    9688:	f7ff fe26 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    968c:	f44f 647a 	mov.w	r4, #4000	; 0xfa0
    breathMaxVal    = readSettingBounded(BREATH_MAX_ADDR, breathLoLimit, breathHiLimit, BREATH_MAX_FACTORY);
    9690:	4bc6      	ldr	r3, [pc, #792]	; (99ac <readEEPROM(bool)+0x6a0>)
    9692:	2006      	movs	r0, #6
    9694:	801c      	strh	r4, [r3, #0]
    9696:	f004 feaf 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    969a:	f04f 0400 	mov.w	r4, #0
    969e:	4603      	mov	r3, r0
    96a0:	2007      	movs	r0, #7
    96a2:	f363 0407 	bfi	r4, r3, #0, #8
    96a6:	f004 fea7 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    96aa:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    96ae:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    96b0:	f5a4 732f 	sub.w	r3, r4, #700	; 0x2bc
    96b4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    96b8:	d906      	bls.n	96c8 <readEEPROM(bool)+0x3bc>
        writeSetting(address, val);
    96ba:	f640 2128 	movw	r1, #2600	; 0xa28
    96be:	2006      	movs	r0, #6
    96c0:	f7ff fe0a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    96c4:	f640 2428 	movw	r4, #2600	; 0xa28
    portamThrVal    = readSettingBounded(PORTAM_THR_ADDR, portamLoLimit, portamHiLimit, PORTAM_THR_FACTORY);
    96c8:	4bb9      	ldr	r3, [pc, #740]	; (99b0 <readEEPROM(bool)+0x6a4>)
    96ca:	2008      	movs	r0, #8
    96cc:	801c      	strh	r4, [r3, #0]
    96ce:	f004 fe93 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    96d2:	f04f 0400 	mov.w	r4, #0
    96d6:	4603      	mov	r3, r0
    96d8:	2009      	movs	r0, #9
    96da:	f363 0407 	bfi	r4, r3, #0, #8
    96de:	f004 fe8b 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    96e2:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    96e6:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    96e8:	f5a4 732f 	sub.w	r3, r4, #700	; 0x2bc
    96ec:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    96f0:	d906      	bls.n	9700 <readEEPROM(bool)+0x3f4>
        writeSetting(address, val);
    96f2:	f640 41e4 	movw	r1, #3300	; 0xce4
    96f6:	2008      	movs	r0, #8
    96f8:	f7ff fdee 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    96fc:	f640 44e4 	movw	r4, #3300	; 0xce4
    portamMaxVal    = readSettingBounded(PORTAM_MAX_ADDR, portamLoLimit, portamHiLimit, PORTAM_MAX_FACTORY);
    9700:	4bac      	ldr	r3, [pc, #688]	; (99b4 <readEEPROM(bool)+0x6a8>)
    9702:	200a      	movs	r0, #10
    9704:	801c      	strh	r4, [r3, #0]
    9706:	f004 fe77 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    970a:	f04f 0400 	mov.w	r4, #0
    970e:	4603      	mov	r3, r0
    9710:	200b      	movs	r0, #11
    9712:	f363 0407 	bfi	r4, r3, #0, #8
    9716:	f004 fe6f 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    971a:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    971e:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9720:	f5a4 73fa 	sub.w	r3, r4, #500	; 0x1f4
    9724:	b29b      	uxth	r3, r3
    9726:	f640 52ac 	movw	r2, #3500	; 0xdac
    972a:	4293      	cmp	r3, r2
    972c:	d906      	bls.n	973c <readEEPROM(bool)+0x430>
        writeSetting(address, val);
    972e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    9732:	200a      	movs	r0, #10
    9734:	f7ff fdd0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9738:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    pitchbThrVal    = readSettingBounded(PITCHB_THR_ADDR, pitchbLoLimit, pitchbHiLimit, PITCHB_THR_FACTORY);
    973c:	4b9e      	ldr	r3, [pc, #632]	; (99b8 <readEEPROM(bool)+0x6ac>)
    973e:	200c      	movs	r0, #12
    9740:	801c      	strh	r4, [r3, #0]
    9742:	f004 fe59 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9746:	f04f 0400 	mov.w	r4, #0
    974a:	4603      	mov	r3, r0
    974c:	200d      	movs	r0, #13
    974e:	f363 0407 	bfi	r4, r3, #0, #8
    9752:	f004 fe51 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9756:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    975a:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    975c:	f5a4 73fa 	sub.w	r3, r4, #500	; 0x1f4
    9760:	b29b      	uxth	r3, r3
    9762:	f640 52ac 	movw	r2, #3500	; 0xdac
    9766:	4293      	cmp	r3, r2
    9768:	d906      	bls.n	9778 <readEEPROM(bool)+0x46c>
        writeSetting(address, val);
    976a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    976e:	200c      	movs	r0, #12
    9770:	f7ff fdb2 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9774:	f640 34b8 	movw	r4, #3000	; 0xbb8
    pitchbMaxVal    = readSettingBounded(PITCHB_MAX_ADDR, pitchbLoLimit, pitchbHiLimit, PITCHB_MAX_FACTORY);
    9778:	4b90      	ldr	r3, [pc, #576]	; (99bc <readEEPROM(bool)+0x6b0>)
    977a:	200e      	movs	r0, #14
    977c:	801c      	strh	r4, [r3, #0]
    977e:	f004 fe3b 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9782:	f04f 0400 	mov.w	r4, #0
    9786:	4603      	mov	r3, r0
    9788:	200f      	movs	r0, #15
    978a:	f363 0407 	bfi	r4, r3, #0, #8
    978e:	f004 fe33 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9792:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9796:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9798:	2c18      	cmp	r4, #24
    979a:	d904      	bls.n	97a6 <readEEPROM(bool)+0x49a>
        writeSetting(address, val);
    979c:	210c      	movs	r1, #12
    979e:	200e      	movs	r0, #14
    97a0:	f7ff fd9a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    97a4:	240c      	movs	r4, #12
    transpose       = readSettingBounded(TRANSP_ADDR, 0, 24, TRANSP_FACTORY);
    97a6:	4b86      	ldr	r3, [pc, #536]	; (99c0 <readEEPROM(bool)+0x6b4>)
    97a8:	2010      	movs	r0, #16
    97aa:	801c      	strh	r4, [r3, #0]
    97ac:	f004 fe24 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    97b0:	f04f 0400 	mov.w	r4, #0
    97b4:	4603      	mov	r3, r0
    97b6:	2011      	movs	r0, #17
    97b8:	f363 0407 	bfi	r4, r3, #0, #8
    97bc:	f004 fe1c 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    97c0:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    97c4:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    97c6:	1e63      	subs	r3, r4, #1
    97c8:	2b0f      	cmp	r3, #15
    97ca:	d904      	bls.n	97d6 <readEEPROM(bool)+0x4ca>
        writeSetting(address, val);
    97cc:	2101      	movs	r1, #1
    97ce:	2010      	movs	r0, #16
    97d0:	f7ff fd82 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    97d4:	2401      	movs	r4, #1
    MIDIchannel     = readSettingBounded(MIDI_ADDR, 1, 16, MIDI_FACTORY);
    97d6:	4b7b      	ldr	r3, [pc, #492]	; (99c4 <readEEPROM(bool)+0x6b8>)
    97d8:	2012      	movs	r0, #18
    97da:	801c      	strh	r4, [r3, #0]
    97dc:	f004 fe0c 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    97e0:	f04f 0400 	mov.w	r4, #0
    97e4:	4603      	mov	r3, r0
    97e6:	2013      	movs	r0, #19
    97e8:	f363 0407 	bfi	r4, r3, #0, #8
    97ec:	f004 fe04 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    97f0:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    97f4:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    97f6:	2c0a      	cmp	r4, #10
    97f8:	d904      	bls.n	9804 <readEEPROM(bool)+0x4f8>
        writeSetting(address, val);
    97fa:	2102      	movs	r1, #2
    97fc:	2012      	movs	r0, #18
    97fe:	f7ff fd6b 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9802:	2402      	movs	r4, #2
    breathCC        = readSettingBounded(BREATH_CC_ADDR, 0, 10, BREATH_CC_FACTORY);
    9804:	4b70      	ldr	r3, [pc, #448]	; (99c8 <readEEPROM(bool)+0x6bc>)
    9806:	2014      	movs	r0, #20
    9808:	801c      	strh	r4, [r3, #0]
    980a:	f004 fdf5 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    980e:	f04f 0400 	mov.w	r4, #0
    9812:	4603      	mov	r3, r0
    9814:	2015      	movs	r0, #21
    9816:	f363 0407 	bfi	r4, r3, #0, #8
    981a:	f004 fded 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    981e:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9822:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9824:	2c01      	cmp	r4, #1
    9826:	d904      	bls.n	9832 <readEEPROM(bool)+0x526>
        writeSetting(address, val);
    9828:	2100      	movs	r1, #0
    982a:	2014      	movs	r0, #20
    982c:	f7ff fd54 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9830:	2400      	movs	r4, #0
    breathAT        = readSettingBounded(BREATH_AT_ADDR, 0, 1, BREATH_AT_FACTORY);
    9832:	4b66      	ldr	r3, [pc, #408]	; (99cc <readEEPROM(bool)+0x6c0>)
    9834:	2016      	movs	r0, #22
    9836:	801c      	strh	r4, [r3, #0]
    9838:	f004 fdde 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    983c:	f04f 0400 	mov.w	r4, #0
    9840:	4603      	mov	r3, r0
    9842:	2017      	movs	r0, #23
    9844:	f363 0407 	bfi	r4, r3, #0, #8
    9848:	f004 fdd6 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    984c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9850:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9852:	2c7f      	cmp	r4, #127	; 0x7f
    9854:	d904      	bls.n	9860 <readEEPROM(bool)+0x554>
        writeSetting(address, val);
    9856:	2100      	movs	r1, #0
    9858:	2016      	movs	r0, #22
    985a:	f7ff fd3d 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    985e:	2400      	movs	r4, #0
    velocity        = readSettingBounded(VELOCITY_ADDR, 0, 127, VELOCITY_FACTORY);
    9860:	4b5b      	ldr	r3, [pc, #364]	; (99d0 <readEEPROM(bool)+0x6c4>)
    9862:	2018      	movs	r0, #24
    9864:	801c      	strh	r4, [r3, #0]
    9866:	f004 fdc7 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    986a:	f04f 0400 	mov.w	r4, #0
    986e:	4603      	mov	r3, r0
    9870:	2019      	movs	r0, #25
    9872:	f363 0407 	bfi	r4, r3, #0, #8
    9876:	f004 fdbf 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    987a:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    987e:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9880:	2c05      	cmp	r4, #5
    9882:	d904      	bls.n	988e <readEEPROM(bool)+0x582>
        writeSetting(address, val);
    9884:	2102      	movs	r1, #2
    9886:	2018      	movs	r0, #24
    9888:	f7ff fd26 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    988c:	2402      	movs	r4, #2
    portamento      = readSettingBounded(PORTAM_ADDR, 0, 5, PORTAM_FACTORY);
    988e:	4b51      	ldr	r3, [pc, #324]	; (99d4 <readEEPROM(bool)+0x6c8>)
    9890:	201a      	movs	r0, #26
    9892:	801c      	strh	r4, [r3, #0]
    9894:	f004 fdb0 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9898:	f04f 0400 	mov.w	r4, #0
    989c:	4603      	mov	r3, r0
    989e:	201b      	movs	r0, #27
    98a0:	f363 0407 	bfi	r4, r3, #0, #8
    98a4:	f004 fda8 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    98a8:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    98ac:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    98ae:	2c0c      	cmp	r4, #12
    98b0:	d904      	bls.n	98bc <readEEPROM(bool)+0x5b0>
        writeSetting(address, val);
    98b2:	2101      	movs	r1, #1
    98b4:	201a      	movs	r0, #26
    98b6:	f7ff fd0f 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    98ba:	2401      	movs	r4, #1
    PBdepth         = readSettingBounded(PB_ADDR, 0, 12, PB_FACTORY);
    98bc:	4b46      	ldr	r3, [pc, #280]	; (99d8 <readEEPROM(bool)+0x6cc>)
    98be:	201c      	movs	r0, #28
    98c0:	801c      	strh	r4, [r3, #0]
    98c2:	f004 fd99 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    98c6:	f04f 0400 	mov.w	r4, #0
    98ca:	4603      	mov	r3, r0
    98cc:	201d      	movs	r0, #29
    98ce:	f363 0407 	bfi	r4, r3, #0, #8
    98d2:	f004 fd91 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    98d6:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    98da:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    98dc:	2c04      	cmp	r4, #4
    98de:	d904      	bls.n	98ea <readEEPROM(bool)+0x5de>
        writeSetting(address, val);
    98e0:	2101      	movs	r1, #1
    98e2:	201c      	movs	r0, #28
    98e4:	f7ff fcf8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    98e8:	2401      	movs	r4, #1
    extraCT         = readSettingBounded(EXTRA_ADDR, 0, 4, EXTRA_FACTORY);
    98ea:	4b3c      	ldr	r3, [pc, #240]	; (99dc <readEEPROM(bool)+0x6d0>)
    98ec:	201e      	movs	r0, #30
    98ee:	801c      	strh	r4, [r3, #0]
    98f0:	f004 fd82 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    98f4:	f04f 0400 	mov.w	r4, #0
    98f8:	4603      	mov	r3, r0
    98fa:	201f      	movs	r0, #31
    98fc:	f363 0407 	bfi	r4, r3, #0, #8
    9900:	f004 fd7a 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9904:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9908:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    990a:	2c09      	cmp	r4, #9
    990c:	d904      	bls.n	9918 <readEEPROM(bool)+0x60c>
        writeSetting(address, val);
    990e:	2104      	movs	r1, #4
    9910:	201e      	movs	r0, #30
    9912:	f7ff fce1 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9916:	2404      	movs	r4, #4
    vibrato         = readSettingBounded(VIBRATO_ADDR, 0, 9, VIBRATO_FACTORY);
    9918:	4b31      	ldr	r3, [pc, #196]	; (99e0 <readEEPROM(bool)+0x6d4>)
    991a:	2020      	movs	r0, #32
    991c:	801c      	strh	r4, [r3, #0]
    991e:	f004 fd6b 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9922:	f04f 0400 	mov.w	r4, #0
    9926:	4603      	mov	r3, r0
    9928:	2021      	movs	r0, #33	; 0x21
    992a:	f363 0407 	bfi	r4, r3, #0, #8
    992e:	f004 fd63 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9932:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9936:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9938:	2c46      	cmp	r4, #70	; 0x46
    993a:	d904      	bls.n	9946 <readEEPROM(bool)+0x63a>
        writeSetting(address, val);
    993c:	2114      	movs	r1, #20
    993e:	2020      	movs	r0, #32
    9940:	f7ff fcca 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9944:	2414      	movs	r4, #20
    deglitch        = readSettingBounded(DEGLITCH_ADDR, 0, 70, DEGLITCH_FACTORY);
    9946:	4b27      	ldr	r3, [pc, #156]	; (99e4 <readEEPROM(bool)+0x6d8>)
    9948:	2022      	movs	r0, #34	; 0x22
    994a:	801c      	strh	r4, [r3, #0]
    994c:	f004 fd54 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9950:	f04f 0400 	mov.w	r4, #0
    9954:	4603      	mov	r3, r0
    9956:	2023      	movs	r0, #35	; 0x23
    9958:	f363 0407 	bfi	r4, r3, #0, #8
    995c:	f004 fd4c 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9960:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9964:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9966:	f5a4 73fa 	sub.w	r3, r4, #500	; 0x1f4
    996a:	b29b      	uxth	r3, r3
    996c:	f640 52ac 	movw	r2, #3500	; 0xdac
    9970:	4293      	cmp	r3, r2
    9972:	d906      	bls.n	9982 <readEEPROM(bool)+0x676>
        writeSetting(address, val);
    9974:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    9978:	2022      	movs	r0, #34	; 0x22
    997a:	f7ff fcad 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    997e:	f44f 642f 	mov.w	r4, #2800	; 0xaf0
    extracThrVal    = readSettingBounded(EXTRAC_THR_ADDR, extracLoLimit, extracHiLimit, EXTRAC_THR_FACTORY);
    9982:	4b19      	ldr	r3, [pc, #100]	; (99e8 <readEEPROM(bool)+0x6dc>)
    9984:	2024      	movs	r0, #36	; 0x24
    9986:	801c      	strh	r4, [r3, #0]
    9988:	f004 fd36 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    998c:	f04f 0400 	mov.w	r4, #0
    9990:	4603      	mov	r3, r0
    9992:	2025      	movs	r0, #37	; 0x25
    9994:	f363 0407 	bfi	r4, r3, #0, #8
    9998:	f004 fd2e 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    999c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    99a0:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    99a2:	f5a4 73fa 	sub.w	r3, r4, #500	; 0x1f4
    99a6:	e021      	b.n	99ec <readEEPROM(bool)+0x6e0>
    99a8:	1fff9a4e 	.word	0x1fff9a4e
    99ac:	1fff9a4c 	.word	0x1fff9a4c
    99b0:	1fff9b88 	.word	0x1fff9b88
    99b4:	1fff9b86 	.word	0x1fff9b86
    99b8:	1fff9b78 	.word	0x1fff9b78
    99bc:	1fff9b76 	.word	0x1fff9b76
    99c0:	1fff9bec 	.word	0x1fff9bec
    99c4:	1fff9918 	.word	0x1fff9918
    99c8:	1fff9a1e 	.word	0x1fff9a1e
    99cc:	1fff9a1c 	.word	0x1fff9a1c
    99d0:	1fff9bf4 	.word	0x1fff9bf4
    99d4:	1fff9b8a 	.word	0x1fff9b8a
    99d8:	1fff991a 	.word	0x1fff991a
    99dc:	1fff9a94 	.word	0x1fff9a94
    99e0:	1fff9c1c 	.word	0x1fff9c1c
    99e4:	1fff9a86 	.word	0x1fff9a86
    99e8:	1fff9a9c 	.word	0x1fff9a9c
    99ec:	b29b      	uxth	r3, r3
    99ee:	f640 55ac 	movw	r5, #3500	; 0xdac
    99f2:	42ab      	cmp	r3, r5
    99f4:	d904      	bls.n	9a00 <readEEPROM(bool)+0x6f4>
        writeSetting(address, val);
    99f6:	4629      	mov	r1, r5
    99f8:	2024      	movs	r0, #36	; 0x24
    99fa:	f7ff fc6d 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    99fe:	462c      	mov	r4, r5
    extracMaxVal    = readSettingBounded(EXTRAC_MAX_ADDR, extracLoLimit, extracHiLimit, EXTRAC_MAX_FACTORY);
    9a00:	4bd4      	ldr	r3, [pc, #848]	; (9d54 <readEEPROM(bool)+0xa48>)
    9a02:	2026      	movs	r0, #38	; 0x26
    9a04:	801c      	strh	r4, [r3, #0]
    9a06:	f004 fcf7 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9a0a:	f04f 0400 	mov.w	r4, #0
    9a0e:	4603      	mov	r3, r0
    9a10:	2027      	movs	r0, #39	; 0x27
    9a12:	f363 0407 	bfi	r4, r3, #0, #8
    9a16:	f004 fcef 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9a1a:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9a1e:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9a20:	2c7f      	cmp	r4, #127	; 0x7f
    9a22:	d904      	bls.n	9a2e <readEEPROM(bool)+0x722>
        writeSetting(address, val);
    9a24:	2101      	movs	r1, #1
    9a26:	2026      	movs	r0, #38	; 0x26
    9a28:	f7ff fc56 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9a2c:	2401      	movs	r4, #1
    patch           = readSettingBounded(PATCH_ADDR, 0, 127, PATCH_FACTORY);
    9a2e:	4bca      	ldr	r3, [pc, #808]	; (9d58 <readEEPROM(bool)+0xa4c>)
    9a30:	2028      	movs	r0, #40	; 0x28
    9a32:	801c      	strh	r4, [r3, #0]
    9a34:	f004 fce0 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9a38:	f04f 0400 	mov.w	r4, #0
    9a3c:	4603      	mov	r3, r0
    9a3e:	2029      	movs	r0, #41	; 0x29
    9a40:	f363 0407 	bfi	r4, r3, #0, #8
    9a44:	f004 fcd8 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9a48:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9a4c:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9a4e:	2c06      	cmp	r4, #6
    9a50:	d904      	bls.n	9a5c <readEEPROM(bool)+0x750>
        writeSetting(address, val);
    9a52:	2103      	movs	r1, #3
    9a54:	2028      	movs	r0, #40	; 0x28
    9a56:	f7ff fc3f 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9a5a:	2403      	movs	r4, #3
    octave          = readSettingBounded(OCTAVE_ADDR, 0, 6, OCTAVE_FACTORY);
    9a5c:	4bbf      	ldr	r3, [pc, #764]	; (9d5c <readEEPROM(bool)+0xa50>)
    9a5e:	202a      	movs	r0, #42	; 0x2a
    9a60:	801c      	strh	r4, [r3, #0]
    9a62:	f004 fcc9 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9a66:	f04f 0400 	mov.w	r4, #0
    9a6a:	4603      	mov	r3, r0
    9a6c:	202b      	movs	r0, #43	; 0x2b
    9a6e:	f363 0407 	bfi	r4, r3, #0, #8
    9a72:	f004 fcc1 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9a76:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9a7a:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9a7c:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
    9a80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    9a84:	d904      	bls.n	9a90 <readEEPROM(bool)+0x784>
        writeSetting(address, val);
    9a86:	217d      	movs	r1, #125	; 0x7d
    9a88:	202a      	movs	r0, #42	; 0x2a
    9a8a:	f7ff fc25 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9a8e:	247d      	movs	r4, #125	; 0x7d
    ctouchThrVal    = readSettingBounded(CTOUCH_THR_ADDR, ctouchLoLimit, ctouchHiLimit, CTOUCH_THR_FACTORY);
    9a90:	4bb3      	ldr	r3, [pc, #716]	; (9d60 <readEEPROM(bool)+0xa54>)
    9a92:	202c      	movs	r0, #44	; 0x2c
    9a94:	801c      	strh	r4, [r3, #0]
    9a96:	f004 fcaf 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9a9a:	f04f 0400 	mov.w	r4, #0
    9a9e:	4603      	mov	r3, r0
    9aa0:	202d      	movs	r0, #45	; 0x2d
    9aa2:	f363 0407 	bfi	r4, r3, #0, #8
    9aa6:	f004 fca7 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9aaa:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9aae:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9ab0:	2c0c      	cmp	r4, #12
    9ab2:	d904      	bls.n	9abe <readEEPROM(bool)+0x7b2>
        writeSetting(address, val);
    9ab4:	2104      	movs	r1, #4
    9ab6:	202c      	movs	r0, #44	; 0x2c
    9ab8:	f7ff fc0e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9abc:	2404      	movs	r4, #4
    curve           = readSettingBounded(BREATHCURVE_ADDR, 0, 12, BREATHCURVE_FACTORY);
    9abe:	4ba9      	ldr	r3, [pc, #676]	; (9d64 <readEEPROM(bool)+0xa58>)
    9ac0:	202e      	movs	r0, #46	; 0x2e
    9ac2:	801c      	strh	r4, [r3, #0]
    9ac4:	f004 fc98 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9ac8:	f04f 0400 	mov.w	r4, #0
    9acc:	4603      	mov	r3, r0
    9ace:	202f      	movs	r0, #47	; 0x2f
    9ad0:	f363 0407 	bfi	r4, r3, #0, #8
    9ad4:	f004 fc90 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9ad8:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9adc:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9ade:	2c1e      	cmp	r4, #30
    9ae0:	d904      	bls.n	9aec <readEEPROM(bool)+0x7e0>
        writeSetting(address, val);
    9ae2:	2114      	movs	r1, #20
    9ae4:	202e      	movs	r0, #46	; 0x2e
    9ae6:	f7ff fbf7 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9aea:	2414      	movs	r4, #20
    velSmpDl        = readSettingBounded(VEL_SMP_DL_ADDR, 0, 30, VEL_SMP_DL_FACTORY);
    9aec:	4b9e      	ldr	r3, [pc, #632]	; (9d68 <readEEPROM(bool)+0xa5c>)
    9aee:	2030      	movs	r0, #48	; 0x30
    9af0:	801c      	strh	r4, [r3, #0]
    9af2:	f004 fc81 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9af6:	f04f 0400 	mov.w	r4, #0
    9afa:	4603      	mov	r3, r0
    9afc:	2031      	movs	r0, #49	; 0x31
    9afe:	f363 0407 	bfi	r4, r3, #0, #8
    9b02:	f004 fc79 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9b06:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9b0a:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9b0c:	2c09      	cmp	r4, #9
    9b0e:	d904      	bls.n	9b1a <readEEPROM(bool)+0x80e>
        writeSetting(address, val);
    9b10:	2100      	movs	r1, #0
    9b12:	2030      	movs	r0, #48	; 0x30
    9b14:	f7ff fbe0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9b18:	2400      	movs	r4, #0
    velBias         = readSettingBounded(VEL_BIAS_ADDR, 0, 9, VEL_BIAS_FACTORY);
    9b1a:	4b94      	ldr	r3, [pc, #592]	; (9d6c <readEEPROM(bool)+0xa60>)
    9b1c:	2032      	movs	r0, #50	; 0x32
    9b1e:	801c      	strh	r4, [r3, #0]
    9b20:	f004 fc6a 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9b24:	f04f 0400 	mov.w	r4, #0
    9b28:	4603      	mov	r3, r0
    9b2a:	2033      	movs	r0, #51	; 0x33
    9b2c:	f363 0407 	bfi	r4, r3, #0, #8
    9b30:	f004 fc62 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9b34:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9b38:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9b3a:	2c1f      	cmp	r4, #31
    9b3c:	d904      	bls.n	9b48 <readEEPROM(bool)+0x83c>
        writeSetting(address, val);
    9b3e:	210c      	movs	r1, #12
    9b40:	2032      	movs	r0, #50	; 0x32
    9b42:	f7ff fbc9 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9b46:	240c      	movs	r4, #12
    pinkySetting    = readSettingBounded(PINKY_KEY_ADDR, 0, 31, PINKY_KEY_FACTORY);
    9b48:	4b89      	ldr	r3, [pc, #548]	; (9d70 <readEEPROM(bool)+0xa64>)
    9b4a:	2034      	movs	r0, #52	; 0x34
    9b4c:	801c      	strh	r4, [r3, #0]
    9b4e:	f004 fc53 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9b52:	f04f 0400 	mov.w	r4, #0
    9b56:	4603      	mov	r3, r0
    9b58:	2035      	movs	r0, #53	; 0x35
    9b5a:	f363 0407 	bfi	r4, r3, #0, #8
    9b5e:	f004 fc4b 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9b62:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9b66:	b2a3      	uxth	r3, r4
    if(val < min || val > max) {
    9b68:	2b7f      	cmp	r3, #127	; 0x7f
    9b6a:	d904      	bls.n	9b76 <readEEPROM(bool)+0x86a>
        writeSetting(address, val);
    9b6c:	2100      	movs	r1, #0
    9b6e:	2034      	movs	r0, #52	; 0x34
    9b70:	f7ff fbb2 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9b74:	2300      	movs	r3, #0
    fastPatch[0]    = readSettingBounded(FP1_ADDR, 0, 127, 0);
    9b76:	4c7f      	ldr	r4, [pc, #508]	; (9d74 <readEEPROM(bool)+0xa68>)
    9b78:	2036      	movs	r0, #54	; 0x36
    9b7a:	8023      	strh	r3, [r4, #0]
    9b7c:	f004 fc3c 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9b80:	f04f 0500 	mov.w	r5, #0
    9b84:	4603      	mov	r3, r0
    9b86:	2037      	movs	r0, #55	; 0x37
    9b88:	f363 0507 	bfi	r5, r3, #0, #8
    9b8c:	f004 fc34 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9b90:	f360 250f 	bfi	r5, r0, #8, #8
    return data.val;
    9b94:	b2ad      	uxth	r5, r5
    if(val < min || val > max) {
    9b96:	2d7f      	cmp	r5, #127	; 0x7f
    9b98:	d904      	bls.n	9ba4 <readEEPROM(bool)+0x898>
        writeSetting(address, val);
    9b9a:	2100      	movs	r1, #0
    9b9c:	2036      	movs	r0, #54	; 0x36
    9b9e:	f7ff fb9b 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9ba2:	2500      	movs	r5, #0
    fastPatch[1]    = readSettingBounded(FP2_ADDR, 0, 127, 0);
    9ba4:	8065      	strh	r5, [r4, #2]
    9ba6:	2038      	movs	r0, #56	; 0x38
    9ba8:	f004 fc26 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9bac:	f04f 0500 	mov.w	r5, #0
    9bb0:	4603      	mov	r3, r0
    9bb2:	2039      	movs	r0, #57	; 0x39
    9bb4:	f363 0507 	bfi	r5, r3, #0, #8
    9bb8:	f004 fc1e 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9bbc:	f360 250f 	bfi	r5, r0, #8, #8
    return data.val;
    9bc0:	b2ad      	uxth	r5, r5
    if(val < min || val > max) {
    9bc2:	2d7f      	cmp	r5, #127	; 0x7f
    9bc4:	d904      	bls.n	9bd0 <readEEPROM(bool)+0x8c4>
        writeSetting(address, val);
    9bc6:	2100      	movs	r1, #0
    9bc8:	2038      	movs	r0, #56	; 0x38
    9bca:	f7ff fb85 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9bce:	2500      	movs	r5, #0
    fastPatch[2]    = readSettingBounded(FP3_ADDR, 0, 127, 0);
    9bd0:	80a5      	strh	r5, [r4, #4]
    9bd2:	203a      	movs	r0, #58	; 0x3a
    9bd4:	f004 fc10 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9bd8:	f04f 0500 	mov.w	r5, #0
    9bdc:	4603      	mov	r3, r0
    9bde:	203b      	movs	r0, #59	; 0x3b
    9be0:	f363 0507 	bfi	r5, r3, #0, #8
    9be4:	f004 fc08 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9be8:	f360 250f 	bfi	r5, r0, #8, #8
    return data.val;
    9bec:	b2ad      	uxth	r5, r5
    if(val < min || val > max) {
    9bee:	2d7f      	cmp	r5, #127	; 0x7f
    9bf0:	d904      	bls.n	9bfc <readEEPROM(bool)+0x8f0>
        writeSetting(address, val);
    9bf2:	2100      	movs	r1, #0
    9bf4:	203a      	movs	r0, #58	; 0x3a
    9bf6:	f7ff fb6f 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9bfa:	2500      	movs	r5, #0
    fastPatch[3]    = readSettingBounded(FP4_ADDR, 0, 127, 0);
    9bfc:	80e5      	strh	r5, [r4, #6]
    9bfe:	203c      	movs	r0, #60	; 0x3c
    9c00:	f004 fbfa 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9c04:	f04f 0500 	mov.w	r5, #0
    9c08:	4603      	mov	r3, r0
    9c0a:	203d      	movs	r0, #61	; 0x3d
    9c0c:	f363 0507 	bfi	r5, r3, #0, #8
    9c10:	f004 fbf2 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9c14:	f360 250f 	bfi	r5, r0, #8, #8
    return data.val;
    9c18:	b2ad      	uxth	r5, r5
    if(val < min || val > max) {
    9c1a:	2d7f      	cmp	r5, #127	; 0x7f
    9c1c:	d904      	bls.n	9c28 <readEEPROM(bool)+0x91c>
        writeSetting(address, val);
    9c1e:	2100      	movs	r1, #0
    9c20:	203c      	movs	r0, #60	; 0x3c
    9c22:	f7ff fb59 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9c26:	2500      	movs	r5, #0
    fastPatch[4]    = readSettingBounded(FP5_ADDR, 0, 127, 0);
    9c28:	8125      	strh	r5, [r4, #8]
    9c2a:	203e      	movs	r0, #62	; 0x3e
    9c2c:	f004 fbe4 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9c30:	f04f 0500 	mov.w	r5, #0
    9c34:	4603      	mov	r3, r0
    9c36:	203f      	movs	r0, #63	; 0x3f
    9c38:	f363 0507 	bfi	r5, r3, #0, #8
    9c3c:	f004 fbdc 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9c40:	f360 250f 	bfi	r5, r0, #8, #8
    return data.val;
    9c44:	b2ad      	uxth	r5, r5
    if(val < min || val > max) {
    9c46:	2d7f      	cmp	r5, #127	; 0x7f
    9c48:	d904      	bls.n	9c54 <readEEPROM(bool)+0x948>
        writeSetting(address, val);
    9c4a:	2100      	movs	r1, #0
    9c4c:	203e      	movs	r0, #62	; 0x3e
    9c4e:	f7ff fb43 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9c52:	2500      	movs	r5, #0
    fastPatch[5]    = readSettingBounded(FP6_ADDR, 0, 127, 0);
    9c54:	8165      	strh	r5, [r4, #10]
    9c56:	2040      	movs	r0, #64	; 0x40
    9c58:	f004 fbce 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9c5c:	f04f 0500 	mov.w	r5, #0
    9c60:	4603      	mov	r3, r0
    9c62:	2041      	movs	r0, #65	; 0x41
    9c64:	f363 0507 	bfi	r5, r3, #0, #8
    9c68:	f004 fbc6 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9c6c:	f360 250f 	bfi	r5, r0, #8, #8
    return data.val;
    9c70:	b2ad      	uxth	r5, r5
    if(val < min || val > max) {
    9c72:	2d7f      	cmp	r5, #127	; 0x7f
    9c74:	d904      	bls.n	9c80 <readEEPROM(bool)+0x974>
        writeSetting(address, val);
    9c76:	2100      	movs	r1, #0
    9c78:	2040      	movs	r0, #64	; 0x40
    9c7a:	f7ff fb2d 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9c7e:	2500      	movs	r5, #0
    fastPatch[6]    = readSettingBounded(FP7_ADDR, 0, 127, 0);
    9c80:	81a5      	strh	r5, [r4, #12]
    9c82:	2042      	movs	r0, #66	; 0x42
    9c84:	f004 fbb8 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9c88:	f04f 0400 	mov.w	r4, #0
    9c8c:	4603      	mov	r3, r0
    9c8e:	2043      	movs	r0, #67	; 0x43
    9c90:	f363 0407 	bfi	r4, r3, #0, #8
    9c94:	f004 fbb0 	bl	e3f8 <eeprom_read_byte>
    dipSwBits       = readSetting(DIPSW_BITS_ADDR);
    9c98:	4d37      	ldr	r5, [pc, #220]	; (9d78 <readEEPROM(bool)+0xa6c>)
    data.v[1] = EEPROM.read(address+1);
    9c9a:	f360 240f 	bfi	r4, r0, #8, #8
    9c9e:	2044      	movs	r0, #68	; 0x44
    dipSwBits       = readSetting(DIPSW_BITS_ADDR);
    9ca0:	802c      	strh	r4, [r5, #0]
    9ca2:	f004 fba9 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9ca6:	f04f 0400 	mov.w	r4, #0
    9caa:	4603      	mov	r3, r0
    9cac:	2045      	movs	r0, #69	; 0x45
    9cae:	f363 0407 	bfi	r4, r3, #0, #8
    9cb2:	f004 fba1 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9cb6:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9cba:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9cbc:	2c30      	cmp	r4, #48	; 0x30
    9cbe:	d904      	bls.n	9cca <readEEPROM(bool)+0x9be>
        writeSetting(address, val);
    9cc0:	211f      	movs	r1, #31
    9cc2:	2044      	movs	r0, #68	; 0x44
    9cc4:	f7ff fb08 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9cc8:	241f      	movs	r4, #31
    rotations_a.parallel        = readSettingBounded(PARAL_ADDR, 0, 48, PARAL_FACTORY);
    9cca:	4e2c      	ldr	r6, [pc, #176]	; (9d7c <readEEPROM(bool)+0xa70>)
    9ccc:	2046      	movs	r0, #70	; 0x46
    9cce:	8034      	strh	r4, [r6, #0]
    9cd0:	f004 fb92 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9cd4:	f04f 0400 	mov.w	r4, #0
    9cd8:	4603      	mov	r3, r0
    9cda:	2047      	movs	r0, #71	; 0x47
    9cdc:	f363 0407 	bfi	r4, r3, #0, #8
    9ce0:	f004 fb8a 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9ce4:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9ce8:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9cea:	2c30      	cmp	r4, #48	; 0x30
    9cec:	d904      	bls.n	9cf8 <readEEPROM(bool)+0x9ec>
        writeSetting(address, val);
    9cee:	2113      	movs	r1, #19
    9cf0:	2046      	movs	r0, #70	; 0x46
    9cf2:	f7ff faf1 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9cf6:	2413      	movs	r4, #19
    rotations_a.rotations[0]    = readSettingBounded(ROTN1_ADDR, 0, 48, ROTN1_FACTORY);
    9cf8:	8074      	strh	r4, [r6, #2]
    9cfa:	2048      	movs	r0, #72	; 0x48
    9cfc:	f004 fb7c 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9d00:	f04f 0400 	mov.w	r4, #0
    9d04:	4603      	mov	r3, r0
    9d06:	2049      	movs	r0, #73	; 0x49
    9d08:	f363 0407 	bfi	r4, r3, #0, #8
    9d0c:	f004 fb74 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9d10:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9d14:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9d16:	2c30      	cmp	r4, #48	; 0x30
    9d18:	d904      	bls.n	9d24 <readEEPROM(bool)+0xa18>
        writeSetting(address, val);
    9d1a:	210e      	movs	r1, #14
    9d1c:	2048      	movs	r0, #72	; 0x48
    9d1e:	f7ff fadb 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9d22:	240e      	movs	r4, #14
    rotations_a.rotations[1]    = readSettingBounded(ROTN2_ADDR, 0, 48, ROTN2_FACTORY);
    9d24:	80b4      	strh	r4, [r6, #4]
    9d26:	204a      	movs	r0, #74	; 0x4a
    9d28:	f004 fb66 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9d2c:	f04f 0400 	mov.w	r4, #0
    9d30:	4603      	mov	r3, r0
    9d32:	204b      	movs	r0, #75	; 0x4b
    9d34:	f363 0407 	bfi	r4, r3, #0, #8
    9d38:	f004 fb5e 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9d3c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9d40:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9d42:	2c30      	cmp	r4, #48	; 0x30
    9d44:	d91c      	bls.n	9d80 <readEEPROM(bool)+0xa74>
        writeSetting(address, val);
    9d46:	2111      	movs	r1, #17
    9d48:	204a      	movs	r0, #74	; 0x4a
    9d4a:	f7ff fac5 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9d4e:	2411      	movs	r4, #17
    9d50:	e016      	b.n	9d80 <readEEPROM(bool)+0xa74>
    9d52:	bf00      	nop
    9d54:	1fff9a9a 	.word	0x1fff9a9a
    9d58:	1fff9b62 	.word	0x1fff9b62
    9d5c:	1fff9b36 	.word	0x1fff9b36
    9d60:	1fff9a66 	.word	0x1fff9a66
    9d64:	1fff9a6c 	.word	0x1fff9a6c
    9d68:	1fff9bf2 	.word	0x1fff9bf2
    9d6c:	1fff9bf0 	.word	0x1fff9bf0
    9d70:	1fff9b74 	.word	0x1fff9b74
    9d74:	1fff9aa0 	.word	0x1fff9aa0
    9d78:	1fff9a88 	.word	0x1fff9a88
    9d7c:	1fff9ba0 	.word	0x1fff9ba0
    rotations_a.rotations[2]    = readSettingBounded(ROTN3_ADDR, 0, 48, ROTN3_FACTORY);
    9d80:	80f4      	strh	r4, [r6, #6]
    9d82:	204c      	movs	r0, #76	; 0x4c
    9d84:	f004 fb38 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9d88:	f04f 0400 	mov.w	r4, #0
    9d8c:	4603      	mov	r3, r0
    9d8e:	204d      	movs	r0, #77	; 0x4d
    9d90:	f363 0407 	bfi	r4, r3, #0, #8
    9d94:	f004 fb30 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9d98:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9d9c:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9d9e:	2c30      	cmp	r4, #48	; 0x30
    9da0:	d904      	bls.n	9dac <readEEPROM(bool)+0xaa0>
        writeSetting(address, val);
    9da2:	210a      	movs	r1, #10
    9da4:	204c      	movs	r0, #76	; 0x4c
    9da6:	f7ff fa97 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9daa:	240a      	movs	r4, #10
    rotations_a.rotations[3]    = readSettingBounded(ROTN4_ADDR, 0, 48, ROTN4_FACTORY);
    9dac:	8134      	strh	r4, [r6, #8]
    9dae:	204e      	movs	r0, #78	; 0x4e
    9db0:	f004 fb22 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9db4:	f04f 0400 	mov.w	r4, #0
    9db8:	4603      	mov	r3, r0
    9dba:	204f      	movs	r0, #79	; 0x4f
    9dbc:	f363 0407 	bfi	r4, r3, #0, #8
    9dc0:	f004 fb1a 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9dc4:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9dc8:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9dca:	2c01      	cmp	r4, #1
    9dcc:	d904      	bls.n	9dd8 <readEEPROM(bool)+0xacc>
        writeSetting(address, val);
    9dce:	2100      	movs	r1, #0
    9dd0:	204e      	movs	r0, #78	; 0x4e
    9dd2:	f7ff fa81 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9dd6:	2400      	movs	r4, #0
    priority        = readSettingBounded(PRIO_ADDR, 0, 1, PRIO_FACTORY);
    9dd8:	4bcf      	ldr	r3, [pc, #828]	; (a118 <readEEPROM(bool)+0xe0c>)
    9dda:	2050      	movs	r0, #80	; 0x50
    9ddc:	801c      	strh	r4, [r3, #0]
    9dde:	f004 fb0b 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9de2:	f04f 0400 	mov.w	r4, #0
    9de6:	4603      	mov	r3, r0
    9de8:	2051      	movs	r0, #81	; 0x51
    9dea:	f363 0407 	bfi	r4, r3, #0, #8
    9dee:	f004 fb03 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9df2:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9df6:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9df8:	1e63      	subs	r3, r4, #1
    9dfa:	2b0b      	cmp	r3, #11
    9dfc:	d904      	bls.n	9e08 <readEEPROM(bool)+0xafc>
        writeSetting(address, val);
    9dfe:	2106      	movs	r1, #6
    9e00:	2050      	movs	r0, #80	; 0x50
    9e02:	f7ff fa69 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9e06:	2406      	movs	r4, #6
    vibSens         = readSettingBounded(VIB_SENS_ADDR, 1, 12, VIB_SENS_FACTORY);
    9e08:	4bc4      	ldr	r3, [pc, #784]	; (a11c <readEEPROM(bool)+0xe10>)
    9e0a:	2052      	movs	r0, #82	; 0x52
    9e0c:	801c      	strh	r4, [r3, #0]
    9e0e:	f004 faf3 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9e12:	f04f 0400 	mov.w	r4, #0
    9e16:	4603      	mov	r3, r0
    9e18:	2053      	movs	r0, #83	; 0x53
    9e1a:	f363 0407 	bfi	r4, r3, #0, #8
    9e1e:	f004 faeb 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9e22:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9e26:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9e28:	2c04      	cmp	r4, #4
    9e2a:	d904      	bls.n	9e36 <readEEPROM(bool)+0xb2a>
        writeSetting(address, val);
    9e2c:	2102      	movs	r1, #2
    9e2e:	2052      	movs	r0, #82	; 0x52
    9e30:	f7ff fa52 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9e34:	2402      	movs	r4, #2
    vibRetn         = readSettingBounded(VIB_RETN_ADDR, 0, 4, VIB_RETN_FACTORY);
    9e36:	4bba      	ldr	r3, [pc, #744]	; (a120 <readEEPROM(bool)+0xe14>)
    9e38:	2054      	movs	r0, #84	; 0x54
    9e3a:	801c      	strh	r4, [r3, #0]
    9e3c:	f004 fadc 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9e40:	f04f 0400 	mov.w	r4, #0
    9e44:	4603      	mov	r3, r0
    9e46:	2055      	movs	r0, #85	; 0x55
    9e48:	f363 0407 	bfi	r4, r3, #0, #8
    9e4c:	f004 fad4 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9e50:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9e54:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9e56:	1e63      	subs	r3, r4, #1
    9e58:	2b1d      	cmp	r3, #29
    9e5a:	d904      	bls.n	9e66 <readEEPROM(bool)+0xb5a>
        writeSetting(address, val);
    9e5c:	210c      	movs	r1, #12
    9e5e:	2054      	movs	r0, #84	; 0x54
    9e60:	f7ff fa3a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9e64:	240c      	movs	r4, #12
    vibSquelch      = readSettingBounded(VIB_SQUELCH_ADDR, 1, 30, VIB_SQUELCH_FACTORY);
    9e66:	4baf      	ldr	r3, [pc, #700]	; (a124 <readEEPROM(bool)+0xe18>)
    9e68:	2056      	movs	r0, #86	; 0x56
    9e6a:	801c      	strh	r4, [r3, #0]
    9e6c:	f004 fac4 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9e70:	f04f 0400 	mov.w	r4, #0
    9e74:	4603      	mov	r3, r0
    9e76:	2057      	movs	r0, #87	; 0x57
    9e78:	f363 0407 	bfi	r4, r3, #0, #8
    9e7c:	f004 fabc 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9e80:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9e84:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9e86:	2c01      	cmp	r4, #1
    9e88:	d904      	bls.n	9e94 <readEEPROM(bool)+0xb88>
        writeSetting(address, val);
    9e8a:	2100      	movs	r1, #0
    9e8c:	2056      	movs	r0, #86	; 0x56
    9e8e:	f7ff fa23 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9e92:	2400      	movs	r4, #0
    vibDirection    = readSettingBounded(VIB_DIRECTION_ADDR, 0, 1, VIB_DIRECTION_FACTORY);
    9e94:	4ba4      	ldr	r3, [pc, #656]	; (a128 <readEEPROM(bool)+0xe1c>)
    9e96:	2058      	movs	r0, #88	; 0x58
    9e98:	801c      	strh	r4, [r3, #0]
    9e9a:	f004 faad 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9e9e:	f04f 0400 	mov.w	r4, #0
    9ea2:	4603      	mov	r3, r0
    9ea4:	2059      	movs	r0, #89	; 0x59
    9ea6:	f363 0407 	bfi	r4, r3, #0, #8
    9eaa:	f004 faa5 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9eae:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9eb2:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9eb4:	2c7f      	cmp	r4, #127	; 0x7f
    9eb6:	d904      	bls.n	9ec2 <readEEPROM(bool)+0xbb6>
        writeSetting(address, val);
    9eb8:	2100      	movs	r1, #0
    9eba:	2058      	movs	r0, #88	; 0x58
    9ebc:	f7ff fa0c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9ec0:	2400      	movs	r4, #0
    breathCC2       = readSettingBounded(BREATH_CC2_ADDR, 0, 127, BREATH_CC2_FACTORY);
    9ec2:	4b9a      	ldr	r3, [pc, #616]	; (a12c <readEEPROM(bool)+0xe20>)
    9ec4:	205a      	movs	r0, #90	; 0x5a
    9ec6:	801c      	strh	r4, [r3, #0]
    9ec8:	f004 fa96 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9ecc:	f04f 0400 	mov.w	r4, #0
    9ed0:	4603      	mov	r3, r0
    9ed2:	205b      	movs	r0, #91	; 0x5b
    9ed4:	f363 0407 	bfi	r4, r3, #0, #8
    9ed8:	f004 fa8e 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9edc:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9ee0:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9ee2:	1e63      	subs	r3, r4, #1
    9ee4:	2b09      	cmp	r3, #9
    9ee6:	d904      	bls.n	9ef2 <readEEPROM(bool)+0xbe6>
        writeSetting(address, val);
    9ee8:	2101      	movs	r1, #1
    9eea:	205a      	movs	r0, #90	; 0x5a
    9eec:	f7ff f9f4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9ef0:	2401      	movs	r4, #1
    breathCC2Rise   = readSettingBounded(BREATH_CC2_RISE_ADDR, 1, 10, BREATH_CC2_RISE_FACTORY);
    9ef2:	4b8f      	ldr	r3, [pc, #572]	; (a130 <readEEPROM(bool)+0xe24>)
    9ef4:	205c      	movs	r0, #92	; 0x5c
    9ef6:	801c      	strh	r4, [r3, #0]
    9ef8:	f004 fa7e 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9efc:	f04f 0400 	mov.w	r4, #0
    9f00:	4603      	mov	r3, r0
    9f02:	205d      	movs	r0, #93	; 0x5d
    9f04:	f363 0407 	bfi	r4, r3, #0, #8
    9f08:	f004 fa76 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9f0c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9f10:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9f12:	1e63      	subs	r3, r4, #1
    9f14:	2b10      	cmp	r3, #16
    9f16:	d904      	bls.n	9f22 <readEEPROM(bool)+0xc16>
        writeSetting(address, val);
    9f18:	2108      	movs	r1, #8
    9f1a:	205c      	movs	r0, #92	; 0x5c
    9f1c:	f7ff f9dc 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9f20:	2408      	movs	r4, #8
    vibSensBite     = readSettingBounded(VIB_SENS_BITE_ADDR, 1, 17, VIB_SENS_BITE_FACTORY);
    9f22:	4b84      	ldr	r3, [pc, #528]	; (a134 <readEEPROM(bool)+0xe28>)
    9f24:	205e      	movs	r0, #94	; 0x5e
    9f26:	801c      	strh	r4, [r3, #0]
    9f28:	f004 fa66 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9f2c:	f04f 0400 	mov.w	r4, #0
    9f30:	4603      	mov	r3, r0
    9f32:	205f      	movs	r0, #95	; 0x5f
    9f34:	f363 0407 	bfi	r4, r3, #0, #8
    9f38:	f004 fa5e 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9f3c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9f40:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9f42:	1e63      	subs	r3, r4, #1
    9f44:	2b1d      	cmp	r3, #29
    9f46:	d904      	bls.n	9f52 <readEEPROM(bool)+0xc46>
        writeSetting(address, val);
    9f48:	210f      	movs	r1, #15
    9f4a:	205e      	movs	r0, #94	; 0x5e
    9f4c:	f7ff f9c4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9f50:	240f      	movs	r4, #15
    vibSquelchBite  = readSettingBounded(VIB_SQUELCH_BITE_ADDR, 1, 30, VIB_SQUELCH_BITE_FACTORY);
    9f52:	4b79      	ldr	r3, [pc, #484]	; (a138 <readEEPROM(bool)+0xe2c>)
    9f54:	2060      	movs	r0, #96	; 0x60
    9f56:	801c      	strh	r4, [r3, #0]
    9f58:	f004 fa4e 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9f5c:	f04f 0400 	mov.w	r4, #0
    9f60:	4603      	mov	r3, r0
    9f62:	2061      	movs	r0, #97	; 0x61
    9f64:	f363 0407 	bfi	r4, r3, #0, #8
    9f68:	f004 fa46 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9f6c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9f70:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9f72:	2c02      	cmp	r4, #2
    9f74:	d904      	bls.n	9f80 <readEEPROM(bool)+0xc74>
        writeSetting(address, val);
    9f76:	2100      	movs	r1, #0
    9f78:	2060      	movs	r0, #96	; 0x60
    9f7a:	f7ff f9ad 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9f7e:	2400      	movs	r4, #0
    vibControl      = readSettingBounded(VIB_CONTROL_ADDR, 0, 2, VIB_CONTROL_FACTORY);
    9f80:	4b6e      	ldr	r3, [pc, #440]	; (a13c <readEEPROM(bool)+0xe30>)
    9f82:	2064      	movs	r0, #100	; 0x64
    9f84:	801c      	strh	r4, [r3, #0]
    9f86:	f004 fa37 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9f8a:	f04f 0400 	mov.w	r4, #0
    9f8e:	4603      	mov	r3, r0
    9f90:	2065      	movs	r0, #101	; 0x65
    9f92:	f363 0407 	bfi	r4, r3, #0, #8
    9f96:	f004 fa2f 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9f9a:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9f9e:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9fa0:	2c01      	cmp	r4, #1
    9fa2:	d904      	bls.n	9fae <readEEPROM(bool)+0xca2>
        writeSetting(address, val);
    9fa4:	2101      	movs	r1, #1
    9fa6:	2064      	movs	r0, #100	; 0x64
    9fa8:	f7ff f996 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9fac:	2401      	movs	r4, #1
    dacMode         = readSettingBounded(DAC_MODE_ADDR, DAC_MODE_BREATH, DAC_MODE_PITCH, DAC_MODE_FACTORY);
    9fae:	4b64      	ldr	r3, [pc, #400]	; (a140 <readEEPROM(bool)+0xe34>)
    9fb0:	2062      	movs	r0, #98	; 0x62
    9fb2:	801c      	strh	r4, [r3, #0]
    9fb4:	f004 fa20 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9fb8:	f04f 0400 	mov.w	r4, #0
    9fbc:	4603      	mov	r3, r0
    9fbe:	2063      	movs	r0, #99	; 0x63
    9fc0:	f363 0407 	bfi	r4, r3, #0, #8
    9fc4:	f004 fa18 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9fc8:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9fcc:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9fce:	1ee3      	subs	r3, r4, #3
    9fd0:	2b01      	cmp	r3, #1
    9fd2:	d904      	bls.n	9fde <readEEPROM(bool)+0xcd2>
        writeSetting(address, val);
    9fd4:	2104      	movs	r1, #4
    9fd6:	2062      	movs	r0, #98	; 0x62
    9fd8:	f7ff f97e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    9fdc:	2404      	movs	r4, #4
    trill3_interval = readSettingBounded(TRILL3_INTERVAL_ADDR, 3, 4, TRILL3_INTERVAL_FACTORY);
    9fde:	4b59      	ldr	r3, [pc, #356]	; (a144 <readEEPROM(bool)+0xe38>)
    9fe0:	2066      	movs	r0, #102	; 0x66
    9fe2:	801c      	strh	r4, [r3, #0]
    9fe4:	f004 fa08 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    9fe8:	f04f 0400 	mov.w	r4, #0
    9fec:	4603      	mov	r3, r0
    9fee:	2067      	movs	r0, #103	; 0x67
    9ff0:	f363 0407 	bfi	r4, r3, #0, #8
    9ff4:	f004 fa00 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    9ff8:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    9ffc:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    9ffe:	2c7f      	cmp	r4, #127	; 0x7f
    a000:	d904      	bls.n	a00c <readEEPROM(bool)+0xd00>
        writeSetting(address, val);
    a002:	2100      	movs	r1, #0
    a004:	2066      	movs	r0, #102	; 0x66
    a006:	f7ff f967 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a00a:	2400      	movs	r4, #0
    extraCT2        = readSettingBounded(EXTRA2_ADDR, 0, 127, EXTRA2_FACTORY);
    a00c:	4b4e      	ldr	r3, [pc, #312]	; (a148 <readEEPROM(bool)+0xe3c>)
    a00e:	2068      	movs	r0, #104	; 0x68
    a010:	801c      	strh	r4, [r3, #0]
    a012:	f004 f9f1 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a016:	f04f 0400 	mov.w	r4, #0
    a01a:	4603      	mov	r3, r0
    a01c:	2069      	movs	r0, #105	; 0x69
    a01e:	f363 0407 	bfi	r4, r3, #0, #8
    a022:	f004 f9e9 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a026:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a02a:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a02c:	2c7f      	cmp	r4, #127	; 0x7f
    a02e:	d904      	bls.n	a03a <readEEPROM(bool)+0xd2e>
        writeSetting(address, val);
    a030:	210b      	movs	r1, #11
    a032:	2068      	movs	r0, #104	; 0x68
    a034:	f7ff f950 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a038:	240b      	movs	r4, #11
    levelCC         = readSettingBounded(LEVEL_CC_ADDR, 0, 127, LEVEL_CC_FACTORY);
    a03a:	4b44      	ldr	r3, [pc, #272]	; (a14c <readEEPROM(bool)+0xe40>)
    a03c:	206a      	movs	r0, #106	; 0x6a
    a03e:	801c      	strh	r4, [r3, #0]
    a040:	f004 f9da 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a044:	f04f 0400 	mov.w	r4, #0
    a048:	4603      	mov	r3, r0
    a04a:	206b      	movs	r0, #107	; 0x6b
    a04c:	f363 0407 	bfi	r4, r3, #0, #8
    a050:	f004 f9d2 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a054:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a058:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a05a:	2c7f      	cmp	r4, #127	; 0x7f
    a05c:	d904      	bls.n	a068 <readEEPROM(bool)+0xd5c>
        writeSetting(address, val);
    a05e:	217f      	movs	r1, #127	; 0x7f
    a060:	206a      	movs	r0, #106	; 0x6a
    a062:	f7ff f939 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a066:	247f      	movs	r4, #127	; 0x7f
    levelVal        = readSettingBounded(LEVEL_VAL_ADDR, 0, 127, LEVEL_VAL_FACTORY);
    a068:	4b39      	ldr	r3, [pc, #228]	; (a150 <readEEPROM(bool)+0xe44>)
    a06a:	206c      	movs	r0, #108	; 0x6c
    a06c:	801c      	strh	r4, [r3, #0]
    a06e:	f004 f9c3 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a072:	f04f 0400 	mov.w	r4, #0
    a076:	4603      	mov	r3, r0
    a078:	206d      	movs	r0, #109	; 0x6d
    a07a:	f363 0407 	bfi	r4, r3, #0, #8
    a07e:	f004 f9bb 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a082:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a086:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a088:	2c06      	cmp	r4, #6
    a08a:	d904      	bls.n	a096 <readEEPROM(bool)+0xd8a>
        writeSetting(address, val);
    a08c:	2100      	movs	r1, #0
    a08e:	206c      	movs	r0, #108	; 0x6c
    a090:	f7ff f922 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a094:	2400      	movs	r4, #0
    fingering       = readSettingBounded(FINGER_ADDR, 0, 6, FINGER_FACTORY); // ws: added XVI and XVR
    a096:	4b2f      	ldr	r3, [pc, #188]	; (a154 <readEEPROM(bool)+0xe48>)
    a098:	206e      	movs	r0, #110	; 0x6e
    a09a:	801c      	strh	r4, [r3, #0]
    a09c:	f004 f9ac 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a0a0:	f04f 0400 	mov.w	r4, #0
    a0a4:	4603      	mov	r3, r0
    a0a6:	206f      	movs	r0, #111	; 0x6f
    a0a8:	f363 0407 	bfi	r4, r3, #0, #8
    a0ac:	f004 f9a4 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a0b0:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a0b4:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a0b6:	2c19      	cmp	r4, #25
    a0b8:	d904      	bls.n	a0c4 <readEEPROM(bool)+0xdb8>
        writeSetting(address, val);
    a0ba:	2100      	movs	r1, #0
    a0bc:	206e      	movs	r0, #110	; 0x6e
    a0be:	f7ff f90b 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a0c2:	2400      	movs	r4, #0
    lpinky3         = readSettingBounded(LPINKY3_ADDR, 0, 25, LPINKY3_FACTORY);
    a0c4:	4b24      	ldr	r3, [pc, #144]	; (a158 <readEEPROM(bool)+0xe4c>)
    a0c6:	2070      	movs	r0, #112	; 0x70
    a0c8:	801c      	strh	r4, [r3, #0]
    a0ca:	f004 f995 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a0ce:	f04f 0400 	mov.w	r4, #0
    a0d2:	4603      	mov	r3, r0
    a0d4:	2071      	movs	r0, #113	; 0x71
    a0d6:	f363 0407 	bfi	r4, r3, #0, #8
    a0da:	f004 f98d 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a0de:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a0e2:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a0e4:	2c02      	cmp	r4, #2
    a0e6:	d904      	bls.n	a0f2 <readEEPROM(bool)+0xde6>
        writeSetting(address, val);
    a0e8:	2100      	movs	r1, #0
    a0ea:	2070      	movs	r0, #112	; 0x70
    a0ec:	f7ff f8f4 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a0f0:	2400      	movs	r4, #0
    batteryType     = readSettingBounded(BATTYPE_ADDR, 0, 2, BATTYPE_FACTORY);
    a0f2:	4b1a      	ldr	r3, [pc, #104]	; (a15c <readEEPROM(bool)+0xe50>)
    a0f4:	2072      	movs	r0, #114	; 0x72
    a0f6:	801c      	strh	r4, [r3, #0]
    a0f8:	f004 f97e 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a0fc:	f04f 0400 	mov.w	r4, #0
    a100:	4603      	mov	r3, r0
    a102:	2073      	movs	r0, #115	; 0x73
    a104:	f363 0407 	bfi	r4, r3, #0, #8
    a108:	f004 f976 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a10c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a110:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a112:	2c06      	cmp	r4, #6
    a114:	d929      	bls.n	a16a <readEEPROM(bool)+0xe5e>
    a116:	e023      	b.n	a160 <readEEPROM(bool)+0xe54>
    a118:	1fff9b90 	.word	0x1fff9b90
    a11c:	1fff8e78 	.word	0x1fff8e78
    a120:	1fff8e76 	.word	0x1fff8e76
    a124:	1fff8e7c 	.word	0x1fff8e7c
    a128:	1fff9bfc 	.word	0x1fff9bfc
    a12c:	1fff9a20 	.word	0x1fff9a20
    a130:	1fff9a22 	.word	0x1fff9a22
    a134:	1fff8e7a 	.word	0x1fff8e7a
    a138:	1fff8e7e 	.word	0x1fff8e7e
    a13c:	1fff9bfa 	.word	0x1fff9bfa
    a140:	1fff9a84 	.word	0x1fff9a84
    a144:	1fff9bee 	.word	0x1fff9bee
    a148:	1fff9a96 	.word	0x1fff9a96
    a14c:	1fff9b12 	.word	0x1fff9b12
    a150:	1fff9b14 	.word	0x1fff9b14
    a154:	1fff9ab8 	.word	0x1fff9ab8
    a158:	1fff9b2a 	.word	0x1fff9b2a
    a15c:	1fff9a04 	.word	0x1fff9a04
        writeSetting(address, val);
    a160:	2100      	movs	r1, #0
    a162:	2072      	movs	r0, #114	; 0x72
    a164:	f7ff f8b8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a168:	2400      	movs	r4, #0
    harmSetting     = readSettingBounded(HARMSET_ADDR, 0, 6, HARMSET_FACTORY);
    a16a:	4bd4      	ldr	r3, [pc, #848]	; (a4bc <readEEPROM(bool)+0x11b0>)
    a16c:	2074      	movs	r0, #116	; 0x74
    a16e:	801c      	strh	r4, [r3, #0]
    a170:	f004 f942 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a174:	f04f 0400 	mov.w	r4, #0
    a178:	4603      	mov	r3, r0
    a17a:	2075      	movs	r0, #117	; 0x75
    a17c:	f363 0407 	bfi	r4, r3, #0, #8
    a180:	f004 f93a 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a184:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a188:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a18a:	2c07      	cmp	r4, #7
    a18c:	d904      	bls.n	a198 <readEEPROM(bool)+0xe8c>
        writeSetting(address, val);
    a18e:	2100      	movs	r1, #0
    a190:	2074      	movs	r0, #116	; 0x74
    a192:	f7ff f8a1 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a196:	2400      	movs	r4, #0
    harmSelect      = readSettingBounded(HARMSEL_ADDR, 0, 7, HARMSEL_FACTORY);
    a198:	4bc9      	ldr	r3, [pc, #804]	; (a4c0 <readEEPROM(bool)+0x11b4>)
    a19a:	208a      	movs	r0, #138	; 0x8a
    a19c:	801c      	strh	r4, [r3, #0]
    a19e:	f004 f92b 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a1a2:	f04f 0400 	mov.w	r4, #0
    a1a6:	4603      	mov	r3, r0
    a1a8:	208b      	movs	r0, #139	; 0x8b
    a1aa:	f363 0407 	bfi	r4, r3, #0, #8
    a1ae:	f004 f923 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a1b2:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a1b6:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a1b8:	2c0a      	cmp	r4, #10
    a1ba:	d904      	bls.n	a1c6 <readEEPROM(bool)+0xeba>
        writeSetting(address, val);
    a1bc:	2100      	movs	r1, #0
    a1be:	208a      	movs	r0, #138	; 0x8a
    a1c0:	f7ff f88a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a1c4:	2400      	movs	r4, #0
    polySelect      = (PolySelect)readSettingBounded(POLYSEL_ADDR, 0, 10, POLYSEL_FACTORY);
    a1c6:	4bbf      	ldr	r3, [pc, #764]	; (a4c4 <readEEPROM(bool)+0x11b8>)
    a1c8:	208c      	movs	r0, #140	; 0x8c
    a1ca:	801c      	strh	r4, [r3, #0]
    a1cc:	f004 f914 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a1d0:	f04f 0400 	mov.w	r4, #0
    a1d4:	4603      	mov	r3, r0
    a1d6:	208d      	movs	r0, #141	; 0x8d
    a1d8:	f363 0407 	bfi	r4, r3, #0, #8
    a1dc:	f004 f90c 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a1e0:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a1e4:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a1e6:	2c04      	cmp	r4, #4
    a1e8:	d904      	bls.n	a1f4 <readEEPROM(bool)+0xee8>
        writeSetting(address, val);
    a1ea:	2100      	movs	r1, #0
    a1ec:	208c      	movs	r0, #140	; 0x8c
    a1ee:	f7ff f873 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a1f2:	2400      	movs	r4, #0
    fwcType         = readSettingBounded(FWCTYPE_ADDR, 0, 4, FWCTYPE_FACTORY);
    a1f4:	4bb4      	ldr	r3, [pc, #720]	; (a4c8 <readEEPROM(bool)+0x11bc>)
    a1f6:	2098      	movs	r0, #152	; 0x98
    a1f8:	801c      	strh	r4, [r3, #0]
    a1fa:	f004 f8fd 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a1fe:	f04f 0400 	mov.w	r4, #0
    a202:	4603      	mov	r3, r0
    a204:	2099      	movs	r0, #153	; 0x99
    a206:	f363 0407 	bfi	r4, r3, #0, #8
    a20a:	f004 f8f5 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a20e:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a212:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a214:	2c01      	cmp	r4, #1
    a216:	d904      	bls.n	a222 <readEEPROM(bool)+0xf16>
        writeSetting(address, val);
    a218:	2100      	movs	r1, #0
    a21a:	2098      	movs	r0, #152	; 0x98
    a21c:	f7ff f85c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a220:	2400      	movs	r4, #0
    fwcLockH        = readSettingBounded(FWCLCH_ADDR, 0, 1, FWCLCH_FACTORY);
    a222:	4baa      	ldr	r3, [pc, #680]	; (a4cc <readEEPROM(bool)+0x11c0>)
    a224:	209a      	movs	r0, #154	; 0x9a
    a226:	801c      	strh	r4, [r3, #0]
    a228:	f004 f8e6 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a22c:	f04f 0400 	mov.w	r4, #0
    a230:	4603      	mov	r3, r0
    a232:	209b      	movs	r0, #155	; 0x9b
    a234:	f363 0407 	bfi	r4, r3, #0, #8
    a238:	f004 f8de 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a23c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a240:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a242:	2c01      	cmp	r4, #1
    a244:	d904      	bls.n	a250 <readEEPROM(bool)+0xf44>
        writeSetting(address, val);
    a246:	2100      	movs	r1, #0
    a248:	209a      	movs	r0, #154	; 0x9a
    a24a:	f7ff f845 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a24e:	2400      	movs	r4, #0
    fwcDrop2        = readSettingBounded(FWCDP2_ADDR, 0, 1, FWCDP2_FACTORY);
    a250:	4b9f      	ldr	r3, [pc, #636]	; (a4d0 <readEEPROM(bool)+0x11c4>)
    a252:	2096      	movs	r0, #150	; 0x96
    a254:	801c      	strh	r4, [r3, #0]
    a256:	f004 f8cf 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a25a:	f04f 0400 	mov.w	r4, #0
    a25e:	4603      	mov	r3, r0
    a260:	2097      	movs	r0, #151	; 0x97
    a262:	f363 0407 	bfi	r4, r3, #0, #8
    a266:	f004 f8c7 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a26a:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a26e:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a270:	2c0b      	cmp	r4, #11
    a272:	d904      	bls.n	a27e <readEEPROM(bool)+0xf72>
        writeSetting(address, val);
    a274:	2100      	movs	r1, #0
    a276:	2096      	movs	r0, #150	; 0x96
    a278:	f7ff f82e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a27c:	2400      	movs	r4, #0
    hmzKey          = readSettingBounded(HMZKEY_ADDR, 0, 11, HMZKEY_FACTORY);
    a27e:	4b95      	ldr	r3, [pc, #596]	; (a4d4 <readEEPROM(bool)+0x11c8>)
    a280:	209c      	movs	r0, #156	; 0x9c
    a282:	801c      	strh	r4, [r3, #0]
    a284:	f004 f8b8 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a288:	f04f 0400 	mov.w	r4, #0
    a28c:	4603      	mov	r3, r0
    a28e:	209d      	movs	r0, #157	; 0x9d
    a290:	f363 0407 	bfi	r4, r3, #0, #8
    a294:	f004 f8b0 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a298:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a29c:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a29e:	1ea3      	subs	r3, r4, #2
    a2a0:	2b03      	cmp	r3, #3
    a2a2:	d904      	bls.n	a2ae <readEEPROM(bool)+0xfa2>
        writeSetting(address, val);
    a2a4:	2105      	movs	r1, #5
    a2a6:	209c      	movs	r0, #156	; 0x9c
    a2a8:	f7ff f816 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a2ac:	2405      	movs	r4, #5
    hmzLimit        = readSettingBounded(HMZLIMIT_ADDR, 2, 5, HMZLIMIT_FACTORY);
    a2ae:	4b8a      	ldr	r3, [pc, #552]	; (a4d8 <readEEPROM(bool)+0x11cc>)
    a2b0:	2076      	movs	r0, #118	; 0x76
    a2b2:	801c      	strh	r4, [r3, #0]
    a2b4:	f004 f8a0 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a2b8:	f04f 0400 	mov.w	r4, #0
    a2bc:	4603      	mov	r3, r0
    a2be:	2077      	movs	r0, #119	; 0x77
    a2c0:	f363 0407 	bfi	r4, r3, #0, #8
    a2c4:	f004 f898 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a2c8:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a2cc:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a2ce:	2c30      	cmp	r4, #48	; 0x30
    a2d0:	d904      	bls.n	a2dc <readEEPROM(bool)+0xfd0>
        writeSetting(address, val);
    a2d2:	211f      	movs	r1, #31
    a2d4:	2076      	movs	r0, #118	; 0x76
    a2d6:	f7fe ffff 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a2da:	241f      	movs	r4, #31
    rotations_b.parallel       = readSettingBounded(PARAB_ADDR, 0, 48, PARAB_FACTORY);
    a2dc:	4e7f      	ldr	r6, [pc, #508]	; (a4dc <readEEPROM(bool)+0x11d0>)
    a2de:	2078      	movs	r0, #120	; 0x78
    a2e0:	8034      	strh	r4, [r6, #0]
    a2e2:	f004 f889 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a2e6:	f04f 0400 	mov.w	r4, #0
    a2ea:	4603      	mov	r3, r0
    a2ec:	2079      	movs	r0, #121	; 0x79
    a2ee:	f363 0407 	bfi	r4, r3, #0, #8
    a2f2:	f004 f881 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a2f6:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a2fa:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a2fc:	2c30      	cmp	r4, #48	; 0x30
    a2fe:	d904      	bls.n	a30a <readEEPROM(bool)+0xffe>
        writeSetting(address, val);
    a300:	2113      	movs	r1, #19
    a302:	2078      	movs	r0, #120	; 0x78
    a304:	f7fe ffe8 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a308:	2413      	movs	r4, #19
    rotations_b.rotations[0]   = readSettingBounded(ROTB1_ADDR, 0, 48, ROTB1_FACTORY);
    a30a:	8074      	strh	r4, [r6, #2]
    a30c:	207a      	movs	r0, #122	; 0x7a
    a30e:	f004 f873 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a312:	f04f 0400 	mov.w	r4, #0
    a316:	4603      	mov	r3, r0
    a318:	207b      	movs	r0, #123	; 0x7b
    a31a:	f363 0407 	bfi	r4, r3, #0, #8
    a31e:	f004 f86b 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a322:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a326:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a328:	2c30      	cmp	r4, #48	; 0x30
    a32a:	d904      	bls.n	a336 <readEEPROM(bool)+0x102a>
        writeSetting(address, val);
    a32c:	210e      	movs	r1, #14
    a32e:	207a      	movs	r0, #122	; 0x7a
    a330:	f7fe ffd2 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a334:	240e      	movs	r4, #14
    rotations_b.rotations[1]   = readSettingBounded(ROTB2_ADDR, 0, 48, ROTB2_FACTORY);
    a336:	80b4      	strh	r4, [r6, #4]
    a338:	207c      	movs	r0, #124	; 0x7c
    a33a:	f004 f85d 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a33e:	f04f 0400 	mov.w	r4, #0
    a342:	4603      	mov	r3, r0
    a344:	207d      	movs	r0, #125	; 0x7d
    a346:	f363 0407 	bfi	r4, r3, #0, #8
    a34a:	f004 f855 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a34e:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a352:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a354:	2c30      	cmp	r4, #48	; 0x30
    a356:	d904      	bls.n	a362 <readEEPROM(bool)+0x1056>
        writeSetting(address, val);
    a358:	2111      	movs	r1, #17
    a35a:	207c      	movs	r0, #124	; 0x7c
    a35c:	f7fe ffbc 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a360:	2411      	movs	r4, #17
    rotations_b.rotations[2]   = readSettingBounded(ROTB3_ADDR, 0, 48, ROTB3_FACTORY);
    a362:	80f4      	strh	r4, [r6, #6]
    a364:	207e      	movs	r0, #126	; 0x7e
    a366:	f004 f847 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a36a:	f04f 0400 	mov.w	r4, #0
    a36e:	4603      	mov	r3, r0
    a370:	207f      	movs	r0, #127	; 0x7f
    a372:	f363 0407 	bfi	r4, r3, #0, #8
    a376:	f004 f83f 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a37a:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a37e:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a380:	2c30      	cmp	r4, #48	; 0x30
    a382:	d904      	bls.n	a38e <readEEPROM(bool)+0x1082>
        writeSetting(address, val);
    a384:	210a      	movs	r1, #10
    a386:	207e      	movs	r0, #126	; 0x7e
    a388:	f7fe ffa6 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a38c:	240a      	movs	r4, #10
    rotations_b.rotations[3]   = readSettingBounded(ROTB4_ADDR, 0, 48, ROTB4_FACTORY);
    a38e:	8134      	strh	r4, [r6, #8]
    a390:	2080      	movs	r0, #128	; 0x80
    a392:	f004 f831 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a396:	f04f 0400 	mov.w	r4, #0
    a39a:	4603      	mov	r3, r0
    a39c:	2081      	movs	r0, #129	; 0x81
    a39e:	f363 0407 	bfi	r4, r3, #0, #8
    a3a2:	f004 f829 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a3a6:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a3aa:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a3ac:	2c30      	cmp	r4, #48	; 0x30
    a3ae:	d904      	bls.n	a3ba <readEEPROM(bool)+0x10ae>
        writeSetting(address, val);
    a3b0:	211f      	movs	r1, #31
    a3b2:	2080      	movs	r0, #128	; 0x80
    a3b4:	f7fe ff90 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a3b8:	241f      	movs	r4, #31
    rotations_c.parallel       = readSettingBounded(PARAC_ADDR, 0, 48, PARAC_FACTORY);
    a3ba:	4e49      	ldr	r6, [pc, #292]	; (a4e0 <readEEPROM(bool)+0x11d4>)
    a3bc:	2082      	movs	r0, #130	; 0x82
    a3be:	8034      	strh	r4, [r6, #0]
    a3c0:	f004 f81a 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a3c4:	f04f 0400 	mov.w	r4, #0
    a3c8:	4603      	mov	r3, r0
    a3ca:	2083      	movs	r0, #131	; 0x83
    a3cc:	f363 0407 	bfi	r4, r3, #0, #8
    a3d0:	f004 f812 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a3d4:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a3d8:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a3da:	2c30      	cmp	r4, #48	; 0x30
    a3dc:	d904      	bls.n	a3e8 <readEEPROM(bool)+0x10dc>
        writeSetting(address, val);
    a3de:	2113      	movs	r1, #19
    a3e0:	2082      	movs	r0, #130	; 0x82
    a3e2:	f7fe ff79 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a3e6:	2413      	movs	r4, #19
    rotations_c.rotations[0]   = readSettingBounded(ROTC1_ADDR, 0, 48, ROTC1_FACTORY);
    a3e8:	8074      	strh	r4, [r6, #2]
    a3ea:	2084      	movs	r0, #132	; 0x84
    a3ec:	f004 f804 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a3f0:	f04f 0400 	mov.w	r4, #0
    a3f4:	4603      	mov	r3, r0
    a3f6:	2085      	movs	r0, #133	; 0x85
    a3f8:	f363 0407 	bfi	r4, r3, #0, #8
    a3fc:	f003 fffc 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a400:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a404:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a406:	2c30      	cmp	r4, #48	; 0x30
    a408:	d904      	bls.n	a414 <readEEPROM(bool)+0x1108>
        writeSetting(address, val);
    a40a:	210e      	movs	r1, #14
    a40c:	2084      	movs	r0, #132	; 0x84
    a40e:	f7fe ff63 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a412:	240e      	movs	r4, #14
    rotations_c.rotations[1]   = readSettingBounded(ROTC2_ADDR, 0, 48, ROTC2_FACTORY);
    a414:	80b4      	strh	r4, [r6, #4]
    a416:	2086      	movs	r0, #134	; 0x86
    a418:	f003 ffee 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a41c:	f04f 0400 	mov.w	r4, #0
    a420:	4603      	mov	r3, r0
    a422:	2087      	movs	r0, #135	; 0x87
    a424:	f363 0407 	bfi	r4, r3, #0, #8
    a428:	f003 ffe6 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a42c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a430:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a432:	2c30      	cmp	r4, #48	; 0x30
    a434:	d904      	bls.n	a440 <readEEPROM(bool)+0x1134>
        writeSetting(address, val);
    a436:	2111      	movs	r1, #17
    a438:	2086      	movs	r0, #134	; 0x86
    a43a:	f7fe ff4d 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a43e:	2411      	movs	r4, #17
    rotations_c.rotations[2]   = readSettingBounded(ROTC3_ADDR, 0, 48, ROTC3_FACTORY);
    a440:	80f4      	strh	r4, [r6, #6]
    a442:	2088      	movs	r0, #136	; 0x88
    a444:	f003 ffd8 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a448:	f04f 0400 	mov.w	r4, #0
    a44c:	4603      	mov	r3, r0
    a44e:	2089      	movs	r0, #137	; 0x89
    a450:	f363 0407 	bfi	r4, r3, #0, #8
    a454:	f003 ffd0 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a458:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a45c:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a45e:	2c30      	cmp	r4, #48	; 0x30
    a460:	d904      	bls.n	a46c <readEEPROM(bool)+0x1160>
        writeSetting(address, val);
    a462:	210a      	movs	r1, #10
    a464:	2088      	movs	r0, #136	; 0x88
    a466:	f7fe ff37 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a46a:	240a      	movs	r4, #10
    rotations_c.rotations[3]   = readSettingBounded(ROTC4_ADDR, 0, 48, ROTC4_FACTORY);
    a46c:	8134      	strh	r4, [r6, #8]
    a46e:	20a0      	movs	r0, #160	; 0xa0
    a470:	f003 ffc2 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a474:	f04f 0400 	mov.w	r4, #0
    a478:	4603      	mov	r3, r0
    a47a:	20a1      	movs	r0, #161	; 0xa1
    a47c:	f363 0407 	bfi	r4, r3, #0, #8
    a480:	f003 ffba 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a484:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a488:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a48a:	2c01      	cmp	r4, #1
    a48c:	d904      	bls.n	a498 <readEEPROM(bool)+0x118c>
        writeSetting(address, val);
    a48e:	2100      	movs	r1, #0
    a490:	20a0      	movs	r0, #160	; 0xa0
    a492:	f7fe ff21 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a496:	2400      	movs	r4, #0
    otfKey          = readSettingBounded(OTFKEY_ADDR, 0, 1, OTFKEY_FACTORY);
    a498:	4b12      	ldr	r3, [pc, #72]	; (a4e4 <readEEPROM(bool)+0x11d8>)
    a49a:	209e      	movs	r0, #158	; 0x9e
    a49c:	801c      	strh	r4, [r3, #0]
    a49e:	f003 ffab 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a4a2:	f04f 0400 	mov.w	r4, #0
    a4a6:	4603      	mov	r3, r0
    a4a8:	209f      	movs	r0, #159	; 0x9f
    a4aa:	f363 0407 	bfi	r4, r3, #0, #8
    a4ae:	f003 ffa3 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a4b2:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a4b6:	b2a4      	uxth	r4, r4
    a4b8:	e016      	b.n	a4e8 <readEEPROM(bool)+0x11dc>
    a4ba:	bf00      	nop
    a4bc:	1fff9ae4 	.word	0x1fff9ae4
    a4c0:	1fff9ae2 	.word	0x1fff9ae2
    a4c4:	1fff9b80 	.word	0x1fff9b80
    a4c8:	1fff9abe 	.word	0x1fff9abe
    a4cc:	1fff9abc 	.word	0x1fff9abc
    a4d0:	1fff9aba 	.word	0x1fff9aba
    a4d4:	1fff9aec 	.word	0x1fff9aec
    a4d8:	1fff9aee 	.word	0x1fff9aee
    a4dc:	1fff9bac 	.word	0x1fff9bac
    a4e0:	1fff9bb8 	.word	0x1fff9bb8
    a4e4:	1fff9b5e 	.word	0x1fff9b5e
    if(val < min || val > max) {
    a4e8:	1ee3      	subs	r3, r4, #3
    a4ea:	2b0c      	cmp	r3, #12
    a4ec:	d904      	bls.n	a4f8 <readEEPROM(bool)+0x11ec>
        writeSetting(address, val);
    a4ee:	2106      	movs	r1, #6
    a4f0:	209e      	movs	r0, #158	; 0x9e
    a4f2:	f7fe fef1 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a4f6:	2406      	movs	r4, #6
    breathInterval  = readSettingBounded(BRINTERV_ADDR, 3, 15, BRINTERV_FACTORY);
    a4f8:	4bce      	ldr	r3, [pc, #824]	; (a834 <readEEPROM(bool)+0x1528>)
    a4fa:	20a2      	movs	r0, #162	; 0xa2
    a4fc:	801c      	strh	r4, [r3, #0]
    a4fe:	f003 ff7b 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a502:	f04f 0400 	mov.w	r4, #0
    a506:	4603      	mov	r3, r0
    a508:	20a3      	movs	r0, #163	; 0xa3
    a50a:	f363 0407 	bfi	r4, r3, #0, #8
    a50e:	f003 ff73 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a512:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a516:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a518:	1e63      	subs	r3, r4, #1
    a51a:	2b7e      	cmp	r3, #126	; 0x7e
    a51c:	d904      	bls.n	a528 <readEEPROM(bool)+0x121c>
        writeSetting(address, val);
    a51e:	217f      	movs	r1, #127	; 0x7f
    a520:	20a2      	movs	r0, #162	; 0xa2
    a522:	f7fe fed9 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a526:	247f      	movs	r4, #127	; 0x7f
    portLimit       = readSettingBounded(PORTLIMIT_ADDR, 1, 127, PORTLIMIT_FACTORY);
    a528:	4bc3      	ldr	r3, [pc, #780]	; (a838 <readEEPROM(bool)+0x152c>)
    a52a:	20a4      	movs	r0, #164	; 0xa4
    a52c:	801c      	strh	r4, [r3, #0]
    a52e:	f003 ff63 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a532:	f04f 0400 	mov.w	r4, #0
    a536:	4603      	mov	r3, r0
    a538:	20a5      	movs	r0, #165	; 0xa5
    a53a:	f363 0407 	bfi	r4, r3, #0, #8
    a53e:	f003 ff5b 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a542:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a546:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a548:	f5a4 63af 	sub.w	r3, r4, #1400	; 0x578
    a54c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    a550:	d906      	bls.n	a560 <readEEPROM(bool)+0x1254>
        writeSetting(address, val);
    a552:	f240 61a4 	movw	r1, #1700	; 0x6a4
    a556:	20a4      	movs	r0, #164	; 0xa4
    a558:	f7fe febe 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a55c:	f240 64a4 	movw	r4, #1700	; 0x6a4
    leverThrVal     = readSettingBounded(LEVER_THR_ADDR, leverLoLimit, leverHiLimit, LEVER_THR_FACTORY);
    a560:	4bb6      	ldr	r3, [pc, #728]	; (a83c <readEEPROM(bool)+0x1530>)
    a562:	20a6      	movs	r0, #166	; 0xa6
    a564:	801c      	strh	r4, [r3, #0]
    a566:	f003 ff47 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a56a:	f04f 0400 	mov.w	r4, #0
    a56e:	4603      	mov	r3, r0
    a570:	20a7      	movs	r0, #167	; 0xa7
    a572:	f363 0407 	bfi	r4, r3, #0, #8
    a576:	f003 ff3f 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a57a:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a57e:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a580:	f5a4 63af 	sub.w	r3, r4, #1400	; 0x578
    a584:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    a588:	d906      	bls.n	a598 <readEEPROM(bool)+0x128c>
        writeSetting(address, val);
    a58a:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    a58e:	20a6      	movs	r0, #166	; 0xa6
    a590:	f7fe fea2 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a594:	f44f 64e1 	mov.w	r4, #1800	; 0x708
    leverMaxVal     = readSettingBounded(LEVER_MAX_ADDR, leverLoLimit, leverHiLimit, LEVER_MAX_FACTORY);
    a598:	4ba9      	ldr	r3, [pc, #676]	; (a840 <readEEPROM(bool)+0x1534>)
    a59a:	20a8      	movs	r0, #168	; 0xa8
    a59c:	801c      	strh	r4, [r3, #0]
    a59e:	f003 ff2b 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a5a2:	f04f 0400 	mov.w	r4, #0
    a5a6:	4603      	mov	r3, r0
    a5a8:	20a9      	movs	r0, #169	; 0xa9
    a5aa:	f363 0407 	bfi	r4, r3, #0, #8
    a5ae:	f003 ff23 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a5b2:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a5b6:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a5b8:	2c06      	cmp	r4, #6
    a5ba:	d904      	bls.n	a5c6 <readEEPROM(bool)+0x12ba>
        writeSetting(address, val);
    a5bc:	2100      	movs	r1, #0
    a5be:	20a8      	movs	r0, #168	; 0xa8
    a5c0:	f7fe fe8a 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a5c4:	2400      	movs	r4, #0
    brHarmSetting   = readSettingBounded(BRHARMSET_ADDR, 0, 6, BRHARMSET_FACTORY);
    a5c6:	4b9f      	ldr	r3, [pc, #636]	; (a844 <readEEPROM(bool)+0x1538>)
    a5c8:	20aa      	movs	r0, #170	; 0xaa
    a5ca:	801c      	strh	r4, [r3, #0]
    a5cc:	f003 ff14 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a5d0:	f04f 0400 	mov.w	r4, #0
    a5d4:	4603      	mov	r3, r0
    a5d6:	20ab      	movs	r0, #171	; 0xab
    a5d8:	f363 0407 	bfi	r4, r3, #0, #8
    a5dc:	f003 ff0c 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a5e0:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a5e4:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a5e6:	2c03      	cmp	r4, #3
    a5e8:	d904      	bls.n	a5f4 <readEEPROM(bool)+0x12e8>
        writeSetting(address, val);
    a5ea:	2100      	movs	r1, #0
    a5ec:	20aa      	movs	r0, #170	; 0xaa
    a5ee:	f7fe fe73 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a5f2:	2400      	movs	r4, #0
    brHarmSelect    = readSettingBounded(BRHARMSEL_ADDR, 0, 3, BRHARMSEL_FACTORY);
    a5f4:	4b94      	ldr	r3, [pc, #592]	; (a848 <readEEPROM(bool)+0x153c>)
    a5f6:	20ac      	movs	r0, #172	; 0xac
    a5f8:	801c      	strh	r4, [r3, #0]
    a5fa:	f003 fefd 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a5fe:	f04f 0400 	mov.w	r4, #0
    a602:	4603      	mov	r3, r0
    a604:	20ad      	movs	r0, #173	; 0xad
    a606:	f363 0407 	bfi	r4, r3, #0, #8
    a60a:	f003 fef5 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a60e:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a612:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a614:	2c04      	cmp	r4, #4
    a616:	d904      	bls.n	a622 <readEEPROM(bool)+0x1316>
        writeSetting(address, val);
    a618:	2102      	movs	r1, #2
    a61a:	20ac      	movs	r0, #172	; 0xac
    a61c:	f7fe fe5c 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a620:	2402      	movs	r4, #2
    biteControl     = readSettingBounded(BITECTL_ADDR, 0, 4, BITECTL_FACTORY);  // ws
    a622:	4b8a      	ldr	r3, [pc, #552]	; (a84c <readEEPROM(bool)+0x1540>)
    a624:	20b0      	movs	r0, #176	; 0xb0
    a626:	801c      	strh	r4, [r3, #0]
    a628:	f003 fee6 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a62c:	f04f 0400 	mov.w	r4, #0
    a630:	4603      	mov	r3, r0
    a632:	20b1      	movs	r0, #177	; 0xb1
    a634:	f363 0407 	bfi	r4, r3, #0, #8
    a638:	f003 fede 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a63c:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a640:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a642:	2c03      	cmp	r4, #3
    a644:	d904      	bls.n	a650 <readEEPROM(bool)+0x1344>
        writeSetting(address, val);
    a646:	2101      	movs	r1, #1
    a648:	20b0      	movs	r0, #176	; 0xb0
    a64a:	f7fe fe45 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a64e:	2401      	movs	r4, #1
    leverControl    = readSettingBounded(LEVERCTL_ADDR, 0, 3, LEVERCTL_FACTORY);
    a650:	4b7f      	ldr	r3, [pc, #508]	; (a850 <readEEPROM(bool)+0x1544>)
    a652:	20ae      	movs	r0, #174	; 0xae
    a654:	801c      	strh	r4, [r3, #0]
    a656:	f003 fecf 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a65a:	f04f 0400 	mov.w	r4, #0
    a65e:	4603      	mov	r3, r0
    a660:	20af      	movs	r0, #175	; 0xaf
    a662:	f363 0407 	bfi	r4, r3, #0, #8
    a666:	f003 fec7 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a66a:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a66e:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a670:	2c7f      	cmp	r4, #127	; 0x7f
    a672:	d904      	bls.n	a67e <readEEPROM(bool)+0x1372>
        writeSetting(address, val);
    a674:	2101      	movs	r1, #1
    a676:	20ae      	movs	r0, #174	; 0xae
    a678:	f7fe fe2e 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a67c:	2401      	movs	r4, #1
    biteCC          = readSettingBounded(BITECC_ADDR, 0, 127, BITECC_FACTORY);
    a67e:	4b75      	ldr	r3, [pc, #468]	; (a854 <readEEPROM(bool)+0x1548>)
    a680:	20b2      	movs	r0, #178	; 0xb2
    a682:	801c      	strh	r4, [r3, #0]
    a684:	f003 feb8 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a688:	f04f 0400 	mov.w	r4, #0
    a68c:	4603      	mov	r3, r0
    a68e:	20b3      	movs	r0, #179	; 0xb3
    a690:	f363 0407 	bfi	r4, r3, #0, #8
    a694:	f003 feb0 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a698:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a69c:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a69e:	2c7f      	cmp	r4, #127	; 0x7f
    a6a0:	d904      	bls.n	a6ac <readEEPROM(bool)+0x13a0>
        writeSetting(address, val);
    a6a2:	210b      	movs	r1, #11
    a6a4:	20b2      	movs	r0, #178	; 0xb2
    a6a6:	f7fe fe17 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a6aa:	240b      	movs	r4, #11
    leverCC         = readSettingBounded(LEVERCC_ADDR, 0, 127, LEVERCC_FACTORY);
    a6ac:	4b6a      	ldr	r3, [pc, #424]	; (a858 <readEEPROM(bool)+0x154c>)
    a6ae:	20b4      	movs	r0, #180	; 0xb4
    a6b0:	801c      	strh	r4, [r3, #0]
    a6b2:	f003 fea1 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a6b6:	f04f 0400 	mov.w	r4, #0
    a6ba:	4603      	mov	r3, r0
    a6bc:	20b5      	movs	r0, #181	; 0xb5
    a6be:	f363 0407 	bfi	r4, r3, #0, #8
    a6c2:	f003 fe99 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a6c6:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a6ca:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a6cc:	1e63      	subs	r3, r4, #1
    a6ce:	2bc6      	cmp	r3, #198	; 0xc6
    a6d0:	d904      	bls.n	a6dc <readEEPROM(bool)+0x13d0>
        writeSetting(address, val);
    a6d2:	2164      	movs	r1, #100	; 0x64
    a6d4:	20b4      	movs	r0, #180	; 0xb4
    a6d6:	f7fe fdff 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a6da:	2464      	movs	r4, #100	; 0x64
    cvTune          = readSettingBounded(CVTUNE_ADDR, 1, 199, CVTUNE_FACTORY);
    a6dc:	4b5f      	ldr	r3, [pc, #380]	; (a85c <readEEPROM(bool)+0x1550>)
    a6de:	20b6      	movs	r0, #182	; 0xb6
    a6e0:	801c      	strh	r4, [r3, #0]
    a6e2:	f003 fe89 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a6e6:	f04f 0400 	mov.w	r4, #0
    a6ea:	4603      	mov	r3, r0
    a6ec:	20b7      	movs	r0, #183	; 0xb7
    a6ee:	f363 0407 	bfi	r4, r3, #0, #8
    a6f2:	f003 fe81 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a6f6:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a6fa:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a6fc:	1e63      	subs	r3, r4, #1
    a6fe:	2bc6      	cmp	r3, #198	; 0xc6
    a700:	d904      	bls.n	a70c <readEEPROM(bool)+0x1400>
        writeSetting(address, val);
    a702:	2164      	movs	r1, #100	; 0x64
    a704:	20b6      	movs	r0, #182	; 0xb6
    a706:	f7fe fde7 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a70a:	2464      	movs	r4, #100	; 0x64
    cvScale         = readSettingBounded(CVSCALE_ADDR, 1, 199, CVSCALE_FACTORY);
    a70c:	4b54      	ldr	r3, [pc, #336]	; (a860 <readEEPROM(bool)+0x1554>)
    a70e:	20b8      	movs	r0, #184	; 0xb8
    a710:	801c      	strh	r4, [r3, #0]
    a712:	f003 fe71 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a716:	f04f 0400 	mov.w	r4, #0
    a71a:	4603      	mov	r3, r0
    a71c:	20b9      	movs	r0, #185	; 0xb9
    a71e:	f363 0407 	bfi	r4, r3, #0, #8
    a722:	f003 fe69 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a726:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a72a:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a72c:	2c08      	cmp	r4, #8
    a72e:	d904      	bls.n	a73a <readEEPROM(bool)+0x142e>
        writeSetting(address, val);
    a730:	2103      	movs	r1, #3
    a732:	20b8      	movs	r0, #184	; 0xb8
    a734:	f7fe fdd0 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a738:	2403      	movs	r4, #3
    cvVibRate       = readSettingBounded(CVRATE_ADDR, 0, 8, CVRATE_FACTORY);
    a73a:	4b4a      	ldr	r3, [pc, #296]	; (a864 <readEEPROM(bool)+0x1558>)
    a73c:	20ba      	movs	r0, #186	; 0xba
    a73e:	801c      	strh	r4, [r3, #0]
    a740:	f003 fe5a 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a744:	f04f 0400 	mov.w	r4, #0
    a748:	4603      	mov	r3, r0
    a74a:	20bb      	movs	r0, #187	; 0xbb
    a74c:	f363 0407 	bfi	r4, r3, #0, #8
    a750:	f003 fe52 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a754:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a758:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a75a:	2c03      	cmp	r4, #3
    a75c:	d904      	bls.n	a768 <readEEPROM(bool)+0x145c>
        writeSetting(address, val);
    a75e:	2101      	movs	r1, #1
    a760:	20ba      	movs	r0, #186	; 0xba
    a762:	f7fe fdb9 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a766:	2401      	movs	r4, #1
    rollerMode      = readSettingBounded(ROLLER_ADDR, 0, 3, ROLLER_FACTORY);
    a768:	4b3f      	ldr	r3, [pc, #252]	; (a868 <readEEPROM(bool)+0x155c>)
    a76a:	20bc      	movs	r0, #188	; 0xbc
    a76c:	801c      	strh	r4, [r3, #0]
    a76e:	f003 fe43 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a772:	f04f 0400 	mov.w	r4, #0
    a776:	4603      	mov	r3, r0
    a778:	20bd      	movs	r0, #189	; 0xbd
    a77a:	f363 0407 	bfi	r4, r3, #0, #8
    a77e:	f003 fe3b 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a782:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a786:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a788:	2c7f      	cmp	r4, #127	; 0x7f
    a78a:	d904      	bls.n	a796 <readEEPROM(bool)+0x148a>
        writeSetting(address, val);
    a78c:	2100      	movs	r1, #0
    a78e:	20bc      	movs	r0, #188	; 0xbc
    a790:	f7fe fda2 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a794:	2400      	movs	r4, #0
    glissSetting    = readSettingBounded(GLISSSET_ADDR, 0, 127, GLISSSEL_FACTORY);  // ws
    a796:	4b35      	ldr	r3, [pc, #212]	; (a86c <readEEPROM(bool)+0x1560>)
    a798:	20be      	movs	r0, #190	; 0xbe
    a79a:	801c      	strh	r4, [r3, #0]
    a79c:	f003 fe2c 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a7a0:	f04f 0400 	mov.w	r4, #0
    a7a4:	4603      	mov	r3, r0
    a7a6:	20bf      	movs	r0, #191	; 0xbf
    a7a8:	f363 0407 	bfi	r4, r3, #0, #8
    a7ac:	f003 fe24 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a7b0:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a7b4:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a7b6:	2c01      	cmp	r4, #1
    a7b8:	d904      	bls.n	a7c4 <readEEPROM(bool)+0x14b8>
        writeSetting(address, val);
    a7ba:	2101      	movs	r1, #1
    a7bc:	20be      	movs	r0, #190	; 0xbe
    a7be:	f7fe fd8b 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a7c2:	2401      	movs	r4, #1
    vib2BrDirection = readSettingBounded(VIB2BR_DIRECTION_ADDR, 0, 1, VIB2BRDIR_FACTORY);  // ws
    a7c4:	4b2a      	ldr	r3, [pc, #168]	; (a870 <readEEPROM(bool)+0x1564>)
    a7c6:	20c0      	movs	r0, #192	; 0xc0
    a7c8:	801c      	strh	r4, [r3, #0]
    a7ca:	f003 fe15 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a7ce:	f04f 0400 	mov.w	r4, #0
    a7d2:	4603      	mov	r3, r0
    a7d4:	20c1      	movs	r0, #193	; 0xc1
    a7d6:	f363 0407 	bfi	r4, r3, #0, #8
    a7da:	f003 fe0d 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a7de:	f360 240f 	bfi	r4, r0, #8, #8
    return data.val;
    a7e2:	b2a4      	uxth	r4, r4
    if(val < min || val > max) {
    a7e4:	2c1e      	cmp	r4, #30
    a7e6:	d904      	bls.n	a7f2 <readEEPROM(bool)+0x14e6>
        writeSetting(address, val);
    a7e8:	210a      	movs	r1, #10
    a7ea:	20c0      	movs	r0, #192	; 0xc0
    a7ec:	f7fe fd74 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
        val = defaultValue;
    a7f0:	240a      	movs	r4, #10
    fastBoot         = (dipSwBits & (1<<DIPSW_FASTBOOT))?1:0;
    a7f2:	882b      	ldrh	r3, [r5, #0]
    vib2BreathAmount = readSettingBounded(VIB2BR_AMOUNT_ADDR, 0, 30, VIB2BRAMT_FACTORY);  // ws
    a7f4:	481f      	ldr	r0, [pc, #124]	; (a874 <readEEPROM(bool)+0x1568>)
    fastBoot         = (dipSwBits & (1<<DIPSW_FASTBOOT))?1:0;
    a7f6:	4a20      	ldr	r2, [pc, #128]	; (a878 <readEEPROM(bool)+0x156c>)
    vib2BreathAmount = readSettingBounded(VIB2BR_AMOUNT_ADDR, 0, 30, VIB2BRAMT_FACTORY);  // ws
    a7f8:	8004      	strh	r4, [r0, #0]
    fastBoot         = (dipSwBits & (1<<DIPSW_FASTBOOT))?1:0;
    a7fa:	f003 0101 	and.w	r1, r3, #1
    a7fe:	8011      	strh	r1, [r2, #0]
    legacyBrAct      = (dipSwBits & (1<<DIPSW_LEGACYBRACT))?1:0;
    a800:	4c1e      	ldr	r4, [pc, #120]	; (a87c <readEEPROM(bool)+0x1570>)
    legacy           = (dipSwBits & (1<<DIPSW_LEGACY))?1:0;
    a802:	491f      	ldr	r1, [pc, #124]	; (a880 <readEEPROM(bool)+0x1574>)
    widiOn           = (dipSwBits & (1<<DIPSW_WIDION))?1:0;
    a804:	4a1f      	ldr	r2, [pc, #124]	; (a884 <readEEPROM(bool)+0x1578>)
    legacy           = (dipSwBits & (1<<DIPSW_LEGACY))?1:0;
    a806:	f3c3 0040 	ubfx	r0, r3, #1, #1
    legacyBrAct      = (dipSwBits & (1<<DIPSW_LEGACYBRACT))?1:0;
    a80a:	f3c3 0580 	ubfx	r5, r3, #2, #1
    legacy           = (dipSwBits & (1<<DIPSW_LEGACY))?1:0;
    a80e:	8008      	strh	r0, [r1, #0]
    legacyBrAct      = (dipSwBits & (1<<DIPSW_LEGACYBRACT))?1:0;
    a810:	8025      	strh	r5, [r4, #0]
    gateOpenEnable   = (dipSwBits & (1<<DIPSW_GATEOPEN))?1:0;
    a812:	481d      	ldr	r0, [pc, #116]	; (a888 <readEEPROM(bool)+0x157c>)
    specialKeyEnable = (dipSwBits & (1<<DIPSW_SPKEYENABLE))?1:0;
    a814:	491d      	ldr	r1, [pc, #116]	; (a88c <readEEPROM(bool)+0x1580>)
    widiOn           = (dipSwBits & (1<<DIPSW_WIDION))?1:0;
    a816:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    a81a:	7014      	strb	r4, [r2, #0]
    gateOpenEnable   = (dipSwBits & (1<<DIPSW_GATEOPEN))?1:0;
    a81c:	f3c3 1400 	ubfx	r4, r3, #4, #1
    bcasMode         = (dipSwBits & (1<<DIPSW_BCASMODE))?1:0;
    a820:	4a1b      	ldr	r2, [pc, #108]	; (a890 <readEEPROM(bool)+0x1584>)
    gateOpenEnable   = (dipSwBits & (1<<DIPSW_GATEOPEN))?1:0;
    a822:	8004      	strh	r4, [r0, #0]
    specialKeyEnable = (dipSwBits & (1<<DIPSW_SPKEYENABLE))?1:0;
    a824:	f3c3 1040 	ubfx	r0, r3, #5, #1
    bcasMode         = (dipSwBits & (1<<DIPSW_BCASMODE))?1:0;
    a828:	f3c3 1380 	ubfx	r3, r3, #6, #1
    specialKeyEnable = (dipSwBits & (1<<DIPSW_SPKEYENABLE))?1:0;
    a82c:	8008      	strh	r0, [r1, #0]
    bcasMode         = (dipSwBits & (1<<DIPSW_BCASMODE))?1:0;
    a82e:	8013      	strh	r3, [r2, #0]
    a830:	e030      	b.n	a894 <readEEPROM(bool)+0x1588>
    a832:	bf00      	nop
    a834:	1fff8d3a 	.word	0x1fff8d3a
    a838:	1fff9b84 	.word	0x1fff9b84
    a83c:	1fff9b28 	.word	0x1fff9b28
    a840:	1fff9b1c 	.word	0x1fff9b1c
    a844:	1fff9a16 	.word	0x1fff9a16
    a848:	1fff9a14 	.word	0x1fff9a14
    a84c:	1fff9a0a 	.word	0x1fff9a0a
    a850:	1fff9b18 	.word	0x1fff9b18
    a854:	1fff9a08 	.word	0x1fff9a08
    a858:	1fff9b16 	.word	0x1fff9b16
    a85c:	1fff9a80 	.word	0x1fff9a80
    a860:	1fff9a76 	.word	0x1fff9a76
    a864:	1fff9a82 	.word	0x1fff9a82
    a868:	1fff9b9c 	.word	0x1fff9b9c
    a86c:	1fff9ad4 	.word	0x1fff9ad4
    a870:	1fff9bf8 	.word	0x1fff9bf8
    a874:	1fff8e74 	.word	0x1fff8e74
    a878:	1fff9a9e 	.word	0x1fff9a9e
    a87c:	1fff9b10 	.word	0x1fff9b10
    a880:	1fff9b0e 	.word	0x1fff9b0e
    a884:	1fff9c1f 	.word	0x1fff9c1f
    a888:	1fff9ac2 	.word	0x1fff9ac2
    a88c:	1fff9bd8 	.word	0x1fff9bd8
    a890:	1fff9a06 	.word	0x1fff9a06
}
    a894:	bd70      	pop	{r4, r5, r6, pc}
    a896:	b2a3      	uxth	r3, r4
    if (factoryReset || settingsVersion == 0xffffu) {
    a898:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a89c:	4293      	cmp	r3, r2
    a89e:	f43e ad47 	beq.w	9330 <readEEPROM(bool)+0x24>
    if(settingsVersion != EEPROM_VERSION) {
    a8a2:	2b2d      	cmp	r3, #45	; 0x2d
    a8a4:	f43e aec2 	beq.w	962c <readEEPROM(bool)+0x320>
        if(settingsVersion < 24) { //Oldest version from which any settings are recognized
    a8a8:	2b17      	cmp	r3, #23
    a8aa:	f67e ad41 	bls.w	9330 <readEEPROM(bool)+0x24>
        if(settingsVersion < 26) {
    a8ae:	2b19      	cmp	r3, #25
    a8b0:	f67e adaa 	bls.w	9408 <readEEPROM(bool)+0xfc>
        if(settingsVersion < 28) {
    a8b4:	2b1b      	cmp	r3, #27
    a8b6:	f67e adc7 	bls.w	9448 <readEEPROM(bool)+0x13c>
        if(settingsVersion < 29) {
    a8ba:	2b1c      	cmp	r3, #28
    a8bc:	f43e addc 	beq.w	9478 <readEEPROM(bool)+0x16c>
        if(settingsVersion < 31) {
    a8c0:	2b1e      	cmp	r3, #30
    a8c2:	f67e ade1 	bls.w	9488 <readEEPROM(bool)+0x17c>
        if(settingsVersion < 32) {
    a8c6:	2b1f      	cmp	r3, #31
    a8c8:	f43e ade6 	beq.w	9498 <readEEPROM(bool)+0x18c>
        if(settingsVersion < 33) {
    a8cc:	2b20      	cmp	r3, #32
    a8ce:	f43e adff 	beq.w	94d0 <readEEPROM(bool)+0x1c4>
        if(settingsVersion < 34) {
    a8d2:	2b21      	cmp	r3, #33	; 0x21
    a8d4:	f43e ae08 	beq.w	94e8 <readEEPROM(bool)+0x1dc>
        if(settingsVersion < 35) {
    a8d8:	2b22      	cmp	r3, #34	; 0x22
    a8da:	f43e ae0d 	beq.w	94f8 <readEEPROM(bool)+0x1ec>
        if(settingsVersion < 36) {
    a8de:	2b23      	cmp	r3, #35	; 0x23
    a8e0:	f43e ae16 	beq.w	9510 <readEEPROM(bool)+0x204>
        if(settingsVersion < 37) {
    a8e4:	2b24      	cmp	r3, #36	; 0x24
    a8e6:	f43e ae47 	beq.w	9578 <readEEPROM(bool)+0x26c>
        if(settingsVersion < 38) {
    a8ea:	2b25      	cmp	r3, #37	; 0x25
    a8ec:	f43e ae4c 	beq.w	9588 <readEEPROM(bool)+0x27c>
        if(settingsVersion < 39) {
    a8f0:	2b26      	cmp	r3, #38	; 0x26
    a8f2:	f43e ae4d 	beq.w	9590 <readEEPROM(bool)+0x284>
        if(settingsVersion < 40) {
    a8f6:	2b27      	cmp	r3, #39	; 0x27
    a8f8:	f43e ae52 	beq.w	95a0 <readEEPROM(bool)+0x294>
        if(settingsVersion < 41) {
    a8fc:	2b28      	cmp	r3, #40	; 0x28
    a8fe:	f43e ae5d 	beq.w	95bc <readEEPROM(bool)+0x2b0>
        if(settingsVersion < 42) {
    a902:	2b29      	cmp	r3, #41	; 0x29
    a904:	f43e ae62 	beq.w	95cc <readEEPROM(bool)+0x2c0>
        if(settingsVersion < 43) {
    a908:	2b2a      	cmp	r3, #42	; 0x2a
    a90a:	f43e ae6f 	beq.w	95ec <readEEPROM(bool)+0x2e0>
        if(settingsVersion < 44) {
    a90e:	2b2b      	cmp	r3, #43	; 0x2b
    a910:	f43e ae74 	beq.w	95fc <readEEPROM(bool)+0x2f0>
        if(settingsVersion < 45) {
    a914:	2b2c      	cmp	r3, #44	; 0x2c
    a916:	f43e ae75 	beq.w	9604 <readEEPROM(bool)+0x2f8>
        if(settingsVersion < 46) {
    a91a:	2b2d      	cmp	r3, #45	; 0x2d
    a91c:	f43e ae76 	beq.w	960c <readEEPROM(bool)+0x300>
        if(settingsVersion < 47) {
    a920:	2b2e      	cmp	r3, #46	; 0x2e
    a922:	f47e ae7f 	bne.w	9624 <readEEPROM(bool)+0x318>
    a926:	f7fe be75 	b.w	9614 <readEEPROM(bool)+0x308>
    a92a:	bf00      	nop

0000a92c <readSetting(unsigned short)>:
uint16_t readSetting(const uint16_t address) {
    a92c:	b538      	push	{r3, r4, r5, lr}
    a92e:	4605      	mov	r5, r0
    a930:	f003 fd62 	bl	e3f8 <eeprom_read_byte>
    data.v[0] = EEPROM.read(address);
    a934:	f04f 0400 	mov.w	r4, #0
    a938:	4603      	mov	r3, r0
    a93a:	1c68      	adds	r0, r5, #1
    a93c:	f363 0407 	bfi	r4, r3, #0, #8
    a940:	f003 fd5a 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a944:	f360 240f 	bfi	r4, r0, #8, #8
}
    a948:	b2a0      	uxth	r0, r4
    a94a:	bd38      	pop	{r3, r4, r5, pc}

0000a94c <sendSysexSettings()>:
CRC32 covers the entire buffer up to and including the eeprom data (but not the checksum itself)

This currently operates under the assumption that the whole EEPROM chunk only consists of unsigned 16 bit ints, only using the range 0-16383

*/
void sendSysexSettings() {
    a94c:	b570      	push	{r4, r5, r6, lr}
  const char *header = "NuEVIc01"; //NuEVI config dump 01

  //Build a send buffer of all the things
  size_t sysex_size = 3 + strlen(header) + 2 + EEPROM_SIZE + 4;
  uint8_t *sysex_data = (uint8_t*)malloc(sysex_size);
    a94e:	20d3      	movs	r0, #211	; 0xd3
void sendSysexSettings() {
    a950:	b082      	sub	sp, #8
  uint8_t *sysex_data = (uint8_t*)malloc(sysex_size);
    a952:	f007 f8cf 	bl	11af4 <malloc>
  int size_pos = header_pos + strlen(header);
  int payload_pos = size_pos + 2;
  int checksum_pos = payload_pos + EEPROM_SIZE;

  //SysEX manufacturer ID
  memcpy(sysex_data, sysex_id, 3);
    a956:	4b2c      	ldr	r3, [pc, #176]	; (aa08 <sendSysexSettings()+0xbc>)

  //Header with command code
  memcpy(sysex_data+header_pos, header, strlen(header));
    a958:	492c      	ldr	r1, [pc, #176]	; (aa0c <sendSysexSettings()+0xc0>)
  memcpy(sysex_data, sysex_id, 3);
    a95a:	681b      	ldr	r3, [r3, #0]
  uint8_t *sysex_data = (uint8_t*)malloc(sysex_size);
    a95c:	4606      	mov	r6, r0
  memcpy(sysex_data, sysex_id, 3);
    a95e:	0c18      	lsrs	r0, r3, #16
  memcpy(sysex_data+header_pos, header, strlen(header));
    a960:	2208      	movs	r2, #8
  memcpy(sysex_data, sysex_id, 3);
    a962:	70b0      	strb	r0, [r6, #2]
  memcpy(sysex_data+header_pos, header, strlen(header));
    a964:	1cf0      	adds	r0, r6, #3
  memcpy(sysex_data, sysex_id, 3);
    a966:	8033      	strh	r3, [r6, #0]
  memcpy(sysex_data+header_pos, header, strlen(header));
    a968:	f003 fd8e 	bl	e488 <memcpy>

  //Payload length
  *(uint16_t*)(sysex_data+size_pos) = convertToMidiValue(EEPROM_SIZE);
    a96c:	20c2      	movs	r0, #194	; 0xc2
    a96e:	f7fe fc59 	bl	9224 <convertToMidiValue(unsigned short)>
    a972:	f3c0 230f 	ubfx	r3, r0, #8, #16
    a976:	72f0      	strb	r0, [r6, #11]
    a978:	7333      	strb	r3, [r6, #12]
    a97a:	2400      	movs	r4, #0
    a97c:	4620      	mov	r0, r4
    a97e:	f003 fd3b 	bl	e3f8 <eeprom_read_byte>
    a982:	4603      	mov	r3, r0
    a984:	1c60      	adds	r0, r4, #1
    data.v[0] = EEPROM.read(address);
    a986:	f363 0507 	bfi	r5, r3, #0, #8
    a98a:	f003 fd35 	bl	e3f8 <eeprom_read_byte>
    data.v[1] = EEPROM.read(address+1);
    a98e:	f360 250f 	bfi	r5, r0, #8, #8
  uint16_t* config_buffer_start = (uint16_t*)(sysex_data+payload_pos);

  //Read one settings item at a time, change data format, and put in send buffer
  for(uint16_t idx=0; idx<EEPROM_SIZE/2; idx++) {
    uint16_t eepromval = readSetting(idx*2);
    config_buffer_start[idx] = convertToMidiValue(eepromval);
    a992:	b2a8      	uxth	r0, r5
    a994:	f7fe fc46 	bl	9224 <convertToMidiValue(unsigned short)>
    a998:	1933      	adds	r3, r6, r4
  for(uint16_t idx=0; idx<EEPROM_SIZE/2; idx++) {
    a99a:	3402      	adds	r4, #2
    a99c:	2cc2      	cmp	r4, #194	; 0xc2
    config_buffer_start[idx] = convertToMidiValue(eepromval);
    a99e:	f8a3 000d 	strh.w	r0, [r3, #13]
  for(uint16_t idx=0; idx<EEPROM_SIZE/2; idx++) {
    a9a2:	d1eb      	bne.n	a97c <sendSysexSettings()+0x30>
         crc = (crc >> 1) ^ (0xEDB88320 &  -(crc & 1));
    a9a4:	481a      	ldr	r0, [pc, #104]	; (aa10 <sendSysexSettings()+0xc4>)
    a9a6:	1e74      	subs	r4, r6, #1
    a9a8:	f106 05ce 	add.w	r5, r6, #206	; 0xce
   uint32_t crc=0xFFFFFFFF;
    a9ac:	f04f 31ff 	mov.w	r1, #4294967295
      crc ^= message[pos++]; //Get next byte and increment position
    a9b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    a9b4:	2208      	movs	r2, #8
    a9b6:	4059      	eors	r1, r3
         crc = (crc >> 1) ^ (0xEDB88320 &  -(crc & 1));
    a9b8:	f341 0300 	sbfx	r3, r1, #0, #1
      for (uint8_t j=0; j<8; ++j) { //Mask off 8 next bits
    a9bc:	3a01      	subs	r2, #1
         crc = (crc >> 1) ^ (0xEDB88320 &  -(crc & 1));
    a9be:	4003      	ands	r3, r0
      for (uint8_t j=0; j<8; ++j) { //Mask off 8 next bits
    a9c0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
         crc = (crc >> 1) ^ (0xEDB88320 &  -(crc & 1));
    a9c4:	ea83 0151 	eor.w	r1, r3, r1, lsr #1
      for (uint8_t j=0; j<8; ++j) { //Mask off 8 next bits
    a9c8:	d1f6      	bne.n	a9b8 <sendSysexSettings()+0x6c>
   while (pos<length) {
    a9ca:	42a5      	cmp	r5, r4
    a9cc:	d1f0      	bne.n	a9b0 <sendSysexSettings()+0x64>
  }

  uint32_t checksum = crc32(sysex_data, checksum_pos);

  *(uint32_t*)(sysex_data+checksum_pos) = convertToMidiCRC(checksum);
    a9ce:	43c8      	mvns	r0, r1
    a9d0:	9201      	str	r2, [sp, #4]
    a9d2:	f7fe fc39 	bl	9248 <convertToMidiCRC(unsigned long)>
    a9d6:	f3c0 4107 	ubfx	r1, r0, #16, #8
    a9da:	0e03      	lsrs	r3, r0, #24
    a9dc:	f3c0 2407 	ubfx	r4, r0, #8, #8
    a9e0:	f886 00cf 	strb.w	r0, [r6, #207]	; 0xcf
    a9e4:	f886 10d1 	strb.w	r1, [r6, #209]	; 0xd1
			usb_midi_send_sysex_add_term_bytes(data, length, cable);
    a9e8:	4630      	mov	r0, r6
    a9ea:	9a01      	ldr	r2, [sp, #4]
    a9ec:	f886 40d0 	strb.w	r4, [r6, #208]	; 0xd0
    a9f0:	21d3      	movs	r1, #211	; 0xd3
    a9f2:	f886 30d2 	strb.w	r3, [r6, #210]	; 0xd2
    a9f6:	f006 f839 	bl	10a6c <usb_midi_send_sysex_add_term_bytes>

  usbMIDI.sendSysEx(sysex_size, sysex_data);

  free(sysex_data);
    a9fa:	4630      	mov	r0, r6
}
    a9fc:	b002      	add	sp, #8
    a9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  free(sysex_data);
    aa02:	f007 b87f 	b.w	11b04 <free>
    aa06:	bf00      	nop
    aa08:	00015238 	.word	0x00015238
    aa0c:	000150e0 	.word	0x000150e0
    aa10:	edb88320 	.word	0xedb88320

0000aa14 <sendSysexVersion()>:
  //All went well
  return true;
}

//Send EEPROM and firmware versions
void sendSysexVersion() {
    aa14:	b510      	push	{r4, lr}
  char sysexMessage[] = "vvvNuEVIc04eevvvvvvvv"; //Placeholders for vendor and code
    aa16:	4c15      	ldr	r4, [pc, #84]	; (aa6c <sendSysexVersion()+0x58>)
    aa18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
void sendSysexVersion() {
    aa1a:	b086      	sub	sp, #24
  char sysexMessage[] = "vvvNuEVIc04eevvvvvvvv"; //Placeholders for vendor and code
    aa1c:	46ec      	mov	ip, sp
    aa1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa22:	e894 0003 	ldmia.w	r4, {r0, r1}
  uint8_t fwStrLen = min(strlen(FIRMWARE_VERSION), (size_t)8); //Limit firmware version string to 8 bytes

  memcpy(sysexMessage, sysex_id, 3);
    aa26:	4b12      	ldr	r3, [pc, #72]	; (aa70 <sendSysexVersion()+0x5c>)
  char sysexMessage[] = "vvvNuEVIc04eevvvvvvvv"; //Placeholders for vendor and code
    aa28:	f84c 0b04 	str.w	r0, [ip], #4
  memcpy(sysexMessage, sysex_id, 3);
    aa2c:	681b      	ldr	r3, [r3, #0]
  char sysexMessage[] = "vvvNuEVIc04eevvvvvvvv"; //Placeholders for vendor and code
    aa2e:	f8ac 1000 	strh.w	r1, [ip]
  memcpy(sysexMessage, sysex_id, 3);
    aa32:	0c1c      	lsrs	r4, r3, #16
  memcpy(sysexMessage+13, FIRMWARE_VERSION, fwStrLen);
    aa34:	490f      	ldr	r1, [pc, #60]	; (aa74 <sendSysexVersion()+0x60>)
  memcpy(sysexMessage, sysex_id, 3);
    aa36:	f8ad 3000 	strh.w	r3, [sp]
  memcpy(sysexMessage+13, FIRMWARE_VERSION, fwStrLen);
    aa3a:	2205      	movs	r2, #5
    aa3c:	f10d 000d 	add.w	r0, sp, #13
  memcpy(sysexMessage, sysex_id, 3);
    aa40:	f88d 4002 	strb.w	r4, [sp, #2]
  memcpy(sysexMessage+13, FIRMWARE_VERSION, fwStrLen);
    aa44:	f003 fd20 	bl	e488 <memcpy>

  *(uint16_t*)(sysexMessage+11) = convertToMidiValue(EEPROM_VERSION);
    aa48:	202d      	movs	r0, #45	; 0x2d
    aa4a:	f7fe fbeb 	bl	9224 <convertToMidiValue(unsigned short)>
    aa4e:	2200      	movs	r2, #0
    aa50:	4603      	mov	r3, r0
    aa52:	f3c0 240f 	ubfx	r4, r0, #8, #16
    aa56:	2112      	movs	r1, #18
    aa58:	4668      	mov	r0, sp
    aa5a:	f88d 300b 	strb.w	r3, [sp, #11]
    aa5e:	f88d 400c 	strb.w	r4, [sp, #12]
    aa62:	f006 f803 	bl	10a6c <usb_midi_send_sysex_add_term_bytes>

  uint8_t message_length = 13+fwStrLen;

  usbMIDI.sendSysEx(message_length, (const uint8_t *)sysexMessage);
}
    aa66:	b006      	add	sp, #24
    aa68:	bd10      	pop	{r4, pc}
    aa6a:	bf00      	nop
    aa6c:	000150f8 	.word	0x000150f8
    aa70:	00015238 	.word	0x00015238
    aa74:	00013a48 	.word	0x00013a48

0000aa78 <configModeLoop()>:
		return usb_midi_read(channel);
    aa78:	2000      	movs	r0, #0
    aa7a:	f006 b879 	b.w	10b70 <usb_midi_read>
    aa7e:	bf00      	nop

0000aa80 <_GLOBAL__sub_I__Z10readEEPROMb>:
    EEPROMClass()                        { eeprom_initialize(); }
    aa80:	f003 bc84 	b.w	e38c <eeprom_initialize>

0000aa84 <configShowMessage(char const*)>:

extern Adafruit_SSD1306 display;

void configShowMessage(const char* message) {
    aa84:	b530      	push	{r4, r5, lr}
  display.fillRect(0,32,128,64,BLACK);
    aa86:	4d10      	ldr	r5, [pc, #64]	; (aac8 <configShowMessage(char const*)+0x44>)
void configShowMessage(const char* message) {
    aa88:	b083      	sub	sp, #12
  display.fillRect(0,32,128,64,BLACK);
    aa8a:	2100      	movs	r1, #0
    aa8c:	2340      	movs	r3, #64	; 0x40
    aa8e:	9300      	str	r3, [sp, #0]
    aa90:	2220      	movs	r2, #32
    aa92:	2380      	movs	r3, #128	; 0x80
    aa94:	9101      	str	r1, [sp, #4]
void configShowMessage(const char* message) {
    aa96:	4604      	mov	r4, r0
  display.fillRect(0,32,128,64,BLACK);
    aa98:	4628      	mov	r0, r5
    aa9a:	f002 fb55 	bl	d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    aa9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    aaa2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    cursor_x = x;
    aaa6:	612a      	str	r2, [r5, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    aaa8:	616b      	str	r3, [r5, #20]
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    aaaa:	b13c      	cbz	r4, aabc <configShowMessage(char const*)+0x38>
							  return write((const uint8_t *)str, strlen(str)); }
    aaac:	4620      	mov	r0, r4
    aaae:	f007 fe87 	bl	127c0 <strlen>
    aab2:	4621      	mov	r1, r4
    aab4:	4602      	mov	r2, r0
    aab6:	4628      	mov	r0, r5
    aab8:	f003 fa74 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
  display.setCursor(0,32);
  display.setTextColor(WHITE);

  display.print(message);

  display.display();
    aabc:	4802      	ldr	r0, [pc, #8]	; (aac8 <configShowMessage(char const*)+0x44>)
}
    aabe:	b003      	add	sp, #12
    aac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  display.display();
    aac4:	f002 b944 	b.w	cd50 <Adafruit_SSD1306::display()>
    aac8:	1fff9c74 	.word	0x1fff9c74

0000aacc <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]>:
bool receiveSysexSettings(const uint8_t* data, const uint16_t length) {
    aacc:	b570      	push	{r4, r5, r6, lr}
    aace:	4605      	mov	r5, r0
         crc = (crc >> 1) ^ (0xEDB88320 &  -(crc & 1));
    aad0:	4841      	ldr	r0, [pc, #260]	; (abd8 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0x10c>)
bool receiveSysexSettings(const uint8_t* data, const uint16_t length) {
    aad2:	b082      	sub	sp, #8
    aad4:	f105 3cff 	add.w	ip, r5, #4294967295
    aad8:	f105 06ce 	add.w	r6, r5, #206	; 0xce
   uint32_t crc=0xFFFFFFFF;
    aadc:	f04f 32ff 	mov.w	r2, #4294967295
      crc ^= message[pos++]; //Get next byte and increment position
    aae0:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    aae4:	2408      	movs	r4, #8
    aae6:	405a      	eors	r2, r3
         crc = (crc >> 1) ^ (0xEDB88320 &  -(crc & 1));
    aae8:	f342 0300 	sbfx	r3, r2, #0, #1
      for (uint8_t j=0; j<8; ++j) { //Mask off 8 next bits
    aaec:	1e61      	subs	r1, r4, #1
         crc = (crc >> 1) ^ (0xEDB88320 &  -(crc & 1));
    aaee:	4003      	ands	r3, r0
      for (uint8_t j=0; j<8; ++j) { //Mask off 8 next bits
    aaf0:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
         crc = (crc >> 1) ^ (0xEDB88320 &  -(crc & 1));
    aaf4:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
      for (uint8_t j=0; j<8; ++j) { //Mask off 8 next bits
    aaf8:	d1f6      	bne.n	aae8 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0x1c>
   while (pos<length) {
    aafa:	45b4      	cmp	ip, r6
    aafc:	d1f0      	bne.n	aae0 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0x14>
  uint32_t crc=convertToMidiCRC(crc32(data, checksum_pos));
    aafe:	43d0      	mvns	r0, r2
    ab00:	f7fe fba2 	bl	9248 <convertToMidiCRC(unsigned long)>
  memcpy(&crc_rcv, data+checksum_pos, 4);
    ab04:	2204      	movs	r2, #4
  uint32_t crc=convertToMidiCRC(crc32(data, checksum_pos));
    ab06:	4606      	mov	r6, r0
  memcpy(&crc_rcv, data+checksum_pos, 4);
    ab08:	f105 01cf 	add.w	r1, r5, #207	; 0xcf
    ab0c:	eb0d 0002 	add.w	r0, sp, r2
    ab10:	f003 fcba 	bl	e488 <memcpy>
  if(crc != crc_rcv && crc_rcv != NO_CHECKSUM) {
    ab14:	9b01      	ldr	r3, [sp, #4]
    ab16:	429e      	cmp	r6, r3
    ab18:	d002      	beq.n	ab20 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0x54>
    ab1a:	f1b3 2f7f 	cmp.w	r3, #2130738944	; 0x7f007f00
    ab1e:	d14e      	bne.n	abbe <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xf2>
  uint16_t payload_size = convertFromMidiValue(data+size_pos);
    ab20:	f105 000b 	add.w	r0, r5, #11
    ab24:	f7fe fb86 	bl	9234 <convertFromMidiValue(unsigned char const*)>
  if(payload_size != EEPROM_SIZE) {
    ab28:	28c2      	cmp	r0, #194	; 0xc2
    ab2a:	d135      	bne.n	ab98 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xcc>
  uint16_t eeprom_version_rcv = convertFromMidiValue(data+(payload_pos+VERSION_ADDR));
    ab2c:	350d      	adds	r5, #13
    ab2e:	4628      	mov	r0, r5
    ab30:	f7fe fb80 	bl	9234 <convertFromMidiValue(unsigned char const*)>
  if(eeprom_version_rcv != EEPROM_VERSION) {
    ab34:	282d      	cmp	r0, #45	; 0x2d
    ab36:	d148      	bne.n	abca <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xfe>
    ab38:	2400      	movs	r4, #0
      if(val<pitchbLoLimit || val>pitchbHiLimit) continue;
    ab3a:	f640 56ac 	movw	r6, #3500	; 0xdac
    ab3e:	e01b      	b.n	ab78 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xac>
    if(addr == BREATH_THR_ADDR || addr == BREATH_MAX_ADDR) {
    ab40:	2b04      	cmp	r3, #4
    ab42:	d020      	beq.n	ab86 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xba>
    if(addr == PORTAM_THR_ADDR || addr == PORTAM_MAX_ADDR) {
    ab44:	2b06      	cmp	r3, #6
    ab46:	d033      	beq.n	abb0 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xe4>
    ab48:	2b08      	cmp	r3, #8
    ab4a:	d031      	beq.n	abb0 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xe4>
    if(addr == PITCHB_THR_ADDR || addr == PITCHB_MAX_ADDR) {
    ab4c:	2b0a      	cmp	r3, #10
    ab4e:	d029      	beq.n	aba4 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xd8>
    ab50:	2b0c      	cmp	r3, #12
    ab52:	d027      	beq.n	aba4 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xd8>
    if(addr == EXTRAC_THR_ADDR || addr == EXTRAC_MAX_ADDR) {
    ab54:	2b22      	cmp	r3, #34	; 0x22
    ab56:	d025      	beq.n	aba4 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xd8>
    ab58:	2b24      	cmp	r3, #36	; 0x24
    ab5a:	d023      	beq.n	aba4 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xd8>
    if(addr == CTOUCH_THR_ADDR) {
    ab5c:	2b2a      	cmp	r3, #42	; 0x2a
    ab5e:	d105      	bne.n	ab6c <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xa0>
      if(val<ctouchLoLimit || val>ctouchHiLimit) continue;
    ab60:	f1a0 0232 	sub.w	r2, r0, #50	; 0x32
    ab64:	b292      	uxth	r2, r2
    ab66:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
    ab6a:	d802      	bhi.n	ab72 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xa6>
    writeSetting(addr, val);
    ab6c:	4618      	mov	r0, r3
    ab6e:	f7fe fbb3 	bl	92d8 <writeSetting(unsigned short, unsigned short)>
  for(uint16_t i=0; i<payload_size/2; i++) {
    ab72:	3402      	adds	r4, #2
    ab74:	2cc2      	cmp	r4, #194	; 0xc2
    ab76:	d00c      	beq.n	ab92 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xc6>
    val = convertFromMidiValue(data+(payload_pos+addr));
    ab78:	1928      	adds	r0, r5, r4
    ab7a:	f7fe fb5b 	bl	9234 <convertFromMidiValue(unsigned char const*)>
    if(addr == BREATH_THR_ADDR || addr == BREATH_MAX_ADDR) {
    ab7e:	2c02      	cmp	r4, #2
    ab80:	b2a3      	uxth	r3, r4
    val = convertFromMidiValue(data+(payload_pos+addr));
    ab82:	4601      	mov	r1, r0
    if(addr == BREATH_THR_ADDR || addr == BREATH_MAX_ADDR) {
    ab84:	d1dc      	bne.n	ab40 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0x74>
      if(val<breathLoLimit || val>breathHiLimit) continue;
    ab86:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    ab8a:	d3ef      	bcc.n	ab6c <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xa0>
  for(uint16_t i=0; i<payload_size/2; i++) {
    ab8c:	3402      	adds	r4, #2
    ab8e:	2cc2      	cmp	r4, #194	; 0xc2
    ab90:	d1f2      	bne.n	ab78 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xac>
  return true;
    ab92:	2001      	movs	r0, #1
}
    ab94:	b002      	add	sp, #8
    ab96:	bd70      	pop	{r4, r5, r6, pc}
    configShowMessage("Invalid config size");
    ab98:	4810      	ldr	r0, [pc, #64]	; (abdc <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0x110>)
    ab9a:	f7ff ff73 	bl	aa84 <configShowMessage(char const*)>
    return false;
    ab9e:	2000      	movs	r0, #0
}
    aba0:	b002      	add	sp, #8
    aba2:	bd70      	pop	{r4, r5, r6, pc}
      if(val<pitchbLoLimit || val>pitchbHiLimit) continue;
    aba4:	f5a1 72fa 	sub.w	r2, r1, #500	; 0x1f4
    aba8:	b292      	uxth	r2, r2
    abaa:	42b2      	cmp	r2, r6
    abac:	d9de      	bls.n	ab6c <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xa0>
    abae:	e7e0      	b.n	ab72 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xa6>
      if(val<portamLoLimit || val>portamHiLimit) continue;
    abb0:	f5a1 722f 	sub.w	r2, r1, #700	; 0x2bc
    abb4:	b292      	uxth	r2, r2
    abb6:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
    abba:	d8da      	bhi.n	ab72 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xa6>
    abbc:	e7d6      	b.n	ab6c <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0xa0>
    configShowMessage("Invalid checksum");
    abbe:	4808      	ldr	r0, [pc, #32]	; (abe0 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0x114>)
    abc0:	f7ff ff60 	bl	aa84 <configShowMessage(char const*)>
    return false;
    abc4:	4620      	mov	r0, r4
}
    abc6:	b002      	add	sp, #8
    abc8:	bd70      	pop	{r4, r5, r6, pc}
    configShowMessage("Invalid config version");
    abca:	4806      	ldr	r0, [pc, #24]	; (abe4 <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]+0x118>)
    abcc:	f7ff ff5a 	bl	aa84 <configShowMessage(char const*)>
    return false;
    abd0:	2000      	movs	r0, #0
}
    abd2:	b002      	add	sp, #8
    abd4:	bd70      	pop	{r4, r5, r6, pc}
    abd6:	bf00      	nop
    abd8:	edb88320 	.word	0xedb88320
    abdc:	00015124 	.word	0x00015124
    abe0:	00015110 	.word	0x00015110
    abe4:	00015138 	.word	0x00015138

0000abe8 <handleSysex(unsigned char*, unsigned int)>:

void handleSysex(uint8_t *data, unsigned int length) {
  //Note: Sysex data as received here contains sysex start and end markers (0xF0 and 0xF7)

  //Too short to even contain a 3-byte vendor id is not for us.
  if(length<4) return;
    abe8:	2903      	cmp	r1, #3
    abea:	d92c      	bls.n	ac46 <handleSysex(unsigned char*, unsigned int)+0x5e>
void handleSysex(uint8_t *data, unsigned int length) {
    abec:	b530      	push	{r4, r5, lr}

  //Verify vendor
  if(strncmp((char*)(data+1), sysex_id, 3)) return; //Silently ignore different vendor id
    abee:	7843      	ldrb	r3, [r0, #1]
void handleSysex(uint8_t *data, unsigned int length) {
    abf0:	b085      	sub	sp, #20
    abf2:	4605      	mov	r5, r0
  if(strncmp((char*)(data+1), sysex_id, 3)) return; //Silently ignore different vendor id
    abf4:	bb2b      	cbnz	r3, ac42 <handleSysex(unsigned char*, unsigned int)+0x5a>

  //Verify header. Min length is 3+5+3 bytes (vendor+header+message code)
  if(length<12 || strncmp((char*)(data+4), "NuEVI", 5)) {
    abf6:	290b      	cmp	r1, #11
    abf8:	460c      	mov	r4, r1
    abfa:	d905      	bls.n	ac08 <handleSysex(unsigned char*, unsigned int)+0x20>
    abfc:	4938      	ldr	r1, [pc, #224]	; (ace0 <handleSysex(unsigned char*, unsigned int)+0xf8>)
    abfe:	2205      	movs	r2, #5
    ac00:	3004      	adds	r0, #4
    ac02:	f007 fd0f 	bl	12624 <strncmp>
    ac06:	b1f8      	cbz	r0, ac48 <handleSysex(unsigned char*, unsigned int)+0x60>
    configShowMessage("Invalid message.");
    ac08:	4836      	ldr	r0, [pc, #216]	; (ace4 <handleSysex(unsigned char*, unsigned int)+0xfc>)
  memcpy(sysexMessage, sysex_id, 3);
    ac0a:	4c37      	ldr	r4, [pc, #220]	; (ace8 <handleSysex(unsigned char*, unsigned int)+0x100>)
    configShowMessage("Invalid message.");
    ac0c:	f7ff ff3a 	bl	aa84 <configShowMessage(char const*)>
  char sysexMessage[] = "vvvNuEVIccc"; //Placeholders for vendor and code
    ac10:	4b36      	ldr	r3, [pc, #216]	; (acec <handleSysex(unsigned char*, unsigned int)+0x104>)
    ac12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  memcpy(sysexMessage+8, messageCode, 3);
    ac16:	4b36      	ldr	r3, [pc, #216]	; (acf0 <handleSysex(unsigned char*, unsigned int)+0x108>)
  memcpy(sysexMessage, sysex_id, 3);
    ac18:	6825      	ldr	r5, [r4, #0]
  memcpy(sysexMessage+8, messageCode, 3);
    ac1a:	681c      	ldr	r4, [r3, #0]
  char sysexMessage[] = "vvvNuEVIccc"; //Placeholders for vendor and code
    ac1c:	ab01      	add	r3, sp, #4
    ac1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  memcpy(sysexMessage, sysex_id, 3);
    ac22:	0c2a      	lsrs	r2, r5, #16
  memcpy(sysexMessage+8, messageCode, 3);
    ac24:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  memcpy(sysexMessage, sysex_id, 3);
    ac28:	f88d 2006 	strb.w	r2, [sp, #6]
			usb_midi_send_sysex_add_term_bytes(data, length, cable);
    ac2c:	4618      	mov	r0, r3
    ac2e:	2200      	movs	r2, #0
    ac30:	210b      	movs	r1, #11
    ac32:	f8ad 5004 	strh.w	r5, [sp, #4]
  memcpy(sysexMessage+8, messageCode, 3);
    ac36:	f8ad 400c 	strh.w	r4, [sp, #12]
    ac3a:	f88d c00e 	strb.w	ip, [sp, #14]
    ac3e:	f005 ff15 	bl	10a6c <usb_midi_send_sysex_add_term_bytes>
    if(receiveSysexSettings(data+1, length-2)) configShowMessage("New config saved.");
  } else {
    configShowMessage("Unknown message.");
    sendSysexMessage("e01"); //Unimplemented message code
  }
}
    ac42:	b005      	add	sp, #20
    ac44:	bd30      	pop	{r4, r5, pc}
    ac46:	4770      	bx	lr
  strncpy(messageCode, (char*)(data+9), 3);
    ac48:	2203      	movs	r2, #3
    ac4a:	f105 0109 	add.w	r1, r5, #9
    ac4e:	4668      	mov	r0, sp
    ac50:	f007 fd2e 	bl	126b0 <strncpy>
  if(!strncmp(messageCode, "c00", 3)) { //Config dump request
    ac54:	f8bd 3000 	ldrh.w	r3, [sp]
    ac58:	f243 0263 	movw	r2, #12387	; 0x3063
    ac5c:	4293      	cmp	r3, r2
    ac5e:	d010      	beq.n	ac82 <handleSysex(unsigned char*, unsigned int)+0x9a>
  } else if(!strncmp(messageCode, "c03", 3)) { //Version info request
    ac60:	f243 0263 	movw	r2, #12387	; 0x3063
    ac64:	4293      	cmp	r3, r2
    ac66:	d01b      	beq.n	aca0 <handleSysex(unsigned char*, unsigned int)+0xb8>
  } else if(!strncmp(messageCode, "c02", 3)) { //New config incoming
    ac68:	f243 0263 	movw	r2, #12387	; 0x3063
    ac6c:	4293      	cmp	r3, r2
    ac6e:	d023      	beq.n	acb8 <handleSysex(unsigned char*, unsigned int)+0xd0>
    configShowMessage("Unknown message.");
    ac70:	4820      	ldr	r0, [pc, #128]	; (acf4 <handleSysex(unsigned char*, unsigned int)+0x10c>)
  memcpy(sysexMessage, sysex_id, 3);
    ac72:	4c1d      	ldr	r4, [pc, #116]	; (ace8 <handleSysex(unsigned char*, unsigned int)+0x100>)
    configShowMessage("Unknown message.");
    ac74:	f7ff ff06 	bl	aa84 <configShowMessage(char const*)>
  char sysexMessage[] = "vvvNuEVIccc"; //Placeholders for vendor and code
    ac78:	4b1c      	ldr	r3, [pc, #112]	; (acec <handleSysex(unsigned char*, unsigned int)+0x104>)
    ac7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  memcpy(sysexMessage+8, messageCode, 3);
    ac7e:	4b1e      	ldr	r3, [pc, #120]	; (acf8 <handleSysex(unsigned char*, unsigned int)+0x110>)
    ac80:	e7ca      	b.n	ac18 <handleSysex(unsigned char*, unsigned int)+0x30>
  if(!strncmp(messageCode, "c00", 3)) { //Config dump request
    ac82:	f89d 2002 	ldrb.w	r2, [sp, #2]
    ac86:	2a30      	cmp	r2, #48	; 0x30
    ac88:	d1ea      	bne.n	ac60 <handleSysex(unsigned char*, unsigned int)+0x78>
    configShowMessage("Sending config...");
    ac8a:	481c      	ldr	r0, [pc, #112]	; (acfc <handleSysex(unsigned char*, unsigned int)+0x114>)
    ac8c:	f7ff fefa 	bl	aa84 <configShowMessage(char const*)>
    sendSysexSettings();
    ac90:	f7ff fe5c 	bl	a94c <sendSysexSettings()>
    configShowMessage("Config sent.");
    ac94:	481a      	ldr	r0, [pc, #104]	; (ad00 <handleSysex(unsigned char*, unsigned int)+0x118>)
}
    ac96:	b005      	add	sp, #20
    ac98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if(receiveSysexSettings(data+1, length-2)) configShowMessage("New config saved.");
    ac9c:	f7ff bef2 	b.w	aa84 <configShowMessage(char const*)>
  } else if(!strncmp(messageCode, "c03", 3)) { //Version info request
    aca0:	f89d 2002 	ldrb.w	r2, [sp, #2]
    aca4:	2a33      	cmp	r2, #51	; 0x33
    aca6:	d1df      	bne.n	ac68 <handleSysex(unsigned char*, unsigned int)+0x80>
    configShowMessage("Sending version.");
    aca8:	4816      	ldr	r0, [pc, #88]	; (ad04 <handleSysex(unsigned char*, unsigned int)+0x11c>)
    acaa:	f7ff feeb 	bl	aa84 <configShowMessage(char const*)>
}
    acae:	b005      	add	sp, #20
    acb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sendSysexVersion();
    acb4:	f7ff beae 	b.w	aa14 <sendSysexVersion()>
  } else if(!strncmp(messageCode, "c02", 3)) { //New config incoming
    acb8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    acbc:	2b32      	cmp	r3, #50	; 0x32
    acbe:	d1d7      	bne.n	ac70 <handleSysex(unsigned char*, unsigned int)+0x88>
    configShowMessage("Receiving config...");
    acc0:	4811      	ldr	r0, [pc, #68]	; (ad08 <handleSysex(unsigned char*, unsigned int)+0x120>)
    acc2:	f7ff fedf 	bl	aa84 <configShowMessage(char const*)>
    if(receiveSysexSettings(data+1, length-2)) configShowMessage("New config saved.");
    acc6:	1ea3      	subs	r3, r4, #2
  if(length<expected_size) {
    acc8:	b29b      	uxth	r3, r3
    acca:	2bd2      	cmp	r3, #210	; 0xd2
    accc:	d906      	bls.n	acdc <handleSysex(unsigned char*, unsigned int)+0xf4>
    acce:	1c68      	adds	r0, r5, #1
    acd0:	f7ff fefc 	bl	aacc <receiveSysexSettings(unsigned char const*, unsigned short) [clone .part.0]>
    if(receiveSysexSettings(data+1, length-2)) configShowMessage("New config saved.");
    acd4:	2800      	cmp	r0, #0
    acd6:	d0b4      	beq.n	ac42 <handleSysex(unsigned char*, unsigned int)+0x5a>
    acd8:	480c      	ldr	r0, [pc, #48]	; (ad0c <handleSysex(unsigned char*, unsigned int)+0x124>)
    acda:	e7dc      	b.n	ac96 <handleSysex(unsigned char*, unsigned int)+0xae>
    configShowMessage("Invalid config format");
    acdc:	480c      	ldr	r0, [pc, #48]	; (ad10 <handleSysex(unsigned char*, unsigned int)+0x128>)
    acde:	e7da      	b.n	ac96 <handleSysex(unsigned char*, unsigned int)+0xae>
    ace0:	00015168 	.word	0x00015168
    ace4:	00015170 	.word	0x00015170
    ace8:	00015238 	.word	0x00015238
    acec:	000150ec 	.word	0x000150ec
    acf0:	00015184 	.word	0x00015184
    acf4:	000151f4 	.word	0x000151f4
    acf8:	00015208 	.word	0x00015208
    acfc:	0001518c 	.word	0x0001518c
    ad00:	000151a0 	.word	0x000151a0
    ad04:	000151b4 	.word	0x000151b4
    ad08:	000151cc 	.word	0x000151cc
    ad0c:	000151e0 	.word	0x000151e0
    ad10:	00015150 	.word	0x00015150

0000ad14 <handleSysexChunk(unsigned char const*, unsigned short, bool)>:
void handleSysexChunk(const uint8_t *data, uint16_t length, bool last) {
    ad14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(!sysex_rcv_buffer) {
    ad18:	4f18      	ldr	r7, [pc, #96]	; (ad7c <handleSysexChunk(unsigned char const*, unsigned short, bool)+0x68>)
    ad1a:	683b      	ldr	r3, [r7, #0]
void handleSysexChunk(const uint8_t *data, uint16_t length, bool last) {
    ad1c:	4681      	mov	r9, r0
    ad1e:	460c      	mov	r4, r1
    ad20:	4616      	mov	r6, r2
  if(!sysex_rcv_buffer) {
    ad22:	b313      	cbz	r3, ad6a <handleSysexChunk(unsigned char const*, unsigned short, bool)+0x56>
    pos = sysex_buf_size;
    ad24:	f8df 8058 	ldr.w	r8, [pc, #88]	; ad80 <handleSysexChunk(unsigned char const*, unsigned short, bool)+0x6c>
    ad28:	f8b8 5000 	ldrh.w	r5, [r8]
    sysex_buf_size += length;
    ad2c:	1869      	adds	r1, r5, r1
    sysex_rcv_buffer = (uint8_t *)realloc(sysex_rcv_buffer, sysex_buf_size);
    ad2e:	4618      	mov	r0, r3
    sysex_buf_size += length;
    ad30:	b289      	uxth	r1, r1
    ad32:	f8a8 1000 	strh.w	r1, [r8]
    sysex_rcv_buffer = (uint8_t *)realloc(sysex_rcv_buffer, sysex_buf_size);
    ad36:	f007 f9a9 	bl	1208c <realloc>
    ad3a:	4603      	mov	r3, r0
  memcpy(sysex_rcv_buffer + pos, data, length);
    ad3c:	4428      	add	r0, r5
    ad3e:	4622      	mov	r2, r4
    ad40:	4649      	mov	r1, r9
    sysex_rcv_buffer = (uint8_t *)malloc(sysex_buf_size);
    ad42:	603b      	str	r3, [r7, #0]
  memcpy(sysex_rcv_buffer + pos, data, length);
    ad44:	f003 fba0 	bl	e488 <memcpy>
  if(last) {
    ad48:	b90e      	cbnz	r6, ad4e <handleSysexChunk(unsigned char const*, unsigned short, bool)+0x3a>
}
    ad4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    handleSysex(sysex_rcv_buffer, sysex_buf_size);
    ad4e:	f8b8 1000 	ldrh.w	r1, [r8]
    ad52:	6838      	ldr	r0, [r7, #0]
    ad54:	f7ff ff48 	bl	abe8 <handleSysex(unsigned char*, unsigned int)>
    free(sysex_rcv_buffer);
    ad58:	6838      	ldr	r0, [r7, #0]
    ad5a:	f006 fed3 	bl	11b04 <free>
    sysex_rcv_buffer = NULL;
    ad5e:	2300      	movs	r3, #0
    ad60:	603b      	str	r3, [r7, #0]
    sysex_buf_size = 0;
    ad62:	f8a8 3000 	strh.w	r3, [r8]
}
    ad66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    sysex_buf_size = length;
    ad6a:	f8df 8014 	ldr.w	r8, [pc, #20]	; ad80 <handleSysexChunk(unsigned char const*, unsigned short, bool)+0x6c>
    sysex_rcv_buffer = (uint8_t *)malloc(sysex_buf_size);
    ad6e:	4608      	mov	r0, r1
    sysex_buf_size = length;
    ad70:	f8a8 1000 	strh.w	r1, [r8]
    sysex_rcv_buffer = (uint8_t *)malloc(sysex_buf_size);
    ad74:	f006 febe 	bl	11af4 <malloc>
    ad78:	4603      	mov	r3, r0
    ad7a:	e7e0      	b.n	ad3e <handleSysexChunk(unsigned char const*, unsigned short, bool)+0x2a>
    ad7c:	1fff9ce8 	.word	0x1fff9ce8
    ad80:	1fff9ce4 	.word	0x1fff9ce4

0000ad84 <configModeSetup()>:

void configModeSetup() {
    ad84:	b510      	push	{r4, lr}
    statusLedFlash(500);

    display.clearDisplay();
    ad86:	4c1c      	ldr	r4, [pc, #112]	; (adf8 <configModeSetup()+0x74>)
    statusLedFlash(500);
    ad88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    ad8c:	f7fb f932 	bl	5ff4 <statusLedFlash(unsigned short)>
    display.clearDisplay();
    ad90:	4620      	mov	r0, r4
    ad92:	f001 ffcd 	bl	cd30 <Adafruit_SSD1306::clearDisplay()>
    ad96:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    cursor_x = x;
    ad9a:	2100      	movs	r1, #0
    display.setCursor(0,0);
    display.setTextColor(WHITE);
    display.setTextSize(0);
    ad9c:	4620      	mov	r0, r4
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    ad9e:	6163      	str	r3, [r4, #20]
    cursor_x = x;
    ada0:	6121      	str	r1, [r4, #16]
    ada2:	f002 fe35 	bl	da10 <Adafruit_GFX::setTextSize(unsigned char)>
    ada6:	4915      	ldr	r1, [pc, #84]	; (adfc <configModeSetup()+0x78>)
    ada8:	220b      	movs	r2, #11
    adaa:	4620      	mov	r0, r4
    adac:	f003 f8fa 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    adb0:	4620      	mov	r0, r4
    adb2:	f003 f959 	bl	e068 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    adb6:	4912      	ldr	r1, [pc, #72]	; (ae00 <configModeSetup()+0x7c>)
    adb8:	220f      	movs	r2, #15
    adba:	4620      	mov	r0, r4
    adbc:	f003 f8f2 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    adc0:	4620      	mov	r0, r4
    adc2:	f003 f951 	bl	e068 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    adc6:	490f      	ldr	r1, [pc, #60]	; (ae04 <configModeSetup()+0x80>)
    adc8:	2207      	movs	r2, #7
    adca:	4620      	mov	r0, r4
    adcc:	f003 f8ea 	bl	dfa4 <Print::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    add0:	4620      	mov	r0, r4
    add2:	f003 f949 	bl	e068 <Print::println()>

    display.println("Config mgmt");
    display.println("Power off NuEVI");
    display.println("to exit");
    display.display();
    add6:	4620      	mov	r0, r4
    add8:	f001 ffba 	bl	cd50 <Adafruit_SSD1306::display()>
		// type: 0xF0  SystemExclusive - multiple calls for message bigger than buffer
                usb_midi_handleSysExPartial = (void (*)(const uint8_t *, uint16_t, uint8_t))fptr;
        }
        void setHandleSystemExclusive(void (*fptr)(const uint8_t *data, uint16_t length, bool complete)) {
		// type: 0xF0  SystemExclusive - multiple calls for message bigger than buffer
                usb_midi_handleSysExPartial = (void (*)(const uint8_t *, uint16_t, uint8_t))fptr;
    addc:	4b0a      	ldr	r3, [pc, #40]	; (ae08 <configModeSetup()+0x84>)
    adde:	4a0b      	ldr	r2, [pc, #44]	; (ae0c <configModeSetup()+0x88>)
    ade0:	601a      	str	r2, [r3, #0]

    usbMIDI.setHandleSystemExclusive(handleSysexChunk);

    statusLedFlash(500);
    ade2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    ade6:	f7fb f905 	bl	5ff4 <statusLedFlash(unsigned short)>

    sendSysexVersion(); //Friendly hello
    adea:	f7ff fe13 	bl	aa14 <sendSysexVersion()>

    configShowMessage("Ready.");
}
    adee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    configShowMessage("Ready.");
    adf2:	4807      	ldr	r0, [pc, #28]	; (ae10 <configModeSetup()+0x8c>)
    adf4:	f7ff be46 	b.w	aa84 <configShowMessage(char const*)>
    adf8:	1fff9c74 	.word	0x1fff9c74
    adfc:	0001520c 	.word	0x0001520c
    ae00:	00015218 	.word	0x00015218
    ae04:	00015228 	.word	0x00015228
    ae08:	1fff9fd0 	.word	0x1fff9fd0
    ae0c:	0000ad15 	.word	0x0000ad15
    ae10:	00015230 	.word	0x00015230

0000ae14 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
    ae14:	2000      	movs	r0, #0
    ae16:	4770      	bx	lr

0000ae18 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    ae18:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
    ae1c:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
	}
    ae20:	1a10      	subs	r0, r2, r0
    ae22:	4770      	bx	lr

0000ae24 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    ae24:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    ae28:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
    ae2c:	429a      	cmp	r2, r3
    ae2e:	d905      	bls.n	ae3c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    ae30:	1c5a      	adds	r2, r3, #1
    ae32:	4403      	add	r3, r0
    ae34:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    ae38:	7e18      	ldrb	r0, [r3, #24]
    ae3a:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    ae3c:	f04f 30ff 	mov.w	r0, #4294967295
	}
    ae40:	4770      	bx	lr
    ae42:	bf00      	nop

0000ae44 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    ae44:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    ae48:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
    ae4c:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    ae4e:	bf86      	itte	hi
    ae50:	18c0      	addhi	r0, r0, r3
    ae52:	7e00      	ldrbhi	r0, [r0, #24]
		if (rxBufferIndex >= rxBufferLength) return -1;
    ae54:	f04f 30ff 	movls.w	r0, #4294967295
	}
    ae58:	4770      	bx	lr
    ae5a:	bf00      	nop

0000ae5c <TwoWire::flush()>:
	virtual void flush(void) {
	}
    ae5c:	4770      	bx	lr
    ae5e:	bf00      	nop

0000ae60 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    ae60:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
    ae64:	b12b      	cbz	r3, ae72 <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    ae66:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    ae6a:	2b48      	cmp	r3, #72	; 0x48
    ae6c:	d903      	bls.n	ae76 <TwoWire::write(unsigned char)+0x16>
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
	int vprintf(const char *format, va_list ap) { return vdprintf((int)this, format, ap); }
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    ae6e:	2301      	movs	r3, #1
    ae70:	6043      	str	r3, [r0, #4]
			setWriteError();
			return 0;
    ae72:	2000      	movs	r0, #0
    ae74:	4770      	bx	lr
		}
		txBuffer[txBufferLength++] = data;
    ae76:	18c2      	adds	r2, r0, r3
    ae78:	3301      	adds	r3, #1
    ae7a:	f880 30ad 	strb.w	r3, [r0, #173]	; 0xad
		return 1;
    ae7e:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    ae80:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
		return 1;
    ae84:	4770      	bx	lr
    ae86:	bf00      	nop

0000ae88 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    ae88:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    ae8a:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
    ae8e:	b1a4      	cbz	r4, aeba <TwoWire::write(unsigned char const*, unsigned int)+0x32>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    ae90:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    ae94:	f1c3 0449 	rsb	r4, r3, #73	; 0x49
		if (quantity > avail) {
    ae98:	42a2      	cmp	r2, r4
    ae9a:	bf84      	itt	hi
    ae9c:	2201      	movhi	r2, #1
    ae9e:	6042      	strhi	r2, [r0, #4]
    aea0:	4605      	mov	r5, r0
    aea2:	bf98      	it	ls
    aea4:	4614      	movls	r4, r2
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    aea6:	3063      	adds	r0, #99	; 0x63
    aea8:	4418      	add	r0, r3
    aeaa:	4622      	mov	r2, r4
    aeac:	f003 faec 	bl	e488 <memcpy>
		txBufferLength += quantity;
    aeb0:	f895 30ad 	ldrb.w	r3, [r5, #173]	; 0xad
    aeb4:	4423      	add	r3, r4
    aeb6:	f885 30ad 	strb.w	r3, [r5, #173]	; 0xad
		return quantity;
	}
	return 0;
}
    aeba:	4620      	mov	r0, r4
    aebc:	bd38      	pop	{r3, r4, r5, pc}
    aebe:	bf00      	nop

0000aec0 <sda_rising_isr1()>:
{
    aec0:	b570      	push	{r4, r5, r6, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    aec2:	4c16      	ldr	r4, [pc, #88]	; (af1c <sda_rising_isr1()+0x5c>)
    aec4:	6923      	ldr	r3, [r4, #16]
	if (!(port().S & I2C_S_BUSY)) {
    aec6:	78db      	ldrb	r3, [r3, #3]
    aec8:	f013 0520 	ands.w	r5, r3, #32
    aecc:	d014      	beq.n	aef8 <sda_rising_isr1()+0x38>
		if (++irqcount >= 2 || !slave_mode) {
    aece:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    aed2:	3301      	adds	r3, #1
    aed4:	b2db      	uxtb	r3, r3
    aed6:	2b01      	cmp	r3, #1
    aed8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    aedc:	d802      	bhi.n	aee4 <sda_rising_isr1()+0x24>
    aede:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    aee2:	b943      	cbnz	r3, aef6 <sda_rising_isr1()+0x36>
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    aee4:	6963      	ldr	r3, [r4, #20]
    aee6:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    aeea:	4413      	add	r3, r2
}
    aeec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    aef0:	7a18      	ldrb	r0, [r3, #8]
    aef2:	f003 bccf 	b.w	e894 <detachInterrupt>
}
    aef6:	bd70      	pop	{r4, r5, r6, pc}
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
    aef8:	6963      	ldr	r3, [r4, #20]
    aefa:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    aefe:	4413      	add	r3, r2
    af00:	7a18      	ldrb	r0, [r3, #8]
    af02:	f003 fcc7 	bl	e894 <detachInterrupt>
		if (user_onReceive != NULL) {
    af06:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    af0a:	2b00      	cmp	r3, #0
    af0c:	d0f3      	beq.n	aef6 <sda_rising_isr1()+0x36>
			user_onReceive(rxBufferLength);
    af0e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
			rxBufferIndex = 0;
    af12:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
}
    af16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			user_onReceive(rxBufferLength);
    af1a:	4718      	bx	r3
    af1c:	1fff90c0 	.word	0x1fff90c0

0000af20 <sda_rising_isr0()>:
{
    af20:	b570      	push	{r4, r5, r6, lr}
    af22:	4c16      	ldr	r4, [pc, #88]	; (af7c <sda_rising_isr0()+0x5c>)
    af24:	6923      	ldr	r3, [r4, #16]
	if (!(port().S & I2C_S_BUSY)) {
    af26:	78db      	ldrb	r3, [r3, #3]
    af28:	f013 0520 	ands.w	r5, r3, #32
    af2c:	d014      	beq.n	af58 <sda_rising_isr0()+0x38>
		if (++irqcount >= 2 || !slave_mode) {
    af2e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    af32:	3301      	adds	r3, #1
    af34:	b2db      	uxtb	r3, r3
    af36:	2b01      	cmp	r3, #1
    af38:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    af3c:	d802      	bhi.n	af44 <sda_rising_isr0()+0x24>
    af3e:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    af42:	b943      	cbnz	r3, af56 <sda_rising_isr0()+0x36>
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    af44:	6963      	ldr	r3, [r4, #20]
    af46:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    af4a:	4413      	add	r3, r2
}
    af4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    af50:	7a18      	ldrb	r0, [r3, #8]
    af52:	f003 bc9f 	b.w	e894 <detachInterrupt>
}
    af56:	bd70      	pop	{r4, r5, r6, pc}
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
    af58:	6963      	ldr	r3, [r4, #20]
    af5a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    af5e:	4413      	add	r3, r2
    af60:	7a18      	ldrb	r0, [r3, #8]
    af62:	f003 fc97 	bl	e894 <detachInterrupt>
		if (user_onReceive != NULL) {
    af66:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    af6a:	2b00      	cmp	r3, #0
    af6c:	d0f3      	beq.n	af56 <sda_rising_isr0()+0x36>
			user_onReceive(rxBufferLength);
    af6e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
			rxBufferIndex = 0;
    af72:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
}
    af76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			user_onReceive(rxBufferLength);
    af7a:	4718      	bx	r3
    af7c:	1fff9004 	.word	0x1fff9004

0000af80 <TwoWire::begin()>:
	CLOCK_GATE_REG(hardware.clock_gate_register) |= hardware.clock_gate_mask;
    af80:	6942      	ldr	r2, [r0, #20]
	rxBufferIndex = 0;
    af82:	2300      	movs	r3, #0
    af84:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	txBufferIndex = 0;
    af88:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
{
    af8c:	b410      	push	{r4}
	CLOCK_GATE_REG(hardware.clock_gate_register) |= hardware.clock_gate_mask;
    af8e:	e9d2 1400 	ldrd	r1, r4, [r2]
    af92:	680a      	ldr	r2, [r1, #0]
	user_onRequest = NULL;
    af94:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	CLOCK_GATE_REG(hardware.clock_gate_register) |= hardware.clock_gate_mask;
    af98:	4322      	orrs	r2, r4
    af9a:	6904      	ldr	r4, [r0, #16]
	user_onReceive = NULL;
    af9c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	CLOCK_GATE_REG(hardware.clock_gate_register) |= hardware.clock_gate_mask;
    afa0:	600a      	str	r2, [r1, #0]
	port().C1 = 0;
    afa2:	70a3      	strb	r3, [r4, #2]
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    afa4:	6942      	ldr	r2, [r0, #20]
    afa6:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
    afaa:	4918      	ldr	r1, [pc, #96]	; (b00c <TwoWire::begin()+0x8c>)
    afac:	4413      	add	r3, r2
    afae:	f893 c008 	ldrb.w	ip, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
    afb2:	7b5b      	ldrb	r3, [r3, #13]
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    afb4:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
    afb8:	021b      	lsls	r3, r3, #8
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    afba:	f8dc 4004 	ldr.w	r4, [ip, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
    afbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    afc2:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    afc6:	6023      	str	r3, [r4, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    afc8:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
    afcc:	4413      	add	r3, r2
    afce:	7c9c      	ldrb	r4, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
    afd0:	7ddb      	ldrb	r3, [r3, #23]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    afd2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
    afd6:	021b      	lsls	r3, r3, #8
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    afd8:	684c      	ldr	r4, [r1, #4]
	if (!(CLOCK_GATE_REG(hardware.clock_gate_register) & hardware.clock_gate_mask)) return;
    afda:	6811      	ldr	r1, [r2, #0]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
    afdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    afe0:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    afe4:	6023      	str	r3, [r4, #0]
	if (!(CLOCK_GATE_REG(hardware.clock_gate_register) & hardware.clock_gate_mask)) return;
    afe6:	6809      	ldr	r1, [r1, #0]
    afe8:	6853      	ldr	r3, [r2, #4]
    afea:	4219      	tst	r1, r3
    afec:	d005      	beq.n	affa <TwoWire::begin()+0x7a>
    afee:	6903      	ldr	r3, [r0, #16]
		port().F = 0x27;	// 100 kHz
    aff0:	2227      	movs	r2, #39	; 0x27
    aff2:	705a      	strb	r2, [r3, #1]
    aff4:	6903      	ldr	r3, [r0, #16]
	port().FLT = 4;
    aff6:	2204      	movs	r2, #4
    aff8:	719a      	strb	r2, [r3, #6]
    affa:	6903      	ldr	r3, [r0, #16]
	port().C2 = I2C_C2_HDRS;
    affc:	2220      	movs	r2, #32
    affe:	715a      	strb	r2, [r3, #5]
    b000:	6903      	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    b002:	2280      	movs	r2, #128	; 0x80
    b004:	709a      	strb	r2, [r3, #2]
}
    b006:	bc10      	pop	{r4}
    b008:	4770      	bx	lr
    b00a:	bf00      	nop
    b00c:	00015e50 	.word	0x00015e50

0000b010 <TwoWire::setClock(unsigned long)>:
	if (!(CLOCK_GATE_REG(hardware.clock_gate_register) & hardware.clock_gate_mask)) return;
    b010:	6943      	ldr	r3, [r0, #20]
    b012:	e9d3 2300 	ldrd	r2, r3, [r3]
    b016:	6812      	ldr	r2, [r2, #0]
    b018:	421a      	tst	r2, r3
    b01a:	d00c      	beq.n	b036 <TwoWire::setClock(unsigned long)+0x26>
	if (frequency < 400000) {
    b01c:	4b08      	ldr	r3, [pc, #32]	; (b040 <TwoWire::setClock(unsigned long)+0x30>)
    b01e:	4299      	cmp	r1, r3
    b020:	d90a      	bls.n	b038 <TwoWire::setClock(unsigned long)+0x28>
	} else if (frequency < 1000000) {
    b022:	4b08      	ldr	r3, [pc, #32]	; (b044 <TwoWire::setClock(unsigned long)+0x34>)
    b024:	4299      	cmp	r1, r3
    b026:	6903      	ldr	r3, [r0, #16]
		port().F = 0x1A; // 400 kHz
    b028:	bf94      	ite	ls
    b02a:	221a      	movls	r2, #26
		port().F = 0x0D; // 1 MHz
    b02c:	220d      	movhi	r2, #13
    b02e:	705a      	strb	r2, [r3, #1]
    b030:	6903      	ldr	r3, [r0, #16]
	port().FLT = 4;
    b032:	2204      	movs	r2, #4
    b034:	719a      	strb	r2, [r3, #6]
}
    b036:	4770      	bx	lr
    b038:	6903      	ldr	r3, [r0, #16]
		port().F = 0x27;	// 100 kHz
    b03a:	2227      	movs	r2, #39	; 0x27
    b03c:	705a      	strb	r2, [r3, #1]
    b03e:	e7f7      	b.n	b030 <TwoWire::setClock(unsigned long)+0x20>
    b040:	00061a7f 	.word	0x00061a7f
    b044:	000f423f 	.word	0x000f423f

0000b048 <TwoWire::isr()>:
{
    b048:	b510      	push	{r4, lr}
    b04a:	6903      	ldr	r3, [r0, #16]
	status = port().S;
    b04c:	78d9      	ldrb	r1, [r3, #3]
    b04e:	b2ca      	uxtb	r2, r1
	if (status & I2C_S_ARBL) {
    b050:	06c9      	lsls	r1, r1, #27
{
    b052:	4604      	mov	r4, r0
	if (status & I2C_S_ARBL) {
    b054:	d522      	bpl.n	b09c <TwoWire::isr()+0x54>
		port().S = I2C_S_ARBL;
    b056:	2110      	movs	r1, #16
		if (!(status & I2C_S_IAAS)) return;
    b058:	0650      	lsls	r0, r2, #25
		port().S = I2C_S_ARBL;
    b05a:	70d9      	strb	r1, [r3, #3]
		if (!(status & I2C_S_IAAS)) return;
    b05c:	d51d      	bpl.n	b09a <TwoWire::isr()+0x52>
		if (status & I2C_S_SRW) {
    b05e:	f012 0204 	ands.w	r2, r2, #4
    b062:	d050      	beq.n	b106 <TwoWire::isr()+0xbe>
			receiving = 0;
    b064:	493d      	ldr	r1, [pc, #244]	; (b15c <TwoWire::isr()+0x114>)
			if (user_onRequest != NULL) {
    b066:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
			receiving = 0;
    b06a:	2300      	movs	r3, #0
    b06c:	700b      	strb	r3, [r1, #0]
			txBufferLength = 0;
    b06e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
			if (user_onRequest != NULL) {
    b072:	2a00      	cmp	r2, #0
    b074:	d05b      	beq.n	b12e <TwoWire::isr()+0xe6>
				user_onRequest();
    b076:	4790      	blx	r2
			if (txBufferLength == 0) {
    b078:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    b07c:	2b00      	cmp	r3, #0
    b07e:	d056      	beq.n	b12e <TwoWire::isr()+0xe6>
    b080:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    b082:	22d0      	movs	r2, #208	; 0xd0
    b084:	709a      	strb	r2, [r3, #2]
    b086:	6923      	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
    b088:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
    b08c:	711a      	strb	r2, [r3, #4]
    b08e:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 1;
    b090:	2201      	movs	r2, #1
    b092:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
	port().S = I2C_S_IICIF;
    b096:	2202      	movs	r2, #2
    b098:	70da      	strb	r2, [r3, #3]
}
    b09a:	bd10      	pop	{r4, pc}
	if (status & I2C_S_IAAS) {
    b09c:	0651      	lsls	r1, r2, #25
    b09e:	d4de      	bmi.n	b05e <TwoWire::isr()+0x16>
	c1 = port().C1;
    b0a0:	7899      	ldrb	r1, [r3, #2]
	if (c1 & I2C_C1_TX) {
    b0a2:	f011 0110 	ands.w	r1, r1, #16
    b0a6:	d117      	bne.n	b0d8 <TwoWire::isr()+0x90>
		if (this == &Wire) {
    b0a8:	4a2d      	ldr	r2, [pc, #180]	; (b160 <TwoWire::isr()+0x118>)
		irqcount = 0;
    b0aa:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
		if (this == &Wire) {
    b0ae:	4290      	cmp	r0, r2
    b0b0:	d04f      	beq.n	b152 <TwoWire::isr()+0x10a>
		} else if (this == &Wire1) {
    b0b2:	4a2c      	ldr	r2, [pc, #176]	; (b164 <TwoWire::isr()+0x11c>)
    b0b4:	4290      	cmp	r0, r2
    b0b6:	d041      	beq.n	b13c <TwoWire::isr()+0xf4>
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    b0b8:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		data = port().D;
    b0bc:	791a      	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    b0be:	2947      	cmp	r1, #71	; 0x47
		data = port().D;
    b0c0:	b2d2      	uxtb	r2, r2
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    b0c2:	d8e8      	bhi.n	b096 <TwoWire::isr()+0x4e>
    b0c4:	4825      	ldr	r0, [pc, #148]	; (b15c <TwoWire::isr()+0x114>)
    b0c6:	7800      	ldrb	r0, [r0, #0]
    b0c8:	2800      	cmp	r0, #0
    b0ca:	d0e4      	beq.n	b096 <TwoWire::isr()+0x4e>
			rxBuffer[rxBufferLength++] = data;
    b0cc:	1c48      	adds	r0, r1, #1
    b0ce:	4421      	add	r1, r4
    b0d0:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    b0d4:	760a      	strb	r2, [r1, #24]
    b0d6:	e7de      	b.n	b096 <TwoWire::isr()+0x4e>
		if ((status & I2C_S_RXAK) == 0) {
    b0d8:	f012 0201 	ands.w	r2, r2, #1
    b0dc:	d120      	bne.n	b120 <TwoWire::isr()+0xd8>
			if (txBufferIndex < txBufferLength) {
    b0de:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    b0e2:	f890 00ad 	ldrb.w	r0, [r0, #173]	; 0xad
    b0e6:	4288      	cmp	r0, r1
				port().D = txBuffer[txBufferIndex++];
    b0e8:	bf81      	itttt	hi
    b0ea:	1c4a      	addhi	r2, r1, #1
    b0ec:	1909      	addhi	r1, r1, r4
    b0ee:	f884 20ac 	strbhi.w	r2, [r4, #172]	; 0xac
    b0f2:	f891 2063 	ldrbhi.w	r2, [r1, #99]	; 0x63
				port().D = 0;
    b0f6:	711a      	strb	r2, [r3, #4]
    b0f8:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    b0fa:	22d0      	movs	r2, #208	; 0xd0
    b0fc:	709a      	strb	r2, [r3, #2]
    b0fe:	6923      	ldr	r3, [r4, #16]
	port().S = I2C_S_IICIF;
    b100:	2202      	movs	r2, #2
    b102:	70da      	strb	r2, [r3, #3]
    b104:	e7c9      	b.n	b09a <TwoWire::isr()+0x52>
    b106:	6923      	ldr	r3, [r4, #16]
			rxBufferLength = 0;
    b108:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    b10c:	21c0      	movs	r1, #192	; 0xc0
    b10e:	7099      	strb	r1, [r3, #2]
			receiving = 1;
    b110:	4a12      	ldr	r2, [pc, #72]	; (b15c <TwoWire::isr()+0x114>)
    b112:	6923      	ldr	r3, [r4, #16]
    b114:	2101      	movs	r1, #1
    b116:	7011      	strb	r1, [r2, #0]
	port().S = I2C_S_IICIF;
    b118:	2202      	movs	r2, #2
			data = port().D;
    b11a:	7918      	ldrb	r0, [r3, #4]
	port().S = I2C_S_IICIF;
    b11c:	70da      	strb	r2, [r3, #3]
    b11e:	e7bc      	b.n	b09a <TwoWire::isr()+0x52>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    b120:	22c0      	movs	r2, #192	; 0xc0
    b122:	709a      	strb	r2, [r3, #2]
    b124:	6903      	ldr	r3, [r0, #16]
			data = port().D;
    b126:	791a      	ldrb	r2, [r3, #4]
	port().S = I2C_S_IICIF;
    b128:	2202      	movs	r2, #2
    b12a:	70da      	strb	r2, [r3, #3]
    b12c:	e7b5      	b.n	b09a <TwoWire::isr()+0x52>
				txBufferLength = 1;
    b12e:	2201      	movs	r2, #1
				txBuffer[0] = 0;
    b130:	2300      	movs	r3, #0
				txBufferLength = 1;
    b132:	f884 20ad 	strb.w	r2, [r4, #173]	; 0xad
				txBuffer[0] = 0;
    b136:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    b13a:	e7a1      	b.n	b080 <TwoWire::isr()+0x38>
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
    b13c:	6943      	ldr	r3, [r0, #20]
    b13e:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
    b142:	4909      	ldr	r1, [pc, #36]	; (b168 <TwoWire::isr()+0x120>)
    b144:	4413      	add	r3, r2
    b146:	2203      	movs	r2, #3
    b148:	7a18      	ldrb	r0, [r3, #8]
    b14a:	f003 fb2f 	bl	e7ac <attachInterrupt>
    b14e:	6923      	ldr	r3, [r4, #16]
    b150:	e7b2      	b.n	b0b8 <TwoWire::isr()+0x70>
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
    b152:	6943      	ldr	r3, [r0, #20]
    b154:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
    b158:	4904      	ldr	r1, [pc, #16]	; (b16c <TwoWire::isr()+0x124>)
    b15a:	e7f3      	b.n	b144 <TwoWire::isr()+0xfc>
    b15c:	1fff9cec 	.word	0x1fff9cec
    b160:	1fff9004 	.word	0x1fff9004
    b164:	1fff90c0 	.word	0x1fff90c0
    b168:	0000aec1 	.word	0x0000aec1
    b16c:	0000af21 	.word	0x0000af21

0000b170 <TwoWire::wait_idle()>:

bool TwoWire::wait_idle(void)
{
    b170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b174:	4c37      	ldr	r4, [pc, #220]	; (b254 <L_2082_delayMicroseconds+0xa>)
    b176:	6902      	ldr	r2, [r0, #16]
    b178:	6823      	ldr	r3, [r4, #0]
    b17a:	b082      	sub	sp, #8
    b17c:	9300      	str	r3, [sp, #0]
	return ret;
    b17e:	f8dd 8000 	ldr.w	r8, [sp]
	uint8_t i2c_status(void) {
		return port().S;
    b182:	78d3      	ldrb	r3, [r2, #3]
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    b184:	0699      	lsls	r1, r3, #26
    b186:	d518      	bpl.n	b1ba <TwoWire::wait_idle()+0x4a>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    b188:	4e33      	ldr	r6, [pc, #204]	; (b258 <L_2082_delayMicroseconds+0xe>)
    b18a:	4605      	mov	r5, r0
	bool reset=false;
    b18c:	2100      	movs	r1, #0
    b18e:	e002      	b.n	b196 <TwoWire::wait_idle()+0x26>
    b190:	78d3      	ldrb	r3, [r2, #3]
	while (i2c_status() & I2C_S_BUSY) {
    b192:	069b      	lsls	r3, r3, #26
    b194:	d511      	bpl.n	b1ba <TwoWire::wait_idle()+0x4a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b196:	6823      	ldr	r3, [r4, #0]
    b198:	9301      	str	r3, [sp, #4]
	return ret;
    b19a:	9b01      	ldr	r3, [sp, #4]
		uint32_t waited = millis() - wait_begin;
    b19c:	eba3 0308 	sub.w	r3, r3, r8
		if (waited > 15 && !reset) {
    b1a0:	2b0f      	cmp	r3, #15
    b1a2:	d9f5      	bls.n	b190 <TwoWire::wait_idle()+0x20>
    b1a4:	b169      	cbz	r1, b1c2 <TwoWire::wait_idle()+0x52>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    b1a6:	2b10      	cmp	r3, #16
    b1a8:	d0f2      	beq.n	b190 <TwoWire::wait_idle()+0x20>
			// bus stuck busy too long
			port().C1 = 0;
    b1aa:	2000      	movs	r0, #0
    b1ac:	7090      	strb	r0, [r2, #2]
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    b1ae:	692b      	ldr	r3, [r5, #16]
			port().C1 = I2C_C1_IICEN;
    b1b0:	2280      	movs	r2, #128	; 0x80
    b1b2:	709a      	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    b1b4:	b002      	add	sp, #8
    b1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
    b1ba:	2001      	movs	r0, #1
}
    b1bc:	b002      	add	sp, #8
    b1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    b1c2:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
    b1c6:	696b      	ldr	r3, [r5, #20]
    b1c8:	4413      	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    b1ca:	2105      	movs	r1, #5
    b1cc:	7a18      	ldrb	r0, [r3, #8]
    b1ce:	f003 fdc1 	bl	ed54 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    b1d2:	696b      	ldr	r3, [r5, #20]
    b1d4:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
    b1d8:	4413      	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    b1da:	2101      	movs	r1, #1
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    b1dc:	f893 a012 	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    b1e0:	4650      	mov	r0, sl
    b1e2:	f003 fdb7 	bl	ed54 <pinMode>
    b1e6:	2709      	movs	r7, #9
	__asm__ volatile(
    b1e8:	f04f 09a0 	mov.w	r9, #160	; 0xa0
				digitalWrite(scl_pin, LOW);
    b1ec:	2100      	movs	r1, #0
    b1ee:	4650      	mov	r0, sl
    b1f0:	f003 fd7c 	bl	ecec <digitalWrite>
    b1f4:	464b      	mov	r3, r9

0000b1f6 <L_1999_delayMicroseconds>:
    b1f6:	3b01      	subs	r3, #1
    b1f8:	d1fd      	bne.n	b1f6 <L_1999_delayMicroseconds>
				digitalWrite(scl_pin, HIGH);
    b1fa:	2101      	movs	r1, #1
    b1fc:	4650      	mov	r0, sl
    b1fe:	f003 fd75 	bl	ecec <digitalWrite>
    b202:	464b      	mov	r3, r9

0000b204 <L_2018_delayMicroseconds>:
    b204:	3b01      	subs	r3, #1
    b206:	d1fd      	bne.n	b204 <L_2018_delayMicroseconds>
			for (int i=0; i < 9; i++) {
    b208:	3f01      	subs	r7, #1
    b20a:	d1ef      	bne.n	b1ec <TwoWire::wait_idle()+0x7c>
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    b20c:	6969      	ldr	r1, [r5, #20]
    b20e:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
    b212:	440b      	add	r3, r1
    b214:	f44f 72a0 	mov.w	r2, #320	; 0x140
    b218:	7a18      	ldrb	r0, [r3, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
    b21a:	7b5b      	ldrb	r3, [r3, #13]
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    b21c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
    b220:	021b      	lsls	r3, r3, #8
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    b222:	6840      	ldr	r0, [r0, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
    b224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    b228:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    b22c:	6003      	str	r3, [r0, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    b22e:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
    b232:	440b      	add	r3, r1
    b234:	7c99      	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
    b236:	7ddb      	ldrb	r3, [r3, #23]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    b238:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
    b23c:	021b      	lsls	r3, r3, #8
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    b23e:	6849      	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
    b240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    b244:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    b248:	600b      	str	r3, [r1, #0]

0000b24a <L_2082_delayMicroseconds>:
    b24a:	3a01      	subs	r2, #1
    b24c:	d1fd      	bne.n	b24a <L_2082_delayMicroseconds>
			reset = true;
    b24e:	2101      	movs	r1, #1
    b250:	692a      	ldr	r2, [r5, #16]
			continue;
    b252:	e79d      	b.n	b190 <TwoWire::wait_idle()+0x20>
    b254:	1fff9d70 	.word	0x1fff9d70
    b258:	00015e50 	.word	0x00015e50

0000b25c <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    b25c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b25e:	6903      	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    b260:	2212      	movs	r2, #18
    b262:	70da      	strb	r2, [r3, #3]
    b264:	6902      	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    b266:	7893      	ldrb	r3, [r2, #2]
    b268:	f013 0620 	ands.w	r6, r3, #32
{
    b26c:	b085      	sub	sp, #20
    b26e:	4604      	mov	r4, r0
    b270:	460d      	mov	r5, r1
	if (port().C1 & I2C_C1_MST) {
    b272:	d052      	beq.n	b31a <TwoWire::endTransmission(unsigned char)+0xbe>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    b274:	23b4      	movs	r3, #180	; 0xb4
    b276:	7093      	strb	r3, [r2, #2]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b278:	4932      	ldr	r1, [pc, #200]	; (b344 <TwoWire::endTransmission(unsigned char)+0xe8>)
    b27a:	6920      	ldr	r0, [r4, #16]
    b27c:	680b      	ldr	r3, [r1, #0]
    b27e:	9300      	str	r3, [sp, #0]
	return ret;
    b280:	9e00      	ldr	r6, [sp, #0]
    b282:	e005      	b.n	b290 <TwoWire::endTransmission(unsigned char)+0x34>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b284:	680a      	ldr	r2, [r1, #0]
    b286:	9201      	str	r2, [sp, #4]
	return ret;
    b288:	9a01      	ldr	r2, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    b28a:	1b92      	subs	r2, r2, r6
    b28c:	2a04      	cmp	r2, #4
    b28e:	d83d      	bhi.n	b30c <TwoWire::endTransmission(unsigned char)+0xb0>
		return port().S;
    b290:	78c3      	ldrb	r3, [r0, #3]
		if ((status & I2C_S_BUSY)) break;
    b292:	f013 0320 	ands.w	r3, r3, #32
    b296:	d0f5      	beq.n	b284 <TwoWire::endTransmission(unsigned char)+0x28>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    b298:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    b29c:	b36b      	cbz	r3, b2fa <TwoWire::endTransmission(unsigned char)+0x9e>
    b29e:	f04f 0c00 	mov.w	ip, #0
    b2a2:	46e6      	mov	lr, ip
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    b2a4:	2602      	movs	r6, #2
		port().D = txBuffer[i];
    b2a6:	eb04 030e 	add.w	r3, r4, lr
    b2aa:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
    b2ae:	7103      	strb	r3, [r0, #4]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b2b0:	680b      	ldr	r3, [r1, #0]
    b2b2:	9302      	str	r3, [sp, #8]
	return ret;
    b2b4:	9f02      	ldr	r7, [sp, #8]
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    b2b6:	6920      	ldr	r0, [r4, #16]
    b2b8:	e007      	b.n	b2ca <TwoWire::endTransmission(unsigned char)+0x6e>
			if (!(status & I2C_S_BUSY)) break;
    b2ba:	0692      	lsls	r2, r2, #26
    b2bc:	d50a      	bpl.n	b2d4 <TwoWire::endTransmission(unsigned char)+0x78>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b2be:	680a      	ldr	r2, [r1, #0]
    b2c0:	9203      	str	r2, [sp, #12]
	return ret;
    b2c2:	9a03      	ldr	r2, [sp, #12]
			if (millis() - wait_begin > 5) {
    b2c4:	1bd2      	subs	r2, r2, r7
    b2c6:	2a05      	cmp	r2, #5
    b2c8:	d820      	bhi.n	b30c <TwoWire::endTransmission(unsigned char)+0xb0>
		return port().S;
    b2ca:	78c3      	ldrb	r3, [r0, #3]
    b2cc:	b2da      	uxtb	r2, r3
			if ((status & I2C_S_IICIF)) break;
    b2ce:	f013 0302 	ands.w	r3, r3, #2
    b2d2:	d0f2      	beq.n	b2ba <TwoWire::endTransmission(unsigned char)+0x5e>
		port().S = I2C_S_IICIF;
    b2d4:	70c6      	strb	r6, [r0, #3]
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    b2d6:	6923      	ldr	r3, [r4, #16]
		return port().S;
    b2d8:	78da      	ldrb	r2, [r3, #3]
    b2da:	b2d7      	uxtb	r7, r2
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    b2dc:	06d2      	lsls	r2, r2, #27
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    b2de:	4618      	mov	r0, r3
    b2e0:	d426      	bmi.n	b330 <TwoWire::endTransmission(unsigned char)+0xd4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    b2e2:	06ba      	lsls	r2, r7, #26
    b2e4:	d524      	bpl.n	b330 <TwoWire::endTransmission(unsigned char)+0xd4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    b2e6:	07fa      	lsls	r2, r7, #31
    b2e8:	d426      	bmi.n	b338 <TwoWire::endTransmission(unsigned char)+0xdc>
	for (i=0; i < txBufferLength; i++) {
    b2ea:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    b2ee:	f10c 0c01 	add.w	ip, ip, #1
    b2f2:	fa5f fe8c 	uxtb.w	lr, ip
    b2f6:	4573      	cmp	r3, lr
    b2f8:	d8d5      	bhi.n	b2a6 <TwoWire::endTransmission(unsigned char)+0x4a>
	uint8_t i, status, ret=0;
    b2fa:	2000      	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    b2fc:	b115      	cbz	r5, b304 <TwoWire::endTransmission(unsigned char)+0xa8>
    b2fe:	6923      	ldr	r3, [r4, #16]
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    b300:	2280      	movs	r2, #128	; 0x80
    b302:	709a      	strb	r2, [r3, #2]
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    b304:	2300      	movs	r3, #0
    b306:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
    b30a:	e004      	b.n	b316 <TwoWire::endTransmission(unsigned char)+0xba>
				port().C1 = 0;
    b30c:	7083      	strb	r3, [r0, #2]
    b30e:	6923      	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    b310:	2280      	movs	r2, #128	; 0x80
    b312:	709a      	strb	r2, [r3, #2]
				return 4; // clock stretch too long
    b314:	2004      	movs	r0, #4
}
    b316:	b005      	add	sp, #20
    b318:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!wait_idle()) {
    b31a:	f7ff ff29 	bl	b170 <TwoWire::wait_idle()>
    b31e:	b128      	cbz	r0, b32c <TwoWire::endTransmission(unsigned char)+0xd0>
    b320:	6923      	ldr	r3, [r4, #16]
		slave_mode = 0;
    b322:	f884 60af 	strb.w	r6, [r4, #175]	; 0xaf
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    b326:	22b0      	movs	r2, #176	; 0xb0
    b328:	709a      	strb	r2, [r3, #2]
    b32a:	e7a5      	b.n	b278 <TwoWire::endTransmission(unsigned char)+0x1c>
			return 4; // timeout waiting for bus
    b32c:	2004      	movs	r0, #4
    b32e:	e7f2      	b.n	b316 <TwoWire::endTransmission(unsigned char)+0xba>
			port().C1 = I2C_C1_IICEN;
    b330:	2280      	movs	r2, #128	; 0x80
    b332:	709a      	strb	r2, [r3, #2]
			ret = 4; // 4:other error
    b334:	2004      	movs	r0, #4
			break;
    b336:	e7e1      	b.n	b2fc <TwoWire::endTransmission(unsigned char)+0xa0>
				ret = 3; // 3:received NACK on transmit of data 
    b338:	f1be 0f00 	cmp.w	lr, #0
    b33c:	bf0c      	ite	eq
    b33e:	2002      	moveq	r0, #2
    b340:	2003      	movne	r0, #3
    b342:	e7dd      	b.n	b300 <TwoWire::endTransmission(unsigned char)+0xa4>
    b344:	1fff9d70 	.word	0x1fff9d70

0000b348 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    b348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b34c:	4690      	mov	r8, r2
    b34e:	4699      	mov	r9, r3
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    b350:	2200      	movs	r2, #0
    b352:	6903      	ldr	r3, [r0, #16]
    b354:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    b358:	2212      	movs	r2, #18
    b35a:	70da      	strb	r2, [r3, #3]
    b35c:	6903      	ldr	r3, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    b35e:	789c      	ldrb	r4, [r3, #2]
    b360:	f014 0520 	ands.w	r5, r4, #32
{
    b364:	b088      	sub	sp, #32
    b366:	4607      	mov	r7, r0
    b368:	468a      	mov	sl, r1
	if (port().C1 & I2C_C1_MST) {
    b36a:	f000 809f 	beq.w	b4ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x164>
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    b36e:	22b4      	movs	r2, #180	; 0xb4
    b370:	709a      	strb	r2, [r3, #2]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b372:	4e70      	ldr	r6, [pc, #448]	; (b534 <L_3417_delayMicroseconds+0x10>)
    b374:	693b      	ldr	r3, [r7, #16]
    b376:	6832      	ldr	r2, [r6, #0]
    b378:	9200      	str	r2, [sp, #0]
	return ret;
    b37a:	9a00      	ldr	r2, [sp, #0]
    b37c:	e008      	b.n	b390 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x48>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b37e:	6830      	ldr	r0, [r6, #0]
    b380:	9001      	str	r0, [sp, #4]
	return ret;
    b382:	9c01      	ldr	r4, [sp, #4]
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
    b384:	eba4 0c02 	sub.w	ip, r4, r2
    b388:	f1bc 0f04 	cmp.w	ip, #4
    b38c:	f200 8086 	bhi.w	b49c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x154>
		return port().S;
    b390:	78dc      	ldrb	r4, [r3, #3]
		if ((status & I2C_S_BUSY)) break;
    b392:	f014 0520 	ands.w	r5, r4, #32
    b396:	d0f2      	beq.n	b37e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x36>
			//Serial.printf("requestFrom err2\n");
			return 0; // error generating start condition
		}
	}
	// send the address
	port().D = (address << 1) | 1;
    b398:	ea4f 024a 	mov.w	r2, sl, lsl #1
    b39c:	f042 0201 	orr.w	r2, r2, #1
    b3a0:	b2d2      	uxtb	r2, r2
    b3a2:	711a      	strb	r2, [r3, #4]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b3a4:	6833      	ldr	r3, [r6, #0]
    b3a6:	9302      	str	r3, [sp, #8]
	return ret;
    b3a8:	9802      	ldr	r0, [sp, #8]
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    b3aa:	693a      	ldr	r2, [r7, #16]
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    b3ac:	e006      	b.n	b3bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b3ae:	6833      	ldr	r3, [r6, #0]
    b3b0:	9303      	str	r3, [sp, #12]
	return ret;
    b3b2:	9903      	ldr	r1, [sp, #12]
		if (millis() - wait_begin > 5) {
    b3b4:	1a09      	subs	r1, r1, r0
    b3b6:	2905      	cmp	r1, #5
    b3b8:	f200 8082 	bhi.w	b4c0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x178>
	while (!(port().S & I2C_S_IICIF)) {
    b3bc:	78d4      	ldrb	r4, [r2, #3]
    b3be:	f014 0502 	ands.w	r5, r4, #2
    b3c2:	d0f4      	beq.n	b3ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("requestFrom err3\n");
			return 0; // clock stretch too long (during address)
		}
	}
	port().S = I2C_S_IICIF;
    b3c4:	f04f 0c02 	mov.w	ip, #2
    b3c8:	f882 c003 	strb.w	ip, [r2, #3]
    b3cc:	693b      	ldr	r3, [r7, #16]
		return port().S;
    b3ce:	78dc      	ldrb	r4, [r3, #3]
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
    b3d0:	f014 0511 	ands.w	r5, r4, #17
    b3d4:	d17c      	bne.n	b4d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x188>
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
		//Serial.printf("requestFrom err4\n");
		return 0;
	}
	if (length == 0) {
    b3d6:	f1b8 0f00 	cmp.w	r8, #0
    b3da:	f000 8084 	beq.w	b4e6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x19e>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
    b3de:	f1b8 0f01 	cmp.w	r8, #1
    b3e2:	f000 808d 	beq.w	b500 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b8>
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
    b3e6:	22a0      	movs	r2, #160	; 0xa0
    b3e8:	709a      	strb	r2, [r3, #2]
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    b3ea:	6939      	ldr	r1, [r7, #16]
	}
	tmp = port().D; // initiate the first receive
    b3ec:	790b      	ldrb	r3, [r1, #4]
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    b3ee:	f04f 0ea8 	mov.w	lr, #168	; 0xa8
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b3f2:	6833      	ldr	r3, [r6, #0]
    b3f4:	9304      	str	r3, [sp, #16]
	return ret;
    b3f6:	9804      	ldr	r0, [sp, #16]
		while (!(port().S & I2C_S_IICIF)) {
    b3f8:	e005      	b.n	b406 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b3fa:	6832      	ldr	r2, [r6, #0]
    b3fc:	9205      	str	r2, [sp, #20]
	return ret;
    b3fe:	9a05      	ldr	r2, [sp, #20]
			if (millis() - wait_begin > 5) {
    b400:	1a12      	subs	r2, r2, r0
    b402:	2a05      	cmp	r2, #5
    b404:	d868      	bhi.n	b4d8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x190>
		while (!(port().S & I2C_S_IICIF)) {
    b406:	78cb      	ldrb	r3, [r1, #3]
    b408:	f013 0302 	ands.w	r3, r3, #2
    b40c:	d0f5      	beq.n	b3fa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb2>
		port().S = I2C_S_IICIF;
    b40e:	f881 c003 	strb.w	ip, [r1, #3]
    b412:	6939      	ldr	r1, [r7, #16]
		status = port().S;
    b414:	78cb      	ldrb	r3, [r1, #3]
    b416:	b2dc      	uxtb	r4, r3
		if ((status & I2C_S_ARBL)) {
    b418:	06db      	lsls	r3, r3, #27
    b41a:	4608      	mov	r0, r1
    b41c:	460a      	mov	r2, r1
    b41e:	d441      	bmi.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
		if (!(status & I2C_S_BUSY)) {
    b420:	06a4      	lsls	r4, r4, #26
    b422:	d53f      	bpl.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
		length--;
    b424:	f108 38ff 	add.w	r8, r8, #4294967295
    b428:	fa5f f888 	uxtb.w	r8, r8
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    b42c:	f1b8 0f01 	cmp.w	r8, #1
    b430:	d104      	bne.n	b43c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf4>
    b432:	f881 e002 	strb.w	lr, [r1, #2]
    b436:	6939      	ldr	r1, [r7, #16]
    b438:	4608      	mov	r0, r1
    b43a:	460a      	mov	r2, r1
		if (count < BUFFER_LENGTH) {
    b43c:	2d47      	cmp	r5, #71	; 0x47
    b43e:	d959      	bls.n	b4f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1ac>
			rxBuffer[count++] = port().D;
		} else {
			tmp = port().D;
    b440:	7903      	ldrb	r3, [r0, #4]
	while (length > 1) {
    b442:	f1b8 0f01 	cmp.w	r8, #1
    b446:	d1d4      	bne.n	b3f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xaa>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b448:	6833      	ldr	r3, [r6, #0]
    b44a:	9306      	str	r3, [sp, #24]
	return ret;
    b44c:	9806      	ldr	r0, [sp, #24]
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    b44e:	e005      	b.n	b45c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x114>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b450:	6831      	ldr	r1, [r6, #0]
    b452:	9107      	str	r1, [sp, #28]
	return ret;
    b454:	9907      	ldr	r1, [sp, #28]
		if (millis() - wait_begin > 5) {
    b456:	1a09      	subs	r1, r1, r0
    b458:	2905      	cmp	r1, #5
    b45a:	d856      	bhi.n	b50a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1c2>
	while (!(port().S & I2C_S_IICIF)) {
    b45c:	78d3      	ldrb	r3, [r2, #3]
    b45e:	f013 0302 	ands.w	r3, r3, #2
    b462:	d0f5      	beq.n	b450 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x108>
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
		}
	}
	port().S = I2C_S_IICIF;
    b464:	2302      	movs	r3, #2
    b466:	70d3      	strb	r3, [r2, #3]
    b468:	693a      	ldr	r2, [r7, #16]
	status = port().S;
    b46a:	78d3      	ldrb	r3, [r2, #3]
	if ((status & I2C_S_ARBL)) {
    b46c:	06d8      	lsls	r0, r3, #27
	status = port().S;
    b46e:	b2d9      	uxtb	r1, r3
	if ((status & I2C_S_ARBL)) {
    b470:	d455      	bmi.n	b51e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1d6>
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
		//Serial.printf("requestFrom err9a\n");
		return count;
	}
	if (!(status & I2C_S_BUSY)) {
    b472:	068b      	lsls	r3, r1, #26
    b474:	d516      	bpl.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    b476:	23b0      	movs	r3, #176	; 0xb0
	if (count < BUFFER_LENGTH) {
    b478:	2d47      	cmp	r5, #71	; 0x47
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    b47a:	7093      	strb	r3, [r2, #2]
	if (count < BUFFER_LENGTH) {
    b47c:	d84c      	bhi.n	b518 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1d0>
    b47e:	693a      	ldr	r2, [r7, #16]
		rxBuffer[count++] = port().D;
    b480:	197c      	adds	r4, r7, r5
    b482:	7912      	ldrb	r2, [r2, #4]
    b484:	7622      	strb	r2, [r4, #24]
    b486:	1c6b      	adds	r3, r5, #1
    b488:	b2dd      	uxtb	r5, r3
#if F_CPU > 120000000
	__asm__("nop");
	__asm__("nop");
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
    b48a:	f1b9 0f00 	cmp.w	r9, #0
    b48e:	d002      	beq.n	b496 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x14e>
    b490:	693b      	ldr	r3, [r7, #16]
    b492:	2280      	movs	r2, #128	; 0x80
    b494:	709a      	strb	r2, [r3, #2]
	rxBufferLength = count;
    b496:	f887 5061 	strb.w	r5, [r7, #97]	; 0x61
	return count;
    b49a:	e003      	b.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
			port().C1 = 0;
    b49c:	709d      	strb	r5, [r3, #2]
    b49e:	693b      	ldr	r3, [r7, #16]
			port().C1 = I2C_C1_IICEN;
    b4a0:	2280      	movs	r2, #128	; 0x80
    b4a2:	709a      	strb	r2, [r3, #2]
}
    b4a4:	4628      	mov	r0, r5
    b4a6:	b008      	add	sp, #32
    b4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!wait_idle()) {
    b4ac:	f7ff fe60 	bl	b170 <TwoWire::wait_idle()>
    b4b0:	2800      	cmp	r0, #0
    b4b2:	d0f7      	beq.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
    b4b4:	693b      	ldr	r3, [r7, #16]
		slave_mode = 0;
    b4b6:	f887 50af 	strb.w	r5, [r7, #175]	; 0xaf
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    b4ba:	22b0      	movs	r2, #176	; 0xb0
    b4bc:	709a      	strb	r2, [r3, #2]
    b4be:	e758      	b.n	b372 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x2a>
			port().C1 = 0;
    b4c0:	7095      	strb	r5, [r2, #2]
    b4c2:	693b      	ldr	r3, [r7, #16]
			port().C1 = I2C_C1_IICEN;
    b4c4:	2280      	movs	r2, #128	; 0x80
}
    b4c6:	4628      	mov	r0, r5
			port().C1 = I2C_C1_IICEN;
    b4c8:	709a      	strb	r2, [r3, #2]
}
    b4ca:	b008      	add	sp, #32
    b4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		port().C1 = I2C_C1_IICEN;
    b4d0:	2280      	movs	r2, #128	; 0x80
    b4d2:	709a      	strb	r2, [r3, #2]
		return 0;
    b4d4:	2500      	movs	r5, #0
    b4d6:	e7e5      	b.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
				port().C1 = 0;
    b4d8:	708b      	strb	r3, [r1, #2]
    b4da:	693b      	ldr	r3, [r7, #16]
				port().C1 = I2C_C1_IICEN;
    b4dc:	2280      	movs	r2, #128	; 0x80
    b4de:	709a      	strb	r2, [r3, #2]
				rxBufferLength = count;
    b4e0:	f887 5061 	strb.w	r5, [r7, #97]	; 0x61
				return count; // clock stretch too long (during data)
    b4e4:	e7de      	b.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
    b4e6:	f1b9 0f00 	cmp.w	r9, #0
    b4ea:	bf14      	ite	ne
    b4ec:	2280      	movne	r2, #128	; 0x80
    b4ee:	22a0      	moveq	r2, #160	; 0xa0
    b4f0:	709a      	strb	r2, [r3, #2]
		return 0;
    b4f2:	e7d7      	b.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
			rxBuffer[count++] = port().D;
    b4f4:	197b      	adds	r3, r7, r5
    b4f6:	7900      	ldrb	r0, [r0, #4]
    b4f8:	7618      	strb	r0, [r3, #24]
    b4fa:	1c6c      	adds	r4, r5, #1
    b4fc:	b2e5      	uxtb	r5, r4
    b4fe:	e7a0      	b.n	b442 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfa>
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    b500:	22a8      	movs	r2, #168	; 0xa8
    b502:	709a      	strb	r2, [r3, #2]
    b504:	693a      	ldr	r2, [r7, #16]
	tmp = port().D; // initiate the first receive
    b506:	7913      	ldrb	r3, [r2, #4]
	while (length > 1) {
    b508:	e79e      	b.n	b448 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x100>
			port().C1 = 0;
    b50a:	7093      	strb	r3, [r2, #2]
    b50c:	693b      	ldr	r3, [r7, #16]
			port().C1 = I2C_C1_IICEN;
    b50e:	2280      	movs	r2, #128	; 0x80
    b510:	709a      	strb	r2, [r3, #2]
			rxBufferLength = count;
    b512:	f887 5061 	strb.w	r5, [r7, #97]	; 0x61
			return count; // clock stretch too long (during data)
    b516:	e7c5      	b.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
    b518:	693b      	ldr	r3, [r7, #16]
		tmp = port().D;
    b51a:	791b      	ldrb	r3, [r3, #4]
    b51c:	e7b5      	b.n	b48a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x142>
		port().S = I2C_S_ARBL;
    b51e:	2110      	movs	r1, #16
	__asm__ volatile(
    b520:	23a0      	movs	r3, #160	; 0xa0
    b522:	70d1      	strb	r1, [r2, #3]

0000b524 <L_3417_delayMicroseconds>:
    b524:	3b01      	subs	r3, #1
    b526:	d1fd      	bne.n	b524 <L_3417_delayMicroseconds>
    b528:	693a      	ldr	r2, [r7, #16]
		port().C1 &= ~I2C_C1_TXAK;
    b52a:	7893      	ldrb	r3, [r2, #2]
    b52c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b530:	7093      	strb	r3, [r2, #2]
		return count;
    b532:	e7b7      	b.n	b4a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
    b534:	1fff9d70 	.word	0x1fff9d70

0000b538 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = KINETIS_I2C0_ADDRESS;
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    b538:	4801      	ldr	r0, [pc, #4]	; (b540 <i2c0_isr+0x8>)
    b53a:	f7ff bd85 	b.w	b048 <TwoWire::isr()>
    b53e:	bf00      	nop
    b540:	1fff9004 	.word	0x1fff9004

0000b544 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = KINETIS_I2C1_ADDRESS;
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    b544:	4801      	ldr	r0, [pc, #4]	; (b54c <i2c1_isr+0x8>)
    b546:	f7ff bd7f 	b.w	b048 <TwoWire::isr()>
    b54a:	bf00      	nop
    b54c:	1fff90c0 	.word	0x1fff90c0

0000b550 <Adafruit_MPR121::Adafruit_MPR121()>:
//#define AUTOCONFIG // use autoconfig (Yes it works pretty well!)

/*!
 *  @brief      Default constructor
 */
Adafruit_MPR121::Adafruit_MPR121() {}
    b550:	2200      	movs	r2, #0
    b552:	6002      	str	r2, [r0, #0]
    b554:	4770      	bx	lr
    b556:	bf00      	nop

0000b558 <Adafruit_MPR121::filteredData(unsigned char)>:
 *  @param      t
 *              the channel to read
 *  @returns    the filtered reading as a 10 bit unsigned value
 */
uint16_t Adafruit_MPR121::filteredData(uint8_t t) {
  if (t > 12)
    b558:	290c      	cmp	r1, #12
    b55a:	d901      	bls.n	b560 <Adafruit_MPR121::filteredData(unsigned char)+0x8>
    return 0;
    b55c:	2000      	movs	r0, #0
  return readRegister16(MPR121_FILTDATA_0L + t * 2);
}
    b55e:	4770      	bx	lr
uint16_t Adafruit_MPR121::filteredData(uint8_t t) {
    b560:	b510      	push	{r4, lr}
  return readRegister16(MPR121_FILTDATA_0L + t * 2);
    b562:	3102      	adds	r1, #2
uint16_t Adafruit_MPR121::filteredData(uint8_t t) {
    b564:	b088      	sub	sp, #32
  return readRegister16(MPR121_FILTDATA_0L + t * 2);
    b566:	004a      	lsls	r2, r1, #1
 *  @param      reg the register address to read from
 *  @returns    the 16 bit value that was read.
 */
uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
  Adafruit_BusIO_Register thereg =
      Adafruit_BusIO_Register(i2c_dev, reg, 2, LSBFIRST);
    b568:	2401      	movs	r4, #1
    b56a:	2300      	movs	r3, #0
    b56c:	6801      	ldr	r1, [r0, #0]
    b56e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b572:	e9cd 3400 	strd	r3, r4, [sp]
    b576:	a802      	add	r0, sp, #8
    b578:	2302      	movs	r3, #2
    b57a:	f000 f8ef 	bl	b75c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>

  return (thereg.read());
    b57e:	a802      	add	r0, sp, #8
    b580:	f000 f9c6 	bl	b910 <Adafruit_BusIO_Register::read()>
    b584:	b280      	uxth	r0, r0
}
    b586:	b008      	add	sp, #32
    b588:	bd10      	pop	{r4, pc}
    b58a:	bf00      	nop

0000b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>:
/*!
    @brief  Writes 8-bits to the specified destination register
    @param  reg the register address to write to
    @param  value the value to write
*/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    b58c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b590:	b08f      	sub	sp, #60	; 0x3c
  // MPR121 must be put in Stop Mode to write to most registers
  bool stop_required = true;

  // first get the current set value of the MPR121_ECR register
  Adafruit_BusIO_Register ecr_reg =
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
    b592:	2701      	movs	r7, #1
    b594:	f04f 0800 	mov.w	r8, #0
    b598:	9701      	str	r7, [sp, #4]
    b59a:	f8cd 8000 	str.w	r8, [sp]
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    b59e:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
    b5a0:	463b      	mov	r3, r7
    b5a2:	6801      	ldr	r1, [r0, #0]
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    b5a4:	4605      	mov	r5, r0
    b5a6:	4616      	mov	r6, r2
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
    b5a8:	a802      	add	r0, sp, #8
    b5aa:	225e      	movs	r2, #94	; 0x5e
    b5ac:	f000 f8d6 	bl	b75c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>

  uint8_t ecr_backup = ecr_reg.read();
    b5b0:	a802      	add	r0, sp, #8
    b5b2:	f000 f9ad 	bl	b910 <Adafruit_BusIO_Register::read()>
  if ((reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A))) {
    b5b6:	2c5e      	cmp	r4, #94	; 0x5e
    b5b8:	d003      	beq.n	b5c2 <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)+0x36>
    b5ba:	f1a4 0373 	sub.w	r3, r4, #115	; 0x73
    b5be:	2b07      	cmp	r3, #7
    b5c0:	d810      	bhi.n	b5e4 <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)+0x58>
  if (stop_required) {
    // clear this register to set stop mode
    ecr_reg.write(0x00);
  }

  Adafruit_BusIO_Register the_reg = Adafruit_BusIO_Register(i2c_dev, reg, 1);
    b5c2:	2301      	movs	r3, #1
    b5c4:	4622      	mov	r2, r4
    b5c6:	2400      	movs	r4, #0
    b5c8:	6829      	ldr	r1, [r5, #0]
    b5ca:	9301      	str	r3, [sp, #4]
    b5cc:	9400      	str	r4, [sp, #0]
    b5ce:	a808      	add	r0, sp, #32
    b5d0:	f000 f8c4 	bl	b75c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  the_reg.write(value);
    b5d4:	4622      	mov	r2, r4
    b5d6:	4631      	mov	r1, r6
    b5d8:	a808      	add	r0, sp, #32
    b5da:	f000 f919 	bl	b810 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>

  if (stop_required) {
    // write back the previous set ECR settings
    ecr_reg.write(ecr_backup);
  }
}
    b5de:	b00f      	add	sp, #60	; 0x3c
    b5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ecr_reg.write(0x00);
    b5e4:	4681      	mov	r9, r0
    b5e6:	4642      	mov	r2, r8
    b5e8:	4641      	mov	r1, r8
    b5ea:	a802      	add	r0, sp, #8
    b5ec:	f000 f910 	bl	b810 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>
  Adafruit_BusIO_Register the_reg = Adafruit_BusIO_Register(i2c_dev, reg, 1);
    b5f0:	6829      	ldr	r1, [r5, #0]
    b5f2:	9701      	str	r7, [sp, #4]
    b5f4:	463b      	mov	r3, r7
    b5f6:	4622      	mov	r2, r4
    b5f8:	f8cd 8000 	str.w	r8, [sp]
    b5fc:	a808      	add	r0, sp, #32
    b5fe:	f000 f8ad 	bl	b75c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  the_reg.write(value);
    b602:	4642      	mov	r2, r8
    b604:	4631      	mov	r1, r6
    b606:	a808      	add	r0, sp, #32
    b608:	f000 f902 	bl	b810 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>
    ecr_reg.write(ecr_backup);
    b60c:	4642      	mov	r2, r8
    b60e:	fa5f f189 	uxtb.w	r1, r9
    b612:	a802      	add	r0, sp, #8
    b614:	f000 f8fc 	bl	b810 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>
}
    b618:	b00f      	add	sp, #60	; 0x3c
    b61a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b61e:	bf00      	nop

0000b620 <Adafruit_MPR121::begin(unsigned char, TwoWire*, unsigned char, unsigned char)>:
                            uint8_t touchThreshold, uint8_t releaseThreshold) {
    b620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b624:	4605      	mov	r5, r0
    b626:	b089      	sub	sp, #36	; 0x24
  if (i2c_dev) {
    b628:	6800      	ldr	r0, [r0, #0]
                            uint8_t touchThreshold, uint8_t releaseThreshold) {
    b62a:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    b62e:	460e      	mov	r6, r1
    b630:	4691      	mov	r9, r2
    b632:	461f      	mov	r7, r3
  if (i2c_dev) {
    b634:	b110      	cbz	r0, b63c <Adafruit_MPR121::begin(unsigned char, TwoWire*, unsigned char, unsigned char)+0x1c>
    delete i2c_dev;
    b636:	2110      	movs	r1, #16
    b638:	f003 f864 	bl	e704 <operator delete(void*, unsigned int)>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, theWire);
    b63c:	2010      	movs	r0, #16
    b63e:	f003 f85f 	bl	e700 <operator new(unsigned int)>
    b642:	4631      	mov	r1, r6
    b644:	4604      	mov	r4, r0
    b646:	464a      	mov	r2, r9
    b648:	f000 f984 	bl	b954 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
    b64c:	602c      	str	r4, [r5, #0]
  if (!i2c_dev->begin()) {
    b64e:	2101      	movs	r1, #1
    b650:	4620      	mov	r0, r4
    b652:	f000 f989 	bl	b968 <Adafruit_I2CDevice::begin(bool)>
    b656:	4606      	mov	r6, r0
    b658:	b920      	cbnz	r0, b664 <Adafruit_MPR121::begin(unsigned char, TwoWire*, unsigned char, unsigned char)+0x44>
    return false;
    b65a:	2600      	movs	r6, #0
}
    b65c:	4630      	mov	r0, r6
    b65e:	b009      	add	sp, #36	; 0x24
    b660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  writeRegister(MPR121_SOFTRESET, 0x63);
    b664:	2263      	movs	r2, #99	; 0x63
    b666:	2180      	movs	r1, #128	; 0x80
    b668:	4628      	mov	r0, r5
    b66a:	f7ff ff8f 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  delay(1);
    b66e:	2001      	movs	r0, #1
    b670:	f003 fbcc 	bl	ee0c <delay>
  writeRegister(MPR121_ECR, 0x0);
    b674:	2200      	movs	r2, #0
    b676:	215e      	movs	r1, #94	; 0x5e
    b678:	4628      	mov	r0, r5
    b67a:	f7ff ff87 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  Adafruit_BusIO_Register thereg = Adafruit_BusIO_Register(i2c_dev, reg, 1);
    b67e:	2301      	movs	r3, #1
    b680:	2200      	movs	r2, #0
    b682:	9301      	str	r3, [sp, #4]
    b684:	9200      	str	r2, [sp, #0]
    b686:	6829      	ldr	r1, [r5, #0]
    b688:	225d      	movs	r2, #93	; 0x5d
    b68a:	a802      	add	r0, sp, #8
    b68c:	f000 f866 	bl	b75c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return (thereg.read());
    b690:	a802      	add	r0, sp, #8
    b692:	f000 f93d 	bl	b910 <Adafruit_BusIO_Register::read()>
  if (c != 0x24)
    b696:	b2c0      	uxtb	r0, r0
    b698:	2824      	cmp	r0, #36	; 0x24
    b69a:	d1de      	bne.n	b65a <Adafruit_MPR121::begin(unsigned char, TwoWire*, unsigned char, unsigned char)+0x3a>
    b69c:	2441      	movs	r4, #65	; 0x41
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
    b69e:	4621      	mov	r1, r4
    b6a0:	463a      	mov	r2, r7
    b6a2:	4628      	mov	r0, r5
    b6a4:	f7ff ff72 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
    b6a8:	1c61      	adds	r1, r4, #1
  for (uint8_t i = 0; i < 12; i++) {
    b6aa:	3402      	adds	r4, #2
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
    b6ac:	4642      	mov	r2, r8
    b6ae:	b2c9      	uxtb	r1, r1
    b6b0:	4628      	mov	r0, r5
  for (uint8_t i = 0; i < 12; i++) {
    b6b2:	b2e4      	uxtb	r4, r4
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
    b6b4:	f7ff ff6a 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  for (uint8_t i = 0; i < 12; i++) {
    b6b8:	2c59      	cmp	r4, #89	; 0x59
    b6ba:	d1f0      	bne.n	b69e <Adafruit_MPR121::begin(unsigned char, TwoWire*, unsigned char, unsigned char)+0x7e>
  writeRegister(MPR121_MHDR, 0x01);
    b6bc:	4628      	mov	r0, r5
    b6be:	2201      	movs	r2, #1
    b6c0:	212b      	movs	r1, #43	; 0x2b
    b6c2:	f7ff ff63 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_NHDR, 0x01);
    b6c6:	4628      	mov	r0, r5
    b6c8:	2201      	movs	r2, #1
    b6ca:	212c      	movs	r1, #44	; 0x2c
    b6cc:	f7ff ff5e 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_NCLR, 0x0E);
    b6d0:	4628      	mov	r0, r5
    b6d2:	220e      	movs	r2, #14
    b6d4:	212d      	movs	r1, #45	; 0x2d
    b6d6:	f7ff ff59 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_FDLR, 0x00);
    b6da:	4628      	mov	r0, r5
    b6dc:	2200      	movs	r2, #0
    b6de:	212e      	movs	r1, #46	; 0x2e
    b6e0:	f7ff ff54 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_MHDF, 0x01);
    b6e4:	4628      	mov	r0, r5
    b6e6:	2201      	movs	r2, #1
    b6e8:	212f      	movs	r1, #47	; 0x2f
    b6ea:	f7ff ff4f 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_NHDF, 0x05);
    b6ee:	4628      	mov	r0, r5
    b6f0:	2205      	movs	r2, #5
    b6f2:	2130      	movs	r1, #48	; 0x30
    b6f4:	f7ff ff4a 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_NCLF, 0x01);
    b6f8:	4628      	mov	r0, r5
    b6fa:	2201      	movs	r2, #1
    b6fc:	2131      	movs	r1, #49	; 0x31
    b6fe:	f7ff ff45 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_FDLF, 0x00);
    b702:	4628      	mov	r0, r5
    b704:	2200      	movs	r2, #0
    b706:	2132      	movs	r1, #50	; 0x32
    b708:	f7ff ff40 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_NHDT, 0x00);
    b70c:	4628      	mov	r0, r5
    b70e:	2200      	movs	r2, #0
    b710:	2133      	movs	r1, #51	; 0x33
    b712:	f7ff ff3b 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_NCLT, 0x00);
    b716:	4628      	mov	r0, r5
    b718:	2200      	movs	r2, #0
    b71a:	2134      	movs	r1, #52	; 0x34
    b71c:	f7ff ff36 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_FDLT, 0x00);
    b720:	4628      	mov	r0, r5
    b722:	2200      	movs	r2, #0
    b724:	2135      	movs	r1, #53	; 0x35
    b726:	f7ff ff31 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_DEBOUNCE, 0);
    b72a:	4628      	mov	r0, r5
    b72c:	2200      	movs	r2, #0
    b72e:	215b      	movs	r1, #91	; 0x5b
    b730:	f7ff ff2c 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
    b734:	4628      	mov	r0, r5
    b736:	2210      	movs	r2, #16
    b738:	215c      	movs	r1, #92	; 0x5c
    b73a:	f7ff ff27 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
    b73e:	4628      	mov	r0, r5
    b740:	2220      	movs	r2, #32
    b742:	215d      	movs	r1, #93	; 0x5d
    b744:	f7ff ff22 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
    b748:	4628      	mov	r0, r5
    b74a:	228c      	movs	r2, #140	; 0x8c
    b74c:	215e      	movs	r1, #94	; 0x5e
    b74e:	f7ff ff1d 	bl	b58c <Adafruit_MPR121::writeRegister(unsigned char, unsigned char)>
}
    b752:	4630      	mov	r0, r6
    b754:	b009      	add	sp, #36	; 0x24
    b756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b75a:	bf00      	nop

0000b75c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _i2cdevice = i2cdevice;
  _spidevice = nullptr;
  _addrwidth = address_width;
  _address = reg_addr;
  _byteorder = byteorder;
  _width = width;
    b75c:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    b75e:	2300      	movs	r3, #0
  _address = reg_addr;
    b760:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    b762:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    b764:	f89d 2004 	ldrb.w	r2, [sp, #4]
  _spidevice = nullptr;
    b768:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    b76a:	f89d 3000 	ldrb.w	r3, [sp]
  _i2cdevice = i2cdevice;
    b76e:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
    b770:	7342      	strb	r2, [r0, #13]
  _byteorder = byteorder;
    b772:	7383      	strb	r3, [r0, #14]
}
    b774:	4770      	bx	lr
    b776:	bf00      	nop

0000b778 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    b778:	b570      	push	{r4, r5, r6, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    b77a:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    b77e:	b084      	sub	sp, #16
    b780:	4603      	mov	r3, r0
                           (uint8_t)(_address >> 8)};

  if (_i2cdevice) {
    b782:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
    b784:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (_i2cdevice) {
    b788:	b140      	cbz	r0, b79c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x24>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
    b78a:	7b5c      	ldrb	r4, [r3, #13]
    b78c:	ab03      	add	r3, sp, #12
    b78e:	e9cd 3400 	strd	r3, r4, [sp]
    b792:	2301      	movs	r3, #1
    b794:	f000 f904 	bl	b9a0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
    b798:	b004      	add	sp, #16
    b79a:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
    b79c:	6858      	ldr	r0, [r3, #4]
    b79e:	2800      	cmp	r0, #0
    b7a0:	d0fa      	beq.n	b798 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    b7a2:	7a1e      	ldrb	r6, [r3, #8]
    b7a4:	2e03      	cmp	r6, #3
    b7a6:	fa5f f58c 	uxtb.w	r5, ip
    b7aa:	d021      	beq.n	b7f0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x78>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    b7ac:	460c      	mov	r4, r1
    b7ae:	4696      	mov	lr, r2
    b7b0:	b176      	cbz	r6, b7d0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x58>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    b7b2:	2e02      	cmp	r6, #2
    b7b4:	d111      	bne.n	b7da <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x62>
      addrbuffer[0] |= 0x80;
    b7b6:	f065 057f 	orn	r5, r5, #127	; 0x7f
    b7ba:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
    b7be:	7b5b      	ldrb	r3, [r3, #13]
    b7c0:	9300      	str	r3, [sp, #0]
    b7c2:	4672      	mov	r2, lr
    b7c4:	ab03      	add	r3, sp, #12
    b7c6:	4621      	mov	r1, r4
    b7c8:	f000 fb08 	bl	bddc <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
}
    b7cc:	b004      	add	sp, #16
    b7ce:	bd70      	pop	{r4, r5, r6, pc}
      addrbuffer[0] &= ~0x80;
    b7d0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    b7d4:	f88d 500c 	strb.w	r5, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    b7d8:	e7f1      	b.n	b7be <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
    b7da:	2e01      	cmp	r6, #1
    b7dc:	d1ef      	bne.n	b7be <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      addrbuffer[0] &= ~0x80;
    b7de:	f89d 200c 	ldrb.w	r2, [sp, #12]
    b7e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      addrbuffer[0] |= 0x40;
    b7e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    b7ea:	f88d 200c 	strb.w	r2, [sp, #12]
    b7ee:	e7e6      	b.n	b7be <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    b7f0:	7b5b      	ldrb	r3, [r3, #13]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    b7f2:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    b7f6:	3301      	adds	r3, #1
    b7f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
    b7fc:	f02c 0c01 	bic.w	ip, ip, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    b800:	9300      	str	r3, [sp, #0]
    b802:	ab03      	add	r3, sp, #12
      addrbuffer[0] =
    b804:	f88d c00c 	strb.w	ip, [sp, #12]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    b808:	f000 fae8 	bl	bddc <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
    b80c:	e7c4      	b.n	b798 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    b80e:	bf00      	nop

0000b810 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
    b810:	b530      	push	{r4, r5, lr}
    b812:	460b      	mov	r3, r1
  if (numbytes == 0) {
    b814:	b95a      	cbnz	r2, b82e <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x1e>
    numbytes = _width;
    b816:	7b04      	ldrb	r4, [r0, #12]
  }
  if (numbytes > 4) {
    b818:	2c04      	cmp	r4, #4
    b81a:	d826      	bhi.n	b86a <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x5a>
    return false;
  }

  // store a copy
  _cached = value;
    b81c:	6141      	str	r1, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
    b81e:	b954      	cbnz	r4, b836 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x26>
    b820:	f100 010f 	add.w	r1, r0, #15
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
  }
  return write(_buffer, numbytes);
    b824:	4622      	mov	r2, r4
}
    b826:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return write(_buffer, numbytes);
    b82a:	f7ff bfa5 	b.w	b778 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>
  if (numbytes > 4) {
    b82e:	2a04      	cmp	r2, #4
    b830:	4614      	mov	r4, r2
    b832:	d81a      	bhi.n	b86a <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x5a>
  _cached = value;
    b834:	6143      	str	r3, [r0, #20]
    if (_byteorder == LSBFIRST) {
    b836:	7b85      	ldrb	r5, [r0, #14]
    b838:	f100 010f 	add.w	r1, r0, #15
    b83c:	f104 0c0e 	add.w	ip, r4, #14
    b840:	fa50 fc8c 	uxtab	ip, r0, ip
    b844:	468e      	mov	lr, r1
    b846:	f100 020e 	add.w	r2, r0, #14
    b84a:	b95d      	cbnz	r5, b864 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
      _buffer[i] = value & 0xFF;
    b84c:	f88e 3000 	strb.w	r3, [lr]
  for (int i = 0; i < numbytes; i++) {
    b850:	f10c 3cff 	add.w	ip, ip, #4294967295
    b854:	4594      	cmp	ip, r2
    value >>= 8;
    b856:	ea4f 2313 	mov.w	r3, r3, lsr #8
  for (int i = 0; i < numbytes; i++) {
    b85a:	f10e 0e01 	add.w	lr, lr, #1
    b85e:	d0e1      	beq.n	b824 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x14>
    if (_byteorder == LSBFIRST) {
    b860:	2d00      	cmp	r5, #0
    b862:	d0f3      	beq.n	b84c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x3c>
      _buffer[numbytes - i - 1] = value & 0xFF;
    b864:	f88c 3000 	strb.w	r3, [ip]
    b868:	e7f2      	b.n	b850 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x40>
    return false;
    b86a:	2000      	movs	r0, #0
}
    b86c:	bd30      	pop	{r4, r5, pc}
    b86e:	bf00      	nop

0000b870 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    b870:	b510      	push	{r4, lr}
    b872:	4684      	mov	ip, r0
    b874:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    b876:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
    b878:	f8ad 000c 	strh.w	r0, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    b87c:	4614      	mov	r4, r2
                           (uint8_t)(_address >> 8)};
    b87e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    b882:	b2c2      	uxtb	r2, r0

  if (_i2cdevice) {
    b884:	f8dc 0000 	ldr.w	r0, [ip]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    b888:	460b      	mov	r3, r1
  if (_i2cdevice) {
    b88a:	b148      	cbz	r0, b8a0 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    b88c:	2100      	movs	r1, #0
    b88e:	f89c 200d 	ldrb.w	r2, [ip, #13]
    b892:	9101      	str	r1, [sp, #4]
    b894:	9400      	str	r4, [sp, #0]
    b896:	a903      	add	r1, sp, #12
    b898:	f000 f8f2 	bl	ba80 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
    b89c:	b004      	add	sp, #16
    b89e:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    b8a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
    b8a4:	2800      	cmp	r0, #0
    b8a6:	d0f9      	beq.n	b89c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    b8a8:	f89c 1008 	ldrb.w	r1, [ip, #8]
    b8ac:	2903      	cmp	r1, #3
    b8ae:	d01e      	beq.n	b8ee <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    b8b0:	b179      	cbz	r1, b8d2 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    b8b2:	2902      	cmp	r1, #2
    b8b4:	d112      	bne.n	b8dc <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    b8b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b8ba:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    b8be:	21ff      	movs	r1, #255	; 0xff
    b8c0:	f89c 200d 	ldrb.w	r2, [ip, #13]
    b8c4:	9101      	str	r1, [sp, #4]
    b8c6:	9400      	str	r4, [sp, #0]
    b8c8:	a903      	add	r1, sp, #12
    b8ca:	f000 fadd 	bl	be88 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    b8ce:	b004      	add	sp, #16
    b8d0:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    b8d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b8d6:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    b8da:	e7f0      	b.n	b8be <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    b8dc:	2901      	cmp	r1, #1
    b8de:	d1ee      	bne.n	b8be <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    b8e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
    b8e4:	f062 023f 	orn	r2, r2, #63	; 0x3f
    b8e8:	f88d 200c 	strb.w	r2, [sp, #12]
    b8ec:	e7e7      	b.n	b8be <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    b8ee:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    b8f0:	f88d 200d 	strb.w	r2, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    b8f4:	f89c 200d 	ldrb.w	r2, [ip, #13]
    b8f8:	21ff      	movs	r1, #255	; 0xff
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    b8fa:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    b8fe:	9101      	str	r1, [sp, #4]
    b900:	3201      	adds	r2, #1
    b902:	a903      	add	r1, sp, #12
      addrbuffer[0] =
    b904:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    b908:	f000 fabe 	bl	be88 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    b90c:	e7c6      	b.n	b89c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    b90e:	bf00      	nop

0000b910 <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    b910:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
    b912:	f100 050f 	add.w	r5, r0, #15
    b916:	7b02      	ldrb	r2, [r0, #12]
    b918:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
    b91a:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    b91c:	f7ff ffa8 	bl	b870 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    b920:	b1a0      	cbz	r0, b94c <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    b922:	7b20      	ldrb	r0, [r4, #12]
    b924:	b170      	cbz	r0, b944 <Adafruit_BusIO_Register::read()+0x34>
    b926:	300e      	adds	r0, #14
    b928:	1823      	adds	r3, r4, r0
    if (_byteorder == LSBFIRST) {
    b92a:	7ba2      	ldrb	r2, [r4, #14]
    b92c:	4629      	mov	r1, r5
    b92e:	340e      	adds	r4, #14
  uint32_t value = 0;
    b930:	2000      	movs	r0, #0
    value <<= 8;
    b932:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    b934:	b93a      	cbnz	r2, b946 <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    b936:	781d      	ldrb	r5, [r3, #0]
    b938:	4328      	orrs	r0, r5
  for (int i = 0; i < _width; i++) {
    b93a:	3b01      	subs	r3, #1
    b93c:	42a3      	cmp	r3, r4
    b93e:	f101 0101 	add.w	r1, r1, #1
    b942:	d1f6      	bne.n	b932 <Adafruit_BusIO_Register::read()+0x22>
}
    b944:	bd38      	pop	{r3, r4, r5, pc}
      value |= _buffer[i];
    b946:	780d      	ldrb	r5, [r1, #0]
    b948:	4328      	orrs	r0, r5
    b94a:	e7f6      	b.n	b93a <Adafruit_BusIO_Register::read()+0x2a>
    return -1;
    b94c:	f04f 30ff 	mov.w	r0, #4294967295
}
    b950:	bd38      	pop	{r3, r4, r5, pc}
    b952:	bf00      	nop

0000b954 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
  _begun = false;
    b954:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    b958:	6042      	str	r2, [r0, #4]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
    b95a:	2220      	movs	r2, #32
  _addr = addr;
    b95c:	7001      	strb	r1, [r0, #0]
  _begun = false;
    b95e:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    b962:	60c2      	str	r2, [r0, #12]
#endif
}
    b964:	4770      	bx	lr
    b966:	bf00      	nop

0000b968 <Adafruit_I2CDevice::begin(bool)>:
 *    @param  addr_detect Whether we should attempt to detect the I2C address
 * with a scan. 99% of sensors/devices don't mind, but once in a while they
 * don't respond well to a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    b968:	b538      	push	{r3, r4, r5, lr}
    b96a:	4604      	mov	r4, r0
  _wire->begin();
    b96c:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    b96e:	460d      	mov	r5, r1
  _wire->begin();
    b970:	f7ff fb06 	bl	af80 <TwoWire::begin()>
  _begun = true;
    b974:	2101      	movs	r1, #1
    b976:	7221      	strb	r1, [r4, #8]

  if (addr_detect) {
    b978:	b90d      	cbnz	r5, b97e <Adafruit_I2CDevice::begin(bool)+0x16>
    return detected();
  }
  return true;
    b97a:	4608      	mov	r0, r1
}
    b97c:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    b97e:	7822      	ldrb	r2, [r4, #0]
  if (!_begun && !begin()) {
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
    b980:	6863      	ldr	r3, [r4, #4]
    b982:	408a      	lsls	r2, r1
    b984:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		transmitting = 1;
    b988:	f883 10ae 	strb.w	r1, [r3, #174]	; 0xae
		txBufferLength = 1;
    b98c:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
		return endTransmission(1);
    b990:	6860      	ldr	r0, [r4, #4]
    b992:	f7ff fc63 	bl	b25c <TwoWire::endTransmission(unsigned char)>
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.print(F("Address 0x"));
  DEBUG_SERIAL.print(_addr);
#endif
  if (_wire->endTransmission() == 0) {
    b996:	fab0 f080 	clz	r0, r0
    b99a:	0940      	lsrs	r0, r0, #5
}
    b99c:	bd38      	pop	{r3, r4, r5, pc}
    b99e:	bf00      	nop

0000b9a0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9a4:	f8dd 801c 	ldr.w	r8, [sp, #28]
    b9a8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
    b9aa:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
    b9ac:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
    b9ae:	4442      	add	r2, r8
    b9b0:	429a      	cmp	r2, r3
    b9b2:	d818      	bhi.n	b9e6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
		txBuffer[0] = (address << 1);
    b9b4:	7802      	ldrb	r2, [r0, #0]
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    b9b6:	6843      	ldr	r3, [r0, #4]
    b9b8:	0052      	lsls	r2, r2, #1
    b9ba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		transmitting = 1;
    b9be:	2201      	movs	r2, #1
    b9c0:	4604      	mov	r4, r0
    b9c2:	460e      	mov	r6, r1
    b9c4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
		txBufferLength = 1;
    b9c8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    b9cc:	f1b8 0f00 	cmp.w	r8, #0
    b9d0:	d00c      	beq.n	b9ec <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x4c>
    b9d2:	9b06      	ldr	r3, [sp, #24]
    b9d4:	b153      	cbz	r3, b9ec <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x4c>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    b9d6:	6840      	ldr	r0, [r0, #4]
    b9d8:	9906      	ldr	r1, [sp, #24]
    b9da:	6803      	ldr	r3, [r0, #0]
    b9dc:	4642      	mov	r2, r8
    b9de:	685b      	ldr	r3, [r3, #4]
    b9e0:	4798      	blx	r3
    b9e2:	4580      	cmp	r8, r0
    b9e4:	d002      	beq.n	b9ec <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x4c>
    return false;
    b9e6:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    b9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    b9ec:	6860      	ldr	r0, [r4, #4]
    b9ee:	6803      	ldr	r3, [r0, #0]
    b9f0:	4631      	mov	r1, r6
    b9f2:	685b      	ldr	r3, [r3, #4]
    b9f4:	462a      	mov	r2, r5
    b9f6:	4798      	blx	r3
    b9f8:	4285      	cmp	r5, r0
    b9fa:	d1f4      	bne.n	b9e6 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
  if (_wire->endTransmission(stop) == 0) {
    b9fc:	6860      	ldr	r0, [r4, #4]
    b9fe:	4639      	mov	r1, r7
    ba00:	f7ff fc2c 	bl	b25c <TwoWire::endTransmission(unsigned char)>
    ba04:	fab0 f080 	clz	r0, r0
    ba08:	0940      	lsrs	r0, r0, #5
}
    ba0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba0e:	bf00      	nop

0000ba10 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    ba10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ba14:	4615      	mov	r5, r2
    ba16:	4606      	mov	r6, r0
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    ba18:	b2d2      	uxtb	r2, r2
bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    ba1a:	460f      	mov	r7, r1
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    ba1c:	7801      	ldrb	r1, [r0, #0]
    ba1e:	6840      	ldr	r0, [r0, #4]
    ba20:	f7ff fc92 	bl	b348 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    ba24:	4285      	cmp	r5, r0
    ba26:	d123      	bne.n	ba70 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x60>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    ba28:	b1fd      	cbz	r5, ba6a <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5a>
    ba2a:	2400      	movs	r4, #0
    ba2c:	f8df 904c 	ldr.w	r9, [pc, #76]	; ba7c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    ba30:	46a0      	mov	r8, r4
    ba32:	e012      	b.n	ba5a <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4a>
		if (rxBufferIndex >= rxBufferLength) return -1;
    ba34:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    ba38:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
    ba3c:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    ba3e:	f103 0101 	add.w	r1, r3, #1
    ba42:	4403      	add	r3, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    ba44:	d917      	bls.n	ba76 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x66>
		return rxBuffer[rxBufferIndex++];
    ba46:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    ba4a:	7e1b      	ldrb	r3, [r3, #24]
    buffer[i] = _wire->read();
    ba4c:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    ba50:	3401      	adds	r4, #1
    ba52:	b2a4      	uxth	r4, r4
    ba54:	42a5      	cmp	r5, r4
    ba56:	46a0      	mov	r8, r4
    ba58:	d907      	bls.n	ba6a <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5a>
    buffer[i] = _wire->read();
    ba5a:	6870      	ldr	r0, [r6, #4]
    ba5c:	6803      	ldr	r3, [r0, #0]
    ba5e:	695b      	ldr	r3, [r3, #20]
    ba60:	454b      	cmp	r3, r9
    ba62:	d0e7      	beq.n	ba34 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    ba64:	4798      	blx	r3
    ba66:	b2c3      	uxtb	r3, r0
    ba68:	e7f0      	b.n	ba4c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3c>
    return false;
    ba6a:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    ba6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    ba70:	2000      	movs	r0, #0
}
    ba72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba76:	23ff      	movs	r3, #255	; 0xff
    ba78:	e7e8      	b.n	ba4c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3c>
    ba7a:	bf00      	nop
    ba7c:	0000ae25 	.word	0x0000ae25

0000ba80 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba84:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
    ba86:	68c3      	ldr	r3, [r0, #12]
                                         size_t read_len, bool stop) {
    ba88:	9e06      	ldr	r6, [sp, #24]
    ba8a:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if ((len + prefix_len) > maxBufferSize()) {
    ba8e:	429a      	cmp	r2, r3
    ba90:	d811      	bhi.n	bab6 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x36>
    ba92:	4605      	mov	r5, r0
		txBuffer[0] = (address << 1);
    ba94:	7800      	ldrb	r0, [r0, #0]
  _wire->beginTransmission(_addr);
    ba96:	686b      	ldr	r3, [r5, #4]
    ba98:	0040      	lsls	r0, r0, #1
    ba9a:	f883 0063 	strb.w	r0, [r3, #99]	; 0x63
		transmitting = 1;
    ba9e:	2001      	movs	r0, #1
    baa0:	f883 00ae 	strb.w	r0, [r3, #174]	; 0xae
		txBufferLength = 1;
    baa4:	f883 00ad 	strb.w	r0, [r3, #173]	; 0xad
  if (_wire->write(buffer, len) != len) {
    baa8:	6868      	ldr	r0, [r5, #4]
    baaa:	6803      	ldr	r3, [r0, #0]
    baac:	685b      	ldr	r3, [r3, #4]
    baae:	4614      	mov	r4, r2
    bab0:	4798      	blx	r3
    bab2:	4284      	cmp	r4, r0
    bab4:	d002      	beq.n	babc <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x3c>
  if (!write(write_buffer, write_len, stop)) {
    return false;
    bab6:	2000      	movs	r0, #0
  }

  return read(read_buffer, read_len);
}
    bab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->endTransmission(stop) == 0) {
    babc:	6868      	ldr	r0, [r5, #4]
    babe:	4641      	mov	r1, r8
    bac0:	f7ff fbcc 	bl	b25c <TwoWire::endTransmission(unsigned char)>
    bac4:	4604      	mov	r4, r0
    bac6:	2800      	cmp	r0, #0
    bac8:	d1f5      	bne.n	bab6 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x36>
  while (pos < len) {
    baca:	b196      	cbz	r6, baf2 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x72>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
    bacc:	68eb      	ldr	r3, [r5, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bace:	1b32      	subs	r2, r6, r4
    bad0:	429a      	cmp	r2, r3
    bad2:	bf28      	it	cs
    bad4:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    bad6:	1ab3      	subs	r3, r6, r2
    if (!_read(buffer + pos, read_len, read_stop))
    bad8:	42a3      	cmp	r3, r4
    bada:	bf8c      	ite	hi
    badc:	2300      	movhi	r3, #0
    bade:	2301      	movls	r3, #1
    bae0:	1939      	adds	r1, r7, r4
    bae2:	4628      	mov	r0, r5
    pos += read_len;
    bae4:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    bae6:	f7ff ff93 	bl	ba10 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    baea:	2800      	cmp	r0, #0
    baec:	d0e3      	beq.n	bab6 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x36>
  while (pos < len) {
    baee:	42a6      	cmp	r6, r4
    baf0:	d8ec      	bhi.n	bacc <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x4c>
  return true;
    baf2:	2001      	movs	r0, #1
}
    baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000baf8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    baf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    bafc:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    bafe:	f891 e000 	ldrb.w	lr, [r1]
    startbit = 0x80;
    bb02:	2b00      	cmp	r3, #0
    bb04:	bf0c      	ite	eq
    bb06:	2701      	moveq	r7, #1
    bb08:	2780      	movne	r7, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
    bb0a:	ea1e 0f07 	tst.w	lr, r7
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    bb0e:	4b80      	ldr	r3, [pc, #512]	; (bd10 <L_513_delayMicroseconds+0x22>)
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    bb10:	460d      	mov	r5, r1
  bool towrite, lastmosi = !(buffer[0] & startbit);
    bb12:	bf08      	it	eq
    bb14:	2601      	moveq	r6, #1
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    bb16:	6881      	ldr	r1, [r0, #8]
    bb18:	fbb3 f3f1 	udiv	r3, r3, r1
  bool towrite, lastmosi = !(buffer[0] & startbit);
    bb1c:	bf18      	it	ne
    bb1e:	2600      	movne	r6, #0

  for (size_t i = 0; i < len; i++) {
    bb20:	2a00      	cmp	r2, #0
    bb22:	f000 80f2 	beq.w	bd0a <L_513_delayMicroseconds+0x1c>
    bb26:	b2dc      	uxtb	r4, r3
    bb28:	3a01      	subs	r2, #1
	uint32_t n = usec << 5;
    bb2a:	015b      	lsls	r3, r3, #5
    bb2c:	f403 51ff 	and.w	r1, r3, #8160	; 0x1fe0
    bb30:	eb05 0802 	add.w	r8, r5, r2
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    bb34:	463b      	mov	r3, r7
    uint8_t reply = 0;
    bb36:	f04f 0c00 	mov.w	ip, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    bb3a:	2c00      	cmp	r4, #0
    bb3c:	d062      	beq.n	bc04 <L_193_delayMicroseconds+0x5e>
	if (n == 0) return;
    bb3e:	2900      	cmp	r1, #0
    bb40:	f000 80a9 	beq.w	bc96 <L_193_delayMicroseconds+0xf0>
	__asm__ volatile(
    bb44:	460a      	mov	r2, r1

0000bb46 <L_113_delayMicroseconds>:
    bb46:	3a01      	subs	r2, #1
    bb48:	d1fd      	bne.n	bb46 <L_113_delayMicroseconds>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    bb4a:	7b42      	ldrb	r2, [r0, #13]
    bb4c:	f012 0ff7 	tst.w	r2, #247	; 0xf7
    bb50:	f040 80c2 	bne.w	bcd8 <L_193_delayMicroseconds+0x132>
        towrite = send & b;
        if ((_mosi != -1) && (lastmosi != towrite)) {
    bb54:	f990 2010 	ldrsb.w	r2, [r0, #16]
    bb58:	f1b2 3fff 	cmp.w	r2, #4294967295
    bb5c:	f000 80ca 	beq.w	bcf4 <L_513_delayMicroseconds+0x6>
        towrite = send & b;
    bb60:	ea1e 0903 	ands.w	r9, lr, r3
        if ((_mosi != -1) && (lastmosi != towrite)) {
    bb64:	bf14      	ite	ne
    bb66:	2201      	movne	r2, #1
    bb68:	2200      	moveq	r2, #0
    bb6a:	42b2      	cmp	r2, r6
    bb6c:	d00e      	beq.n	bb8c <L_113_delayMicroseconds+0x46>
#ifdef BUSIO_USE_FAST_PINIO
          if (towrite)
    bb6e:	f1b9 0f00 	cmp.w	r9, #0
    bb72:	f000 80a5 	beq.w	bcc0 <L_193_delayMicroseconds+0x11a>
            *mosiPort = *mosiPort | mosiPinMask;
    bb76:	f8d0 9014 	ldr.w	r9, [r0, #20]
    bb7a:	f890 a024 	ldrb.w	sl, [r0, #36]	; 0x24
    bb7e:	f899 2000 	ldrb.w	r2, [r9]
    bb82:	ea42 020a 	orr.w	r2, r2, sl
    bb86:	2601      	movs	r6, #1
    bb88:	f889 2000 	strb.w	r2, [r9]
#endif
          lastmosi = towrite;
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
    bb8c:	f8d0 9018 	ldr.w	r9, [r0, #24]
    bb90:	f890 a026 	ldrb.w	sl, [r0, #38]	; 0x26
    bb94:	f899 2000 	ldrb.w	r2, [r9]
    bb98:	ea42 020a 	orr.w	r2, r2, sl
    bb9c:	f889 2000 	strb.w	r2, [r9]
#else
        digitalWrite(_sck, HIGH);
#endif

        if (bitdelay_us) {
    bba0:	b11c      	cbz	r4, bbaa <L_193_delayMicroseconds+0x4>
	if (n == 0) return;
    bba2:	b111      	cbz	r1, bbaa <L_193_delayMicroseconds+0x4>
	__asm__ volatile(
    bba4:	460a      	mov	r2, r1

0000bba6 <L_193_delayMicroseconds>:
    bba6:	3a01      	subs	r2, #1
    bba8:	d1fd      	bne.n	bba6 <L_193_delayMicroseconds>
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    bbaa:	f990 2011 	ldrsb.w	r2, [r0, #17]
    bbae:	3201      	adds	r2, #1
    bbb0:	d008      	beq.n	bbc4 <L_193_delayMicroseconds+0x1e>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
    bbb2:	69c2      	ldr	r2, [r0, #28]
    bbb4:	f890 9025 	ldrb.w	r9, [r0, #37]	; 0x25
    bbb8:	7812      	ldrb	r2, [r2, #0]
    bbba:	ea12 0f09 	tst.w	r2, r9
#else
          if (digitalRead(_miso)) {
#endif
            reply |= b;
    bbbe:	bf18      	it	ne
    bbc0:	ea43 0c0c 	orrne.w	ip, r3, ip
          }
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
    bbc4:	f8d0 9018 	ldr.w	r9, [r0, #24]
    bbc8:	f890 a026 	ldrb.w	sl, [r0, #38]	; 0x26
    bbcc:	f899 2000 	ldrb.w	r2, [r9]
    bbd0:	ea22 020a 	bic.w	r2, r2, sl
    bbd4:	f889 2000 	strb.w	r2, [r9]
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    bbd8:	f990 2011 	ldrsb.w	r2, [r0, #17]
    bbdc:	3201      	adds	r2, #1
    bbde:	d001      	beq.n	bbe4 <L_193_delayMicroseconds+0x3e>
        buffer[i] = reply;
    bbe0:	f885 c000 	strb.w	ip, [r5]
    for (uint8_t b = startbit; b != 0;
    bbe4:	7b02      	ldrb	r2, [r0, #12]
    bbe6:	b94a      	cbnz	r2, bbfc <L_193_delayMicroseconds+0x56>
    bbe8:	005b      	lsls	r3, r3, #1
    bbea:	b2db      	uxtb	r3, r3
    bbec:	2b00      	cmp	r3, #0
    bbee:	d1a4      	bne.n	bb3a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
  for (size_t i = 0; i < len; i++) {
    bbf0:	45a8      	cmp	r8, r5
    bbf2:	f000 808a 	beq.w	bd0a <L_513_delayMicroseconds+0x1c>
    uint8_t send = buffer[i];
    bbf6:	f815 ef01 	ldrb.w	lr, [r5, #1]!
    bbfa:	e79b      	b.n	bb34 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x3c>
    for (uint8_t b = startbit; b != 0;
    bbfc:	085b      	lsrs	r3, r3, #1
    bbfe:	2b00      	cmp	r3, #0
    bc00:	d19b      	bne.n	bb3a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    bc02:	e7f5      	b.n	bbf0 <L_193_delayMicroseconds+0x4a>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    bc04:	7b42      	ldrb	r2, [r0, #13]
    bc06:	f012 0ff7 	tst.w	r2, #247	; 0xf7
    bc0a:	d10f      	bne.n	bc2c <L_193_delayMicroseconds+0x86>
        if ((_mosi != -1) && (lastmosi != towrite)) {
    bc0c:	f990 2010 	ldrsb.w	r2, [r0, #16]
    bc10:	f1b2 3fff 	cmp.w	r2, #4294967295
    bc14:	d1a4      	bne.n	bb60 <L_113_delayMicroseconds+0x1a>
        *clkPort = *clkPort | clkPinMask; // Clock high
    bc16:	f8d0 9018 	ldr.w	r9, [r0, #24]
    bc1a:	f890 a026 	ldrb.w	sl, [r0, #38]	; 0x26
    bc1e:	f899 2000 	ldrb.w	r2, [r9]
    bc22:	ea42 020a 	orr.w	r2, r2, sl
    bc26:	f889 2000 	strb.w	r2, [r9]
        if (bitdelay_us) {
    bc2a:	e7be      	b.n	bbaa <L_193_delayMicroseconds+0x4>
        *clkPort = *clkPort | clkPinMask; // Clock high
    bc2c:	f8d0 9018 	ldr.w	r9, [r0, #24]
    bc30:	f890 a026 	ldrb.w	sl, [r0, #38]	; 0x26
    bc34:	f899 2000 	ldrb.w	r2, [r9]
    bc38:	ea42 020a 	orr.w	r2, r2, sl
    bc3c:	f889 2000 	strb.w	r2, [r9]
        if (_mosi != -1) {
    bc40:	f990 2010 	ldrsb.w	r2, [r0, #16]
    bc44:	3201      	adds	r2, #1
    bc46:	d00e      	beq.n	bc66 <L_193_delayMicroseconds+0xc0>
            *mosiPort = *mosiPort | mosiPinMask;
    bc48:	f8d0 9014 	ldr.w	r9, [r0, #20]
    bc4c:	f890 a024 	ldrb.w	sl, [r0, #36]	; 0x24
    bc50:	f899 2000 	ldrb.w	r2, [r9]
          if (send & b)
    bc54:	ea1e 0f03 	tst.w	lr, r3
            *mosiPort = *mosiPort | mosiPinMask;
    bc58:	bf14      	ite	ne
    bc5a:	ea42 020a 	orrne.w	r2, r2, sl
            *mosiPort = *mosiPort & ~mosiPinMask;
    bc5e:	ea22 020a 	biceq.w	r2, r2, sl
    bc62:	f889 2000 	strb.w	r2, [r9]
        *clkPort = *clkPort & ~clkPinMask; // Clock low
    bc66:	f8d0 9018 	ldr.w	r9, [r0, #24]
    bc6a:	f890 a026 	ldrb.w	sl, [r0, #38]	; 0x26
    bc6e:	f899 2000 	ldrb.w	r2, [r9]
    bc72:	ea22 020a 	bic.w	r2, r2, sl
    bc76:	f889 2000 	strb.w	r2, [r9]
        if (_miso != -1) {
    bc7a:	f990 2011 	ldrsb.w	r2, [r0, #17]
    bc7e:	3201      	adds	r2, #1
    bc80:	d0b0      	beq.n	bbe4 <L_193_delayMicroseconds+0x3e>
          if (*misoPort & misoPinMask) {
    bc82:	69c2      	ldr	r2, [r0, #28]
    bc84:	f890 9025 	ldrb.w	r9, [r0, #37]	; 0x25
    bc88:	7812      	ldrb	r2, [r2, #0]
    bc8a:	ea12 0f09 	tst.w	r2, r9
            reply |= b;
    bc8e:	bf18      	it	ne
    bc90:	ea43 0c0c 	orrne.w	ip, r3, ip
    bc94:	e7a4      	b.n	bbe0 <L_193_delayMicroseconds+0x3a>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    bc96:	7b42      	ldrb	r2, [r0, #13]
    bc98:	f012 0ff7 	tst.w	r2, #247	; 0xf7
    bc9c:	d1c6      	bne.n	bc2c <L_193_delayMicroseconds+0x86>
        if ((_mosi != -1) && (lastmosi != towrite)) {
    bc9e:	f990 2010 	ldrsb.w	r2, [r0, #16]
    bca2:	f1b2 3fff 	cmp.w	r2, #4294967295
    bca6:	f47f af5b 	bne.w	bb60 <L_113_delayMicroseconds+0x1a>
        *clkPort = *clkPort | clkPinMask; // Clock high
    bcaa:	f8d0 9018 	ldr.w	r9, [r0, #24]
    bcae:	f890 a026 	ldrb.w	sl, [r0, #38]	; 0x26
    bcb2:	f899 2000 	ldrb.w	r2, [r9]
    bcb6:	ea42 020a 	orr.w	r2, r2, sl
    bcba:	f889 2000 	strb.w	r2, [r9]
	if (n == 0) return;
    bcbe:	e774      	b.n	bbaa <L_193_delayMicroseconds+0x4>
            *mosiPort = *mosiPort & ~mosiPinMask;
    bcc0:	f8d0 a014 	ldr.w	sl, [r0, #20]
    bcc4:	f890 b024 	ldrb.w	fp, [r0, #36]	; 0x24
    bcc8:	f89a 2000 	ldrb.w	r2, [sl]
    bccc:	ea22 020b 	bic.w	r2, r2, fp
    bcd0:	464e      	mov	r6, r9
    bcd2:	f88a 2000 	strb.w	r2, [sl]
    bcd6:	e759      	b.n	bb8c <L_113_delayMicroseconds+0x46>
        *clkPort = *clkPort | clkPinMask; // Clock high
    bcd8:	f8d0 9018 	ldr.w	r9, [r0, #24]
    bcdc:	f890 a026 	ldrb.w	sl, [r0, #38]	; 0x26
    bce0:	f899 2000 	ldrb.w	r2, [r9]
    bce4:	ea42 020a 	orr.w	r2, r2, sl
    bce8:	f889 2000 	strb.w	r2, [r9]
	__asm__ volatile(
    bcec:	460a      	mov	r2, r1

0000bcee <L_513_delayMicroseconds>:
    bcee:	3a01      	subs	r2, #1
    bcf0:	d1fd      	bne.n	bcee <L_513_delayMicroseconds>
    bcf2:	e7a5      	b.n	bc40 <L_193_delayMicroseconds+0x9a>
        *clkPort = *clkPort | clkPinMask; // Clock high
    bcf4:	f8d0 9018 	ldr.w	r9, [r0, #24]
    bcf8:	f890 a026 	ldrb.w	sl, [r0, #38]	; 0x26
    bcfc:	f899 2000 	ldrb.w	r2, [r9]
    bd00:	ea42 020a 	orr.w	r2, r2, sl
    bd04:	f889 2000 	strb.w	r2, [r9]
	if (n == 0) return;
    bd08:	e74c      	b.n	bba4 <L_113_delayMicroseconds+0x5e>
      }
    }
  }
  return;
}
    bd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd0e:	bf00      	nop
    bd10:	0007a120 	.word	0x0007a120

0000bd14 <Adafruit_SPIDevice::beginTransaction()>:
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
    bd14:	6803      	ldr	r3, [r0, #0]
    bd16:	2b00      	cmp	r3, #0
    bd18:	d036      	beq.n	bd88 <Adafruit_SPIDevice::beginTransaction()+0x74>
void Adafruit_SPIDevice::beginTransaction(void) {
    bd1a:	b430      	push	{r4, r5}
    bd1c:	6842      	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    bd1e:	7ad9      	ldrb	r1, [r3, #11]
    bd20:	6812      	ldr	r2, [r2, #0]
    bd22:	b319      	cbz	r1, bd6c <Adafruit_SPIDevice::beginTransaction()+0x58>
			__disable_irq();
    bd24:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    bd26:	7ad9      	ldrb	r1, [r3, #11]
    bd28:	07cc      	lsls	r4, r1, #31
    bd2a:	d508      	bpl.n	bd3e <Adafruit_SPIDevice::beginTransaction()+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    bd2c:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    bd30:	68dd      	ldr	r5, [r3, #12]
    bd32:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
    bd36:	4028      	ands	r0, r5
    bd38:	6198      	str	r0, [r3, #24]
				NVIC_ICER0 = interruptSave[0];
    bd3a:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    bd3e:	0788      	lsls	r0, r1, #30
    bd40:	d508      	bpl.n	bd54 <Adafruit_SPIDevice::beginTransaction()+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    bd42:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    bd46:	691d      	ldr	r5, [r3, #16]
    bd48:	f8d4 0184 	ldr.w	r0, [r4, #388]	; 0x184
    bd4c:	4028      	ands	r0, r5
    bd4e:	61d8      	str	r0, [r3, #28]
				NVIC_ICER1 = interruptSave[1];
    bd50:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    bd54:	0749      	lsls	r1, r1, #29
    bd56:	d508      	bpl.n	bd6a <Adafruit_SPIDevice::beginTransaction()+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    bd58:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bd5c:	695c      	ldr	r4, [r3, #20]
    bd5e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    bd62:	4021      	ands	r1, r4
    bd64:	6219      	str	r1, [r3, #32]
				NVIC_ICER2 = interruptSave[2];
    bd66:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    bd6a:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    bd6c:	681b      	ldr	r3, [r3, #0]
		if (port().CTAR0 != settings.ctar) {
    bd6e:	68d9      	ldr	r1, [r3, #12]
    bd70:	4291      	cmp	r1, r2
    bd72:	d007      	beq.n	bd84 <Adafruit_SPIDevice::beginTransaction()+0x70>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    bd74:	4c05      	ldr	r4, [pc, #20]	; (bd8c <Adafruit_SPIDevice::beginTransaction()+0x78>)
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    bd76:	4906      	ldr	r1, [pc, #24]	; (bd90 <Adafruit_SPIDevice::beginTransaction()+0x7c>)
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    bd78:	601c      	str	r4, [r3, #0]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    bd7a:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
			port().CTAR0 = settings.ctar;
    bd7e:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    bd80:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    bd82:	6019      	str	r1, [r3, #0]
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
#endif
  }
}
    bd84:	bc30      	pop	{r4, r5}
    bd86:	4770      	bx	lr
    bd88:	4770      	bx	lr
    bd8a:	bf00      	nop
    bd8c:	003f4001 	.word	0x003f4001
    bd90:	803f0000 	.word	0x803f0000

0000bd94 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    bd94:	b510      	push	{r4, lr}
    bd96:	4604      	mov	r4, r0
  if (_cs != -1) {
    bd98:	f990 000e 	ldrsb.w	r0, [r0, #14]
    bd9c:	1c43      	adds	r3, r0, #1
    bd9e:	d003      	beq.n	bda8 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    bda0:	2101      	movs	r1, #1
    bda2:	b2c0      	uxtb	r0, r0
    bda4:	f002 ffa2 	bl	ecec <digitalWrite>
  if (_spi) {
    bda8:	6823      	ldr	r3, [r4, #0]
    bdaa:	b1b3      	cbz	r3, bdda <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
		if (interruptMasksUsed) {
    bdac:	7ada      	ldrb	r2, [r3, #11]
    bdae:	b1a2      	cbz	r2, bdda <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
			if (interruptMasksUsed & 0x01) {
    bdb0:	07d0      	lsls	r0, r2, #31
    bdb2:	d504      	bpl.n	bdbe <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
				NVIC_ISER0 = interruptSave[0];
    bdb4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bdb8:	6998      	ldr	r0, [r3, #24]
    bdba:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) {
    bdbe:	0791      	lsls	r1, r2, #30
    bdc0:	d504      	bpl.n	bdcc <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
				NVIC_ISER1 = interruptSave[1];
    bdc2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bdc6:	69d8      	ldr	r0, [r3, #28]
    bdc8:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) {
    bdcc:	0752      	lsls	r2, r2, #29
    bdce:	d504      	bpl.n	bdda <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
				NVIC_ISER2 = interruptSave[2];
    bdd0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bdd4:	6a1b      	ldr	r3, [r3, #32]
    bdd6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  setChipSelect(HIGH);
  endTransaction();
}
    bdda:	bd10      	pop	{r4, pc}

0000bddc <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    bddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bde0:	4604      	mov	r4, r0
    bde2:	b082      	sub	sp, #8
    bde4:	461e      	mov	r6, r3
    bde6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    bde8:	468a      	mov	sl, r1
    bdea:	4690      	mov	r8, r2
  beginTransaction();
    bdec:	f7ff ff92 	bl	bd14 <Adafruit_SPIDevice::beginTransaction()>
  if (_cs != -1) {
    bdf0:	f994 000e 	ldrsb.w	r0, [r4, #14]
    bdf4:	1c43      	adds	r3, r0, #1
    bdf6:	d142      	bne.n	be7e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0xa2>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
    bdf8:	b1d5      	cbz	r5, be30 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x54>
    bdfa:	3e01      	subs	r6, #1
    bdfc:	eb06 0905 	add.w	r9, r6, r5
    be00:	f10d 0507 	add.w	r5, sp, #7
    be04:	e003      	b.n	be0e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x32>
    be06:	f7ff fe77 	bl	baf8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    be0a:	454e      	cmp	r6, r9
    be0c:	d010      	beq.n	be30 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x54>
  if (_spi) {
    be0e:	6827      	ldr	r7, [r4, #0]
  uint8_t data = send;
    be10:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    be14:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    be18:	2201      	movs	r2, #1
    be1a:	4629      	mov	r1, r5
    be1c:	4620      	mov	r0, r4
    be1e:	2f00      	cmp	r7, #0
    be20:	d0f1      	beq.n	be06 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x2a>
	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    be22:	4613      	mov	r3, r2
    be24:	4638      	mov	r0, r7
    be26:	462a      	mov	r2, r5
    be28:	f000 f9ce 	bl	c1c8 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < prefix_len; i++) {
    be2c:	454e      	cmp	r6, r9
    be2e:	d1ee      	bne.n	be0e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x32>
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
    be30:	f1b8 0f00 	cmp.w	r8, #0
    be34:	d01c      	beq.n	be70 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x94>
    be36:	44d0      	add	r8, sl
    be38:	f10a 36ff 	add.w	r6, sl, #4294967295
    be3c:	f108 38ff 	add.w	r8, r8, #4294967295
    be40:	f10d 0507 	add.w	r5, sp, #7
    be44:	e003      	b.n	be4e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x72>
    be46:	f7ff fe57 	bl	baf8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    be4a:	45b0      	cmp	r8, r6
    be4c:	d010      	beq.n	be70 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x94>
  if (_spi) {
    be4e:	6827      	ldr	r7, [r4, #0]
  uint8_t data = send;
    be50:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    be54:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    be58:	2201      	movs	r2, #1
    be5a:	4629      	mov	r1, r5
    be5c:	4620      	mov	r0, r4
    be5e:	2f00      	cmp	r7, #0
    be60:	d0f1      	beq.n	be46 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x6a>
    be62:	4613      	mov	r3, r2
    be64:	4638      	mov	r0, r7
    be66:	462a      	mov	r2, r5
    be68:	f000 f9ae 	bl	c1c8 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < len; i++) {
    be6c:	45b0      	cmp	r8, r6
    be6e:	d1ee      	bne.n	be4e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x72>
      transfer(buffer[i]);
    }
  }
  endTransactionWithDeassertingCS();
    be70:	4620      	mov	r0, r4
    be72:	f7ff ff8f 	bl	bd94 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    be76:	2001      	movs	r0, #1
    be78:	b002      	add	sp, #8
    be7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    digitalWrite(_cs, value);
    be7e:	b2c0      	uxtb	r0, r0
    be80:	2100      	movs	r1, #0
    be82:	f002 ff33 	bl	ecec <digitalWrite>
    be86:	e7b7      	b.n	bdf8 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x1c>

0000be88 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    be88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be8c:	4604      	mov	r4, r0
    be8e:	b083      	sub	sp, #12
    be90:	469b      	mov	fp, r3
    be92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    be96:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
    be9a:	460f      	mov	r7, r1
    be9c:	4615      	mov	r5, r2
  beginTransaction();
    be9e:	f7ff ff39 	bl	bd14 <Adafruit_SPIDevice::beginTransaction()>
  if (_cs != -1) {
    bea2:	f994 000e 	ldrsb.w	r0, [r4, #14]
    bea6:	1c43      	adds	r3, r0, #1
    bea8:	d148      	bne.n	bf3c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb4>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    beaa:	b1d5      	cbz	r5, bee2 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x5a>
    beac:	3f01      	subs	r7, #1
    beae:	eb07 0905 	add.w	r9, r7, r5
    beb2:	f10d 0507 	add.w	r5, sp, #7
    beb6:	e003      	b.n	bec0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x38>
    beb8:	f7ff fe1e 	bl	baf8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    bebc:	454f      	cmp	r7, r9
    bebe:	d010      	beq.n	bee2 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x5a>
  if (_spi) {
    bec0:	6826      	ldr	r6, [r4, #0]
  uint8_t data = send;
    bec2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    bec6:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    beca:	2201      	movs	r2, #1
    becc:	4629      	mov	r1, r5
    bece:	4620      	mov	r0, r4
    bed0:	2e00      	cmp	r6, #0
    bed2:	d0f1      	beq.n	beb8 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x30>
    bed4:	4613      	mov	r3, r2
    bed6:	4630      	mov	r0, r6
    bed8:	462a      	mov	r2, r5
    beda:	f000 f975 	bl	c1c8 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    bede:	454f      	cmp	r7, r9
    bee0:	d1ee      	bne.n	bec0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x38>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    bee2:	f1ba 0f00 	cmp.w	sl, #0
    bee6:	d022      	beq.n	bf2e <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xa6>
    bee8:	44da      	add	sl, fp
    beea:	f10b 36ff 	add.w	r6, fp, #4294967295
    beee:	f10a 3aff 	add.w	sl, sl, #4294967295
    bef2:	f10d 0507 	add.w	r5, sp, #7
    bef6:	e007      	b.n	bf08 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x80>
    bef8:	f7ff fdfe 	bl	baf8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    befc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    bf00:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    bf04:	45b2      	cmp	sl, r6
    bf06:	d012      	beq.n	bf2e <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xa6>
  if (_spi) {
    bf08:	6827      	ldr	r7, [r4, #0]
  uint8_t data = send;
    bf0a:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    bf0e:	2201      	movs	r2, #1
    bf10:	4629      	mov	r1, r5
    bf12:	4620      	mov	r0, r4
    bf14:	2f00      	cmp	r7, #0
    bf16:	d0ef      	beq.n	bef8 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x70>
    bf18:	4613      	mov	r3, r2
    bf1a:	4638      	mov	r0, r7
    bf1c:	462a      	mov	r2, r5
    bf1e:	f000 f953 	bl	c1c8 <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    bf22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    bf26:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    bf2a:	45b2      	cmp	sl, r6
    bf2c:	d1ec      	bne.n	bf08 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x80>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    bf2e:	4620      	mov	r0, r4
    bf30:	f7ff ff30 	bl	bd94 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    bf34:	2001      	movs	r0, #1
    bf36:	b003      	add	sp, #12
    bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    bf3c:	b2c0      	uxtb	r0, r0
    bf3e:	2100      	movs	r1, #0
    bf40:	f002 fed4 	bl	ecec <digitalWrite>
    bf44:	e7b1      	b.n	beaa <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x22>
    bf46:	bf00      	nop

0000bf48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    bf48:	4684      	mov	ip, r0
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    bf4a:	6800      	ldr	r0, [r0, #0]
    bf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf50:	460c      	mov	r4, r1
    bf52:	4611      	mov	r1, r2
    bf54:	461a      	mov	r2, r3
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    bf56:	68c3      	ldr	r3, [r0, #12]
    bf58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    bf5c:	4b7a      	ldr	r3, [pc, #488]	; (c148 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x200>)
    bf5e:	6003      	str	r3, [r0, #0]
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    bf60:	d14b      	bne.n	bffa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xb2>

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    bf62:	07d3      	lsls	r3, r2, #31
    bf64:	f100 80d1 	bmi.w	c10a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x1c2>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    bf68:	f89c 6024 	ldrb.w	r6, [ip, #36]	; 0x24
    bf6c:	4617      	mov	r7, r2
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    bf6e:	ea46 2606 	orr.w	r6, r6, r6, lsl #8

		while (count > 0) {
    bf72:	2f00      	cmp	r7, #0
    bf74:	f000 80b7 	beq.w	c0e6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x19e>
			// Push out the next byte; 
		    if (p_write) {
    bf78:	b134      	cbz	r4, bf88 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x40>
		    	w = (*p_write++) << 8;
    bf7a:	7826      	ldrb	r6, [r4, #0]
    bf7c:	7863      	ldrb	r3, [r4, #1]
    bf7e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    bf82:	ba76      	rev16	r6, r6
				w |= *p_write++;
    bf84:	3402      	adds	r4, #2
    bf86:	b2b6      	uxth	r6, r6
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    bf88:	f8dc 3004 	ldr.w	r3, [ip, #4]
    bf8c:	f893 e008 	ldrb.w	lr, [r3, #8]
			if (count == 2)
    bf90:	2f02      	cmp	r7, #2
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    bf92:	f10e 3eff 	add.w	lr, lr, #4294967295
    bf96:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    bf9a:	bf0c      	ite	eq
    bf9c:	f046 5380 	orreq.w	r3, r6, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    bfa0:	f046 4310 	orrne.w	r3, r6, #2415919104	; 0x90000000
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    bfa4:	fa1f fe8e 	uxth.w	lr, lr
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    bfa8:	6343      	str	r3, [r0, #52]	; 0x34
			count -= 2; // how many bytes to output.
    bfaa:	3f02      	subs	r7, #2
    bfac:	e00a      	b.n	bfc4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x7c>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    bfae:	b111      	cbz	r1, bfb6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x6e>
							*p_read++ = w;  // Read any pending RX bytes in
    bfb0:	f805 0b01 	strb.w	r0, [r5], #1
    bfb4:	4629      	mov	r1, r5
						} 
						count_read--;
    bfb6:	3a01      	subs	r2, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    bfb8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    bfbc:	4573      	cmp	r3, lr
    bfbe:	d917      	bls.n	bff0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xa8>
    bfc0:	f8dc 0000 	ldr.w	r0, [ip]
				sr = port().SR;
    bfc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
				if (sr & 0xF0)  {
    bfc6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    bfca:	d0f5      	beq.n	bfb8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x70>
					if (count_read & 1) {
    bfcc:	f012 0f01 	tst.w	r2, #1
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    bfd0:	6b80      	ldr	r0, [r0, #56]	; 0x38
							*p_read++ = w;  // Read any pending RX bytes in
    bfd2:	460d      	mov	r5, r1
					if (count_read & 1) {
    bfd4:	d1eb      	bne.n	bfae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x66>
							*p_read++ = w >> 8;
    bfd6:	f3c0 2807 	ubfx	r8, r0, #8, #8
						if (p_read) {
    bfda:	b119      	cbz	r1, bfe4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x9c>
							*p_read++ = w >> 8;
    bfdc:	f805 8b02 	strb.w	r8, [r5], #2
							*p_read++ = (w & 0xff);
    bfe0:	7048      	strb	r0, [r1, #1]
    bfe2:	4629      	mov	r1, r5
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    bfe4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    bfe8:	4573      	cmp	r3, lr
						count_read -= 2;
    bfea:	f1a2 0202 	sub.w	r2, r2, #2
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    bfee:	d8e7      	bhi.n	bfc0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x78>
		while (count > 0) {
    bff0:	2f00      	cmp	r7, #0
    bff2:	d078      	beq.n	c0e6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x19e>
    bff4:	f8dc 0000 	ldr.w	r0, [ip]
    bff8:	e7be      	b.n	bf78 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x30>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    bffa:	07d3      	lsls	r3, r2, #31
    bffc:	d45f      	bmi.n	c0be <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x176>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    bffe:	f89c 7024 	ldrb.w	r7, [ip, #36]	; 0x24
    c002:	4616      	mov	r6, r2
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    c004:	b2bf      	uxth	r7, r7

		while (count > 0) {
    c006:	2e00      	cmp	r6, #0
    c008:	d045      	beq.n	c096 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14e>
			// Push out the next byte; 
		    if (p_write) {
    c00a:	b124      	cbz	r4, c016 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xce>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    c00c:	7863      	ldrb	r3, [r4, #1]
    c00e:	f814 7b02 	ldrb.w	r7, [r4], #2
    c012:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    c016:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c01a:	f893 e008 	ldrb.w	lr, [r3, #8]
			if (count == 2)
    c01e:	2e02      	cmp	r6, #2
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    c020:	f10e 3eff 	add.w	lr, lr, #4294967295
    c024:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    c028:	bf0c      	ite	eq
    c02a:	f047 5380 	orreq.w	r3, r7, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    c02e:	f047 4310 	orrne.w	r3, r7, #2415919104	; 0x90000000
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    c032:	fa1f fe8e 	uxth.w	lr, lr
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    c036:	6343      	str	r3, [r0, #52]	; 0x34
			count -= 2; // how many bytes to output.
    c038:	3e02      	subs	r6, #2
    c03a:	e00a      	b.n	c052 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x10a>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    c03c:	b111      	cbz	r1, c044 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xfc>
							*p_read++ = w;  // Read any pending RX bytes in
    c03e:	f805 0b01 	strb.w	r0, [r5], #1
    c042:	4629      	mov	r1, r5
						} 
						count_read--;
    c044:	3a01      	subs	r2, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    c046:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    c04a:	4573      	cmp	r3, lr
    c04c:	d917      	bls.n	c07e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x136>
    c04e:	f8dc 0000 	ldr.w	r0, [ip]
				sr = port().SR;
    c052:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
				if (sr & 0xF0)  {
    c054:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    c058:	d0f5      	beq.n	c046 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xfe>
					if (count_read & 1) {
    c05a:	f012 0f01 	tst.w	r2, #1
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    c05e:	6b80      	ldr	r0, [r0, #56]	; 0x38
							*p_read++ = w;  // Read any pending RX bytes in
    c060:	460d      	mov	r5, r1
					if (count_read & 1) {
    c062:	d1eb      	bne.n	c03c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xf4>
						if (p_read) {
    c064:	b129      	cbz	r1, c072 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x12a>
							*p_read++ = (w & 0xff);
    c066:	f805 0b02 	strb.w	r0, [r5], #2
							*p_read++ = w >> 8;
    c06a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c06e:	7048      	strb	r0, [r1, #1]
    c070:	4629      	mov	r1, r5
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    c072:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    c076:	4573      	cmp	r3, lr
						count_read -= 2;
    c078:	f1a2 0202 	sub.w	r2, r2, #2
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    c07c:	d8e7      	bhi.n	c04e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x106>
		while (count > 0) {
    c07e:	b156      	cbz	r6, c096 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14e>
    c080:	f8dc 0000 	ldr.w	r0, [ip]
    c084:	e7c1      	b.n	c00a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xc2>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    c086:	b129      	cbz	r1, c094 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14c>
						*p_read++ = (w & 0xff);
    c088:	f800 3b02 	strb.w	r3, [r0], #2
						*p_read++ = w >> 8;
    c08c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c090:	704b      	strb	r3, [r1, #1]
    c092:	4601      	mov	r1, r0
					}
					count_read -= 2;
    c094:	3a02      	subs	r2, #2
		while (count_read) {
    c096:	b182      	cbz	r2, c0ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x172>
    c098:	f8dc 3000 	ldr.w	r3, [ip]
			sr = port().SR;
    c09c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
			if (sr & 0xF0)  {
    c09e:	f010 0ff0 	tst.w	r0, #240	; 0xf0
    c0a2:	d0f8      	beq.n	c096 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14e>
				if (count_read & 1) {
    c0a4:	07d4      	lsls	r4, r2, #31
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    c0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
						*p_read++ = w;  // Read any pending RX bytes in
    c0a8:	4608      	mov	r0, r1
				if (count_read & 1) {
    c0aa:	d5ec      	bpl.n	c086 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x13e>
					if (p_read)
    c0ac:	b111      	cbz	r1, c0b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x16c>
						*p_read++ = w;  // Read any pending RX bytes in
    c0ae:	f800 3b01 	strb.w	r3, [r0], #1
    c0b2:	4601      	mov	r1, r0
					count_read--;
    c0b4:	3a01      	subs	r2, #1
		while (count_read) {
    c0b6:	2a00      	cmp	r2, #0
    c0b8:	d1ee      	bne.n	c098 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x150>
				}
			}
		}
	}
}
    c0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    if (p_write) {
    c0be:	b384      	cbz	r4, c122 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x1da>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c0c0:	f814 3b01 	ldrb.w	r3, [r4], #1
				if (count > 1)
    c0c4:	2a01      	cmp	r2, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c0c6:	bf18      	it	ne
    c0c8:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    c0cc:	6343      	str	r3, [r0, #52]	; 0x34
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c0ce:	f89c 7024 	ldrb.w	r7, [ip, #36]	; 0x24
			count--;
    c0d2:	1e56      	subs	r6, r2, #1
    c0d4:	e796      	b.n	c004 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xbc>
						*p_read++ = w >> 8;
    c0d6:	f3c3 2407 	ubfx	r4, r3, #8, #8
					if (p_read) {
    c0da:	b119      	cbz	r1, c0e4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x19c>
						*p_read++ = w >> 8;
    c0dc:	f800 4b02 	strb.w	r4, [r0], #2
						*p_read++ = (w & 0xff);
    c0e0:	704b      	strb	r3, [r1, #1]
    c0e2:	4601      	mov	r1, r0
					count_read -= 2;
    c0e4:	3a02      	subs	r2, #2
		while (count_read) {
    c0e6:	2a00      	cmp	r2, #0
    c0e8:	d0e7      	beq.n	c0ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x172>
    c0ea:	f8dc 3000 	ldr.w	r3, [ip]
			sr = port().SR;
    c0ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
			if (sr & 0xF0)  {
    c0f0:	f010 0ff0 	tst.w	r0, #240	; 0xf0
    c0f4:	d0f7      	beq.n	c0e6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x19e>
				if (count_read & 1) {
    c0f6:	07d4      	lsls	r4, r2, #31
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    c0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
						*p_read++ = w;  // Read any pending RX bytes in
    c0fa:	4608      	mov	r0, r1
				if (count_read & 1) {
    c0fc:	d5eb      	bpl.n	c0d6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18e>
					if (p_read)
    c0fe:	b111      	cbz	r1, c106 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x1be>
						*p_read++ = w;  // Read any pending RX bytes in
    c100:	f800 3b01 	strb.w	r3, [r0], #1
    c104:	4601      	mov	r1, r0
					count_read--;
    c106:	3a01      	subs	r2, #1
    c108:	e7ed      	b.n	c0e6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x19e>
		    if (p_write) {
    c10a:	b19c      	cbz	r4, c134 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x1ec>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c10c:	f814 3b01 	ldrb.w	r3, [r4], #1
				if (count > 1)
    c110:	2a01      	cmp	r2, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c112:	bf18      	it	ne
    c114:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    c118:	6343      	str	r3, [r0, #52]	; 0x34
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c11a:	f89c 6024 	ldrb.w	r6, [ip, #36]	; 0x24
			count--;
    c11e:	1e57      	subs	r7, r2, #1
    c120:	e725      	b.n	bf6e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x26>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c122:	f89c 7024 	ldrb.w	r7, [ip, #36]	; 0x24
				if (count > 1)
    c126:	2a01      	cmp	r2, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c128:	bf1a      	itte	ne
    c12a:	f047 4300 	orrne.w	r3, r7, #2147483648	; 0x80000000
    c12e:	6343      	strne	r3, [r0, #52]	; 0x34
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    c130:	6347      	streq	r7, [r0, #52]	; 0x34
    c132:	e7ce      	b.n	c0d2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18a>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c134:	f89c 6024 	ldrb.w	r6, [ip, #36]	; 0x24
				if (count > 1)
    c138:	2a01      	cmp	r2, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    c13a:	bf1a      	itte	ne
    c13c:	f046 4300 	orrne.w	r3, r6, #2147483648	; 0x80000000
    c140:	6343      	strne	r3, [r0, #52]	; 0x34
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    c142:	6346      	streq	r6, [r0, #52]	; 0x34
    c144:	e7eb      	b.n	c11e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x1d6>
    c146:	bf00      	nop
    c148:	801f0400 	.word	0x801f0400

0000c14c <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    c14c:	6843      	ldr	r3, [r0, #4]
{
    c14e:	b410      	push	{r4}
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    c150:	681c      	ldr	r4, [r3, #0]
    c152:	685a      	ldr	r2, [r3, #4]
    c154:	6821      	ldr	r1, [r4, #0]
    c156:	4311      	orrs	r1, r2
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c158:	6802      	ldr	r2, [r0, #0]
    c15a:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    c15c:	4c15      	ldr	r4, [pc, #84]	; (c1b4 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    c15e:	4916      	ldr	r1, [pc, #88]	; (c1b8 <SPIClass::begin()+0x6c>)
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    c160:	6014      	str	r4, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    c162:	60d1      	str	r1, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    c164:	4c15      	ldr	r4, [pc, #84]	; (c1bc <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    c166:	4916      	ldr	r1, [pc, #88]	; (c1c0 <SPIClass::begin()+0x74>)
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    c168:	6114      	str	r4, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    c16a:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    c16c:	7a41      	ldrb	r1, [r0, #9]
    c16e:	4a15      	ldr	r2, [pc, #84]	; (c1c4 <SPIClass::begin()+0x78>)
    c170:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    c172:	310a      	adds	r1, #10
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    c174:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
	*reg = hardware().mosi_mux[mosi_pin_index];
    c178:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    c17c:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
    c180:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    c182:	600c      	str	r4, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    c184:	7a01      	ldrb	r1, [r0, #8]
    c186:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    c188:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    c18c:	f894 c018 	ldrb.w	ip, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    c190:	69cc      	ldr	r4, [r1, #28]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    c192:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
    c196:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    c198:	600c      	str	r4, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    c19a:	7a81      	ldrb	r1, [r0, #10]
}
    c19c:	bc10      	pop	{r4}
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    c19e:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    c1a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    c1a4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
	*reg = hardware().sck_mux[sck_pin_index];
    c1a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    c1aa:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    c1ae:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    c1b0:	6019      	str	r1, [r3, #0]
}
    c1b2:	4770      	bx	lr
    c1b4:	001f4001 	.word	0x001f4001
    c1b8:	38001001 	.word	0x38001001
    c1bc:	78001001 	.word	0x78001001
    c1c0:	801f0000 	.word	0x801f0000
    c1c4:	00015e50 	.word	0x00015e50

0000c1c8 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    c1c8:	b10b      	cbz	r3, c1ce <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    c1ca:	f7ff bebd 	b.w	bf48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    c1ce:	4770      	bx	lr

0000c1d0 <Print::flush()>:
	virtual void flush()				{ }
    c1d0:	4770      	bx	lr
    c1d2:	bf00      	nop

0000c1d4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    c1d4:	2900      	cmp	r1, #0
    c1d6:	db1c      	blt.n	c212 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3e>
    c1d8:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
    c1dc:	458c      	cmp	ip, r1
    c1de:	dd18      	ble.n	c212 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3e>
    c1e0:	2a00      	cmp	r2, #0
    c1e2:	db16      	blt.n	c212 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3e>
    c1e4:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
    c1e8:	4594      	cmp	ip, r2
    c1ea:	dd12      	ble.n	c212 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3e>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
    c1ec:	b410      	push	{r4}
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
    c1ee:	f890 c01a 	ldrb.w	ip, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
    c1f2:	f1bc 0f02 	cmp.w	ip, #2
    c1f6:	d00d      	beq.n	c214 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x40>
    c1f8:	f1bc 0f03 	cmp.w	ip, #3
    c1fc:	d059      	beq.n	c2b2 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xde>
    c1fe:	f1bc 0f01 	cmp.w	ip, #1
    c202:	d04c      	beq.n	c29e <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xca>
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
    c204:	2b01      	cmp	r3, #1
    c206:	d039      	beq.n	c27c <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xa8>
    c208:	2b02      	cmp	r3, #2
    c20a:	d025      	beq.n	c258 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x84>
    c20c:	b183      	cbz	r3, c230 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x5c>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
      break;
    }
  }
}
    c20e:	bc10      	pop	{r4}
    c210:	4770      	bx	lr
    c212:	4770      	bx	lr
      x = WIDTH - x - 1;
    c214:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    c218:	f10c 3cff 	add.w	ip, ip, #4294967295
    c21c:	ebac 0101 	sub.w	r1, ip, r1
      y = HEIGHT - y - 1;
    c220:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
    c224:	ebac 0202 	sub.w	r2, ip, r2
    c228:	3a01      	subs	r2, #1
      x = WIDTH - x - 1;
    c22a:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
    c22c:	b212      	sxth	r2, r2
      break;
    c22e:	e7e9      	b.n	c204 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x30>
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
    c230:	2a00      	cmp	r2, #0
    c232:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    c236:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    c238:	4613      	mov	r3, r2
    c23a:	bfb8      	it	lt
    c23c:	1dd3      	addlt	r3, r2, #7
    c23e:	10db      	asrs	r3, r3, #3
    c240:	fb13 130c 	smlabb	r3, r3, ip, r1
    c244:	f002 0207 	and.w	r2, r2, #7
    c248:	5ce1      	ldrb	r1, [r4, r3]
    c24a:	2001      	movs	r0, #1
    c24c:	fa00 f202 	lsl.w	r2, r0, r2
    c250:	ea21 0202 	bic.w	r2, r1, r2
    c254:	54e2      	strb	r2, [r4, r3]
      break;
    c256:	e7da      	b.n	c20e <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3a>
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
    c258:	2a00      	cmp	r2, #0
    c25a:	8904      	ldrh	r4, [r0, #8]
    c25c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    c25e:	4613      	mov	r3, r2
    c260:	bfb8      	it	lt
    c262:	1dd3      	addlt	r3, r2, #7
    c264:	10db      	asrs	r3, r3, #3
    c266:	fb13 1304 	smlabb	r3, r3, r4, r1
    c26a:	f002 0207 	and.w	r2, r2, #7
    c26e:	5cc4      	ldrb	r4, [r0, r3]
    c270:	2101      	movs	r1, #1
    c272:	fa01 f202 	lsl.w	r2, r1, r2
    c276:	4062      	eors	r2, r4
    c278:	54c2      	strb	r2, [r0, r3]
}
    c27a:	e7c8      	b.n	c20e <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3a>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
    c27c:	2a00      	cmp	r2, #0
    c27e:	8904      	ldrh	r4, [r0, #8]
    c280:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    c282:	4613      	mov	r3, r2
    c284:	bfb8      	it	lt
    c286:	1dd3      	addlt	r3, r2, #7
    c288:	10db      	asrs	r3, r3, #3
    c28a:	fb13 1304 	smlabb	r3, r3, r4, r1
    c28e:	f002 0407 	and.w	r4, r2, #7
    c292:	5cc1      	ldrb	r1, [r0, r3]
    c294:	2201      	movs	r2, #1
    c296:	40a2      	lsls	r2, r4
    c298:	430a      	orrs	r2, r1
    c29a:	54c2      	strb	r2, [r0, r3]
      break;
    c29c:	e7b7      	b.n	c20e <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3a>
      x = WIDTH - x - 1;
    c29e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    c2a2:	ebac 0c02 	sub.w	ip, ip, r2
    c2a6:	f10c 3cff 	add.w	ip, ip, #4294967295
      break;
    c2aa:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
    c2ac:	fa0f f18c 	sxth.w	r1, ip
      break;
    c2b0:	e7a8      	b.n	c204 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x30>
      y = HEIGHT - y - 1;
    c2b2:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
    c2b6:	f10c 3cff 	add.w	ip, ip, #4294967295
    c2ba:	ebac 0c01 	sub.w	ip, ip, r1
      break;
    c2be:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
    c2c0:	fa0f f28c 	sxth.w	r2, ip
      break;
    c2c4:	e79e      	b.n	c204 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x30>
    c2c6:	bf00      	nop

0000c2c8 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>:
*/
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
                                             uint16_t color) {

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    if (x < 0) {                  // Clip left
    c2c8:	2900      	cmp	r1, #0
      w += x;
    c2ca:	bfbe      	ittt	lt
    c2cc:	185b      	addlt	r3, r3, r1
    c2ce:	b21b      	sxthlt	r3, r3
    c2d0:	2100      	movlt	r1, #0
      x = 0;
    }
    if ((x + w) > WIDTH) { // Clip right
    c2d2:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
    c2d6:	b530      	push	{r4, r5, lr}
    if ((x + w) > WIDTH) { // Clip right
    c2d8:	185d      	adds	r5, r3, r1
    c2da:	4565      	cmp	r5, ip
      x = 0;
    c2dc:	468e      	mov	lr, r1
      w = (WIDTH - x);
    c2de:	bfc4      	itt	gt
    c2e0:	ebac 0101 	subgt.w	r1, ip, r1
    c2e4:	b20b      	sxthgt	r3, r1
    }
    if (w > 0) { // Proceed only if width is positive
    c2e6:	2b00      	cmp	r3, #0
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
    c2e8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
    if (w > 0) { // Proceed only if width is positive
    c2ec:	dd0e      	ble.n	c30c <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x44>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
    c2ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    c2f0:	10d0      	asrs	r0, r2, #3
    c2f2:	fb1c ec00 	smlabb	ip, ip, r0, lr
    c2f6:	f002 0007 	and.w	r0, r2, #7
    c2fa:	2201      	movs	r2, #1
    c2fc:	4082      	lsls	r2, r0
      switch (color) {
    c2fe:	2c01      	cmp	r4, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
    c300:	4461      	add	r1, ip
    c302:	b2d2      	uxtb	r2, r2
      switch (color) {
    c304:	d019      	beq.n	c33a <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x72>
    c306:	2c02      	cmp	r4, #2
    c308:	d00d      	beq.n	c326 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x5e>
    c30a:	b104      	cbz	r4, c30e <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x46>
        };
        break;
      }
    }
  }
}
    c30c:	bd30      	pop	{r4, r5, pc}
        mask = ~mask;
    c30e:	43d2      	mvns	r2, r2
    c310:	b2d2      	uxtb	r2, r2
        while (w--) {
    c312:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ &= mask;
    c316:	f811 0b01 	ldrb.w	r0, [r1], #1
    c31a:	4010      	ands	r0, r2
        while (w--) {
    c31c:	4299      	cmp	r1, r3
          *pBuf++ &= mask;
    c31e:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
    c322:	d1f8      	bne.n	c316 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x4e>
}
    c324:	bd30      	pop	{r4, r5, pc}
        while (w--) {
    c326:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ ^= mask;
    c32a:	f811 0b01 	ldrb.w	r0, [r1], #1
    c32e:	4050      	eors	r0, r2
        while (w--) {
    c330:	428b      	cmp	r3, r1
          *pBuf++ ^= mask;
    c332:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
    c336:	d1f8      	bne.n	c32a <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x62>
}
    c338:	bd30      	pop	{r4, r5, pc}
        while (w--) {
    c33a:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ |= mask;
    c33e:	f811 0b01 	ldrb.w	r0, [r1], #1
    c342:	4310      	orrs	r0, r2
        while (w--) {
    c344:	4299      	cmp	r1, r3
          *pBuf++ |= mask;
    c346:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
    c34a:	d1f8      	bne.n	c33e <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x76>
}
    c34c:	bd30      	pop	{r4, r5, pc}
    c34e:	bf00      	nop

0000c350 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>:
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
    c350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                             int16_t __h, uint16_t color) {

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    c354:	f9b0 e008 	ldrsh.w	lr, [r0, #8]
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
    c358:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    c35c:	458e      	cmp	lr, r1
    c35e:	dd2f      	ble.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
    if (__y < 0) {               // Clip top
    c360:	2a00      	cmp	r2, #0
      __h += __y;
    c362:	bfbe      	ittt	lt
    c364:	189b      	addlt	r3, r3, r2
    c366:	2200      	movlt	r2, #0
    c368:	b21b      	sxthlt	r3, r3
      __y = 0;
    }
    if ((__y + __h) > HEIGHT) { // Clip bottom
    c36a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
      __y = 0;
    c36e:	4694      	mov	ip, r2
    if ((__y + __h) > HEIGHT) { // Clip bottom
    c370:	449c      	add	ip, r3
    c372:	45ac      	cmp	ip, r5
      __h = (HEIGHT - __y);
    c374:	bfc4      	itt	gt
    c376:	1aad      	subgt	r5, r5, r2
    c378:	b22b      	sxthgt	r3, r5
    }
    if (__h > 0) { // Proceed only if height is now positive
    c37a:	2b00      	cmp	r3, #0
    c37c:	dd20      	ble.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t y = __y, h = __h;
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
    c37e:	f3c2 05c4 	ubfx	r5, r2, #3, #5
    c382:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    c384:	fb1e 1505 	smlabb	r5, lr, r5, r1

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
      if (mod) {
    c388:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
    c38c:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
    c38e:	eb06 0105 	add.w	r1, r6, r5
      if (mod) {
    c392:	d02b      	beq.n	c3ec <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x9c>
        // mask off the high n bits we want to set
        mod = 8 - mod;
    c394:	f1c2 0c08 	rsb	ip, r2, #8
    c398:	fa5f fc8c 	uxtb.w	ip, ip
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] = {0x00, 0x80, 0xC0, 0xE0,
                                                   0xF0, 0xF8, 0xFC, 0xFE};
        uint8_t mask = pgm_read_byte(&premask[mod]);
    c39c:	4f3e      	ldr	r7, [pc, #248]	; (c498 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x148>)
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
    c39e:	4563      	cmp	r3, ip
        uint8_t mask = pgm_read_byte(&premask[mod]);
    c3a0:	f817 700c 	ldrb.w	r7, [r7, ip]
        if (h < mod)
    c3a4:	d20e      	bcs.n	c3c4 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x74>
          mask &= (0XFF >> (mod - h));
    c3a6:	ebac 0803 	sub.w	r8, ip, r3
    c3aa:	f04f 0eff 	mov.w	lr, #255	; 0xff
    c3ae:	fa4e fe08 	asr.w	lr, lr, r8

        switch (color) {
    c3b2:	2c01      	cmp	r4, #1
          mask &= (0XFF >> (mod - h));
    c3b4:	ea07 070e 	and.w	r7, r7, lr
        switch (color) {
    c3b8:	d064      	beq.n	c484 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x134>
    c3ba:	2c02      	cmp	r4, #2
    c3bc:	d03e      	beq.n	c43c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xec>
    c3be:	b13c      	cbz	r4, c3d0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x80>
          }
        }
      }
    } // endif positive height
  }   // endif x in bounds
}
    c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (color) {
    c3c4:	2c01      	cmp	r4, #1
    c3c6:	d05d      	beq.n	c484 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x134>
    c3c8:	2c02      	cmp	r4, #2
    c3ca:	d037      	beq.n	c43c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xec>
    c3cc:	2c00      	cmp	r4, #0
    c3ce:	d13a      	bne.n	c446 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xf6>
          *pBuf &= ~mask;
    c3d0:	f816 e005 	ldrb.w	lr, [r6, r5]
    c3d4:	ea2e 0e07 	bic.w	lr, lr, r7
          *pBuf ^= mask;
    c3d8:	f806 e005 	strb.w	lr, [r6, r5]
      if (h >= mod) { // More to go?
    c3dc:	4563      	cmp	r3, ip
        pBuf += WIDTH;
    c3de:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
      if (h >= mod) { // More to go?
    c3e2:	d3ed      	bcc.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
        h -= mod;
    c3e4:	3a08      	subs	r2, #8
    c3e6:	4413      	add	r3, r2
        pBuf += WIDTH;
    c3e8:	4429      	add	r1, r5
        h -= mod;
    c3ea:	b2db      	uxtb	r3, r3
        if (h >= 8) {
    c3ec:	2b07      	cmp	r3, #7
    c3ee:	d916      	bls.n	c41e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xce>
          if (color == SSD1306_INVERSE) {
    c3f0:	2c02      	cmp	r4, #2
    c3f2:	d033      	beq.n	c45c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x10c>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
    c3f4:	f1b4 0c00 	subs.w	ip, r4, #0
    c3f8:	bf18      	it	ne
    c3fa:	f04f 0c01 	movne.w	ip, #1
    c3fe:	f1cc 0c00 	rsb	ip, ip, #0
    c402:	fa5f fc8c 	uxtb.w	ip, ip
    c406:	461a      	mov	r2, r3
              *pBuf = val;   // Set byte
    c408:	f881 c000 	strb.w	ip, [r1]
              h -= 8;        // Subtract 8 rows from height
    c40c:	3a08      	subs	r2, #8
              pBuf += WIDTH; // Advance pointer 8 rows
    c40e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
    c412:	b2d2      	uxtb	r2, r2
            } while (h >= 8);
    c414:	2a07      	cmp	r2, #7
              pBuf += WIDTH; // Advance pointer 8 rows
    c416:	4429      	add	r1, r5
            } while (h >= 8);
    c418:	d8f6      	bhi.n	c408 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xb8>
    c41a:	f003 0307 	and.w	r3, r3, #7
        if (h) { // Do the final partial byte, if necessary
    c41e:	2b00      	cmp	r3, #0
    c420:	d0ce      	beq.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    c422:	4a1e      	ldr	r2, [pc, #120]	; (c49c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14c>)
          switch (color) {
    c424:	2c01      	cmp	r4, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    c426:	5cd3      	ldrb	r3, [r2, r3]
          switch (color) {
    c428:	d031      	beq.n	c48e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x13e>
    c42a:	2c02      	cmp	r4, #2
    c42c:	d026      	beq.n	c47c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x12c>
    c42e:	2c00      	cmp	r4, #0
    c430:	d1c6      	bne.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
            *pBuf &= ~mask;
    c432:	780a      	ldrb	r2, [r1, #0]
    c434:	ea22 0303 	bic.w	r3, r2, r3
    c438:	700b      	strb	r3, [r1, #0]
            break;
    c43a:	e7c1      	b.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
          *pBuf ^= mask;
    c43c:	f816 e005 	ldrb.w	lr, [r6, r5]
    c440:	ea87 0e0e 	eor.w	lr, r7, lr
          break;
    c444:	e7c8      	b.n	c3d8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x88>
        h -= mod;
    c446:	3a08      	subs	r2, #8
    c448:	4413      	add	r3, r2
    c44a:	b2db      	uxtb	r3, r3
        if (h >= 8) {
    c44c:	2b07      	cmp	r3, #7
        pBuf += WIDTH;
    c44e:	4471      	add	r1, lr
        if (h >= 8) {
    c450:	d8d0      	bhi.n	c3f4 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xa4>
        if (h) { // Do the final partial byte, if necessary
    c452:	2b00      	cmp	r3, #0
    c454:	d0b4      	beq.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    c456:	4a11      	ldr	r2, [pc, #68]	; (c49c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14c>)
    c458:	5cd3      	ldrb	r3, [r2, r3]
          switch (color) {
    c45a:	e7e6      	b.n	c42a <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xda>
    c45c:	461a      	mov	r2, r3
              *pBuf ^= 0xFF; // Invert byte
    c45e:	780c      	ldrb	r4, [r1, #0]
    c460:	43e4      	mvns	r4, r4
    c462:	700c      	strb	r4, [r1, #0]
              h -= 8;        // Subtract 8 rows from height
    c464:	3a08      	subs	r2, #8
              pBuf += WIDTH; // Advance pointer 8 rows
    c466:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
    c46a:	b2d2      	uxtb	r2, r2
            } while (h >= 8);
    c46c:	2a07      	cmp	r2, #7
              pBuf += WIDTH; // Advance pointer 8 rows
    c46e:	4421      	add	r1, r4
            } while (h >= 8);
    c470:	d8f5      	bhi.n	c45e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x10e>
        if (h) { // Do the final partial byte, if necessary
    c472:	f013 0307 	ands.w	r3, r3, #7
    c476:	d0a3      	beq.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    c478:	4a08      	ldr	r2, [pc, #32]	; (c49c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14c>)
    c47a:	5cd3      	ldrb	r3, [r2, r3]
            *pBuf ^= mask;
    c47c:	780a      	ldrb	r2, [r1, #0]
    c47e:	4053      	eors	r3, r2
    c480:	700b      	strb	r3, [r1, #0]
}
    c482:	e79d      	b.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
          *pBuf |= mask;
    c484:	f816 e005 	ldrb.w	lr, [r6, r5]
    c488:	ea47 0e0e 	orr.w	lr, r7, lr
          break;
    c48c:	e7a4      	b.n	c3d8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x88>
            *pBuf |= mask;
    c48e:	780a      	ldrb	r2, [r1, #0]
    c490:	4313      	orrs	r3, r2
    c492:	700b      	strb	r3, [r1, #0]
            break;
    c494:	e794      	b.n	c3c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
    c496:	bf00      	nop
    c498:	00015798 	.word	0x00015798
    c49c:	000157a0 	.word	0x000157a0

0000c4a0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)>:
                                     uint16_t color) {
    c4a0:	b410      	push	{r4}
    c4a2:	468c      	mov	ip, r1
    c4a4:	4611      	mov	r1, r2
  switch (rotation) {
    c4a6:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
    c4a8:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  switch (rotation) {
    c4ac:	2a02      	cmp	r2, #2
    c4ae:	d023      	beq.n	c4f8 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x58>
    c4b0:	2a03      	cmp	r2, #3
    c4b2:	d01a      	beq.n	c4ea <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x4a>
    c4b4:	2a01      	cmp	r2, #1
    c4b6:	d00d      	beq.n	c4d4 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x34>
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    c4b8:	2900      	cmp	r1, #0
    c4ba:	db09      	blt.n	c4d0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
    c4bc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    c4c0:	428a      	cmp	r2, r1
    c4c2:	dd05      	ble.n	c4d0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
    c4c4:	9401      	str	r4, [sp, #4]
    c4c6:	460a      	mov	r2, r1
}
    c4c8:	bc10      	pop	{r4}
    c4ca:	4661      	mov	r1, ip
    c4cc:	f7ff befc 	b.w	c2c8 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>
    c4d0:	bc10      	pop	{r4}
    c4d2:	4770      	bx	lr
    x = WIDTH - x - 1;
    c4d4:	8902      	ldrh	r2, [r0, #8]
    c4d6:	1a52      	subs	r2, r2, r1
    c4d8:	3a01      	subs	r2, #1
    c4da:	b211      	sxth	r1, r2
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    c4dc:	2900      	cmp	r1, #0
    c4de:	dbf7      	blt.n	c4d0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
    c4e0:	9401      	str	r4, [sp, #4]
    c4e2:	4662      	mov	r2, ip
}
    c4e4:	bc10      	pop	{r4}
    c4e6:	f7ff bf33 	b.w	c350 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>
    y -= (w - 1);
    c4ea:	8942      	ldrh	r2, [r0, #10]
    c4ec:	449c      	add	ip, r3
    c4ee:	eba2 020c 	sub.w	r2, r2, ip
    c4f2:	fa0f fc82 	sxth.w	ip, r2
  if (bSwap)
    c4f6:	e7f1      	b.n	c4dc <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x3c>
    y = HEIGHT - y - 1;
    c4f8:	8942      	ldrh	r2, [r0, #10]
    c4fa:	1a52      	subs	r2, r2, r1
    c4fc:	3a01      	subs	r2, #1
    c4fe:	b211      	sxth	r1, r2
    x -= (w - 1);
    c500:	8902      	ldrh	r2, [r0, #8]
    c502:	449c      	add	ip, r3
    c504:	eba2 020c 	sub.w	r2, r2, ip
    c508:	fa0f fc82 	sxth.w	ip, r2
  if (bSwap)
    c50c:	e7d4      	b.n	c4b8 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x18>
    c50e:	bf00      	nop

0000c510 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)>:
                                     uint16_t color) {
    c510:	b410      	push	{r4}
    c512:	4694      	mov	ip, r2
  switch (rotation) {
    c514:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
    c516:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  switch (rotation) {
    c51a:	2a02      	cmp	r2, #2
    c51c:	d024      	beq.n	c568 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x58>
    c51e:	2a03      	cmp	r2, #3
    c520:	d012      	beq.n	c548 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x38>
    c522:	2a01      	cmp	r2, #1
    c524:	d006      	beq.n	c534 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x24>
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    c526:	2900      	cmp	r1, #0
    c528:	db0c      	blt.n	c544 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x34>
    c52a:	9401      	str	r4, [sp, #4]
    c52c:	4662      	mov	r2, ip
}
    c52e:	bc10      	pop	{r4}
    c530:	f7ff bf0e 	b.w	c350 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>
    x -= (h - 1);
    c534:	8902      	ldrh	r2, [r0, #8]
    c536:	449c      	add	ip, r3
    c538:	eba2 020c 	sub.w	r2, r2, ip
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    c53c:	2900      	cmp	r1, #0
    x -= (h - 1);
    c53e:	fa0f fc82 	sxth.w	ip, r2
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    c542:	da07      	bge.n	c554 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x44>
}
    c544:	bc10      	pop	{r4}
    c546:	4770      	bx	lr
    y = HEIGHT - y - 1;
    c548:	8942      	ldrh	r2, [r0, #10]
    c54a:	1a52      	subs	r2, r2, r1
    c54c:	3a01      	subs	r2, #1
    c54e:	b211      	sxth	r1, r2
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    c550:	2900      	cmp	r1, #0
    c552:	dbf7      	blt.n	c544 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x34>
    c554:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    c558:	428a      	cmp	r2, r1
    c55a:	ddf3      	ble.n	c544 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x34>
    c55c:	9401      	str	r4, [sp, #4]
    c55e:	460a      	mov	r2, r1
}
    c560:	bc10      	pop	{r4}
    c562:	4661      	mov	r1, ip
    c564:	f7ff beb0 	b.w	c2c8 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>
    x = WIDTH - x - 1;
    c568:	8902      	ldrh	r2, [r0, #8]
    c56a:	1a52      	subs	r2, r2, r1
    c56c:	3a01      	subs	r2, #1
    c56e:	b211      	sxth	r1, r2
    y -= (h - 1);
    c570:	8942      	ldrh	r2, [r0, #10]
    c572:	449c      	add	ip, r3
    c574:	eba2 020c 	sub.w	r2, r2, ip
    c578:	fa0f fc82 	sxth.w	ip, r2
  if (bSwap)
    c57c:	e7d3      	b.n	c526 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x16>
    c57e:	bf00      	nop

0000c580 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
    c580:	b570      	push	{r4, r5, r6, lr}
    c582:	4604      	mov	r4, r0
    c584:	f99d 6010 	ldrsb.w	r6, [sp, #16]
    c588:	461d      	mov	r5, r3
      wireClk(clkDuring), restoreClk(clkAfter)
    c58a:	f000 ff0b 	bl	d3a4 <Adafruit_GFX::Adafruit_GFX(short, short)>
    c58e:	9a05      	ldr	r2, [sp, #20]
    c590:	65a2      	str	r2, [r4, #88]	; 0x58
    c592:	9a06      	ldr	r2, [sp, #24]
		ctar = c | t;
    c594:	4b0c      	ldr	r3, [pc, #48]	; (c5c8 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x48>)
    c596:	65e2      	str	r2, [r4, #92]	; 0x5c
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    c598:	4a0c      	ldr	r2, [pc, #48]	; (c5cc <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x4c>)
    c59a:	6663      	str	r3, [r4, #100]	; 0x64
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    c59c:	23ff      	movs	r3, #255	; 0xff
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    c59e:	2d00      	cmp	r5, #0
    c5a0:	bf08      	it	eq
    c5a2:	4615      	moveq	r5, r2
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    c5a4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    c5a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c5ac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    c5b0:	2300      	movs	r3, #0
    c5b2:	6263      	str	r3, [r4, #36]	; 0x24
    c5b4:	62e3      	str	r3, [r4, #44]	; 0x2c
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    c5b6:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
      wireClk(clkDuring), restoreClk(clkAfter)
    c5ba:	4b05      	ldr	r3, [pc, #20]	; (c5d0 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x50>)
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    c5bc:	86a2      	strh	r2, [r4, #52]	; 0x34
}
    c5be:	4620      	mov	r0, r4
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    c5c0:	62a5      	str	r5, [r4, #40]	; 0x28
      wireClk(clkDuring), restoreClk(clkAfter)
    c5c2:	6023      	str	r3, [r4, #0]
}
    c5c4:	bd70      	pop	{r4, r5, r6, pc}
    c5c6:	bf00      	nop
    c5c8:	38011001 	.word	0x38011001
    c5cc:	1fff9004 	.word	0x1fff9004
    c5d0:	00015748 	.word	0x00015748

0000c5d4 <Adafruit_SSD1306::~Adafruit_SSD1306()>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
    c5d4:	b510      	push	{r4, lr}
    c5d6:	4604      	mov	r4, r0
  if (buffer) {
    c5d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    c5da:	b108      	cbz	r0, c5e0 <Adafruit_SSD1306::~Adafruit_SSD1306()+0xc>
    free(buffer);
    c5dc:	f005 fa92 	bl	11b04 <free>
}
    c5e0:	4620      	mov	r0, r4
    c5e2:	bd10      	pop	{r4, pc}

0000c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (wire) { // I2C
    c5e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    c5e8:	4604      	mov	r4, r0
    c5ea:	460d      	mov	r5, r1
  if (wire) { // I2C
    c5ec:	b1cb      	cbz	r3, c622 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x3e>
		txBuffer[0] = (address << 1);
    c5ee:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		transmitting = 1;
    c5f2:	2601      	movs	r6, #1
		txBuffer[0] = (address << 1);
    c5f4:	40b2      	lsls	r2, r6
    c5f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		transmitting = 1;
    c5fa:	f883 60ae 	strb.w	r6, [r3, #174]	; 0xae
		txBufferLength = 1;
    c5fe:	f883 60ad 	strb.w	r6, [r3, #173]	; 0xad
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    c602:	6a80      	ldr	r0, [r0, #40]	; 0x28
    c604:	6803      	ldr	r3, [r0, #0]
    c606:	2100      	movs	r1, #0
    c608:	681b      	ldr	r3, [r3, #0]
    c60a:	4798      	blx	r3
    WIRE_WRITE(c);
    c60c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c60e:	6803      	ldr	r3, [r0, #0]
    c610:	4629      	mov	r1, r5
    c612:	681b      	ldr	r3, [r3, #0]
    c614:	4798      	blx	r3
		return endTransmission(1);
    c616:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c618:	4631      	mov	r1, r6
}
    c61a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c61e:	f7fe be1d 	b.w	b25c <TwoWire::endTransmission(unsigned char)>
    SSD1306_MODE_COMMAND
    c622:	6c02      	ldr	r2, [r0, #64]	; 0x40
    c624:	6d01      	ldr	r1, [r0, #80]	; 0x50
    c626:	6813      	ldr	r3, [r2, #0]
    c628:	ea23 0301 	bic.w	r3, r3, r1
  if (spi) {
    c62c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    SSD1306_MODE_COMMAND
    c62e:	6013      	str	r3, [r2, #0]
  if (spi) {
    c630:	b149      	cbz	r1, c646 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x62>
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c632:	680a      	ldr	r2, [r1, #0]
		port().SR = SPI_SR_TCF;
    c634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c638:	62d3      	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    c63a:	6355      	str	r5, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    c63c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    c63e:	2b00      	cmp	r3, #0
    c640:	dafc      	bge.n	c63c <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x58>
		return port().POPR;
    c642:	6b93      	ldr	r3, [r2, #56]	; 0x38
}
    c644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c646:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      *clkPort |= clkPinMask;  // Clock high
    c648:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    c64a:	2180      	movs	r1, #128	; 0x80
      *clkPort |= clkPinMask;  // Clock high
    c64c:	2008      	movs	r0, #8
        *mosiPort |= mosiPinMask;
    c64e:	6832      	ldr	r2, [r6, #0]
    c650:	6ca7      	ldr	r7, [r4, #72]	; 0x48
      if (d & bit)
    c652:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
    c654:	bf14      	ite	ne
    c656:	433a      	orrne	r2, r7
        *mosiPort &= ~mosiPinMask;
    c658:	43ba      	biceq	r2, r7
    c65a:	6032      	str	r2, [r6, #0]
      *clkPort |= clkPinMask;  // Clock high
    c65c:	681a      	ldr	r2, [r3, #0]
    c65e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    c660:	433a      	orrs	r2, r7
    c662:	601a      	str	r2, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    c664:	681a      	ldr	r2, [r3, #0]
    c666:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    c668:	3801      	subs	r0, #1
      *clkPort &= ~clkPinMask; // Clock low
    c66a:	ea22 0207 	bic.w	r2, r2, r7
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    c66e:	ea4f 0151 	mov.w	r1, r1, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
    c672:	601a      	str	r2, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    c674:	d1eb      	bne.n	c64e <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x6a>
}
    c676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c678 <Adafruit_SSD1306::invertDisplay(bool)>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    c678:	b570      	push	{r4, r5, r6, lr}
    c67a:	4604      	mov	r4, r0
  TRANSACTION_START
    c67c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
    c67e:	460d      	mov	r5, r1
  TRANSACTION_START
    c680:	b180      	cbz	r0, c6a4 <Adafruit_SSD1306::invertDisplay(bool)+0x2c>
    c682:	6da1      	ldr	r1, [r4, #88]	; 0x58
    c684:	f7fe fcc4 	bl	b010 <TwoWire::setClock(unsigned long)>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    c688:	f1a5 015a 	sub.w	r1, r5, #90	; 0x5a
    c68c:	4620      	mov	r0, r4
    c68e:	b2c9      	uxtb	r1, r1
    c690:	f7ff ffa8 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  TRANSACTION_END
    c694:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c696:	2800      	cmp	r0, #0
    c698:	d041      	beq.n	c71e <Adafruit_SSD1306::invertDisplay(bool)+0xa6>
    c69a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
    c69c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TRANSACTION_END
    c6a0:	f7fe bcb6 	b.w	b010 <TwoWire::setClock(unsigned long)>
  TRANSACTION_START
    c6a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c6a6:	2b00      	cmp	r3, #0
    c6a8:	d032      	beq.n	c710 <Adafruit_SSD1306::invertDisplay(bool)+0x98>
		if (interruptMasksUsed) {
    c6aa:	7ad9      	ldrb	r1, [r3, #11]
    c6ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c6ae:	b319      	cbz	r1, c6f8 <Adafruit_SSD1306::invertDisplay(bool)+0x80>
			__disable_irq();
    c6b0:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    c6b2:	7ad9      	ldrb	r1, [r3, #11]
    c6b4:	07ce      	lsls	r6, r1, #31
    c6b6:	d508      	bpl.n	c6ca <Adafruit_SSD1306::invertDisplay(bool)+0x52>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    c6b8:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    c6bc:	68de      	ldr	r6, [r3, #12]
    c6be:	f8dc 0180 	ldr.w	r0, [ip, #384]	; 0x180
    c6c2:	4030      	ands	r0, r6
    c6c4:	6198      	str	r0, [r3, #24]
				NVIC_ICER0 = interruptSave[0];
    c6c6:	f8cc 0180 	str.w	r0, [ip, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    c6ca:	0788      	lsls	r0, r1, #30
    c6cc:	d508      	bpl.n	c6e0 <Adafruit_SSD1306::invertDisplay(bool)+0x68>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    c6ce:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    c6d2:	691e      	ldr	r6, [r3, #16]
    c6d4:	f8dc 0184 	ldr.w	r0, [ip, #388]	; 0x184
    c6d8:	4030      	ands	r0, r6
    c6da:	61d8      	str	r0, [r3, #28]
				NVIC_ICER1 = interruptSave[1];
    c6dc:	f8cc 0184 	str.w	r0, [ip, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    c6e0:	074e      	lsls	r6, r1, #29
    c6e2:	d508      	bpl.n	c6f6 <Adafruit_SSD1306::invertDisplay(bool)+0x7e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    c6e4:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    c6e8:	695e      	ldr	r6, [r3, #20]
    c6ea:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    c6ee:	4031      	ands	r1, r6
    c6f0:	6219      	str	r1, [r3, #32]
				NVIC_ICER2 = interruptSave[2];
    c6f2:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			__enable_irq();
    c6f6:	b662      	cpsie	i
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c6f8:	681b      	ldr	r3, [r3, #0]
		if (port().CTAR0 != settings.ctar) {
    c6fa:	68d9      	ldr	r1, [r3, #12]
    c6fc:	428a      	cmp	r2, r1
    c6fe:	d007      	beq.n	c710 <Adafruit_SSD1306::invertDisplay(bool)+0x98>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    c700:	4916      	ldr	r1, [pc, #88]	; (c75c <Adafruit_SSD1306::invertDisplay(bool)+0xe4>)
    c702:	6019      	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
    c704:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    c706:	f042 4180 	orr.w	r1, r2, #1073741824	; 0x40000000
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    c70a:	4a15      	ldr	r2, [pc, #84]	; (c760 <Adafruit_SSD1306::invertDisplay(bool)+0xe8>)
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    c70c:	6119      	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    c70e:	601a      	str	r2, [r3, #0]
    c710:	6c62      	ldr	r2, [r4, #68]	; 0x44
    c712:	6d61      	ldr	r1, [r4, #84]	; 0x54
    c714:	6813      	ldr	r3, [r2, #0]
    c716:	ea23 0301 	bic.w	r3, r3, r1
    c71a:	6013      	str	r3, [r2, #0]
    c71c:	e7b4      	b.n	c688 <Adafruit_SSD1306::invertDisplay(bool)+0x10>
  TRANSACTION_END
    c71e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    c720:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c722:	6813      	ldr	r3, [r2, #0]
    c724:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c726:	4303      	orrs	r3, r0
    c728:	6013      	str	r3, [r2, #0]
    c72a:	b1b1      	cbz	r1, c75a <Adafruit_SSD1306::invertDisplay(bool)+0xe2>
		if (interruptMasksUsed) {
    c72c:	7acb      	ldrb	r3, [r1, #11]
    c72e:	b1a3      	cbz	r3, c75a <Adafruit_SSD1306::invertDisplay(bool)+0xe2>
			if (interruptMasksUsed & 0x01) {
    c730:	07d8      	lsls	r0, r3, #31
    c732:	d504      	bpl.n	c73e <Adafruit_SSD1306::invertDisplay(bool)+0xc6>
				NVIC_ISER0 = interruptSave[0];
    c734:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c738:	6988      	ldr	r0, [r1, #24]
    c73a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) {
    c73e:	079a      	lsls	r2, r3, #30
    c740:	d504      	bpl.n	c74c <Adafruit_SSD1306::invertDisplay(bool)+0xd4>
				NVIC_ISER1 = interruptSave[1];
    c742:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c746:	69c8      	ldr	r0, [r1, #28]
    c748:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) {
    c74c:	075b      	lsls	r3, r3, #29
    c74e:	d504      	bpl.n	c75a <Adafruit_SSD1306::invertDisplay(bool)+0xe2>
				NVIC_ISER2 = interruptSave[2];
    c750:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c754:	6a0a      	ldr	r2, [r1, #32]
    c756:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
    c75a:	bd70      	pop	{r4, r5, r6, pc}
    c75c:	003f4001 	.word	0x003f4001
    c760:	803f0000 	.word	0x803f0000

0000c764 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
    c764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (wire) { // I2C
    c768:	6a83      	ldr	r3, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
    c76a:	4604      	mov	r4, r0
    c76c:	460d      	mov	r5, r1
    c76e:	4690      	mov	r8, r2
  if (wire) { // I2C
    c770:	2b00      	cmp	r3, #0
    c772:	d03b      	beq.n	c7ec <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x88>
		txBuffer[0] = (address << 1);
    c774:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		transmitting = 1;
    c778:	2601      	movs	r6, #1
		txBuffer[0] = (address << 1);
    c77a:	0052      	lsls	r2, r2, #1
    c77c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		transmitting = 1;
    c780:	f883 60ae 	strb.w	r6, [r3, #174]	; 0xae
		txBufferLength = 1;
    c784:	f883 60ad 	strb.w	r6, [r3, #173]	; 0xad
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    c788:	6a80      	ldr	r0, [r0, #40]	; 0x28
    c78a:	6803      	ldr	r3, [r0, #0]
    c78c:	2100      	movs	r1, #0
    c78e:	681b      	ldr	r3, [r3, #0]
    c790:	4798      	blx	r3
    while (n--) {
    c792:	f1b8 0f00 	cmp.w	r8, #0
    c796:	d023      	beq.n	c7e0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7c>
    c798:	eb05 0708 	add.w	r7, r5, r8
		return endTransmission(1);
    c79c:	46b0      	mov	r8, r6
      WIRE_WRITE(pgm_read_byte(c++));
    c79e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c7a0:	f815 1b01 	ldrb.w	r1, [r5], #1
    c7a4:	6803      	ldr	r3, [r0, #0]
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	4798      	blx	r3
      bytesOut++;
    c7aa:	3601      	adds	r6, #1
    while (n--) {
    c7ac:	42af      	cmp	r7, r5
      bytesOut++;
    c7ae:	b2b6      	uxth	r6, r6
    while (n--) {
    c7b0:	d016      	beq.n	c7e0 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7c>
      if (bytesOut >= WIRE_MAX) {
    c7b2:	2e48      	cmp	r6, #72	; 0x48
    c7b4:	d1f3      	bne.n	c79e <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x3a>
    c7b6:	2101      	movs	r1, #1
    c7b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c7ba:	f7fe fd4f 	bl	b25c <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    c7be:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        wire->beginTransmission(i2caddr);
    c7c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c7c4:	0052      	lsls	r2, r2, #1
    c7c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		transmitting = 1;
    c7ca:	f883 80ae 	strb.w	r8, [r3, #174]	; 0xae
		txBufferLength = 1;
    c7ce:	f883 80ad 	strb.w	r8, [r3, #173]	; 0xad
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    c7d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c7d4:	6803      	ldr	r3, [r0, #0]
    c7d6:	2100      	movs	r1, #0
    c7d8:	681b      	ldr	r3, [r3, #0]
    c7da:	4798      	blx	r3
        bytesOut = 1;
    c7dc:	2601      	movs	r6, #1
    c7de:	e7de      	b.n	c79e <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x3a>
		return endTransmission(1);
    c7e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c7e2:	2101      	movs	r1, #1
}
    c7e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c7e8:	f7fe bd38 	b.w	b25c <TwoWire::endTransmission(unsigned char)>
    SSD1306_MODE_COMMAND
    c7ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
    c7ee:	6d01      	ldr	r1, [r0, #80]	; 0x50
    c7f0:	6813      	ldr	r3, [r2, #0]
    c7f2:	ea23 0301 	bic.w	r3, r3, r1
    c7f6:	6013      	str	r3, [r2, #0]
    while (n--)
    c7f8:	f1b8 0f00 	cmp.w	r8, #0
    c7fc:	d011      	beq.n	c822 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xbe>
  if (spi) {
    c7fe:	6a47      	ldr	r7, [r0, #36]	; 0x24
    c800:	eb05 0208 	add.w	r2, r5, r8
		port().SR = SPI_SR_TCF;
    c804:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
      SPIwrite(pgm_read_byte(c++));
    c808:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (spi) {
    c80c:	b15f      	cbz	r7, c826 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xc2>
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c80e:	6839      	ldr	r1, [r7, #0]
		port().SR = SPI_SR_TCF;
    c810:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
		port().PUSHR = data;
    c814:	634e      	str	r6, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    c816:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    c818:	2b00      	cmp	r3, #0
    c81a:	dafc      	bge.n	c816 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xb2>
		return port().POPR;
    c81c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    while (n--)
    c81e:	4295      	cmp	r5, r2
    c820:	d1f2      	bne.n	c808 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xa4>
}
    c822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *clkPort |= clkPinMask;  // Clock high
    c826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c828:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    c82a:	f04f 0c08 	mov.w	ip, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    c82e:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
    c830:	f8d1 8000 	ldr.w	r8, [r1]
    c834:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
      if (d & bit)
    c838:	4206      	tst	r6, r0
        *mosiPort |= mosiPinMask;
    c83a:	bf14      	ite	ne
    c83c:	ea48 0809 	orrne.w	r8, r8, r9
        *mosiPort &= ~mosiPinMask;
    c840:	ea28 0809 	biceq.w	r8, r8, r9
    c844:	f8c1 8000 	str.w	r8, [r1]
      *clkPort |= clkPinMask;  // Clock high
    c848:	f8d3 8000 	ldr.w	r8, [r3]
    c84c:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    c850:	ea48 0809 	orr.w	r8, r8, r9
    c854:	f8c3 8000 	str.w	r8, [r3]
      *clkPort &= ~clkPinMask; // Clock low
    c858:	f8d3 8000 	ldr.w	r8, [r3]
    c85c:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    c860:	f1bc 0c01 	subs.w	ip, ip, #1
      *clkPort &= ~clkPinMask; // Clock low
    c864:	ea28 0809 	bic.w	r8, r8, r9
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    c868:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
    c86c:	f8c3 8000 	str.w	r8, [r3]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    c870:	d1de      	bne.n	c830 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xcc>
    c872:	e7d4      	b.n	c81e <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xba>

0000c874 <Adafruit_SSD1306::ssd1306_command(unsigned char)>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
    c874:	b570      	push	{r4, r5, r6, lr}
    c876:	4604      	mov	r4, r0
  TRANSACTION_START
    c878:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
    c87a:	460d      	mov	r5, r1
  TRANSACTION_START
    c87c:	b170      	cbz	r0, c89c <Adafruit_SSD1306::ssd1306_command(unsigned char)+0x28>
    c87e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    c880:	f7fe fbc6 	bl	b010 <TwoWire::setClock(unsigned long)>
  ssd1306_command1(c);
    c884:	4620      	mov	r0, r4
    c886:	4629      	mov	r1, r5
    c888:	f7ff feac 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  TRANSACTION_END
    c88c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c88e:	2800      	cmp	r0, #0
    c890:	d047      	beq.n	c922 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0xae>
    c892:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
    c894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TRANSACTION_END
    c898:	f7fe bbba 	b.w	b010 <TwoWire::setClock(unsigned long)>
  TRANSACTION_START
    c89c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d032      	beq.n	c908 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0x94>
		if (interruptMasksUsed) {
    c8a2:	7ad9      	ldrb	r1, [r3, #11]
    c8a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c8a6:	b319      	cbz	r1, c8f0 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0x7c>
			__disable_irq();
    c8a8:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    c8aa:	7ad9      	ldrb	r1, [r3, #11]
    c8ac:	07ce      	lsls	r6, r1, #31
    c8ae:	d508      	bpl.n	c8c2 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0x4e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    c8b0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    c8b4:	68de      	ldr	r6, [r3, #12]
    c8b6:	f8dc 0180 	ldr.w	r0, [ip, #384]	; 0x180
    c8ba:	4030      	ands	r0, r6
    c8bc:	6198      	str	r0, [r3, #24]
				NVIC_ICER0 = interruptSave[0];
    c8be:	f8cc 0180 	str.w	r0, [ip, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    c8c2:	0788      	lsls	r0, r1, #30
    c8c4:	d508      	bpl.n	c8d8 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0x64>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    c8c6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    c8ca:	691e      	ldr	r6, [r3, #16]
    c8cc:	f8dc 0184 	ldr.w	r0, [ip, #388]	; 0x184
    c8d0:	4030      	ands	r0, r6
    c8d2:	61d8      	str	r0, [r3, #28]
				NVIC_ICER1 = interruptSave[1];
    c8d4:	f8cc 0184 	str.w	r0, [ip, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    c8d8:	074e      	lsls	r6, r1, #29
    c8da:	d508      	bpl.n	c8ee <Adafruit_SSD1306::ssd1306_command(unsigned char)+0x7a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    c8dc:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    c8e0:	695e      	ldr	r6, [r3, #20]
    c8e2:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    c8e6:	4031      	ands	r1, r6
    c8e8:	6219      	str	r1, [r3, #32]
				NVIC_ICER2 = interruptSave[2];
    c8ea:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			__enable_irq();
    c8ee:	b662      	cpsie	i
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c8f0:	681b      	ldr	r3, [r3, #0]
		if (port().CTAR0 != settings.ctar) {
    c8f2:	68d9      	ldr	r1, [r3, #12]
    c8f4:	4291      	cmp	r1, r2
    c8f6:	d007      	beq.n	c908 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0x94>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    c8f8:	4919      	ldr	r1, [pc, #100]	; (c960 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0xec>)
    c8fa:	6019      	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
    c8fc:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    c8fe:	f042 4180 	orr.w	r1, r2, #1073741824	; 0x40000000
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    c902:	4a18      	ldr	r2, [pc, #96]	; (c964 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0xf0>)
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    c904:	6119      	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    c906:	601a      	str	r2, [r3, #0]
    c908:	6c62      	ldr	r2, [r4, #68]	; 0x44
    c90a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    c90c:	6813      	ldr	r3, [r2, #0]
    c90e:	ea23 0301 	bic.w	r3, r3, r1
  ssd1306_command1(c);
    c912:	4620      	mov	r0, r4
  TRANSACTION_START
    c914:	6013      	str	r3, [r2, #0]
  ssd1306_command1(c);
    c916:	4629      	mov	r1, r5
    c918:	f7ff fe64 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  TRANSACTION_END
    c91c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c91e:	2800      	cmp	r0, #0
    c920:	d1b7      	bne.n	c892 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0x1e>
    c922:	6c62      	ldr	r2, [r4, #68]	; 0x44
    c924:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c926:	6813      	ldr	r3, [r2, #0]
    c928:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c92a:	4303      	orrs	r3, r0
    c92c:	6013      	str	r3, [r2, #0]
    c92e:	b1b1      	cbz	r1, c95e <Adafruit_SSD1306::ssd1306_command(unsigned char)+0xea>
		if (interruptMasksUsed) {
    c930:	7acb      	ldrb	r3, [r1, #11]
    c932:	b1a3      	cbz	r3, c95e <Adafruit_SSD1306::ssd1306_command(unsigned char)+0xea>
			if (interruptMasksUsed & 0x01) {
    c934:	07d8      	lsls	r0, r3, #31
    c936:	d504      	bpl.n	c942 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0xce>
				NVIC_ISER0 = interruptSave[0];
    c938:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c93c:	6988      	ldr	r0, [r1, #24]
    c93e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) {
    c942:	079a      	lsls	r2, r3, #30
    c944:	d504      	bpl.n	c950 <Adafruit_SSD1306::ssd1306_command(unsigned char)+0xdc>
				NVIC_ISER1 = interruptSave[1];
    c946:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c94a:	69c8      	ldr	r0, [r1, #28]
    c94c:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) {
    c950:	075b      	lsls	r3, r3, #29
    c952:	d504      	bpl.n	c95e <Adafruit_SSD1306::ssd1306_command(unsigned char)+0xea>
				NVIC_ISER2 = interruptSave[2];
    c954:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c958:	6a0a      	ldr	r2, [r1, #32]
    c95a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
    c95e:	bd70      	pop	{r4, r5, r6, pc}
    c960:	003f4001 	.word	0x003f4001
    c964:	803f0000 	.word	0x803f0000

0000c968 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>:
                             bool periphBegin) {
    c968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c96c:	4604      	mov	r4, r0
    c96e:	b085      	sub	sp, #20
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    c970:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
                             bool periphBegin) {
    c972:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    c976:	461e      	mov	r6, r3
    c978:	460f      	mov	r7, r1
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    c97a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
                             bool periphBegin) {
    c97e:	4615      	mov	r5, r2
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    c980:	2800      	cmp	r0, #0
    c982:	f000 8174 	beq.w	cc6e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x306>
    c986:	f113 0907 	adds.w	r9, r3, #7
    c98a:	bf48      	it	mi
    c98c:	f103 090e 	addmi.w	r9, r3, #14
    c990:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    c994:	ea4f 09e9 	mov.w	r9, r9, asr #3
    c998:	fb03 f909 	mul.w	r9, r3, r9
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    c99c:	464a      	mov	r2, r9
    c99e:	2100      	movs	r1, #0
    c9a0:	f005 fdee 	bl	12580 <memset>
  if (HEIGHT > 32) {
    c9a4:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
    c9a8:	2820      	cmp	r0, #32
    c9aa:	f300 80e8 	bgt.w	cb7e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x216>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
    c9ae:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
    c9b2:	3820      	subs	r0, #32
    c9b4:	3973      	subs	r1, #115	; 0x73
    c9b6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    c9ba:	2373      	movs	r3, #115	; 0x73
    c9bc:	f04f 0e01 	mov.w	lr, #1
    c9c0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    c9c4:	f04f 0920 	mov.w	r9, #32
    c9c8:	e88d 4208 	stmia.w	sp, {r3, r9, lr}
    c9cc:	f340 024f 	sbfx	r2, r0, #1, #16
    c9d0:	4bb5      	ldr	r3, [pc, #724]	; (cca8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x340>)
    c9d2:	4620      	mov	r0, r4
    c9d4:	f341 014f 	sbfx	r1, r1, #1, #16
    c9d8:	f000 fd2a 	bl	d430 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  if (wire) { // Using I2C
    c9dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
    c9de:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
    c9e2:	2800      	cmp	r0, #0
    c9e4:	f000 80e9 	beq.w	cbba <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x252>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    c9e8:	2d00      	cmp	r5, #0
    c9ea:	f040 8134 	bne.w	cc56 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2ee>
    c9ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    c9f2:	2b20      	cmp	r3, #32
    c9f4:	bf0c      	ite	eq
    c9f6:	253c      	moveq	r5, #60	; 0x3c
    c9f8:	253d      	movne	r5, #61	; 0x3d
    c9fa:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
    c9fe:	f1b8 0f00 	cmp.w	r8, #0
    ca02:	f040 812f 	bne.w	cc64 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2fc>
  if (reset && (rstPin >= 0)) {
    ca06:	2e00      	cmp	r6, #0
    ca08:	f000 80ff 	beq.w	cc0a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2a2>
    ca0c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
    ca10:	2800      	cmp	r0, #0
    ca12:	db18      	blt.n	ca46 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xde>
    pinMode(rstPin, OUTPUT);
    ca14:	2101      	movs	r1, #1
    ca16:	b2c0      	uxtb	r0, r0
    ca18:	f002 f99c 	bl	ed54 <pinMode>
    digitalWrite(rstPin, HIGH);
    ca1c:	2101      	movs	r1, #1
    ca1e:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    ca22:	f002 f963 	bl	ecec <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
    ca26:	2001      	movs	r0, #1
    ca28:	f002 f9f0 	bl	ee0c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
    ca2c:	2100      	movs	r1, #0
    ca2e:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    ca32:	f002 f95b 	bl	ecec <digitalWrite>
    delay(10);                  // Wait 10 ms
    ca36:	200a      	movs	r0, #10
    ca38:	f002 f9e8 	bl	ee0c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
    ca3c:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    ca40:	2101      	movs	r1, #1
    ca42:	f002 f953 	bl	ecec <digitalWrite>
  TRANSACTION_START
    ca46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ca48:	2800      	cmp	r0, #0
    ca4a:	f040 80de 	bne.w	cc0a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2a2>
    ca4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ca50:	2b00      	cmp	r3, #0
    ca52:	d032      	beq.n	caba <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x152>
		if (interruptMasksUsed) {
    ca54:	7ad9      	ldrb	r1, [r3, #11]
    ca56:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ca58:	b319      	cbz	r1, caa2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x13a>
			__disable_irq();
    ca5a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    ca5c:	7ad9      	ldrb	r1, [r3, #11]
    ca5e:	07cf      	lsls	r7, r1, #31
    ca60:	d508      	bpl.n	ca74 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x10c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    ca62:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    ca66:	68de      	ldr	r6, [r3, #12]
    ca68:	f8d5 0180 	ldr.w	r0, [r5, #384]	; 0x180
    ca6c:	4030      	ands	r0, r6
    ca6e:	6198      	str	r0, [r3, #24]
				NVIC_ICER0 = interruptSave[0];
    ca70:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    ca74:	078e      	lsls	r6, r1, #30
    ca76:	d508      	bpl.n	ca8a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x122>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    ca78:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    ca7c:	691e      	ldr	r6, [r3, #16]
    ca7e:	f8d5 0184 	ldr.w	r0, [r5, #388]	; 0x184
    ca82:	4030      	ands	r0, r6
    ca84:	61d8      	str	r0, [r3, #28]
				NVIC_ICER1 = interruptSave[1];
    ca86:	f8c5 0184 	str.w	r0, [r5, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    ca8a:	074d      	lsls	r5, r1, #29
    ca8c:	d508      	bpl.n	caa0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x138>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    ca8e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ca92:	695d      	ldr	r5, [r3, #20]
    ca94:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    ca98:	4029      	ands	r1, r5
    ca9a:	6219      	str	r1, [r3, #32]
				NVIC_ICER2 = interruptSave[2];
    ca9c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			__enable_irq();
    caa0:	b662      	cpsie	i
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    caa2:	681b      	ldr	r3, [r3, #0]
		if (port().CTAR0 != settings.ctar) {
    caa4:	68d9      	ldr	r1, [r3, #12]
    caa6:	428a      	cmp	r2, r1
    caa8:	d007      	beq.n	caba <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x152>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    caaa:	4d80      	ldr	r5, [pc, #512]	; (ccac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x344>)
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    caac:	4980      	ldr	r1, [pc, #512]	; (ccb0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x348>)
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    caae:	601d      	str	r5, [r3, #0]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    cab0:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
			port().CTAR0 = settings.ctar;
    cab4:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    cab6:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    cab8:	6019      	str	r1, [r3, #0]
    caba:	6c62      	ldr	r2, [r4, #68]	; 0x44
    cabc:	6d61      	ldr	r1, [r4, #84]	; 0x54
    cabe:	6813      	ldr	r3, [r2, #0]
    cac0:	ea23 0301 	bic.w	r3, r3, r1
    cac4:	6013      	str	r3, [r2, #0]
  ssd1306_commandList(init1, sizeof(init1));
    cac6:	2204      	movs	r2, #4
    cac8:	497a      	ldr	r1, [pc, #488]	; (ccb4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x34c>)
    caca:	4620      	mov	r0, r4
    cacc:	f7ff fe4a 	bl	c764 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1(HEIGHT - 1);
    cad0:	8961      	ldrh	r1, [r4, #10]
    cad2:	3901      	subs	r1, #1
    cad4:	4620      	mov	r0, r4
    cad6:	b2c9      	uxtb	r1, r1
    cad8:	f7ff fd84 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init2, sizeof(init2));
    cadc:	4976      	ldr	r1, [pc, #472]	; (ccb8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x350>)
    cade:	2204      	movs	r2, #4
    cae0:	4620      	mov	r0, r4
    cae2:	f7ff fe3f 	bl	c764 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
    cae6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    caea:	2b01      	cmp	r3, #1
    caec:	bf0c      	ite	eq
    caee:	2110      	moveq	r1, #16
    caf0:	2114      	movne	r1, #20
    caf2:	4620      	mov	r0, r4
    caf4:	f7ff fd76 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init3, sizeof(init3));
    caf8:	4970      	ldr	r1, [pc, #448]	; (ccbc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x354>)
    cafa:	2204      	movs	r2, #4
    cafc:	4620      	mov	r0, r4
    cafe:	f7ff fe31 	bl	c764 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    cb02:	68a3      	ldr	r3, [r4, #8]
    cb04:	4a6e      	ldr	r2, [pc, #440]	; (ccc0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x358>)
  contrast = 0x8F;
    cb06:	218f      	movs	r1, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    cb08:	4293      	cmp	r3, r2
  contrast = 0x8F;
    cb0a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    cb0e:	d008      	beq.n	cb22 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1ba>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    cb10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
    cb14:	4293      	cmp	r3, r2
    cb16:	f000 80bd 	beq.w	cc94 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x32c>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    cb1a:	4a6a      	ldr	r2, [pc, #424]	; (ccc4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x35c>)
    cb1c:	4293      	cmp	r3, r2
    cb1e:	f000 80d9 	beq.w	ccd4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x36c>
    comPins = 0x02;
    cb22:	2502      	movs	r5, #2
  ssd1306_command1(SSD1306_SETCOMPINS);
    cb24:	21da      	movs	r1, #218	; 0xda
    cb26:	4620      	mov	r0, r4
    cb28:	f7ff fd5c 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(comPins);
    cb2c:	4629      	mov	r1, r5
    cb2e:	4620      	mov	r0, r4
    cb30:	f7ff fd58 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(SSD1306_SETCONTRAST);
    cb34:	2181      	movs	r1, #129	; 0x81
    cb36:	4620      	mov	r0, r4
    cb38:	f7ff fd54 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(contrast);
    cb3c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    cb40:	4620      	mov	r0, r4
    cb42:	f7ff fd4f 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
    cb46:	21d9      	movs	r1, #217	; 0xd9
    cb48:	4620      	mov	r0, r4
    cb4a:	f7ff fd4b 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
    cb4e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    cb52:	2b01      	cmp	r3, #1
    cb54:	bf0c      	ite	eq
    cb56:	2122      	moveq	r1, #34	; 0x22
    cb58:	21f1      	movne	r1, #241	; 0xf1
    cb5a:	4620      	mov	r0, r4
    cb5c:	f7ff fd42 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init5, sizeof(init5));
    cb60:	4620      	mov	r0, r4
    cb62:	4959      	ldr	r1, [pc, #356]	; (ccc8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x360>)
    cb64:	2206      	movs	r2, #6
    cb66:	f7ff fdfd 	bl	c764 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  TRANSACTION_END
    cb6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cb6c:	2800      	cmp	r0, #0
    cb6e:	d050      	beq.n	cc12 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2aa>
    cb70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    cb72:	f7fe fa4d 	bl	b010 <TwoWire::setClock(unsigned long)>
  return true; // Success
    cb76:	2001      	movs	r0, #1
}
    cb78:	b005      	add	sp, #20
    cb7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
    cb7e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
    cb82:	3840      	subs	r0, #64	; 0x40
    cb84:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    cb88:	3952      	subs	r1, #82	; 0x52
    cb8a:	fa03 f080 	sxtah	r0, r3, r0
    cb8e:	f04f 0c40 	mov.w	ip, #64	; 0x40
    cb92:	2352      	movs	r3, #82	; 0x52
    cb94:	f04f 0e01 	mov.w	lr, #1
    cb98:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    cb9c:	e88d 5008 	stmia.w	sp, {r3, ip, lr}
    cba0:	1042      	asrs	r2, r0, #1
    cba2:	4b4a      	ldr	r3, [pc, #296]	; (cccc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x364>)
    cba4:	4620      	mov	r0, r4
    cba6:	f341 014f 	sbfx	r1, r1, #1, #16
    cbaa:	f000 fc41 	bl	d430 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  if (wire) { // Using I2C
    cbae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
    cbb0:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
    cbb4:	2800      	cmp	r0, #0
    cbb6:	f47f af17 	bne.w	c9e8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x80>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    cbba:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    cbbe:	4f44      	ldr	r7, [pc, #272]	; (ccd0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x368>)
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    cbc0:	2101      	movs	r1, #1
    cbc2:	f002 f8c7 	bl	ed54 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
    cbc6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
    cbca:	2101      	movs	r1, #1
    cbcc:	f002 f8c2 	bl	ed54 <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    cbd0:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
    if (spi) { // Hardware SPI
    cbd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    cbd6:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    cbda:	6423      	str	r3, [r4, #64]	; 0x40
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    cbdc:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    dcPinMask = digitalPinToBitMask(dcPin);
    cbe0:	2501      	movs	r5, #1
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    cbe2:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    dcPinMask = digitalPinToBitMask(dcPin);
    cbe6:	6525      	str	r5, [r4, #80]	; 0x50
    csPinMask = digitalPinToBitMask(csPin);
    cbe8:	6565      	str	r5, [r4, #84]	; 0x54
    SSD1306_DESELECT
    cbea:	681a      	ldr	r2, [r3, #0]
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    cbec:	6463      	str	r3, [r4, #68]	; 0x44
    SSD1306_DESELECT
    cbee:	432a      	orrs	r2, r5
    cbf0:	601a      	str	r2, [r3, #0]
    if (spi) { // Hardware SPI
    cbf2:	2800      	cmp	r0, #0
    cbf4:	d07d      	beq.n	ccf2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x38a>
      if (periphBegin)
    cbf6:	f1b8 0f00 	cmp.w	r8, #0
    cbfa:	d175      	bne.n	cce8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x380>
  if (reset && (rstPin >= 0)) {
    cbfc:	2e00      	cmp	r6, #0
    cbfe:	f47f af05 	bne.w	ca0c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
  TRANSACTION_START
    cc02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cc04:	2800      	cmp	r0, #0
    cc06:	f43f af22 	beq.w	ca4e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xe6>
    cc0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    cc0c:	f7fe fa00 	bl	b010 <TwoWire::setClock(unsigned long)>
    cc10:	e759      	b.n	cac6 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x15e>
  TRANSACTION_END
    cc12:	6c62      	ldr	r2, [r4, #68]	; 0x44
    cc14:	6d60      	ldr	r0, [r4, #84]	; 0x54
    cc16:	6813      	ldr	r3, [r2, #0]
    cc18:	6a61      	ldr	r1, [r4, #36]	; 0x24
    cc1a:	4303      	orrs	r3, r0
    cc1c:	6013      	str	r3, [r2, #0]
    cc1e:	b1b1      	cbz	r1, cc4e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2e6>
		if (interruptMasksUsed) {
    cc20:	7acb      	ldrb	r3, [r1, #11]
    cc22:	b1a3      	cbz	r3, cc4e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2e6>
			if (interruptMasksUsed & 0x01) {
    cc24:	07d8      	lsls	r0, r3, #31
    cc26:	d504      	bpl.n	cc32 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2ca>
				NVIC_ISER0 = interruptSave[0];
    cc28:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cc2c:	6988      	ldr	r0, [r1, #24]
    cc2e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) {
    cc32:	079a      	lsls	r2, r3, #30
    cc34:	d504      	bpl.n	cc40 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2d8>
				NVIC_ISER1 = interruptSave[1];
    cc36:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cc3a:	69c8      	ldr	r0, [r1, #28]
    cc3c:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) {
    cc40:	075b      	lsls	r3, r3, #29
    cc42:	d504      	bpl.n	cc4e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2e6>
				NVIC_ISER2 = interruptSave[2];
    cc44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cc48:	6a0a      	ldr	r2, [r1, #32]
    cc4a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  return true; // Success
    cc4e:	2001      	movs	r0, #1
}
    cc50:	b005      	add	sp, #20
    cc52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    cc56:	b26d      	sxtb	r5, r5
    cc58:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
    cc5c:	f1b8 0f00 	cmp.w	r8, #0
    cc60:	f43f aed1 	beq.w	ca06 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x9e>
      wire->begin();
    cc64:	f7fe f98c 	bl	af80 <TwoWire::begin()>
  if (reset && (rstPin >= 0)) {
    cc68:	2e00      	cmp	r6, #0
    cc6a:	d0ca      	beq.n	cc02 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x29a>
    cc6c:	e6ce      	b.n	ca0c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    cc6e:	f113 0907 	adds.w	r9, r3, #7
    cc72:	bf48      	it	mi
    cc74:	f103 090e 	addmi.w	r9, r3, #14
    cc78:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    cc7c:	ea4f 09e9 	mov.w	r9, r9, asr #3
    cc80:	fb03 f909 	mul.w	r9, r3, r9
    cc84:	4648      	mov	r0, r9
    cc86:	f004 ff35 	bl	11af4 <malloc>
    cc8a:	62e0      	str	r0, [r4, #44]	; 0x2c
    cc8c:	2800      	cmp	r0, #0
    cc8e:	f47f ae85 	bne.w	c99c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x34>
    cc92:	e771      	b.n	cb78 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x210>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    cc94:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    cc98:	2b01      	cmp	r3, #1
    cc9a:	bf0c      	ite	eq
    cc9c:	239f      	moveq	r3, #159	; 0x9f
    cc9e:	23cf      	movne	r3, #207	; 0xcf
    comPins = 0x12;
    cca0:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    cca2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    cca6:	e73d      	b.n	cb24 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1bc>
    cca8:	00015560 	.word	0x00015560
    ccac:	003f4001 	.word	0x003f4001
    ccb0:	803f0000 	.word	0x803f0000
    ccb4:	000157a8 	.word	0x000157a8
    ccb8:	000157ac 	.word	0x000157ac
    ccbc:	000157b0 	.word	0x000157b0
    ccc0:	00200080 	.word	0x00200080
    ccc4:	00100060 	.word	0x00100060
    ccc8:	000157b4 	.word	0x000157b4
    cccc:	000152a0 	.word	0x000152a0
    ccd0:	00015e50 	.word	0x00015e50
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    ccd4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    ccd8:	2b01      	cmp	r3, #1
    ccda:	bf0c      	ite	eq
    ccdc:	2310      	moveq	r3, #16
    ccde:	23af      	movne	r3, #175	; 0xaf
    comPins = 0x2; // ada x12
    cce0:	2502      	movs	r5, #2
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    cce2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    cce6:	e71d      	b.n	cb24 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1bc>
        spi->begin();
    cce8:	f7ff fa30 	bl	c14c <SPIClass::begin()>
  if (reset && (rstPin >= 0)) {
    ccec:	2e00      	cmp	r6, #0
    ccee:	d088      	beq.n	cc02 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x29a>
    ccf0:	e68c      	b.n	ca0c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
    ccf2:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ccf6:	4629      	mov	r1, r5
    ccf8:	f002 f82c 	bl	ed54 <pinMode>
      pinMode(clkPin, OUTPUT);
    ccfc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    cd00:	4629      	mov	r1, r5
    cd02:	f002 f827 	bl	ed54 <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    cd06:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
    cd0a:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    cd0e:	63a3      	str	r3, [r4, #56]	; 0x38
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    cd10:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      mosiPinMask = digitalPinToBitMask(mosiPin);
    cd14:	64a5      	str	r5, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    cd16:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
      clkPinMask = digitalPinToBitMask(clkPin);
    cd1a:	64e5      	str	r5, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
    cd1c:	681a      	ldr	r2, [r3, #0]
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    cd1e:	63e3      	str	r3, [r4, #60]	; 0x3c
      *clkPort &= ~clkPinMask; // Clock low
    cd20:	f022 0201 	bic.w	r2, r2, #1
    cd24:	601a      	str	r2, [r3, #0]
  if (reset && (rstPin >= 0)) {
    cd26:	2e00      	cmp	r6, #0
    cd28:	f43f af6b 	beq.w	cc02 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x29a>
    cd2c:	e66e      	b.n	ca0c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
    cd2e:	bf00      	nop

0000cd30 <Adafruit_SSD1306::clearDisplay()>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    cd30:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    cd34:	1dd3      	adds	r3, r2, #7
    cd36:	bf48      	it	mi
    cd38:	f102 030e 	addmi.w	r3, r2, #14
    cd3c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
    cd40:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    cd42:	10db      	asrs	r3, r3, #3
    cd44:	fb03 f202 	mul.w	r2, r3, r2
    cd48:	2100      	movs	r1, #0
    cd4a:	f005 bc19 	b.w	12580 <memset>
    cd4e:	bf00      	nop

0000cd50 <Adafruit_SSD1306::display()>:
void Adafruit_SSD1306::display(void) {
    cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd54:	4604      	mov	r4, r0
  TRANSACTION_START
    cd56:	6a80      	ldr	r0, [r0, #40]	; 0x28
    cd58:	2800      	cmp	r0, #0
    cd5a:	d061      	beq.n	ce20 <Adafruit_SSD1306::display()+0xd0>
    cd5c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    cd5e:	f7fe f957 	bl	b010 <TwoWire::setClock(unsigned long)>
  ssd1306_commandList(dlist1, sizeof(dlist1));
    cd62:	2205      	movs	r2, #5
    cd64:	497d      	ldr	r1, [pc, #500]	; (cf5c <Adafruit_SSD1306::display()+0x20c>)
    cd66:	4620      	mov	r0, r4
    cd68:	f7ff fcfc 	bl	c764 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1(WIDTH - 1); // Column end address
    cd6c:	8921      	ldrh	r1, [r4, #8]
    cd6e:	3901      	subs	r1, #1
    cd70:	4620      	mov	r0, r4
    cd72:	b2c9      	uxtb	r1, r1
    cd74:	f7ff fc36 	bl	c5e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    cd78:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    cd7c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
  uint8_t *ptr = buffer;
    cd80:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    cd82:	1dd3      	adds	r3, r2, #7
    cd84:	bf48      	it	mi
    cd86:	f102 030e 	addmi.w	r3, r2, #14
    cd8a:	10db      	asrs	r3, r3, #3
  if (wire) { // I2C
    cd8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    cd8e:	fb1c fc03 	smulbb	ip, ip, r3
    cd92:	fa1f f88c 	uxth.w	r8, ip
  if (wire) { // I2C
    cd96:	2a00      	cmp	r2, #0
    cd98:	d07f      	beq.n	ce9a <Adafruit_SSD1306::display()+0x14a>
		txBuffer[0] = (address << 1);
    cd9a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
		transmitting = 1;
    cd9e:	2601      	movs	r6, #1
		txBuffer[0] = (address << 1);
    cda0:	005b      	lsls	r3, r3, #1
    cda2:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63
		transmitting = 1;
    cda6:	f882 60ae 	strb.w	r6, [r2, #174]	; 0xae
		txBufferLength = 1;
    cdaa:	f882 60ad 	strb.w	r6, [r2, #173]	; 0xad
    WIRE_WRITE((uint8_t)0x40);
    cdae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cdb0:	6803      	ldr	r3, [r0, #0]
    cdb2:	2140      	movs	r1, #64	; 0x40
    cdb4:	681b      	ldr	r3, [r3, #0]
    cdb6:	4798      	blx	r3
    while (count--) {
    cdb8:	f1b8 0f00 	cmp.w	r8, #0
    cdbc:	d023      	beq.n	ce06 <Adafruit_SSD1306::display()+0xb6>
    cdbe:	eb05 0708 	add.w	r7, r5, r8
		return endTransmission(1);
    cdc2:	46b0      	mov	r8, r6
      WIRE_WRITE(*ptr++);
    cdc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cdc6:	f815 1b01 	ldrb.w	r1, [r5], #1
    cdca:	6803      	ldr	r3, [r0, #0]
    cdcc:	681b      	ldr	r3, [r3, #0]
    cdce:	4798      	blx	r3
      bytesOut++;
    cdd0:	3601      	adds	r6, #1
    while (count--) {
    cdd2:	42bd      	cmp	r5, r7
      bytesOut++;
    cdd4:	b2b6      	uxth	r6, r6
    while (count--) {
    cdd6:	d016      	beq.n	ce06 <Adafruit_SSD1306::display()+0xb6>
      if (bytesOut >= WIRE_MAX) {
    cdd8:	2e48      	cmp	r6, #72	; 0x48
    cdda:	d1f3      	bne.n	cdc4 <Adafruit_SSD1306::display()+0x74>
    cddc:	2101      	movs	r1, #1
    cdde:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cde0:	f7fe fa3c 	bl	b25c <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    cde4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        wire->beginTransmission(i2caddr);
    cde8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cdea:	0052      	lsls	r2, r2, #1
    cdec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		transmitting = 1;
    cdf0:	f883 80ae 	strb.w	r8, [r3, #174]	; 0xae
		txBufferLength = 1;
    cdf4:	f883 80ad 	strb.w	r8, [r3, #173]	; 0xad
        WIRE_WRITE((uint8_t)0x40);
    cdf8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cdfa:	6803      	ldr	r3, [r0, #0]
    cdfc:	2140      	movs	r1, #64	; 0x40
    cdfe:	681b      	ldr	r3, [r3, #0]
    ce00:	4798      	blx	r3
        bytesOut = 1;
    ce02:	2601      	movs	r6, #1
    ce04:	e7de      	b.n	cdc4 <Adafruit_SSD1306::display()+0x74>
		return endTransmission(1);
    ce06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ce08:	2101      	movs	r1, #1
    ce0a:	f7fe fa27 	bl	b25c <TwoWire::endTransmission(unsigned char)>
  TRANSACTION_END
    ce0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ce10:	2800      	cmp	r0, #0
    ce12:	f000 80a0 	beq.w	cf56 <Adafruit_SSD1306::display()+0x206>
    ce16:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
    ce18:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
    ce1c:	f7fe b8f8 	b.w	b010 <TwoWire::setClock(unsigned long)>
  TRANSACTION_START
    ce20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ce22:	2b00      	cmp	r3, #0
    ce24:	d032      	beq.n	ce8c <Adafruit_SSD1306::display()+0x13c>
		if (interruptMasksUsed) {
    ce26:	7ad9      	ldrb	r1, [r3, #11]
    ce28:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ce2a:	b319      	cbz	r1, ce74 <Adafruit_SSD1306::display()+0x124>
			__disable_irq();
    ce2c:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    ce2e:	7ad9      	ldrb	r1, [r3, #11]
    ce30:	07ce      	lsls	r6, r1, #31
    ce32:	d508      	bpl.n	ce46 <Adafruit_SSD1306::display()+0xf6>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    ce34:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    ce38:	68de      	ldr	r6, [r3, #12]
    ce3a:	f8d5 0180 	ldr.w	r0, [r5, #384]	; 0x180
    ce3e:	4030      	ands	r0, r6
    ce40:	6198      	str	r0, [r3, #24]
				NVIC_ICER0 = interruptSave[0];
    ce42:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    ce46:	078d      	lsls	r5, r1, #30
    ce48:	d508      	bpl.n	ce5c <Adafruit_SSD1306::display()+0x10c>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    ce4a:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    ce4e:	691e      	ldr	r6, [r3, #16]
    ce50:	f8d5 0184 	ldr.w	r0, [r5, #388]	; 0x184
    ce54:	4030      	ands	r0, r6
    ce56:	61d8      	str	r0, [r3, #28]
				NVIC_ICER1 = interruptSave[1];
    ce58:	f8c5 0184 	str.w	r0, [r5, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    ce5c:	0748      	lsls	r0, r1, #29
    ce5e:	d508      	bpl.n	ce72 <Adafruit_SSD1306::display()+0x122>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    ce60:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ce64:	695d      	ldr	r5, [r3, #20]
    ce66:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    ce6a:	4029      	ands	r1, r5
    ce6c:	6219      	str	r1, [r3, #32]
				NVIC_ICER2 = interruptSave[2];
    ce6e:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			__enable_irq();
    ce72:	b662      	cpsie	i
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    ce74:	681b      	ldr	r3, [r3, #0]
		if (port().CTAR0 != settings.ctar) {
    ce76:	68d9      	ldr	r1, [r3, #12]
    ce78:	428a      	cmp	r2, r1
    ce7a:	d007      	beq.n	ce8c <Adafruit_SSD1306::display()+0x13c>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    ce7c:	4d38      	ldr	r5, [pc, #224]	; (cf60 <Adafruit_SSD1306::display()+0x210>)
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    ce7e:	4939      	ldr	r1, [pc, #228]	; (cf64 <Adafruit_SSD1306::display()+0x214>)
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    ce80:	601d      	str	r5, [r3, #0]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    ce82:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
			port().CTAR0 = settings.ctar;
    ce86:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    ce88:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    ce8a:	6019      	str	r1, [r3, #0]
    ce8c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    ce8e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    ce90:	6813      	ldr	r3, [r2, #0]
    ce92:	ea23 0301 	bic.w	r3, r3, r1
    ce96:	6013      	str	r3, [r2, #0]
    ce98:	e763      	b.n	cd62 <Adafruit_SSD1306::display()+0x12>
    SSD1306_MODE_DATA
    ce9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    ce9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    ce9e:	6813      	ldr	r3, [r2, #0]
  if (spi) {
    cea0:	6a67      	ldr	r7, [r4, #36]	; 0x24
    SSD1306_MODE_DATA
    cea2:	430b      	orrs	r3, r1
    cea4:	6013      	str	r3, [r2, #0]
    while (count--)
    cea6:	f1b8 0f00 	cmp.w	r8, #0
    ceaa:	d010      	beq.n	cece <Adafruit_SSD1306::display()+0x17e>
    ceac:	eb05 0c08 	add.w	ip, r5, r8
		port().SR = SPI_SR_TCF;
    ceb0:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
      SPIwrite(*ptr++);
    ceb4:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (spi) {
    ceb8:	b347      	cbz	r7, cf0c <Adafruit_SSD1306::display()+0x1bc>
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    ceba:	683a      	ldr	r2, [r7, #0]
		port().SR = SPI_SR_TCF;
    cebc:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
		port().PUSHR = data;
    cec0:	6356      	str	r6, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    cec2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    cec4:	2b00      	cmp	r3, #0
    cec6:	dafc      	bge.n	cec2 <Adafruit_SSD1306::display()+0x172>
		return port().POPR;
    cec8:	6b93      	ldr	r3, [r2, #56]	; 0x38
    while (count--)
    ceca:	4565      	cmp	r5, ip
    cecc:	d1f2      	bne.n	ceb4 <Adafruit_SSD1306::display()+0x164>
  TRANSACTION_END
    cece:	6c62      	ldr	r2, [r4, #68]	; 0x44
    ced0:	6d61      	ldr	r1, [r4, #84]	; 0x54
    ced2:	6813      	ldr	r3, [r2, #0]
    ced4:	430b      	orrs	r3, r1
    ced6:	6013      	str	r3, [r2, #0]
    ced8:	b1b7      	cbz	r7, cf08 <Adafruit_SSD1306::display()+0x1b8>
		if (interruptMasksUsed) {
    ceda:	7afb      	ldrb	r3, [r7, #11]
    cedc:	b1a3      	cbz	r3, cf08 <Adafruit_SSD1306::display()+0x1b8>
			if (interruptMasksUsed & 0x01) {
    cede:	07d9      	lsls	r1, r3, #31
    cee0:	d504      	bpl.n	ceec <Adafruit_SSD1306::display()+0x19c>
				NVIC_ISER0 = interruptSave[0];
    cee2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cee6:	69b9      	ldr	r1, [r7, #24]
    cee8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) {
    ceec:	079a      	lsls	r2, r3, #30
    ceee:	d504      	bpl.n	cefa <Adafruit_SSD1306::display()+0x1aa>
				NVIC_ISER1 = interruptSave[1];
    cef0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cef4:	69f9      	ldr	r1, [r7, #28]
    cef6:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) {
    cefa:	075b      	lsls	r3, r3, #29
    cefc:	d504      	bpl.n	cf08 <Adafruit_SSD1306::display()+0x1b8>
				NVIC_ISER2 = interruptSave[2];
    cefe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cf02:	6a3a      	ldr	r2, [r7, #32]
    cf04:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
    cf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *clkPort |= clkPinMask;  // Clock high
    cf0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    cf0e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    cf10:	2108      	movs	r1, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    cf12:	2280      	movs	r2, #128	; 0x80
        *mosiPort |= mosiPinMask;
    cf14:	f8d0 8000 	ldr.w	r8, [r0]
    cf18:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
      if (d & bit)
    cf1c:	4216      	tst	r6, r2
        *mosiPort |= mosiPinMask;
    cf1e:	bf14      	ite	ne
    cf20:	ea48 0809 	orrne.w	r8, r8, r9
        *mosiPort &= ~mosiPinMask;
    cf24:	ea28 0809 	biceq.w	r8, r8, r9
    cf28:	f8c0 8000 	str.w	r8, [r0]
      *clkPort |= clkPinMask;  // Clock high
    cf2c:	f8d3 8000 	ldr.w	r8, [r3]
    cf30:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    cf34:	ea48 0809 	orr.w	r8, r8, r9
    cf38:	f8c3 8000 	str.w	r8, [r3]
      *clkPort &= ~clkPinMask; // Clock low
    cf3c:	f8d3 8000 	ldr.w	r8, [r3]
    cf40:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    cf44:	3901      	subs	r1, #1
      *clkPort &= ~clkPinMask; // Clock low
    cf46:	ea28 0809 	bic.w	r8, r8, r9
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    cf4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
    cf4e:	f8c3 8000 	str.w	r8, [r3]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    cf52:	d1df      	bne.n	cf14 <Adafruit_SSD1306::display()+0x1c4>
    cf54:	e7b9      	b.n	ceca <Adafruit_SSD1306::display()+0x17a>
  TRANSACTION_END
    cf56:	6a67      	ldr	r7, [r4, #36]	; 0x24
    cf58:	e7b9      	b.n	cece <Adafruit_SSD1306::display()+0x17e>
    cf5a:	bf00      	nop
    cf5c:	000157bc 	.word	0x000157bc
    cf60:	003f4001 	.word	0x003f4001
    cf64:	803f0000 	.word	0x803f0000

0000cf68 <Adafruit_GFX::startWrite()>:
void Adafruit_GFX::startWrite() {}
    cf68:	4770      	bx	lr
    cf6a:	bf00      	nop

0000cf6c <Adafruit_GFX::writePixel(short, short, unsigned short)>:
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
    cf6c:	b410      	push	{r4}
  drawPixel(x, y, color);
    cf6e:	6804      	ldr	r4, [r0, #0]
    cf70:	6924      	ldr	r4, [r4, #16]
    cf72:	46a4      	mov	ip, r4
}
    cf74:	bc10      	pop	{r4}
  drawPixel(x, y, color);
    cf76:	4760      	bx	ip

0000cf78 <Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)>:
                                  uint16_t color) {
    cf78:	b430      	push	{r4, r5}
  drawFastVLine(x, y, h, color);
    cf7a:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
    cf7c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
    cf80:	9502      	str	r5, [sp, #8]
    cf82:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    cf84:	46a4      	mov	ip, r4
}
    cf86:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
    cf88:	4760      	bx	ip
    cf8a:	bf00      	nop

0000cf8c <Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)>:
                                  uint16_t color) {
    cf8c:	b430      	push	{r4, r5}
  drawFastHLine(x, y, w, color);
    cf8e:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
    cf90:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
    cf94:	9502      	str	r5, [sp, #8]
    cf96:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    cf98:	46a4      	mov	ip, r4
}
    cf9a:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
    cf9c:	4760      	bx	ip
    cf9e:	bf00      	nop

0000cfa0 <Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)>:
                                 uint16_t color) {
    cfa0:	b430      	push	{r4, r5}
    cfa2:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
  fillRect(x, y, w, h, color);
    cfa6:	9502      	str	r5, [sp, #8]
    cfa8:	6804      	ldr	r4, [r0, #0]
                                 uint16_t color) {
    cfaa:	f8bd 500c 	ldrh.w	r5, [sp, #12]
  fillRect(x, y, w, h, color);
    cfae:	9503      	str	r5, [sp, #12]
    cfb0:	6c24      	ldr	r4, [r4, #64]	; 0x40
    cfb2:	46a4      	mov	ip, r4
}
    cfb4:	bc30      	pop	{r4, r5}
  fillRect(x, y, w, h, color);
    cfb6:	4760      	bx	ip

0000cfb8 <Adafruit_GFX::fillScreen(unsigned short)>:
void Adafruit_GFX::fillScreen(uint16_t color) {
    cfb8:	b510      	push	{r4, lr}
    cfba:	b082      	sub	sp, #8
  fillRect(0, 0, _width, _height, color);
    cfbc:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    cfc0:	6804      	ldr	r4, [r0, #0]
    cfc2:	9101      	str	r1, [sp, #4]
    cfc4:	9200      	str	r2, [sp, #0]
    cfc6:	2200      	movs	r2, #0
    cfc8:	6c24      	ldr	r4, [r4, #64]	; 0x40
    cfca:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    cfce:	4611      	mov	r1, r2
    cfd0:	47a0      	blx	r4
}
    cfd2:	b002      	add	sp, #8
    cfd4:	bd10      	pop	{r4, pc}
    cfd6:	bf00      	nop

0000cfd8 <Adafruit_GFX::invertDisplay(bool)>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    cfd8:	4770      	bx	lr
    cfda:	bf00      	nop

0000cfdc <Adafruit_GFX::setRotation(unsigned char)>:
  rotation = (x & 3);
    cfdc:	f001 0303 	and.w	r3, r1, #3
    cfe0:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
    cfe2:	07cb      	lsls	r3, r1, #31
    _width = WIDTH;
    cfe4:	bf59      	ittee	pl
    cfe6:	8902      	ldrhpl	r2, [r0, #8]
    _height = HEIGHT;
    cfe8:	f9b0 300a 	ldrshpl.w	r3, [r0, #10]
    _width = HEIGHT;
    cfec:	8942      	ldrhmi	r2, [r0, #10]
    _height = WIDTH;
    cfee:	f9b0 3008 	ldrshmi.w	r3, [r0, #8]
    _width = HEIGHT;
    cff2:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
    cff4:	81c3      	strh	r3, [r0, #14]
}
    cff6:	4770      	bx	lr

0000cff8 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)>:
                                 uint16_t color) {
    cff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cffc:	461c      	mov	r4, r3
    cffe:	460b      	mov	r3, r1
  startWrite();
    d000:	6801      	ldr	r1, [r0, #0]
    d002:	4e12      	ldr	r6, [pc, #72]	; (d04c <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x54>)
    d004:	694f      	ldr	r7, [r1, #20]
                                 uint16_t color) {
    d006:	b084      	sub	sp, #16
    d008:	42b7      	cmp	r7, r6
    d00a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    d00e:	4605      	mov	r5, r0
    d010:	d110      	bne.n	d034 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x3c>
  writeLine(x, y, x, y + h - 1, color);
    d012:	3c01      	subs	r4, #1
    d014:	4414      	add	r4, r2
    d016:	b224      	sxth	r4, r4
    d018:	f8cd 8004 	str.w	r8, [sp, #4]
    d01c:	9400      	str	r4, [sp, #0]
    d01e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    d020:	4628      	mov	r0, r5
    d022:	4619      	mov	r1, r3
    d024:	47a0      	blx	r4
  endWrite();
    d026:	682b      	ldr	r3, [r5, #0]
    d028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d02a:	42b3      	cmp	r3, r6
    d02c:	d109      	bne.n	d042 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x4a>
}
    d02e:	b004      	add	sp, #16
    d030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d034:	9203      	str	r2, [sp, #12]
    d036:	9302      	str	r3, [sp, #8]
  startWrite();
    d038:	47b8      	blx	r7
  writeLine(x, y, x, y + h - 1, color);
    d03a:	6829      	ldr	r1, [r5, #0]
    d03c:	9a03      	ldr	r2, [sp, #12]
    d03e:	9b02      	ldr	r3, [sp, #8]
    d040:	e7e7      	b.n	d012 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x1a>
  endWrite();
    d042:	4628      	mov	r0, r5
}
    d044:	b004      	add	sp, #16
    d046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
    d04a:	4718      	bx	r3
    d04c:	0000cf69 	.word	0x0000cf69

0000d050 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)>:
                                 uint16_t color) {
    d050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  startWrite();
    d054:	6806      	ldr	r6, [r0, #0]
    d056:	4f12      	ldr	r7, [pc, #72]	; (d0a0 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x50>)
                                 uint16_t color) {
    d058:	461c      	mov	r4, r3
  startWrite();
    d05a:	6973      	ldr	r3, [r6, #20]
                                 uint16_t color) {
    d05c:	b084      	sub	sp, #16
    d05e:	42bb      	cmp	r3, r7
    d060:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    d064:	4605      	mov	r5, r0
    d066:	d10f      	bne.n	d088 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x38>
  writeLine(x, y, x + w - 1, y, color);
    d068:	1e63      	subs	r3, r4, #1
    d06a:	f8cd 8004 	str.w	r8, [sp, #4]
    d06e:	440b      	add	r3, r1
    d070:	9200      	str	r2, [sp, #0]
    d072:	b21b      	sxth	r3, r3
    d074:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    d076:	4628      	mov	r0, r5
    d078:	47a0      	blx	r4
  endWrite();
    d07a:	682b      	ldr	r3, [r5, #0]
    d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d07e:	42bb      	cmp	r3, r7
    d080:	d109      	bne.n	d096 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x46>
}
    d082:	b004      	add	sp, #16
    d084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d088:	9203      	str	r2, [sp, #12]
    d08a:	9102      	str	r1, [sp, #8]
  startWrite();
    d08c:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
    d08e:	682e      	ldr	r6, [r5, #0]
    d090:	9a03      	ldr	r2, [sp, #12]
    d092:	9902      	ldr	r1, [sp, #8]
    d094:	e7e8      	b.n	d068 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x18>
  endWrite();
    d096:	4628      	mov	r0, r5
}
    d098:	b004      	add	sp, #16
    d09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
    d09e:	4718      	bx	r3
    d0a0:	0000cf69 	.word	0x0000cf69

0000d0a4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    d0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d0a8:	b087      	sub	sp, #28
  if (x0 == x1) {
    d0aa:	4299      	cmp	r1, r3
                            uint16_t color) {
    d0ac:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
    d0b0:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
    d0b4:	4605      	mov	r5, r0
  if (x0 == x1) {
    d0b6:	d022      	beq.n	d0fe <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x5a>
  } else if (y0 == y1) {
    d0b8:	42a2      	cmp	r2, r4
    d0ba:	d012      	beq.n	d0e2 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x3e>
    startWrite();
    d0bc:	6807      	ldr	r7, [r0, #0]
    d0be:	f8df 8084 	ldr.w	r8, [pc, #132]	; d144 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0xa0>
    d0c2:	f8d7 9014 	ldr.w	r9, [r7, #20]
    d0c6:	45c1      	cmp	r9, r8
    d0c8:	d133      	bne.n	d132 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x8e>
    writeLine(x0, y0, x1, y1, color);
    d0ca:	e9cd 4600 	strd	r4, r6, [sp]
    d0ce:	4628      	mov	r0, r5
    d0d0:	6abc      	ldr	r4, [r7, #40]	; 0x28
    d0d2:	47a0      	blx	r4
    endWrite();
    d0d4:	682b      	ldr	r3, [r5, #0]
    d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d0d8:	4543      	cmp	r3, r8
    d0da:	d125      	bne.n	d128 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x84>
}
    d0dc:	b007      	add	sp, #28
    d0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (x0 > x1)
    d0e2:	4299      	cmp	r1, r3
    d0e4:	dc1c      	bgt.n	d120 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x7c>
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    d0e6:	960e      	str	r6, [sp, #56]	; 0x38
    d0e8:	682c      	ldr	r4, [r5, #0]
    d0ea:	3301      	adds	r3, #1
    d0ec:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    d0ee:	1a5b      	subs	r3, r3, r1
    d0f0:	b21b      	sxth	r3, r3
    d0f2:	4628      	mov	r0, r5
    d0f4:	46a4      	mov	ip, r4
}
    d0f6:	b007      	add	sp, #28
    d0f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    d0fc:	4760      	bx	ip
    if (y0 > y1)
    d0fe:	42a2      	cmp	r2, r4
    d100:	dd02      	ble.n	d108 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x64>
    d102:	4613      	mov	r3, r2
    d104:	4622      	mov	r2, r4
    d106:	461c      	mov	r4, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
    d108:	960e      	str	r6, [sp, #56]	; 0x38
    d10a:	1c63      	adds	r3, r4, #1
    d10c:	682c      	ldr	r4, [r5, #0]
    d10e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    d110:	1a9b      	subs	r3, r3, r2
    d112:	b21b      	sxth	r3, r3
    d114:	4628      	mov	r0, r5
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    d116:	46a4      	mov	ip, r4
}
    d118:	b007      	add	sp, #28
    d11a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    d11e:	4760      	bx	ip
    if (x0 > x1)
    d120:	4608      	mov	r0, r1
    d122:	4619      	mov	r1, r3
    d124:	4603      	mov	r3, r0
    d126:	e7de      	b.n	d0e6 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x42>
    endWrite();
    d128:	4628      	mov	r0, r5
}
    d12a:	b007      	add	sp, #28
    d12c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
    d130:	4718      	bx	r3
    d132:	9305      	str	r3, [sp, #20]
    d134:	9204      	str	r2, [sp, #16]
    d136:	9103      	str	r1, [sp, #12]
    startWrite();
    d138:	47c8      	blx	r9
    writeLine(x0, y0, x1, y1, color);
    d13a:	a903      	add	r1, sp, #12
    d13c:	c90e      	ldmia	r1, {r1, r2, r3}
    d13e:	682f      	ldr	r7, [r5, #0]
    d140:	e7c3      	b.n	d0ca <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x26>
    d142:	bf00      	nop
    d144:	0000cf69 	.word	0x0000cf69

0000d148 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
    d14c:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
    d150:	4690      	mov	r8, r2
    d152:	461f      	mov	r7, r3
    d154:	4a1f      	ldr	r2, [pc, #124]	; (d1d4 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x8c>)
  startWrite();
    d156:	f8dc 3014 	ldr.w	r3, [ip, #20]
                            uint16_t color) {
    d15a:	b083      	sub	sp, #12
    d15c:	4293      	cmp	r3, r2
    d15e:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
    d162:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
    d166:	4605      	mov	r5, r0
    d168:	460c      	mov	r4, r1
    d16a:	d129      	bne.n	d1c0 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x78>
  for (int16_t i = x; i < x + w; i++) {
    d16c:	4427      	add	r7, r4
    d16e:	42a7      	cmp	r7, r4
    d170:	dd1e      	ble.n	d1b0 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x68>
    d172:	f8df b064 	ldr.w	fp, [pc, #100]	; d1d8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x90>
    d176:	e00a      	b.n	d18e <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x46>
  drawFastVLine(x, y, h, color);
    d178:	f8cd a000 	str.w	sl, [sp]
    d17c:	3401      	adds	r4, #1
    d17e:	f8dc 6038 	ldr.w	r6, [ip, #56]	; 0x38
    d182:	b224      	sxth	r4, r4
    d184:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
    d186:	42bc      	cmp	r4, r7
  endWrite();
    d188:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
    d18c:	da10      	bge.n	d1b0 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x68>
    writeFastVLine(i, y, h, color);
    d18e:	f8dc 6020 	ldr.w	r6, [ip, #32]
    d192:	455e      	cmp	r6, fp
  drawFastVLine(x, y, h, color);
    d194:	464b      	mov	r3, r9
    d196:	4642      	mov	r2, r8
    d198:	4621      	mov	r1, r4
    d19a:	4628      	mov	r0, r5
    d19c:	d0ec      	beq.n	d178 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x30>
    d19e:	3401      	adds	r4, #1
    writeFastVLine(i, y, h, color);
    d1a0:	f8cd a000 	str.w	sl, [sp]
    d1a4:	b224      	sxth	r4, r4
    d1a6:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
    d1a8:	42bc      	cmp	r4, r7
  endWrite();
    d1aa:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
    d1ae:	dbee      	blt.n	d18e <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x46>
  endWrite();
    d1b0:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    d1b4:	4a07      	ldr	r2, [pc, #28]	; (d1d4 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x8c>)
    d1b6:	4293      	cmp	r3, r2
    d1b8:	d106      	bne.n	d1c8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x80>
}
    d1ba:	b003      	add	sp, #12
    d1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
    d1c0:	4798      	blx	r3
  endWrite();
    d1c2:	f8d5 c000 	ldr.w	ip, [r5]
    d1c6:	e7d1      	b.n	d16c <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x24>
    d1c8:	4628      	mov	r0, r5
}
    d1ca:	b003      	add	sp, #12
    d1cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    d1d0:	4718      	bx	r3
    d1d2:	bf00      	nop
    d1d4:	0000cf69 	.word	0x0000cf69
    d1d8:	0000cf79 	.word	0x0000cf79

0000d1dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1e0:	461d      	mov	r5, r3
  startWrite();
    d1e2:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
    d1e4:	4689      	mov	r9, r1
    d1e6:	4616      	mov	r6, r2
    d1e8:	492c      	ldr	r1, [pc, #176]	; (d29c <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xc0>)
  startWrite();
    d1ea:	695a      	ldr	r2, [r3, #20]
                            uint16_t color) {
    d1ec:	b083      	sub	sp, #12
    d1ee:	428a      	cmp	r2, r1
    d1f0:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
    d1f4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    d1f8:	4604      	mov	r4, r0
    d1fa:	d141      	bne.n	d280 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xa4>
  writeFastHLine(x, y, w, color);
    d1fc:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    d200:	f8df a09c 	ldr.w	sl, [pc, #156]	; d2a0 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xc4>
  drawFastHLine(x, y, w, color);
    d204:	9700      	str	r7, [sp, #0]
    d206:	45d3      	cmp	fp, sl
    d208:	bf08      	it	eq
    d20a:	f8d3 b03c 	ldreq.w	fp, [r3, #60]	; 0x3c
  writeFastHLine(x, y, w, color);
    d20e:	4632      	mov	r2, r6
    d210:	462b      	mov	r3, r5
    d212:	4649      	mov	r1, r9
    d214:	4620      	mov	r0, r4
    d216:	47d8      	blx	fp
  writeFastHLine(x, y + h - 1, w, color);
    d218:	6823      	ldr	r3, [r4, #0]
    d21a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
  drawFastHLine(x, y, w, color);
    d21e:	9700      	str	r7, [sp, #0]
  writeFastHLine(x, y + h - 1, w, color);
    d220:	f108 32ff 	add.w	r2, r8, #4294967295
    d224:	4432      	add	r2, r6
    d226:	45d3      	cmp	fp, sl
    d228:	b212      	sxth	r2, r2
    d22a:	d131      	bne.n	d290 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xb4>
  drawFastHLine(x, y, w, color);
    d22c:	f8d3 a03c 	ldr.w	sl, [r3, #60]	; 0x3c
    d230:	4649      	mov	r1, r9
    d232:	462b      	mov	r3, r5
    d234:	4620      	mov	r0, r4
    d236:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
    d238:	6823      	ldr	r3, [r4, #0]
    d23a:	f8df a068 	ldr.w	sl, [pc, #104]	; d2a4 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xc8>
    d23e:	f8d3 b020 	ldr.w	fp, [r3, #32]
  drawFastVLine(x, y, h, color);
    d242:	9700      	str	r7, [sp, #0]
    d244:	45d3      	cmp	fp, sl
    d246:	bf08      	it	eq
    d248:	f8d3 b038 	ldreq.w	fp, [r3, #56]	; 0x38
  writeFastVLine(x, y, h, color);
    d24c:	4632      	mov	r2, r6
    d24e:	4643      	mov	r3, r8
    d250:	4649      	mov	r1, r9
    d252:	4620      	mov	r0, r4
    d254:	47d8      	blx	fp
  writeFastVLine(x + w - 1, y, h, color);
    d256:	3d01      	subs	r5, #1
    d258:	6823      	ldr	r3, [r4, #0]
    d25a:	444d      	add	r5, r9
    d25c:	b229      	sxth	r1, r5
    d25e:	6a1d      	ldr	r5, [r3, #32]
  drawFastVLine(x, y, h, color);
    d260:	9700      	str	r7, [sp, #0]
    d262:	4555      	cmp	r5, sl
    d264:	bf08      	it	eq
    d266:	6b9d      	ldreq	r5, [r3, #56]	; 0x38
  writeFastVLine(x + w - 1, y, h, color);
    d268:	4632      	mov	r2, r6
    d26a:	4643      	mov	r3, r8
    d26c:	4620      	mov	r0, r4
    d26e:	47a8      	blx	r5
  endWrite();
    d270:	6823      	ldr	r3, [r4, #0]
    d272:	4a0a      	ldr	r2, [pc, #40]	; (d29c <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xc0>)
    d274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d276:	4293      	cmp	r3, r2
    d278:	d105      	bne.n	d286 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xaa>
}
    d27a:	b003      	add	sp, #12
    d27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
    d280:	4790      	blx	r2
  writeFastHLine(x, y, w, color);
    d282:	6823      	ldr	r3, [r4, #0]
    d284:	e7ba      	b.n	d1fc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0x20>
  endWrite();
    d286:	4620      	mov	r0, r4
}
    d288:	b003      	add	sp, #12
    d28a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    d28e:	4718      	bx	r3
  writeFastHLine(x, y + h - 1, w, color);
    d290:	462b      	mov	r3, r5
    d292:	4649      	mov	r1, r9
    d294:	4620      	mov	r0, r4
    d296:	47d8      	blx	fp
    d298:	e7ce      	b.n	d238 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0x5c>
    d29a:	bf00      	nop
    d29c:	0000cf69 	.word	0x0000cf69
    d2a0:	0000cf8d 	.word	0x0000cf8d
    d2a4:	0000cf79 	.word	0x0000cf79

0000d2a8 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)>:
                             uint16_t color) {
    d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2ac:	b085      	sub	sp, #20
    d2ae:	461f      	mov	r7, r3
    d2b0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
    d2b4:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    d2b8:	eba7 0a01 	sub.w	sl, r7, r1
    d2bc:	ebac 0302 	sub.w	r3, ip, r2
    d2c0:	f1ba 0f00 	cmp.w	sl, #0
                             uint16_t color) {
    d2c4:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    d2c6:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
    d2ca:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    d2ce:	bfb8      	it	lt
    d2d0:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
    d2d4:	4550      	cmp	r0, sl
                             uint16_t color) {
    d2d6:	460d      	mov	r5, r1
    d2d8:	4616      	mov	r6, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    d2da:	9000      	str	r0, [sp, #0]
  if (steep) {
    d2dc:	dd5a      	ble.n	d394 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xec>
    d2de:	4639      	mov	r1, r7
    d2e0:	462c      	mov	r4, r5
    d2e2:	462a      	mov	r2, r5
    d2e4:	463b      	mov	r3, r7
    _swap_int16_t(x0, y0);
    d2e6:	4635      	mov	r5, r6
    _swap_int16_t(x1, y1);
    d2e8:	4667      	mov	r7, ip
    _swap_int16_t(x0, y0);
    d2ea:	4626      	mov	r6, r4
    _swap_int16_t(x1, y1);
    d2ec:	468c      	mov	ip, r1
  if (x0 > x1) {
    d2ee:	42bd      	cmp	r5, r7
    d2f0:	dd08      	ble.n	d304 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x5c>
    d2f2:	4696      	mov	lr, r2
    d2f4:	4634      	mov	r4, r6
    d2f6:	4629      	mov	r1, r5
    d2f8:	461a      	mov	r2, r3
    _swap_int16_t(y0, y1);
    d2fa:	4666      	mov	r6, ip
  if (x0 > x1) {
    d2fc:	463d      	mov	r5, r7
    d2fe:	4673      	mov	r3, lr
    _swap_int16_t(y0, y1);
    d300:	46a4      	mov	ip, r4
  if (x0 > x1) {
    d302:	460f      	mov	r7, r1
  dy = abs(y1 - y0);
    d304:	1a9b      	subs	r3, r3, r2
  dx = x1 - x0;
    d306:	1b7a      	subs	r2, r7, r5
  dy = abs(y1 - y0);
    d308:	2b00      	cmp	r3, #0
  int16_t err = dx / 2;
    d30a:	f3c2 34c0 	ubfx	r4, r2, #15, #1
    d30e:	fa04 f482 	sxtah	r4, r4, r2
  dy = abs(y1 - y0);
    d312:	bfb8      	it	lt
    d314:	425b      	neglt	r3, r3
  dx = x1 - x0;
    d316:	b292      	uxth	r2, r2
  if (y0 < y1) {
    d318:	45b4      	cmp	ip, r6
  dx = x1 - x0;
    d31a:	9202      	str	r2, [sp, #8]
  int16_t err = dx / 2;
    d31c:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
    d320:	dd30      	ble.n	d384 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xdc>
    ystep = 1;
    d322:	2201      	movs	r2, #1
    d324:	9203      	str	r2, [sp, #12]
    err -= dy;
    d326:	b29b      	uxth	r3, r3
    d328:	46cb      	mov	fp, r9
    d32a:	9301      	str	r3, [sp, #4]
    d32c:	46b9      	mov	r9, r7
    d32e:	e018      	b.n	d362 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xba>
      writePixel(y0, x0, color);
    d330:	6987      	ldr	r7, [r0, #24]
    d332:	f8df c06c 	ldr.w	ip, [pc, #108]	; d3a0 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xf8>
    d336:	4567      	cmp	r7, ip
  drawPixel(x, y, color);
    d338:	4631      	mov	r1, r6
    d33a:	d128      	bne.n	d38e <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xe6>
    d33c:	6907      	ldr	r7, [r0, #16]
    d33e:	4658      	mov	r0, fp
    d340:	47b8      	blx	r7
    err -= dy;
    d342:	9b01      	ldr	r3, [sp, #4]
    d344:	1ae3      	subs	r3, r4, r3
    d346:	b21c      	sxth	r4, r3
    if (err < 0) {
    d348:	3501      	adds	r5, #1
    d34a:	2c00      	cmp	r4, #0
    d34c:	b22d      	sxth	r5, r5
    err -= dy;
    d34e:	b29b      	uxth	r3, r3
    if (err < 0) {
    d350:	da05      	bge.n	d35e <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xb6>
      err += dx;
    d352:	9a02      	ldr	r2, [sp, #8]
    d354:	4413      	add	r3, r2
    d356:	b21c      	sxth	r4, r3
      y0 += ystep;
    d358:	9b03      	ldr	r3, [sp, #12]
    d35a:	441e      	add	r6, r3
    d35c:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
    d35e:	45a9      	cmp	r9, r5
    d360:	db12      	blt.n	d388 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xe0>
    if (steep) {
    d362:	9b00      	ldr	r3, [sp, #0]
      writePixel(y0, x0, color);
    d364:	f8db 0000 	ldr.w	r0, [fp]
    if (steep) {
    d368:	4553      	cmp	r3, sl
  drawPixel(x, y, color);
    d36a:	462a      	mov	r2, r5
    d36c:	4643      	mov	r3, r8
    d36e:	4629      	mov	r1, r5
    if (steep) {
    d370:	dcde      	bgt.n	d330 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x88>
      writePixel(x0, y0, color);
    d372:	6987      	ldr	r7, [r0, #24]
    d374:	f8df c028 	ldr.w	ip, [pc, #40]	; d3a0 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xf8>
    d378:	4567      	cmp	r7, ip
  drawPixel(x, y, color);
    d37a:	4632      	mov	r2, r6
    d37c:	d0de      	beq.n	d33c <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x94>
      writePixel(x0, y0, color);
    d37e:	4658      	mov	r0, fp
    d380:	47b8      	blx	r7
    d382:	e7de      	b.n	d342 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x9a>
  for (; x0 <= x1; x0++) {
    d384:	42bd      	cmp	r5, r7
    d386:	dd07      	ble.n	d398 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xf0>
}
    d388:	b005      	add	sp, #20
    d38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      writePixel(y0, x0, color);
    d38e:	4658      	mov	r0, fp
    d390:	47b8      	blx	r7
    d392:	e7d6      	b.n	d342 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x9a>
    d394:	4663      	mov	r3, ip
    d396:	e7aa      	b.n	d2ee <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x46>
    ystep = -1;
    d398:	f04f 32ff 	mov.w	r2, #4294967295
    d39c:	9203      	str	r2, [sp, #12]
    d39e:	e7c2      	b.n	d326 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x7e>
    d3a0:	0000cf6d 	.word	0x0000cf6d

0000d3a4 <Adafruit_GFX::Adafruit_GFX(short, short)>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    d3a4:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
    d3a6:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
    d3a8:	4a08      	ldr	r2, [pc, #32]	; (d3cc <Adafruit_GFX::Adafruit_GFX(short, short)+0x28>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    d3aa:	8101      	strh	r1, [r0, #8]
    d3ac:	b410      	push	{r4}
	constexpr Print() : write_error(0) {}
    d3ae:	2400      	movs	r4, #0
  _width = WIDTH;
    d3b0:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
    d3b2:	6182      	str	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
    d3b4:	f04f 31ff 	mov.w	r1, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    d3b8:	4a05      	ldr	r2, [pc, #20]	; (d3d0 <Adafruit_GFX::Adafruit_GFX(short, short)+0x2c>)
    d3ba:	6044      	str	r4, [r0, #4]
  cursor_y = cursor_x = 0;
    d3bc:	6104      	str	r4, [r0, #16]
  _cp437 = false;
    d3be:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
    d3c0:	6204      	str	r4, [r0, #32]
  textcolor = textbgcolor = 0xFFFF;
    d3c2:	6141      	str	r1, [r0, #20]
}
    d3c4:	bc10      	pop	{r4}
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    d3c6:	6002      	str	r2, [r0, #0]
}
    d3c8:	4770      	bx	lr
    d3ca:	bf00      	nop
    d3cc:	01000101 	.word	0x01000101
    d3d0:	00015ccc 	.word	0x00015ccc

0000d3d4 <Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)>:
                                int16_t x2, int16_t y2, uint16_t color) {
    d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3d8:	b085      	sub	sp, #20
    d3da:	4604      	mov	r4, r0
    d3dc:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
    d3e0:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
  drawLine(x0, y0, x1, y1, color);
    d3e4:	9601      	str	r6, [sp, #4]
    d3e6:	f8cd a000 	str.w	sl, [sp]
    d3ea:	6805      	ldr	r5, [r0, #0]
                                int16_t x2, int16_t y2, uint16_t color) {
    d3ec:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
  drawLine(x0, y0, x1, y1, color);
    d3f0:	f8d5 b048 	ldr.w	fp, [r5, #72]	; 0x48
                                int16_t x2, int16_t y2, uint16_t color) {
    d3f4:	9203      	str	r2, [sp, #12]
    d3f6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
    d3fa:	460d      	mov	r5, r1
    d3fc:	461f      	mov	r7, r3
  drawLine(x0, y0, x1, y1, color);
    d3fe:	47d8      	blx	fp
  drawLine(x1, y1, x2, y2, color);
    d400:	9601      	str	r6, [sp, #4]
    d402:	f8cd 9000 	str.w	r9, [sp]
    d406:	6823      	ldr	r3, [r4, #0]
    d408:	4652      	mov	r2, sl
    d40a:	4639      	mov	r1, r7
    d40c:	4620      	mov	r0, r4
    d40e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    d410:	4643      	mov	r3, r8
    d412:	47b8      	blx	r7
  drawLine(x2, y2, x0, y0, color);
    d414:	9b03      	ldr	r3, [sp, #12]
    d416:	930e      	str	r3, [sp, #56]	; 0x38
    d418:	960f      	str	r6, [sp, #60]	; 0x3c
    d41a:	462b      	mov	r3, r5
    d41c:	6825      	ldr	r5, [r4, #0]
    d41e:	4620      	mov	r0, r4
    d420:	6cac      	ldr	r4, [r5, #72]	; 0x48
    d422:	464a      	mov	r2, r9
    d424:	4641      	mov	r1, r8
    d426:	46a4      	mov	ip, r4
}
    d428:	b005      	add	sp, #20
    d42a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  drawLine(x2, y2, x0, y0, color);
    d42e:	4760      	bx	ip

0000d430 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>:
                              int16_t w, int16_t h, uint16_t color) {
    d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d434:	b087      	sub	sp, #28
    d436:	4682      	mov	sl, r0
    d438:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
    d43c:	9305      	str	r3, [sp, #20]
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    d43e:	1df3      	adds	r3, r6, #7
    d440:	bf48      	it	mi
    d442:	f106 030e 	addmi.w	r3, r6, #14
  startWrite();
    d446:	6800      	ldr	r0, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
    d448:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
    d44c:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    d450:	10db      	asrs	r3, r3, #3
                              int16_t w, int16_t h, uint16_t color) {
    d452:	4617      	mov	r7, r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    d454:	9303      	str	r3, [sp, #12]
  startWrite();
    d456:	4a30      	ldr	r2, [pc, #192]	; (d518 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xe8>)
    d458:	6943      	ldr	r3, [r0, #20]
    d45a:	4293      	cmp	r3, r2
                              int16_t w, int16_t h, uint16_t color) {
    d45c:	4688      	mov	r8, r1
    d45e:	d151      	bne.n	d504 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xd4>
  for (int16_t j = 0; j < h; j++, y++) {
    d460:	2c00      	cmp	r4, #0
    d462:	dd48      	ble.n	d4f6 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xc6>
    d464:	443c      	add	r4, r7
    d466:	b2a3      	uxth	r3, r4
    d468:	9304      	str	r3, [sp, #16]
    d46a:	2300      	movs	r3, #0
    d46c:	9302      	str	r3, [sp, #8]
    d46e:	461d      	mov	r5, r3
    d470:	465b      	mov	r3, fp
    d472:	4684      	mov	ip, r0
    d474:	46d3      	mov	fp, sl
    d476:	469a      	mov	sl, r3
    for (int16_t i = 0; i < w; i++) {
    d478:	2e00      	cmp	r6, #0
    d47a:	dd30      	ble.n	d4de <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xae>
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    d47c:	9a05      	ldr	r2, [sp, #20]
    d47e:	9902      	ldr	r1, [sp, #8]
    d480:	440a      	add	r2, r1
    d482:	46d9      	mov	r9, fp
    for (int16_t i = 0; i < w; i++) {
    d484:	2300      	movs	r3, #0
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    d486:	46d3      	mov	fp, sl
    d488:	9201      	str	r2, [sp, #4]
    d48a:	46ba      	mov	sl, r7
      if (i & 7)
    d48c:	f013 0f07 	tst.w	r3, #7
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    d490:	bf08      	it	eq
    d492:	9a01      	ldreq	r2, [sp, #4]
    d494:	b29c      	uxth	r4, r3
    d496:	ea4f 03e3 	mov.w	r3, r3, asr #3
        b <<= 1;
    d49a:	ea4f 0545 	mov.w	r5, r5, lsl #1
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    d49e:	bf0c      	ite	eq
    d4a0:	5cd5      	ldrbeq	r5, [r2, r3]
        b <<= 1;
    d4a2:	b2ed      	uxtbne	r5, r5
        writePixel(x + i, y, color);
    d4a4:	eb04 0108 	add.w	r1, r4, r8
      if (b & 0x80)
    d4a8:	f015 0f80 	tst.w	r5, #128	; 0x80
    d4ac:	b209      	sxth	r1, r1
    d4ae:	d00f      	beq.n	d4d0 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xa0>
        writePixel(x + i, y, color);
    d4b0:	f8dc 7018 	ldr.w	r7, [ip, #24]
    d4b4:	4a19      	ldr	r2, [pc, #100]	; (d51c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xec>)
    d4b6:	4297      	cmp	r7, r2
  drawPixel(x, y, color);
    d4b8:	bf08      	it	eq
    d4ba:	f8dc 7010 	ldreq.w	r7, [ip, #16]
    d4be:	465b      	mov	r3, fp
    d4c0:	4652      	mov	r2, sl
        writePixel(x + i, y, color);
    d4c2:	bf1c      	itt	ne
    d4c4:	465b      	movne	r3, fp
    d4c6:	4652      	movne	r2, sl
    d4c8:	4648      	mov	r0, r9
    d4ca:	47b8      	blx	r7
  endWrite();
    d4cc:	f8d9 c000 	ldr.w	ip, [r9]
    for (int16_t i = 0; i < w; i++) {
    d4d0:	3401      	adds	r4, #1
    d4d2:	b223      	sxth	r3, r4
    d4d4:	42b3      	cmp	r3, r6
    d4d6:	d1d9      	bne.n	d48c <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x5c>
    d4d8:	4657      	mov	r7, sl
    d4da:	46da      	mov	sl, fp
    d4dc:	46cb      	mov	fp, r9
  for (int16_t j = 0; j < h; j++, y++) {
    d4de:	9b02      	ldr	r3, [sp, #8]
    d4e0:	9a03      	ldr	r2, [sp, #12]
    d4e2:	3701      	adds	r7, #1
    d4e4:	4413      	add	r3, r2
    d4e6:	9a04      	ldr	r2, [sp, #16]
    d4e8:	9302      	str	r3, [sp, #8]
    d4ea:	b2bb      	uxth	r3, r7
    d4ec:	429a      	cmp	r2, r3
    d4ee:	b23f      	sxth	r7, r7
    d4f0:	d1c2      	bne.n	d478 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x48>
    d4f2:	4660      	mov	r0, ip
    d4f4:	46da      	mov	sl, fp
  endWrite();
    d4f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    d4f8:	4a07      	ldr	r2, [pc, #28]	; (d518 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xe8>)
    d4fa:	4293      	cmp	r3, r2
    d4fc:	d107      	bne.n	d50e <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xde>
}
    d4fe:	b007      	add	sp, #28
    d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
    d504:	4650      	mov	r0, sl
    d506:	4798      	blx	r3
  endWrite();
    d508:	f8da 0000 	ldr.w	r0, [sl]
    d50c:	e7a8      	b.n	d460 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x30>
    d50e:	4650      	mov	r0, sl
}
    d510:	b007      	add	sp, #28
    d512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    d516:	4718      	bx	r3
    d518:	0000cf69 	.word	0x0000cf69
    d51c:	0000cf6d 	.word	0x0000cf6d

0000d520 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>:
                            uint8_t size_y) {
    d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d524:	b093      	sub	sp, #76	; 0x4c
    d526:	4683      	mov	fp, r0
    d528:	461c      	mov	r4, r3
    d52a:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    d52e:	9305      	str	r3, [sp, #20]
    d530:	4692      	mov	sl, r2
    d532:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
  if (!gfxFont) { // 'Classic' built-in font
    d536:	f8db 2020 	ldr.w	r2, [fp, #32]
                            uint8_t size_y) {
    d53a:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
    d53e:	9304      	str	r3, [sp, #16]
    d540:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
    d544:	9006      	str	r0, [sp, #24]
    d546:	9107      	str	r1, [sp, #28]
    d548:	9303      	str	r3, [sp, #12]
  if (!gfxFont) { // 'Classic' built-in font
    d54a:	2a00      	cmp	r2, #0
    d54c:	f000 80ad 	beq.w	d6aa <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x18a>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    d550:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
    d552:	6851      	ldr	r1, [r2, #4]
  return gfxFont->bitmap;
    d554:	6812      	ldr	r2, [r2, #0]
    d556:	9205      	str	r2, [sp, #20]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    d558:	1ae3      	subs	r3, r4, r3
  return gfxFont->glyph + c;
    d55a:	b2db      	uxtb	r3, r3
    d55c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    d560:	f831 7033 	ldrh.w	r7, [r1, r3, lsl #3]
    if (size_x > 1 || size_y > 1) {
    d564:	9903      	ldr	r1, [sp, #12]
    d566:	9b04      	ldr	r3, [sp, #16]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    d568:	f892 8002 	ldrb.w	r8, [r2, #2]
           yo = pgm_read_byte(&glyph->yOffset);
    d56c:	f992 4006 	ldrsb.w	r4, [r2, #6]
    if (size_x > 1 || size_y > 1) {
    d570:	430b      	orrs	r3, r1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    d572:	78d1      	ldrb	r1, [r2, #3]
    d574:	910c      	str	r1, [sp, #48]	; 0x30
    if (size_x > 1 || size_y > 1) {
    d576:	2b01      	cmp	r3, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    d578:	f992 1005 	ldrsb.w	r1, [r2, #5]
    d57c:	9110      	str	r1, [sp, #64]	; 0x40
    if (size_x > 1 || size_y > 1) {
    d57e:	f240 8090 	bls.w	d6a2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x182>
      xo16 = xo;
    d582:	b20b      	sxth	r3, r1
    d584:	9308      	str	r3, [sp, #32]
      yo16 = yo;
    d586:	b223      	sxth	r3, r4
    d588:	930d      	str	r3, [sp, #52]	; 0x34
    startWrite();
    d58a:	4b90      	ldr	r3, [pc, #576]	; (d7cc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ac>)
    d58c:	f8db 2000 	ldr.w	r2, [fp]
    d590:	9311      	str	r3, [sp, #68]	; 0x44
    d592:	4619      	mov	r1, r3
    d594:	6953      	ldr	r3, [r2, #20]
    d596:	428b      	cmp	r3, r1
    d598:	f040 8172 	bne.w	d880 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x360>
    for (yy = 0; yy < h; yy++) {
    d59c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d59e:	2b00      	cmp	r3, #0
    d5a0:	d074      	beq.n	d68c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x16c>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    d5a2:	fa1f f38a 	uxth.w	r3, sl
    d5a6:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
    d5a8:	4423      	add	r3, r4
    d5aa:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
    d5ac:	f8dd 9010 	ldr.w	r9, [sp, #16]
    d5b0:	2300      	movs	r3, #0
    d5b2:	930a      	str	r3, [sp, #40]	; 0x28
    d5b4:	461d      	mov	r5, r3
    d5b6:	9309      	str	r3, [sp, #36]	; 0x24
    d5b8:	4658      	mov	r0, fp
      for (xx = 0; xx < w; xx++) {
    d5ba:	f1b8 0f00 	cmp.w	r8, #0
    d5be:	d05d      	beq.n	d67c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x15c>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    d5c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d5c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    d5c4:	9c03      	ldr	r4, [sp, #12]
    d5c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    d5c8:	eb03 0a01 	add.w	sl, r3, r1
    d5cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d5ce:	fb0a 3a04 	mla	sl, sl, r4, r3
            writePixel(x + xo + xx, y + yo + yy, color);
    d5d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d5d4:	440b      	add	r3, r1
    d5d6:	b21b      	sxth	r3, r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    d5d8:	fa0f fa8a 	sxth.w	sl, sl
            writePixel(x + xo + xx, y + yo + yy, color);
    d5dc:	930b      	str	r3, [sp, #44]	; 0x2c
      for (xx = 0; xx < w; xx++) {
    d5de:	2400      	movs	r4, #0
    d5e0:	e005      	b.n	d5ee <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xce>
    d5e2:	3401      	adds	r4, #1
    d5e4:	b2e4      	uxtb	r4, r4
        bits <<= 1;
    d5e6:	006d      	lsls	r5, r5, #1
      for (xx = 0; xx < w; xx++) {
    d5e8:	45a0      	cmp	r8, r4
        bits <<= 1;
    d5ea:	b2ed      	uxtb	r5, r5
      for (xx = 0; xx < w; xx++) {
    d5ec:	d942      	bls.n	d674 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x154>
        if (!(bit++ & 7)) {
    d5ee:	4633      	mov	r3, r6
    d5f0:	0759      	lsls	r1, r3, #29
    d5f2:	f106 0601 	add.w	r6, r6, #1
    d5f6:	b2f6      	uxtb	r6, r6
    d5f8:	d103      	bne.n	d602 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xe2>
          bits = pgm_read_byte(&bitmap[bo++]);
    d5fa:	9905      	ldr	r1, [sp, #20]
    d5fc:	1c7b      	adds	r3, r7, #1
    d5fe:	5dcd      	ldrb	r5, [r1, r7]
    d600:	b29f      	uxth	r7, r3
        if (bits & 0x80) {
    d602:	062b      	lsls	r3, r5, #24
    d604:	d5ed      	bpl.n	d5e2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xc2>
          if (size_x == 1 && size_y == 1) {
    d606:	f1b9 0f01 	cmp.w	r9, #1
    d60a:	d01d      	beq.n	d648 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x128>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    d60c:	9b08      	ldr	r3, [sp, #32]
    d60e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
    d612:	f8df e1bc 	ldr.w	lr, [pc, #444]	; d7d0 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2b0>
    d616:	f9bd c00c 	ldrsh.w	ip, [sp, #12]
  fillRect(x, y, w, h, color);
    d61a:	f8cd c000 	str.w	ip, [sp]
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    d61e:	1919      	adds	r1, r3, r4
    d620:	9b07      	ldr	r3, [sp, #28]
    d622:	45f3      	cmp	fp, lr
    d624:	fb01 3109 	mla	r1, r1, r9, r3
    d628:	b209      	sxth	r1, r1
    d62a:	fa0f f389 	sxth.w	r3, r9
    d62e:	d135      	bne.n	d69c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x17c>
  fillRect(x, y, w, h, color);
    d630:	f8dd c018 	ldr.w	ip, [sp, #24]
    d634:	f8cd c004 	str.w	ip, [sp, #4]
    d638:	f8d2 b040 	ldr.w	fp, [r2, #64]	; 0x40
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    d63c:	9004      	str	r0, [sp, #16]
    d63e:	4652      	mov	r2, sl
    d640:	47d8      	blx	fp
    endWrite();
    d642:	9804      	ldr	r0, [sp, #16]
    d644:	6802      	ldr	r2, [r0, #0]
    d646:	e7cc      	b.n	d5e2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xc2>
          if (size_x == 1 && size_y == 1) {
    d648:	9b03      	ldr	r3, [sp, #12]
    d64a:	2b01      	cmp	r3, #1
    d64c:	d1de      	bne.n	d60c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xec>
            writePixel(x + xo + xx, y + yo + yy, color);
    d64e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d650:	9907      	ldr	r1, [sp, #28]
    d652:	f8d2 b018 	ldr.w	fp, [r2, #24]
    d656:	9004      	str	r0, [sp, #16]
    d658:	1859      	adds	r1, r3, r1
    d65a:	4b5e      	ldr	r3, [pc, #376]	; (d7d4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2b4>)
    d65c:	4421      	add	r1, r4
    d65e:	459b      	cmp	fp, r3
  drawPixel(x, y, color);
    d660:	bf08      	it	eq
    d662:	f8d2 b010 	ldreq.w	fp, [r2, #16]
            writePixel(x + xo + xx, y + yo + yy, color);
    d666:	9b06      	ldr	r3, [sp, #24]
    d668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d66a:	b209      	sxth	r1, r1
    d66c:	47d8      	blx	fp
    endWrite();
    d66e:	9804      	ldr	r0, [sp, #16]
    d670:	6802      	ldr	r2, [r0, #0]
    d672:	e7b6      	b.n	d5e2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xc2>
        if (!(bit++ & 7)) {
    d674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d676:	4443      	add	r3, r8
    d678:	b2db      	uxtb	r3, r3
    d67a:	930a      	str	r3, [sp, #40]	; 0x28
    for (yy = 0; yy < h; yy++) {
    d67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d67e:	990c      	ldr	r1, [sp, #48]	; 0x30
    d680:	3301      	adds	r3, #1
    d682:	b2db      	uxtb	r3, r3
    d684:	4299      	cmp	r1, r3
    d686:	9309      	str	r3, [sp, #36]	; 0x24
    d688:	d897      	bhi.n	d5ba <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x9a>
    d68a:	4683      	mov	fp, r0
    endWrite();
    d68c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    d68e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d690:	4293      	cmp	r3, r2
    d692:	f040 80d7 	bne.w	d844 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x324>
}
    d696:	b013      	add	sp, #76	; 0x4c
    d698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    d69c:	9a06      	ldr	r2, [sp, #24]
    d69e:	9201      	str	r2, [sp, #4]
    d6a0:	e7cc      	b.n	d63c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x11c>
    int16_t xo16 = 0, yo16 = 0;
    d6a2:	2300      	movs	r3, #0
    d6a4:	930d      	str	r3, [sp, #52]	; 0x34
    d6a6:	9308      	str	r3, [sp, #32]
    d6a8:	e76f      	b.n	d58a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6a>
    if ((x >= _width) ||              // Clip right
    d6aa:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    d6ae:	428b      	cmp	r3, r1
    d6b0:	460a      	mov	r2, r1
    d6b2:	ddf0      	ble.n	d696 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x176>
    d6b4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
    d6b8:	4553      	cmp	r3, sl
    d6ba:	ddec      	ble.n	d696 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x176>
        ((x + 6 * size_x - 1) < 0) || // Clip left
    d6bc:	9904      	ldr	r1, [sp, #16]
    d6be:	2306      	movs	r3, #6
    d6c0:	fb13 2301 	smlabb	r3, r3, r1, r2
        (y >= _height) ||             // Clip bottom
    d6c4:	2b00      	cmp	r3, #0
    d6c6:	dde6      	ble.n	d696 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x176>
        ((y + 8 * size_y - 1) < 0))   // Clip top
    d6c8:	9b03      	ldr	r3, [sp, #12]
    d6ca:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	dde1      	ble.n	d696 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x176>
    if (!_cp437 && (c >= 176))
    d6d2:	f89b 301c 	ldrb.w	r3, [fp, #28]
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	f000 80d7 	beq.w	d88a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x36a>
    startWrite();
    d6dc:	4a3b      	ldr	r2, [pc, #236]	; (d7cc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ac>)
    d6de:	f8db 3000 	ldr.w	r3, [fp]
    d6e2:	9211      	str	r2, [sp, #68]	; 0x44
    d6e4:	4611      	mov	r1, r2
    d6e6:	695a      	ldr	r2, [r3, #20]
    d6e8:	428a      	cmp	r2, r1
    d6ea:	f040 80d3 	bne.w	d894 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x374>
    d6ee:	4a3a      	ldr	r2, [pc, #232]	; (d7d8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2b8>)
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d6f0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    d6f4:	9f03      	ldr	r7, [sp, #12]
    d6f6:	910d      	str	r1, [sp, #52]	; 0x34
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    d6f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d6fc:	4422      	add	r2, r4
    d6fe:	920a      	str	r2, [sp, #40]	; 0x28
    d700:	1d4a      	adds	r2, r1, #5
    d702:	b292      	uxth	r2, r2
    d704:	920b      	str	r2, [sp, #44]	; 0x2c
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d706:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    d70a:	920c      	str	r2, [sp, #48]	; 0x30
    d70c:	9109      	str	r1, [sp, #36]	; 0x24
    d70e:	9108      	str	r1, [sp, #32]
    d710:	46d8      	mov	r8, fp
    d712:	f8cd a01c 	str.w	sl, [sp, #28]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    d716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d718:	f9bd a010 	ldrsh.w	sl, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    d71c:	f812 6b01 	ldrb.w	r6, [r2], #1
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d720:	f9bd b020 	ldrsh.w	fp, [sp, #32]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    d724:	920a      	str	r2, [sp, #40]	; 0x28
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d726:	46c1      	mov	r9, r8
    d728:	2408      	movs	r4, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    d72a:	2500      	movs	r5, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d72c:	46d0      	mov	r8, sl
    d72e:	e020      	b.n	d772 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x252>
          if (size_x == 1 && size_y == 1)
    d730:	9a04      	ldr	r2, [sp, #16]
    d732:	2a01      	cmp	r2, #1
    d734:	d036      	beq.n	d7a4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x284>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
    d736:	f8d3 a01c 	ldr.w	sl, [r3, #28]
    d73a:	9a07      	ldr	r2, [sp, #28]
    d73c:	4824      	ldr	r0, [pc, #144]	; (d7d0 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2b0>)
    d73e:	fb05 2207 	mla	r2, r5, r7, r2
    d742:	b239      	sxth	r1, r7
    d744:	4582      	cmp	sl, r0
    d746:	b212      	sxth	r2, r2
  fillRect(x, y, w, h, color);
    d748:	9100      	str	r1, [sp, #0]
    d74a:	f040 8094 	bne.w	d876 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x356>
    d74e:	9906      	ldr	r1, [sp, #24]
    d750:	9101      	str	r1, [sp, #4]
    d752:	f8d3 a040 	ldr.w	sl, [r3, #64]	; 0x40
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d756:	4643      	mov	r3, r8
    d758:	4659      	mov	r1, fp
    d75a:	4648      	mov	r0, r9
    d75c:	47d0      	blx	sl
        writeFastVLine(x + 5, y, 8, bg);
    d75e:	f8d9 3000 	ldr.w	r3, [r9]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    d762:	3c01      	subs	r4, #1
    d764:	3501      	adds	r5, #1
    d766:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    d76a:	b26d      	sxtb	r5, r5
    d76c:	ea4f 0656 	mov.w	r6, r6, lsr #1
    d770:	d034      	beq.n	d7dc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2bc>
        if (line & 1) {
    d772:	07f0      	lsls	r0, r6, #31
    d774:	d4dc      	bmi.n	d730 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x210>
        } else if (bg != color) {
    d776:	9a06      	ldr	r2, [sp, #24]
    d778:	9905      	ldr	r1, [sp, #20]
    d77a:	428a      	cmp	r2, r1
    d77c:	d0f1      	beq.n	d762 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x242>
          if (size_x == 1 && size_y == 1)
    d77e:	9a04      	ldr	r2, [sp, #16]
    d780:	2a01      	cmp	r2, #1
    d782:	d064      	beq.n	d84e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x32e>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d784:	f8d3 a01c 	ldr.w	sl, [r3, #28]
    d788:	9a07      	ldr	r2, [sp, #28]
    d78a:	4811      	ldr	r0, [pc, #68]	; (d7d0 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2b0>)
    d78c:	fb05 2207 	mla	r2, r5, r7, r2
    d790:	b239      	sxth	r1, r7
    d792:	4582      	cmp	sl, r0
    d794:	b212      	sxth	r2, r2
  fillRect(x, y, w, h, color);
    d796:	9100      	str	r1, [sp, #0]
    d798:	d170      	bne.n	d87c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x35c>
    d79a:	9905      	ldr	r1, [sp, #20]
    d79c:	9101      	str	r1, [sp, #4]
    d79e:	f8d3 a040 	ldr.w	sl, [r3, #64]	; 0x40
    d7a2:	e7d8      	b.n	d756 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x236>
          if (size_x == 1 && size_y == 1)
    d7a4:	2f01      	cmp	r7, #1
    d7a6:	d1c6      	bne.n	d736 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x216>
            writePixel(x + i, y + j, color);
    d7a8:	f8d3 a018 	ldr.w	sl, [r3, #24]
    d7ac:	9a07      	ldr	r2, [sp, #28]
    d7ae:	4809      	ldr	r0, [pc, #36]	; (d7d4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2b4>)
    d7b0:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
    d7b4:	4582      	cmp	sl, r0
    d7b6:	442a      	add	r2, r5
  drawPixel(x, y, color);
    d7b8:	bf08      	it	eq
    d7ba:	f8d3 a010 	ldreq.w	sl, [r3, #16]
            writePixel(x + i, y + j, color);
    d7be:	9b06      	ldr	r3, [sp, #24]
    d7c0:	b212      	sxth	r2, r2
    d7c2:	4648      	mov	r0, r9
    d7c4:	47d0      	blx	sl
        writeFastVLine(x + 5, y, 8, bg);
    d7c6:	f8d9 3000 	ldr.w	r3, [r9]
    d7ca:	e7ca      	b.n	d762 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x242>
    d7cc:	0000cf69 	.word	0x0000cf69
    d7d0:	0000cfa1 	.word	0x0000cfa1
    d7d4:	0000cf6d 	.word	0x0000cf6d
    d7d8:	000157c4 	.word	0x000157c4
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
    d7dc:	9a08      	ldr	r2, [sp, #32]
    d7de:	980c      	ldr	r0, [sp, #48]	; 0x30
    d7e0:	9909      	ldr	r1, [sp, #36]	; 0x24
    d7e2:	4402      	add	r2, r0
    d7e4:	b292      	uxth	r2, r2
    d7e6:	3101      	adds	r1, #1
    d7e8:	9208      	str	r2, [sp, #32]
    d7ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d7ec:	b289      	uxth	r1, r1
    d7ee:	428a      	cmp	r2, r1
    d7f0:	46c8      	mov	r8, r9
    d7f2:	9109      	str	r1, [sp, #36]	; 0x24
    d7f4:	d18f      	bne.n	d716 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1f6>
    if (bg != color) { // If opaque, draw vertical line for last column
    d7f6:	a905      	add	r1, sp, #20
    d7f8:	e891 0406 	ldmia.w	r1, {r1, r2, sl}
    d7fc:	428a      	cmp	r2, r1
    d7fe:	46cb      	mov	fp, r9
    d800:	d01b      	beq.n	d83a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x31a>
      if (size_x == 1 && size_y == 1)
    d802:	9a04      	ldr	r2, [sp, #16]
    d804:	2a01      	cmp	r2, #1
    d806:	d04a      	beq.n	d89e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x37e>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    d808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d80a:	990d      	ldr	r1, [sp, #52]	; 0x34
    d80c:	69dc      	ldr	r4, [r3, #28]
    d80e:	4e31      	ldr	r6, [pc, #196]	; (d8d4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3b4>)
    d810:	9803      	ldr	r0, [sp, #12]
    d812:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    d816:	4411      	add	r1, r2
    d818:	42b4      	cmp	r4, r6
    d81a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    d81e:	b209      	sxth	r1, r1
    d820:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    d824:	d14e      	bne.n	d8c4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3a4>
  fillRect(x, y, w, h, color);
    d826:	9805      	ldr	r0, [sp, #20]
    d828:	9001      	str	r0, [sp, #4]
    d82a:	9500      	str	r5, [sp, #0]
    d82c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    d82e:	4613      	mov	r3, r2
    d830:	4658      	mov	r0, fp
    d832:	4652      	mov	r2, sl
    d834:	47a0      	blx	r4
    endWrite();
    d836:	f8db 3000 	ldr.w	r3, [fp]
    d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d83c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d83e:	4293      	cmp	r3, r2
    d840:	f43f af29 	beq.w	d696 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x176>
    endWrite();
    d844:	4658      	mov	r0, fp
}
    d846:	b013      	add	sp, #76	; 0x4c
    d848:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
    d84c:	4718      	bx	r3
          if (size_x == 1 && size_y == 1)
    d84e:	2f01      	cmp	r7, #1
    d850:	d198      	bne.n	d784 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x264>
            writePixel(x + i, y + j, bg);
    d852:	f8d3 a018 	ldr.w	sl, [r3, #24]
    d856:	9a07      	ldr	r2, [sp, #28]
    d858:	481f      	ldr	r0, [pc, #124]	; (d8d8 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3b8>)
    d85a:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
    d85e:	4582      	cmp	sl, r0
    d860:	442a      	add	r2, r5
  drawPixel(x, y, color);
    d862:	bf08      	it	eq
    d864:	f8d3 a010 	ldreq.w	sl, [r3, #16]
            writePixel(x + i, y + j, bg);
    d868:	9b05      	ldr	r3, [sp, #20]
    d86a:	b212      	sxth	r2, r2
    d86c:	4648      	mov	r0, r9
    d86e:	47d0      	blx	sl
        writeFastVLine(x + 5, y, 8, bg);
    d870:	f8d9 3000 	ldr.w	r3, [r9]
    d874:	e775      	b.n	d762 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x242>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
    d876:	9b06      	ldr	r3, [sp, #24]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    d878:	9301      	str	r3, [sp, #4]
    d87a:	e76c      	b.n	d756 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x236>
    d87c:	9b05      	ldr	r3, [sp, #20]
    d87e:	e7fb      	b.n	d878 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x358>
    startWrite();
    d880:	4658      	mov	r0, fp
    d882:	4798      	blx	r3
    endWrite();
    d884:	f8db 2000 	ldr.w	r2, [fp]
    d888:	e688      	b.n	d59c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x7c>
    if (!_cp437 && (c >= 176))
    d88a:	2caf      	cmp	r4, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
    d88c:	bf84      	itt	hi
    d88e:	1c63      	addhi	r3, r4, #1
    d890:	b2dc      	uxtbhi	r4, r3
    d892:	e723      	b.n	d6dc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1bc>
    startWrite();
    d894:	4658      	mov	r0, fp
    d896:	4790      	blx	r2
            writePixel(x + i, y + j, color);
    d898:	f8db 3000 	ldr.w	r3, [fp]
    d89c:	e727      	b.n	d6ee <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1ce>
      if (size_x == 1 && size_y == 1)
    d89e:	9a03      	ldr	r2, [sp, #12]
    d8a0:	2a01      	cmp	r2, #1
    d8a2:	d1b1      	bne.n	d808 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2e8>
        writeFastVLine(x + 5, y, 8, bg);
    d8a4:	6a1c      	ldr	r4, [r3, #32]
    d8a6:	4a0d      	ldr	r2, [pc, #52]	; (d8dc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3bc>)
    d8a8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
    d8ac:	4294      	cmp	r4, r2
    d8ae:	d10d      	bne.n	d8cc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3ac>
  drawFastVLine(x, y, h, color);
    d8b0:	9a05      	ldr	r2, [sp, #20]
    d8b2:	9200      	str	r2, [sp, #0]
    d8b4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
        writeFastVLine(x + 5, y, 8, bg);
    d8b6:	2308      	movs	r3, #8
    d8b8:	4652      	mov	r2, sl
    d8ba:	4658      	mov	r0, fp
    d8bc:	47a0      	blx	r4
    endWrite();
    d8be:	f8db 3000 	ldr.w	r3, [fp]
    d8c2:	e7ba      	b.n	d83a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x31a>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    d8c4:	9b05      	ldr	r3, [sp, #20]
    d8c6:	9301      	str	r3, [sp, #4]
    d8c8:	9500      	str	r5, [sp, #0]
    d8ca:	e7b0      	b.n	d82e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x30e>
        writeFastVLine(x + 5, y, 8, bg);
    d8cc:	9b05      	ldr	r3, [sp, #20]
    d8ce:	9300      	str	r3, [sp, #0]
    d8d0:	e7f1      	b.n	d8b6 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x396>
    d8d2:	bf00      	nop
    d8d4:	0000cfa1 	.word	0x0000cfa1
    d8d8:	0000cf6d 	.word	0x0000cf6d
    d8dc:	0000cf79 	.word	0x0000cf79

0000d8e0 <Adafruit_GFX::write(unsigned char)>:
size_t Adafruit_GFX::write(uint8_t c) {
    d8e0:	b570      	push	{r4, r5, r6, lr}
  if (!gfxFont) { // 'Classic' built-in font
    d8e2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
    d8e4:	b084      	sub	sp, #16
    d8e6:	4604      	mov	r4, r0
    d8e8:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
    d8ea:	2a00      	cmp	r2, #0
    d8ec:	d036      	beq.n	d95c <Adafruit_GFX::write(unsigned char)+0x7c>
    if (c == '\n') {
    d8ee:	290a      	cmp	r1, #10
    d8f0:	d029      	beq.n	d946 <Adafruit_GFX::write(unsigned char)+0x66>
    } else if (c != '\r') {
    d8f2:	290d      	cmp	r1, #13
    d8f4:	d02f      	beq.n	d956 <Adafruit_GFX::write(unsigned char)+0x76>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    d8f6:	7a11      	ldrb	r1, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    d8f8:	428b      	cmp	r3, r1
    d8fa:	d32c      	bcc.n	d956 <Adafruit_GFX::write(unsigned char)+0x76>
    d8fc:	7a90      	ldrb	r0, [r2, #10]
    d8fe:	4298      	cmp	r0, r3
    d900:	d329      	bcc.n	d956 <Adafruit_GFX::write(unsigned char)+0x76>
  return gfxFont->glyph + c;
    d902:	6855      	ldr	r5, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    d904:	1a59      	subs	r1, r3, r1
  return gfxFont->glyph + c;
    d906:	b2c9      	uxtb	r1, r1
    d908:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
    d90c:	78a9      	ldrb	r1, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    d90e:	b199      	cbz	r1, d938 <Adafruit_GFX::write(unsigned char)+0x58>
    d910:	78e8      	ldrb	r0, [r5, #3]
    d912:	b188      	cbz	r0, d938 <Adafruit_GFX::write(unsigned char)+0x58>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    d914:	7ee0      	ldrb	r0, [r4, #27]
    d916:	2800      	cmp	r0, #0
    d918:	d15f      	bne.n	d9da <Adafruit_GFX::write(unsigned char)+0xfa>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    d91a:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
    d91c:	7e60      	ldrb	r0, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    d91e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
    d922:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    d926:	9003      	str	r0, [sp, #12]
    d928:	9602      	str	r6, [sp, #8]
    d92a:	8ae0      	ldrh	r0, [r4, #22]
    d92c:	9001      	str	r0, [sp, #4]
    d92e:	8aa0      	ldrh	r0, [r4, #20]
    d930:	9000      	str	r0, [sp, #0]
    d932:	4620      	mov	r0, r4
    d934:	f7ff fdf4 	bl	d520 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    d938:	7929      	ldrb	r1, [r5, #4]
        cursor_x +=
    d93a:	8a23      	ldrh	r3, [r4, #16]
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    d93c:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
    d93e:	fb01 3302 	mla	r3, r1, r2, r3
    d942:	8223      	strh	r3, [r4, #16]
    d944:	e007      	b.n	d956 <Adafruit_GFX::write(unsigned char)+0x76>
      cursor_x = 0;
    d946:	2300      	movs	r3, #0
    d948:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d94a:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
    d94c:	8a43      	ldrh	r3, [r0, #18]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d94e:	7e41      	ldrb	r1, [r0, #25]
      cursor_y +=
    d950:	fb01 3302 	mla	r3, r1, r2, r3
    d954:	8243      	strh	r3, [r0, #18]
}
    d956:	2001      	movs	r0, #1
    d958:	b004      	add	sp, #16
    d95a:	bd70      	pop	{r4, r5, r6, pc}
    if (c == '\n') {              // Newline?
    d95c:	290a      	cmp	r1, #10
    d95e:	d01c      	beq.n	d99a <Adafruit_GFX::write(unsigned char)+0xba>
    } else if (c != '\r') {       // Ignore carriage returns
    d960:	290d      	cmp	r1, #13
    d962:	d0f8      	beq.n	d956 <Adafruit_GFX::write(unsigned char)+0x76>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    d964:	7ec1      	ldrb	r1, [r0, #27]
    d966:	bb09      	cbnz	r1, d9ac <Adafruit_GFX::write(unsigned char)+0xcc>
    d968:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
    d96c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    d970:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    d972:	7e00      	ldrb	r0, [r0, #24]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    d974:	9503      	str	r5, [sp, #12]
    d976:	9002      	str	r0, [sp, #8]
    d978:	8ae0      	ldrh	r0, [r4, #22]
    d97a:	9001      	str	r0, [sp, #4]
    d97c:	8aa0      	ldrh	r0, [r4, #20]
    d97e:	9000      	str	r0, [sp, #0]
    d980:	4620      	mov	r0, r4
    d982:	f7ff fdcd 	bl	d520 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
      cursor_x += textsize_x * 6; // Advance x one char
    d986:	7e23      	ldrb	r3, [r4, #24]
    d988:	8a22      	ldrh	r2, [r4, #16]
    d98a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d98e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}
    d992:	2001      	movs	r0, #1
      cursor_x += textsize_x * 6; // Advance x one char
    d994:	8223      	strh	r3, [r4, #16]
}
    d996:	b004      	add	sp, #16
    d998:	bd70      	pop	{r4, r5, r6, pc}
      cursor_y += textsize_y * 8; // advance y one line
    d99a:	8a43      	ldrh	r3, [r0, #18]
    d99c:	7e41      	ldrb	r1, [r0, #25]
      cursor_x = 0;               // Reset x to zero,
    d99e:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
    d9a0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    d9a4:	8243      	strh	r3, [r0, #18]
}
    d9a6:	2001      	movs	r0, #1
    d9a8:	b004      	add	sp, #16
    d9aa:	bd70      	pop	{r4, r5, r6, pc}
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    d9ac:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    d9b0:	7e00      	ldrb	r0, [r0, #24]
    d9b2:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
    d9b6:	2506      	movs	r5, #6
    d9b8:	fb15 1500 	smlabb	r5, r5, r0, r1
    d9bc:	4565      	cmp	r5, ip
    d9be:	dd08      	ble.n	d9d2 <Adafruit_GFX::write(unsigned char)+0xf2>
        cursor_y += textsize_y * 8; // advance y one line
    d9c0:	7e65      	ldrb	r5, [r4, #25]
        cursor_x = 0;                                       // Reset x to zero,
    d9c2:	8222      	strh	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
    d9c4:	4611      	mov	r1, r2
    d9c6:	8a62      	ldrh	r2, [r4, #18]
    d9c8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    d9cc:	b212      	sxth	r2, r2
    d9ce:	8262      	strh	r2, [r4, #18]
    d9d0:	e7d0      	b.n	d974 <Adafruit_GFX::write(unsigned char)+0x94>
      cursor_y += textsize_y * 8; // advance y one line
    d9d2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
    d9d6:	7e65      	ldrb	r5, [r4, #25]
    d9d8:	e7cc      	b.n	d974 <Adafruit_GFX::write(unsigned char)+0x94>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    d9da:	f995 0005 	ldrsb.w	r0, [r5, #5]
    d9de:	7e26      	ldrb	r6, [r4, #24]
    d9e0:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
    d9e4:	4408      	add	r0, r1
    d9e6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
    d9ea:	fb06 1000 	mla	r0, r6, r0, r1
    d9ee:	4560      	cmp	r0, ip
    d9f0:	dc03      	bgt.n	d9fa <Adafruit_GFX::write(unsigned char)+0x11a>
      cursor_y += textsize_y * 8; // advance y one line
    d9f2:	7e60      	ldrb	r0, [r4, #25]
    d9f4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
    d9f8:	e795      	b.n	d926 <Adafruit_GFX::write(unsigned char)+0x46>
            cursor_x = 0;
    d9fa:	2100      	movs	r1, #0
    d9fc:	8221      	strh	r1, [r4, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d9fe:	f892 c00c 	ldrb.w	ip, [r2, #12]
            cursor_y += (int16_t)textsize_y *
    da02:	7e60      	ldrb	r0, [r4, #25]
    da04:	8a62      	ldrh	r2, [r4, #18]
    da06:	fb0c 2200 	mla	r2, ip, r0, r2
    da0a:	b212      	sxth	r2, r2
    da0c:	8262      	strh	r2, [r4, #18]
    da0e:	e78a      	b.n	d926 <Adafruit_GFX::write(unsigned char)+0x46>

0000da10 <Adafruit_GFX::setTextSize(unsigned char)>:
  textsize_x = (s_x > 0) ? s_x : 1;
    da10:	2901      	cmp	r1, #1
    da12:	bf38      	it	cc
    da14:	2101      	movcc	r1, #1
    da16:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
    da18:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    da1a:	4770      	bx	lr

0000da1c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    da1c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    da1e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    da22:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    da24:	4c0c      	ldr	r4, [pc, #48]	; (da58 <EventResponder::runFromInterrupt()+0x3c>)
    da26:	6820      	ldr	r0, [r4, #0]
		if (first) {
    da28:	b180      	cbz	r0, da4c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    da2a:	4e0c      	ldr	r6, [pc, #48]	; (da5c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    da2c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    da2e:	6943      	ldr	r3, [r0, #20]
    da30:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    da32:	b173      	cbz	r3, da52 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    da34:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    da36:	b902      	cbnz	r2, da3a <EventResponder::runFromInterrupt()+0x1e>
    da38:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    da3a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    da3c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    da3e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    da40:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    da44:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    da46:	6820      	ldr	r0, [r4, #0]
		if (first) {
    da48:	2800      	cmp	r0, #0
    da4a:	d1f0      	bne.n	da2e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    da4c:	b902      	cbnz	r2, da50 <EventResponder::runFromInterrupt()+0x34>
    da4e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    da50:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    da52:	6033      	str	r3, [r6, #0]
    da54:	e7ef      	b.n	da36 <EventResponder::runFromInterrupt()+0x1a>
    da56:	bf00      	nop
    da58:	1fff9cf8 	.word	0x1fff9cf8
    da5c:	1fff9cf4 	.word	0x1fff9cf4

0000da60 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    da60:	f7ff bfdc 	b.w	da1c <EventResponder::runFromInterrupt()>

0000da64 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    da64:	4a02      	ldr	r2, [pc, #8]	; (da70 <systick_isr+0xc>)
    da66:	6813      	ldr	r3, [r2, #0]
    da68:	3301      	adds	r3, #1
    da6a:	6013      	str	r3, [r2, #0]
}
    da6c:	4770      	bx	lr
    da6e:	bf00      	nop
    da70:	1fff9d70 	.word	0x1fff9d70

0000da74 <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    da74:	084b      	lsrs	r3, r1, #1
    da76:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    da7a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    da7e:	b510      	push	{r4, lr}
    da80:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    da82:	fbb3 f0f1 	udiv	r0, r3, r1
    da86:	f001 fa0d 	bl	eea4 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    da8a:	4b04      	ldr	r3, [pc, #16]	; (da9c <HardwareSerial2::begin(unsigned long)+0x28>)
    da8c:	781b      	ldrb	r3, [r3, #0]
    da8e:	b103      	cbz	r3, da92 <HardwareSerial2::begin(unsigned long)+0x1e>
}
    da90:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    da92:	4620      	mov	r0, r4
}
    da94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    da98:	f003 bb32 	b.w	11100 <HardwareSerial::addToSerialEventsList()>
    da9c:	1fff92b9 	.word	0x1fff92b9

0000daa0 <HardwareSerial2::write9bit(unsigned long)>:
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    daa0:	b508      	push	{r3, lr}
    daa2:	4608      	mov	r0, r1
    daa4:	f001 fbfc 	bl	f2a0 <serial2_putchar>
    daa8:	2001      	movs	r0, #1
    daaa:	bd08      	pop	{r3, pc}

0000daac <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    daac:	b508      	push	{r3, lr}
    daae:	4608      	mov	r0, r1
    dab0:	f001 fbf6 	bl	f2a0 <serial2_putchar>
    dab4:	2001      	movs	r0, #1
    dab6:	bd08      	pop	{r3, pc}

0000dab8 <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    dab8:	b538      	push	{r3, r4, r5, lr}
    daba:	4608      	mov	r0, r1
    dabc:	460d      	mov	r5, r1
    dabe:	f004 fe7f 	bl	127c0 <strlen>
    dac2:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    dac4:	4601      	mov	r1, r0
    dac6:	4628      	mov	r0, r5
    dac8:	f001 fc66 	bl	f398 <serial2_write>
					  return len; }
    dacc:	4620      	mov	r0, r4
    dace:	bd38      	pop	{r3, r4, r5, pc}

0000dad0 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    dad0:	b510      	push	{r4, lr}
    dad2:	4608      	mov	r0, r1
    dad4:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    dad6:	4611      	mov	r1, r2
    dad8:	f001 fc5e 	bl	f398 <serial2_write>
    dadc:	4620      	mov	r0, r4
    dade:	bd10      	pop	{r4, pc}

0000dae0 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    dae0:	4608      	mov	r0, r1
    dae2:	4611      	mov	r1, r2
    dae4:	f001 be86 	b.w	f7f4 <serial2_add_memory_for_write>

0000dae8 <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    dae8:	4608      	mov	r0, r1
    daea:	4611      	mov	r1, r2
    daec:	f001 be66 	b.w	f7bc <serial2_add_memory_for_read>

0000daf0 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    daf0:	f001 bd7e 	b.w	f5f0 <serial2_clear>

0000daf4 <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    daf4:	b508      	push	{r3, lr}
    daf6:	4608      	mov	r0, r1
    daf8:	f001 fbb2 	bl	f260 <serial2_set_cts>
    dafc:	3800      	subs	r0, #0
    dafe:	bf18      	it	ne
    db00:	2001      	movne	r0, #1
    db02:	bd08      	pop	{r3, pc}

0000db04 <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    db04:	b508      	push	{r3, lr}
    db06:	4608      	mov	r0, r1
    db08:	f001 fb88 	bl	f21c <serial2_set_rts>
    db0c:	3800      	subs	r0, #0
    db0e:	bf18      	it	ne
    db10:	2001      	movne	r0, #1
    db12:	bd08      	pop	{r3, pc}

0000db14 <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    db14:	4608      	mov	r0, r1
    db16:	4611      	mov	r1, r2
    db18:	f001 bb14 	b.w	f144 <serial2_set_tx>

0000db1c <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    db1c:	4608      	mov	r0, r1
    db1e:	f001 bb4f 	b.w	f1c0 <serial2_set_rx>
    db22:	bf00      	nop

0000db24 <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    db24:	4608      	mov	r0, r1
    db26:	f001 baf1 	b.w	f10c <serial2_set_transmit_pin>
    db2a:	bf00      	nop

0000db2c <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    db2c:	f001 ba86 	b.w	f03c <serial2_end>

0000db30 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    db30:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    db32:	084b      	lsrs	r3, r1, #1
    db34:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    db38:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    db3a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    db3e:	fbb3 f0f1 	udiv	r0, r3, r1
    db42:	f001 f9af 	bl	eea4 <serial2_begin>
					  serial2_format(format); }
    db46:	4620      	mov	r0, r4
    db48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db4c:	f001 ba18 	b.w	ef80 <serial2_format>

0000db50 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    db50:	f001 bd28 	b.w	f5a4 <serial2_peek>

0000db54 <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    db54:	f001 bce0 	b.w	f518 <serial2_getchar>

0000db58 <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    db58:	f001 bcca 	b.w	f4f0 <serial2_available>

0000db5c <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    db5c:	f001 bca4 	b.w	f4a8 <serial2_flush>

0000db60 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    db60:	f001 bcae 	b.w	f4c0 <serial2_write_buffer_free>

0000db64 <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    db64:	6803      	ldr	r3, [r0, #0]
    db66:	4a06      	ldr	r2, [pc, #24]	; (db80 <HardwareSerial2::write(int)+0x1c>)
    db68:	681b      	ldr	r3, [r3, #0]
    db6a:	4293      	cmp	r3, r2
    db6c:	d105      	bne.n	db7a <HardwareSerial2::write(int)+0x16>
    db6e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    db70:	b2c8      	uxtb	r0, r1
    db72:	f001 fb95 	bl	f2a0 <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    db76:	2001      	movs	r0, #1
    db78:	bd10      	pop	{r4, pc}
    db7a:	b2c9      	uxtb	r1, r1
    db7c:	4718      	bx	r3
    db7e:	bf00      	nop
    db80:	0000daad 	.word	0x0000daad

0000db84 <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    db84:	6803      	ldr	r3, [r0, #0]
    db86:	4a06      	ldr	r2, [pc, #24]	; (dba0 <HardwareSerial2::write(unsigned long)+0x1c>)
    db88:	681b      	ldr	r3, [r3, #0]
    db8a:	4293      	cmp	r3, r2
    db8c:	d105      	bne.n	db9a <HardwareSerial2::write(unsigned long)+0x16>
    db8e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    db90:	b2c8      	uxtb	r0, r1
    db92:	f001 fb85 	bl	f2a0 <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    db96:	2001      	movs	r0, #1
    db98:	bd10      	pop	{r4, pc}
    db9a:	b2c9      	uxtb	r1, r1
    db9c:	4718      	bx	r3
    db9e:	bf00      	nop
    dba0:	0000daad 	.word	0x0000daad

0000dba4 <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    dba4:	6803      	ldr	r3, [r0, #0]
    dba6:	4a06      	ldr	r2, [pc, #24]	; (dbc0 <HardwareSerial2::write(long)+0x1c>)
    dba8:	681b      	ldr	r3, [r3, #0]
    dbaa:	4293      	cmp	r3, r2
    dbac:	d105      	bne.n	dbba <HardwareSerial2::write(long)+0x16>
    dbae:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    dbb0:	b2c8      	uxtb	r0, r1
    dbb2:	f001 fb75 	bl	f2a0 <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    dbb6:	2001      	movs	r0, #1
    dbb8:	bd10      	pop	{r4, pc}
    dbba:	b2c9      	uxtb	r1, r1
    dbbc:	4718      	bx	r3
    dbbe:	bf00      	nop
    dbc0:	0000daad 	.word	0x0000daad

0000dbc4 <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    dbc4:	6803      	ldr	r3, [r0, #0]
    dbc6:	4a06      	ldr	r2, [pc, #24]	; (dbe0 <HardwareSerial2::write(unsigned int)+0x1c>)
    dbc8:	681b      	ldr	r3, [r3, #0]
    dbca:	4293      	cmp	r3, r2
    dbcc:	d105      	bne.n	dbda <HardwareSerial2::write(unsigned int)+0x16>
    dbce:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    dbd0:	b2c8      	uxtb	r0, r1
    dbd2:	f001 fb65 	bl	f2a0 <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    dbd6:	2001      	movs	r0, #1
    dbd8:	bd10      	pop	{r4, pc}
    dbda:	b2c9      	uxtb	r1, r1
    dbdc:	4718      	bx	r3
    dbde:	bf00      	nop
    dbe0:	0000daad 	.word	0x0000daad

0000dbe4 <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    dbe4:	084b      	lsrs	r3, r1, #1
    dbe6:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    dbea:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    dbee:	b510      	push	{r4, lr}
    dbf0:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    dbf2:	fbb3 f0f1 	udiv	r0, r3, r1
    dbf6:	f001 fe83 	bl	f900 <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    dbfa:	4b04      	ldr	r3, [pc, #16]	; (dc0c <HardwareSerial3::begin(unsigned long)+0x28>)
    dbfc:	781b      	ldrb	r3, [r3, #0]
    dbfe:	b103      	cbz	r3, dc02 <HardwareSerial3::begin(unsigned long)+0x1e>
}
    dc00:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    dc02:	4620      	mov	r0, r4
}
    dc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    dc08:	f003 ba7a 	b.w	11100 <HardwareSerial::addToSerialEventsList()>
    dc0c:	1fff92ba 	.word	0x1fff92ba

0000dc10 <HardwareSerial3::write9bit(unsigned long)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    dc10:	b508      	push	{r3, lr}
    dc12:	4608      	mov	r0, r1
    dc14:	f001 ffe0 	bl	fbd8 <serial3_putchar>
    dc18:	2001      	movs	r0, #1
    dc1a:	bd08      	pop	{r3, pc}

0000dc1c <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    dc1c:	b508      	push	{r3, lr}
    dc1e:	4608      	mov	r0, r1
    dc20:	f001 ffda 	bl	fbd8 <serial3_putchar>
    dc24:	2001      	movs	r0, #1
    dc26:	bd08      	pop	{r3, pc}

0000dc28 <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    dc28:	b538      	push	{r3, r4, r5, lr}
    dc2a:	4608      	mov	r0, r1
    dc2c:	460d      	mov	r5, r1
    dc2e:	f004 fdc7 	bl	127c0 <strlen>
    dc32:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    dc34:	4601      	mov	r1, r0
    dc36:	4628      	mov	r0, r5
    dc38:	f001 ffd8 	bl	fbec <serial3_write>
					  return len; }
    dc3c:	4620      	mov	r0, r4
    dc3e:	bd38      	pop	{r3, r4, r5, pc}

0000dc40 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    dc40:	b510      	push	{r4, lr}
    dc42:	4608      	mov	r0, r1
    dc44:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    dc46:	4611      	mov	r1, r2
    dc48:	f001 ffd0 	bl	fbec <serial3_write>
    dc4c:	4620      	mov	r0, r4
    dc4e:	bd10      	pop	{r4, pc}

0000dc50 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    dc50:	4608      	mov	r0, r1
    dc52:	4611      	mov	r1, r2
    dc54:	f002 b944 	b.w	fee0 <serial3_add_memory_for_write>

0000dc58 <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    dc58:	4608      	mov	r0, r1
    dc5a:	4611      	mov	r1, r2
    dc5c:	f002 b924 	b.w	fea8 <serial3_add_memory_for_read>

0000dc60 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    dc60:	f002 b87c 	b.w	fd5c <serial3_clear>

0000dc64 <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    dc64:	b508      	push	{r3, lr}
    dc66:	4608      	mov	r0, r1
    dc68:	f001 ff96 	bl	fb98 <serial3_set_cts>
    dc6c:	3800      	subs	r0, #0
    dc6e:	bf18      	it	ne
    dc70:	2001      	movne	r0, #1
    dc72:	bd08      	pop	{r3, pc}

0000dc74 <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    dc74:	b508      	push	{r3, lr}
    dc76:	4608      	mov	r0, r1
    dc78:	f001 ff6c 	bl	fb54 <serial3_set_rts>
    dc7c:	3800      	subs	r0, #0
    dc7e:	bf18      	it	ne
    dc80:	2001      	movne	r0, #1
    dc82:	bd08      	pop	{r3, pc}

0000dc84 <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    dc84:	4608      	mov	r0, r1
    dc86:	4611      	mov	r1, r2
    dc88:	f001 bf36 	b.w	faf8 <serial3_set_tx>

0000dc8c <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    dc8c:	4608      	mov	r0, r1
    dc8e:	f001 bf5f 	b.w	fb50 <serial3_set_rx>
    dc92:	bf00      	nop

0000dc94 <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    dc94:	4608      	mov	r0, r1
    dc96:	f001 bf13 	b.w	fac0 <serial3_set_transmit_pin>
    dc9a:	bf00      	nop

0000dc9c <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    dc9c:	f001 beda 	b.w	fa54 <serial3_end>

0000dca0 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    dca0:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    dca2:	084b      	lsrs	r3, r1, #1
    dca4:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    dca8:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    dcaa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    dcae:	fbb3 f0f1 	udiv	r0, r3, r1
    dcb2:	f001 fe25 	bl	f900 <serial3_begin>
					  serial3_format(format); }
    dcb6:	4620      	mov	r0, r4
    dcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcbc:	f001 be6c 	b.w	f998 <serial3_format>

0000dcc0 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    dcc0:	f002 b826 	b.w	fd10 <serial3_peek>

0000dcc4 <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    dcc4:	f001 bfde 	b.w	fc84 <serial3_getchar>

0000dcc8 <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    dcc8:	f001 bfc8 	b.w	fc5c <serial3_available>

0000dccc <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    dccc:	f001 bfa2 	b.w	fc14 <serial3_flush>

0000dcd0 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    dcd0:	f001 bfac 	b.w	fc2c <serial3_write_buffer_free>

0000dcd4 <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    dcd4:	6803      	ldr	r3, [r0, #0]
    dcd6:	4a06      	ldr	r2, [pc, #24]	; (dcf0 <HardwareSerial3::write(int)+0x1c>)
    dcd8:	681b      	ldr	r3, [r3, #0]
    dcda:	4293      	cmp	r3, r2
    dcdc:	d105      	bne.n	dcea <HardwareSerial3::write(int)+0x16>
    dcde:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    dce0:	b2c8      	uxtb	r0, r1
    dce2:	f001 ff79 	bl	fbd8 <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    dce6:	2001      	movs	r0, #1
    dce8:	bd10      	pop	{r4, pc}
    dcea:	b2c9      	uxtb	r1, r1
    dcec:	4718      	bx	r3
    dcee:	bf00      	nop
    dcf0:	0000dc1d 	.word	0x0000dc1d

0000dcf4 <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    dcf4:	6803      	ldr	r3, [r0, #0]
    dcf6:	4a06      	ldr	r2, [pc, #24]	; (dd10 <HardwareSerial3::write(unsigned long)+0x1c>)
    dcf8:	681b      	ldr	r3, [r3, #0]
    dcfa:	4293      	cmp	r3, r2
    dcfc:	d105      	bne.n	dd0a <HardwareSerial3::write(unsigned long)+0x16>
    dcfe:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    dd00:	b2c8      	uxtb	r0, r1
    dd02:	f001 ff69 	bl	fbd8 <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    dd06:	2001      	movs	r0, #1
    dd08:	bd10      	pop	{r4, pc}
    dd0a:	b2c9      	uxtb	r1, r1
    dd0c:	4718      	bx	r3
    dd0e:	bf00      	nop
    dd10:	0000dc1d 	.word	0x0000dc1d

0000dd14 <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    dd14:	6803      	ldr	r3, [r0, #0]
    dd16:	4a06      	ldr	r2, [pc, #24]	; (dd30 <HardwareSerial3::write(long)+0x1c>)
    dd18:	681b      	ldr	r3, [r3, #0]
    dd1a:	4293      	cmp	r3, r2
    dd1c:	d105      	bne.n	dd2a <HardwareSerial3::write(long)+0x16>
    dd1e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    dd20:	b2c8      	uxtb	r0, r1
    dd22:	f001 ff59 	bl	fbd8 <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    dd26:	2001      	movs	r0, #1
    dd28:	bd10      	pop	{r4, pc}
    dd2a:	b2c9      	uxtb	r1, r1
    dd2c:	4718      	bx	r3
    dd2e:	bf00      	nop
    dd30:	0000dc1d 	.word	0x0000dc1d

0000dd34 <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    dd34:	6803      	ldr	r3, [r0, #0]
    dd36:	4a06      	ldr	r2, [pc, #24]	; (dd50 <HardwareSerial3::write(unsigned int)+0x1c>)
    dd38:	681b      	ldr	r3, [r3, #0]
    dd3a:	4293      	cmp	r3, r2
    dd3c:	d105      	bne.n	dd4a <HardwareSerial3::write(unsigned int)+0x16>
    dd3e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    dd40:	b2c8      	uxtb	r0, r1
    dd42:	f001 ff49 	bl	fbd8 <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    dd46:	2001      	movs	r0, #1
    dd48:	bd10      	pop	{r4, pc}
    dd4a:	b2c9      	uxtb	r1, r1
    dd4c:	4718      	bx	r3
    dd4e:	bf00      	nop
    dd50:	0000dc1d 	.word	0x0000dc1d

0000dd54 <dummy_funct()>:
}
#endif

static void dummy_funct(void)
{
}
    dd54:	4770      	bx	lr
    dd56:	bf00      	nop

0000dd58 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
    dd58:	4770      	bx	lr
    dd5a:	bf00      	nop

0000dd5c <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    dd5c:	4770      	bx	lr
    dd5e:	bf00      	nop

0000dd60 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    dd60:	4770      	bx	lr
    dd62:	bf00      	nop

0000dd64 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    dd64:	4770      	bx	lr
    dd66:	bf00      	nop

0000dd68 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] = {dummy_funct, dummy_funct, dummy_funct, dummy_funct};
    dd68:	b538      	push	{r3, r4, r5, lr}
    dd6a:	4c06      	ldr	r4, [pc, #24]	; (dd84 <__tcf_0+0x1c>)
    dd6c:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    dd70:	f854 3c08 	ldr.w	r3, [r4, #-8]
    dd74:	4620      	mov	r0, r4
    dd76:	68db      	ldr	r3, [r3, #12]
    dd78:	3c18      	subs	r4, #24
    dd7a:	4798      	blx	r3
    dd7c:	42ac      	cmp	r4, r5
    dd7e:	d1f7      	bne.n	dd70 <__tcf_0+0x8>
    dd80:	bd38      	pop	{r3, r4, r5, pc}
    dd82:	bf00      	nop
    dd84:	1fff9d58 	.word	0x1fff9d58

0000dd88 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
{
    dd88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (channel) {
    dd8c:	6803      	ldr	r3, [r0, #0]
{
    dd8e:	b087      	sub	sp, #28
    dd90:	4604      	mov	r4, r0
    dd92:	4690      	mov	r8, r2
	if (channel) {
    dd94:	2b00      	cmp	r3, #0
    dd96:	d03e      	beq.n	de16 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x8e>
		channel->TCTRL = 0;
    dd98:	2200      	movs	r2, #0
    dd9a:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
    dd9c:	2201      	movs	r2, #1
    dd9e:	60da      	str	r2, [r3, #12]
	int index = channel - KINETISK_PIT_CHANNELS;
    dda0:	4d29      	ldr	r5, [pc, #164]	; (de48 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>)
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    dda2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; de4c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc4>
    dda6:	441d      	add	r5, r3
    dda8:	112d      	asrs	r5, r5, #4
        vtable_ptr_{other.vtable_ptr_}
    ddaa:	f851 3b08 	ldr.w	r3, [r1], #8
    ddae:	9300      	str	r3, [sp, #0]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    ddb0:	eb05 0645 	add.w	r6, r5, r5, lsl #1
    ddb4:	00f6      	lsls	r6, r6, #3
        vtable_ptr_->copy_ptr(
    ddb6:	a802      	add	r0, sp, #8
    ddb8:	685b      	ldr	r3, [r3, #4]
    ddba:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    ddbc:	f106 0708 	add.w	r7, r6, #8
    ddc0:	f859 3006 	ldr.w	r3, [r9, r6]
    ddc4:	444f      	add	r7, r9
    ddc6:	4638      	mov	r0, r7
    ddc8:	68db      	ldr	r3, [r3, #12]
    ddca:	4798      	blx	r3
  template <typename _Tp, typename _Up = _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
    ddcc:	9b00      	ldr	r3, [sp, #0]
      __obj = std::forward<_Up>(__new_val);
    ddce:	4a20      	ldr	r2, [pc, #128]	; (de50 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc8>)
    ddd0:	9200      	str	r2, [sp, #0]
        vtable_ptr_->relocate_ptr(
    ddd2:	a902      	add	r1, sp, #8
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
    ddd4:	f849 3006 	str.w	r3, [r9, r6]
        vtable_ptr_->relocate_ptr(
    ddd8:	4638      	mov	r0, r7
    ddda:	689b      	ldr	r3, [r3, #8]
    dddc:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    ddde:	9b00      	ldr	r3, [sp, #0]
    dde0:	a802      	add	r0, sp, #8
    dde2:	68db      	ldr	r3, [r3, #12]
    dde4:	4798      	blx	r3
	channel->LDVAL = cycles;
    dde6:	6823      	ldr	r3, [r4, #0]
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
    dde8:	491a      	ldr	r1, [pc, #104]	; (de54 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xcc>)
	channel->LDVAL = cycles;
    ddea:	f8c3 8000 	str.w	r8, [r3]
	channel->TCTRL = 3;
    ddee:	2203      	movs	r2, #3
    ddf0:	609a      	str	r2, [r3, #8]
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    ddf2:	f105 0244 	add.w	r2, r5, #68	; 0x44
    ddf6:	1153      	asrs	r3, r2, #5
    ddf8:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
    ddfc:	7920      	ldrb	r0, [r4, #4]
    ddfe:	5468      	strb	r0, [r5, r1]
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    de00:	3340      	adds	r3, #64	; 0x40
    de02:	2001      	movs	r0, #1
    de04:	009b      	lsls	r3, r3, #2
    de06:	f002 021f 	and.w	r2, r2, #31
    de0a:	fa00 f202 	lsl.w	r2, r0, r2
    de0e:	601a      	str	r2, [r3, #0]
}
    de10:	b007      	add	sp, #28
    de12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		SIM_SCGC6 |= SIM_SCGC6_PIT;
    de16:	4a10      	ldr	r2, [pc, #64]	; (de58 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xd0>)
    de18:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    de1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    de1e:	63d3      	str	r3, [r2, #60]	; 0x3c
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
    de20:	bf00      	nop
		PIT_MCR = 1;
    de22:	4b0e      	ldr	r3, [pc, #56]	; (de5c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xd4>)
    de24:	2201      	movs	r2, #1
    de26:	601a      	str	r2, [r3, #0]
		channel = KINETISK_PIT_CHANNELS;
    de28:	f503 7380 	add.w	r3, r3, #256	; 0x100
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    de2c:	4a0c      	ldr	r2, [pc, #48]	; (de60 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xd8>)
		channel = KINETISK_PIT_CHANNELS;
    de2e:	6003      	str	r3, [r0, #0]
			if (channel->TCTRL == 0) break;
    de30:	6898      	ldr	r0, [r3, #8]
    de32:	2800      	cmp	r0, #0
    de34:	d0b4      	beq.n	dda0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    de36:	3310      	adds	r3, #16
    de38:	4293      	cmp	r3, r2
    de3a:	6023      	str	r3, [r4, #0]
    de3c:	d1f8      	bne.n	de30 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
				channel = NULL;
    de3e:	2000      	movs	r0, #0
    de40:	6020      	str	r0, [r4, #0]
}
    de42:	b007      	add	sp, #28
    de44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    de48:	bffc8f00 	.word	0xbffc8f00
    de4c:	1fff9d08 	.word	0x1fff9d08
    de50:	00015df0 	.word	0x00015df0
    de54:	e000e444 	.word	0xe000e444
    de58:	40048000 	.word	0x40048000
    de5c:	40037000 	.word	0x40037000
    de60:	40037140 	.word	0x40037140

0000de64 <IntervalTimer::end()>:
	if (channel) {
    de64:	6803      	ldr	r3, [r0, #0]
    de66:	2b00      	cmp	r3, #0
    de68:	d03d      	beq.n	dee6 <IntervalTimer::end()+0x82>
void IntervalTimer::end() {
    de6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		int index = channel - KINETISK_PIT_CHANNELS;
    de6e:	4c1e      	ldr	r4, [pc, #120]	; (dee8 <IntervalTimer::end()+0x84>)
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    de70:	f8df 9078 	ldr.w	r9, [pc, #120]	; deec <IntervalTimer::end()+0x88>
        vtable_ptr_ = std::addressof(vt);
    de74:	4a1e      	ldr	r2, [pc, #120]	; (def0 <IntervalTimer::end()+0x8c>)
    de76:	441c      	add	r4, r3
    de78:	1124      	asrs	r4, r4, #4
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    de7a:	f104 0644 	add.w	r6, r4, #68	; 0x44
    de7e:	1173      	asrs	r3, r6, #5
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    de80:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    de84:	00e4      	lsls	r4, r4, #3
    de86:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
void IntervalTimer::end() {
    de8a:	b086      	sub	sp, #24
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    de8c:	3360      	adds	r3, #96	; 0x60
    de8e:	009f      	lsls	r7, r3, #2
    de90:	f04f 0a01 	mov.w	sl, #1
    de94:	f859 3004 	ldr.w	r3, [r9, r4]
        vtable_ptr_ = std::addressof(vt);
    de98:	9200      	str	r2, [sp, #0]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    de9a:	f104 0808 	add.w	r8, r4, #8
    de9e:	f006 061f 	and.w	r6, r6, #31
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    dea2:	4a14      	ldr	r2, [pc, #80]	; (def4 <IntervalTimer::end()+0x90>)
    dea4:	9202      	str	r2, [sp, #8]
    dea6:	fa0a f606 	lsl.w	r6, sl, r6
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    deaa:	44c8      	add	r8, r9
    deac:	4605      	mov	r5, r0
    deae:	68db      	ldr	r3, [r3, #12]
    deb0:	603e      	str	r6, [r7, #0]
    deb2:	4640      	mov	r0, r8
    deb4:	4798      	blx	r3
      _Tp __old_val = std::move(__obj);
    deb6:	9b00      	ldr	r3, [sp, #0]
      __obj = std::forward<_Up>(__new_val);
    deb8:	4a0f      	ldr	r2, [pc, #60]	; (def8 <IntervalTimer::end()+0x94>)
    deba:	9200      	str	r2, [sp, #0]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
    debc:	f849 3004 	str.w	r3, [r9, r4]
        vtable_ptr_->relocate_ptr(
    dec0:	4640      	mov	r0, r8
    dec2:	a902      	add	r1, sp, #8
    dec4:	689b      	ldr	r3, [r3, #8]
    dec6:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    dec8:	9b00      	ldr	r3, [sp, #0]
    deca:	a802      	add	r0, sp, #8
    decc:	68db      	ldr	r3, [r3, #12]
    dece:	4798      	blx	r3
		channel->TCTRL = 0;
    ded0:	682a      	ldr	r2, [r5, #0]
    ded2:	2300      	movs	r3, #0
    ded4:	6093      	str	r3, [r2, #8]
		channel->TFLG = 1;
    ded6:	f8c2 a00c 	str.w	sl, [r2, #12]
		NVIC_CLEAR_PENDING(IRQ_PIT_CH0 + index);
    deda:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
		channel = 0;
    dede:	602b      	str	r3, [r5, #0]
}
    dee0:	b006      	add	sp, #24
    dee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dee6:	4770      	bx	lr
    dee8:	bffc8f00 	.word	0xbffc8f00
    deec:	1fff9d08 	.word	0x1fff9d08
    def0:	00012c18 	.word	0x00012c18
    def4:	0000dd55 	.word	0x0000dd55
    def8:	00015df0 	.word	0x00015df0

0000defc <pit0_isr>:
    }

    R operator() (Args... args) const
    {
        return vtable_ptr_->invoke_ptr(
    defc:	4804      	ldr	r0, [pc, #16]	; (df10 <pit0_isr+0x14>)
	PIT_TFLG0 = 1;
    defe:	4a05      	ldr	r2, [pc, #20]	; (df14 <pit0_isr+0x18>)
    df00:	f850 3b08 	ldr.w	r3, [r0], #8
    df04:	2101      	movs	r1, #1
    df06:	681b      	ldr	r3, [r3, #0]
    df08:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
    df0c:	4718      	bx	r3
    df0e:	bf00      	nop
    df10:	1fff9d08 	.word	0x1fff9d08
    df14:	40037000 	.word	0x40037000

0000df18 <pit1_isr>:
    df18:	4804      	ldr	r0, [pc, #16]	; (df2c <pit1_isr+0x14>)
	PIT_TFLG1 = 1;
    df1a:	4a05      	ldr	r2, [pc, #20]	; (df30 <pit1_isr+0x18>)
    df1c:	6983      	ldr	r3, [r0, #24]
    df1e:	2101      	movs	r1, #1
    df20:	681b      	ldr	r3, [r3, #0]
    df22:	f8c2 111c 	str.w	r1, [r2, #284]	; 0x11c
    df26:	3020      	adds	r0, #32
    df28:	4718      	bx	r3
    df2a:	bf00      	nop
    df2c:	1fff9d08 	.word	0x1fff9d08
    df30:	40037000 	.word	0x40037000

0000df34 <pit2_isr>:
    df34:	4804      	ldr	r0, [pc, #16]	; (df48 <pit2_isr+0x14>)
	PIT_TFLG2 = 1;
    df36:	4a05      	ldr	r2, [pc, #20]	; (df4c <pit2_isr+0x18>)
    df38:	6b03      	ldr	r3, [r0, #48]	; 0x30
    df3a:	2101      	movs	r1, #1
    df3c:	681b      	ldr	r3, [r3, #0]
    df3e:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
    df42:	3038      	adds	r0, #56	; 0x38
    df44:	4718      	bx	r3
    df46:	bf00      	nop
    df48:	1fff9d08 	.word	0x1fff9d08
    df4c:	40037000 	.word	0x40037000

0000df50 <pit3_isr>:
    df50:	4804      	ldr	r0, [pc, #16]	; (df64 <pit3_isr+0x14>)
	PIT_TFLG3 = 1;
    df52:	4a05      	ldr	r2, [pc, #20]	; (df68 <pit3_isr+0x18>)
    df54:	6c83      	ldr	r3, [r0, #72]	; 0x48
    df56:	2101      	movs	r1, #1
    df58:	681b      	ldr	r3, [r3, #0]
    df5a:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    df5e:	3050      	adds	r0, #80	; 0x50
    df60:	4718      	bx	r3
    df62:	bf00      	nop
    df64:	1fff9d08 	.word	0x1fff9d08
    df68:	40037000 	.word	0x40037000

0000df6c <_GLOBAL__sub_I__ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm>:
        vtable_ptr_ = std::addressof(vt);
    df6c:	4b08      	ldr	r3, [pc, #32]	; (df90 <_GLOBAL__sub_I__ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm+0x24>)
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    df6e:	4809      	ldr	r0, [pc, #36]	; (df94 <_GLOBAL__sub_I__ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm+0x28>)
static IntervalTimer::callback_t funct_table[4] = {dummy_funct, dummy_funct, dummy_funct, dummy_funct};
    df70:	4a09      	ldr	r2, [pc, #36]	; (df98 <_GLOBAL__sub_I__ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm+0x2c>)
    df72:	490a      	ldr	r1, [pc, #40]	; (df9c <_GLOBAL__sub_I__ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm+0x30>)
}
    df74:	b410      	push	{r4}
        vtable_ptr_ = std::addressof(vt);
    df76:	4c0a      	ldr	r4, [pc, #40]	; (dfa0 <_GLOBAL__sub_I__ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm+0x34>)
    df78:	601c      	str	r4, [r3, #0]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    df7a:	6098      	str	r0, [r3, #8]
        vtable_ptr_ = std::addressof(vt);
    df7c:	619c      	str	r4, [r3, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    df7e:	6218      	str	r0, [r3, #32]
        vtable_ptr_ = std::addressof(vt);
    df80:	631c      	str	r4, [r3, #48]	; 0x30
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    df82:	6398      	str	r0, [r3, #56]	; 0x38
        vtable_ptr_ = std::addressof(vt);
    df84:	649c      	str	r4, [r3, #72]	; 0x48
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    df86:	6518      	str	r0, [r3, #80]	; 0x50
    df88:	bc10      	pop	{r4}
static IntervalTimer::callback_t funct_table[4] = {dummy_funct, dummy_funct, dummy_funct, dummy_funct};
    df8a:	2000      	movs	r0, #0
    df8c:	f003 ba92 	b.w	114b4 <__aeabi_atexit>
    df90:	1fff9d08 	.word	0x1fff9d08
    df94:	0000dd55 	.word	0x0000dd55
    df98:	1fff8d34 	.word	0x1fff8d34
    df9c:	0000dd69 	.word	0x0000dd69
    dfa0:	00012c18 	.word	0x00012c18

0000dfa4 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    dfa6:	460c      	mov	r4, r1
    dfa8:	b171      	cbz	r1, dfc8 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    dfaa:	b182      	cbz	r2, dfce <Print::write(unsigned char const*, unsigned int)+0x2a>
    dfac:	4606      	mov	r6, r0
    dfae:	188f      	adds	r7, r1, r2
	size_t count = 0;
    dfb0:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    dfb2:	6833      	ldr	r3, [r6, #0]
    dfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
    dfb8:	681b      	ldr	r3, [r3, #0]
    dfba:	4630      	mov	r0, r6
    dfbc:	4798      	blx	r3
    dfbe:	42bc      	cmp	r4, r7
    dfc0:	4405      	add	r5, r0
    dfc2:	d1f6      	bne.n	dfb2 <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    dfc4:	4628      	mov	r0, r5
    dfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    dfc8:	460d      	mov	r5, r1
}
    dfca:	4628      	mov	r0, r5
    dfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    dfce:	4615      	mov	r5, r2
    dfd0:	e7f8      	b.n	dfc4 <Print::write(unsigned char const*, unsigned int)+0x20>
    dfd2:	bf00      	nop

0000dfd4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    dfd4:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    dfd6:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    dfd8:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    dfda:	bf08      	it	eq
    dfdc:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    dfde:	b3a1      	cbz	r1, e04a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    dfe0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    dfe4:	e002      	b.n	dfec <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    dfe6:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    dfea:	4629      	mov	r1, r5
			digit = n % base;
    dfec:	fbb1 f5f2 	udiv	r5, r1, r2
    dff0:	fb02 1415 	mls	r4, r2, r5, r1
    dff4:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    dff8:	2c09      	cmp	r4, #9
    dffa:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    dffe:	bf98      	it	ls
    e000:	fa5f fc84 	uxtbls.w	ip, r4
    e004:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    e008:	bf88      	it	hi
    e00a:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    e00e:	446c      	add	r4, sp
    e010:	bf88      	it	hi
    e012:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    e016:	4291      	cmp	r1, r2
			i--;
    e018:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e01c:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    e020:	d2e1      	bcs.n	dfe6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    e022:	b14b      	cbz	r3, e038 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    e024:	f10e 3eff 	add.w	lr, lr, #4294967295
    e028:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    e02c:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    e030:	446b      	add	r3, sp
    e032:	222d      	movs	r2, #45	; 0x2d
    e034:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    e038:	6803      	ldr	r3, [r0, #0]
    e03a:	a901      	add	r1, sp, #4
    e03c:	685b      	ldr	r3, [r3, #4]
    e03e:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    e042:	4471      	add	r1, lr
    e044:	4798      	blx	r3
}
    e046:	b00a      	add	sp, #40	; 0x28
    e048:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    e04a:	2230      	movs	r2, #48	; 0x30
    e04c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    e050:	f04f 0e21 	mov.w	lr, #33	; 0x21
    e054:	e7e5      	b.n	e022 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    e056:	bf00      	nop

0000e058 <Print::print(long)>:
	if (n < 0) {
    e058:	2900      	cmp	r1, #0
		n = -n;
    e05a:	bfba      	itte	lt
    e05c:	4249      	neglt	r1, r1
		sign = '-';
    e05e:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    e060:	2300      	movge	r3, #0
	if (base == 0) {
    e062:	220a      	movs	r2, #10
    e064:	f7ff bfb6 	b.w	dfd4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000e068 <Print::println()>:
{
    e068:	b500      	push	{lr}
	return write(buf, 2);
    e06a:	6803      	ldr	r3, [r0, #0]
{
    e06c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    e06e:	f640 220d 	movw	r2, #2573	; 0xa0d
    e072:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    e076:	685b      	ldr	r3, [r3, #4]
    e078:	2202      	movs	r2, #2
    e07a:	a901      	add	r1, sp, #4
    e07c:	4798      	blx	r3
}
    e07e:	b003      	add	sp, #12
    e080:	f85d fb04 	ldr.w	pc, [sp], #4

0000e084 <wait_for_cal>:
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    e084:	b538      	push	{r3, r4, r5, lr}
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    e086:	4c2a      	ldr	r4, [pc, #168]	; (e130 <wait_for_cal+0xac>)
    e088:	4d2a      	ldr	r5, [pc, #168]	; (e134 <wait_for_cal+0xb0>)
    e08a:	e001      	b.n	e090 <wait_for_cal+0xc>
		yield(); // wait
    e08c:	f002 ffc0 	bl	11010 <yield>
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    e090:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e092:	061b      	lsls	r3, r3, #24
    e094:	d4fa      	bmi.n	e08c <wait_for_cal+0x8>
    e096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e098:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    e09c:	d1f6      	bne.n	e08c <wait_for_cal+0x8>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		yield(); // wait
	}
#endif
	__disable_irq();
    e09e:	b672      	cpsid	i
	if (calibrating) {
    e0a0:	4925      	ldr	r1, [pc, #148]	; (e138 <wait_for_cal+0xb4>)
    e0a2:	780a      	ldrb	r2, [r1, #0]
    e0a4:	2a00      	cmp	r2, #0
    e0a6:	d040      	beq.n	e12a <wait_for_cal+0xa6>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    e0a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e0aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    e0ac:	4402      	add	r2, r0
    e0ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
    e0b0:	4402      	add	r2, r0
    e0b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    e0b4:	4402      	add	r2, r0
    e0b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    e0b8:	4402      	add	r2, r0
    e0ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    e0bc:	4402      	add	r2, r0
		sum = (sum / 2) | 0x8000;
    e0be:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
    e0c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e0c6:	62e2      	str	r2, [r4, #44]	; 0x2c
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    e0c8:	6da2      	ldr	r2, [r4, #88]	; 0x58
    e0ca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    e0cc:	4402      	add	r2, r0
    e0ce:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e0d0:	4402      	add	r2, r0
    e0d2:	6e60      	ldr	r0, [r4, #100]	; 0x64
    e0d4:	4402      	add	r2, r0
    e0d6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    e0d8:	4402      	add	r2, r0
    e0da:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    e0dc:	4402      	add	r2, r0
		sum = (sum / 2) | 0x8000;
    e0de:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
    e0e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e0e6:	6322      	str	r2, [r4, #48]	; 0x30
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    e0e8:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e0ea:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    e0ec:	4402      	add	r2, r0
    e0ee:	6c28      	ldr	r0, [r5, #64]	; 0x40
    e0f0:	4402      	add	r2, r0
    e0f2:	6c68      	ldr	r0, [r5, #68]	; 0x44
    e0f4:	4402      	add	r2, r0
    e0f6:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    e0f8:	4402      	add	r2, r0
    e0fa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    e0fc:	4402      	add	r2, r0
		sum = (sum / 2) | 0x8000;
    e0fe:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
    e102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e106:	62ea      	str	r2, [r5, #44]	; 0x2c
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    e108:	6daa      	ldr	r2, [r5, #88]	; 0x58
    e10a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    e10c:	4402      	add	r2, r0
    e10e:	6e28      	ldr	r0, [r5, #96]	; 0x60
    e110:	4402      	add	r2, r0
    e112:	6e68      	ldr	r0, [r5, #100]	; 0x64
    e114:	4402      	add	r2, r0
    e116:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    e118:	4402      	add	r2, r0
    e11a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    e11c:	4402      	add	r2, r0
		sum = (sum / 2) | 0x8000;
    e11e:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    e122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e126:	632a      	str	r2, [r5, #48]	; 0x30
#endif
		calibrating = 0;
    e128:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    e12a:	b662      	cpsie	i
}
    e12c:	bd38      	pop	{r3, r4, r5, pc}
    e12e:	bf00      	nop
    e130:	4003b000 	.word	0x4003b000
    e134:	400bb000 	.word	0x400bb000
    e138:	1fff9d6c 	.word	0x1fff9d6c

0000e13c <analog_init>:
	VREF_TRM = 0x60;
    e13c:	4b2a      	ldr	r3, [pc, #168]	; (e1e8 <analog_init+0xac>)
	if (analog_config_bits == 8) {
    e13e:	4a2b      	ldr	r2, [pc, #172]	; (e1ec <analog_init+0xb0>)
	VREF_TRM = 0x60;
    e140:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    e142:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    e144:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    e146:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    e148:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e14a:	4829      	ldr	r0, [pc, #164]	; (e1f0 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    e14c:	2b08      	cmp	r3, #8
    e14e:	d034      	beq.n	e1ba <analog_init+0x7e>
	} else if (analog_config_bits == 10) {
    e150:	2b0a      	cmp	r3, #10
    e152:	d020      	beq.n	e196 <analog_init+0x5a>
	} else if (analog_config_bits == 12) {
    e154:	2b0c      	cmp	r3, #12
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    e156:	4b27      	ldr	r3, [pc, #156]	; (e1f4 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    e158:	bf0c      	ite	eq
    e15a:	2135      	moveq	r1, #53	; 0x35
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e15c:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e15e:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e160:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e162:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e164:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e166:	60da      	str	r2, [r3, #12]
	if (analog_reference_internal) {
    e168:	4b23      	ldr	r3, [pc, #140]	; (e1f8 <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e16a:	4921      	ldr	r1, [pc, #132]	; (e1f0 <analog_init+0xb4>)
	if (analog_reference_internal) {
    e16c:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e16e:	4a21      	ldr	r2, [pc, #132]	; (e1f4 <analog_init+0xb8>)
	if (analog_reference_internal) {
    e170:	b1cb      	cbz	r3, e1a6 <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e172:	2301      	movs	r3, #1
    e174:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e176:	6213      	str	r3, [r2, #32]
	num = analog_num_average;
    e178:	4b20      	ldr	r3, [pc, #128]	; (e1fc <analog_init+0xc0>)
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    e17a:	491d      	ldr	r1, [pc, #116]	; (e1f0 <analog_init+0xb4>)
	num = analog_num_average;
    e17c:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    e17e:	4a1d      	ldr	r2, [pc, #116]	; (e1f4 <analog_init+0xb8>)
	if (num <= 1) {
    e180:	2b01      	cmp	r3, #1
    e182:	d913      	bls.n	e1ac <analog_init+0x70>
	} else if (num <= 4) {
    e184:	2b04      	cmp	r3, #4
    e186:	d81b      	bhi.n	e1c0 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    e188:	2384      	movs	r3, #132	; 0x84
    e18a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    e18c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    e18e:	4b1c      	ldr	r3, [pc, #112]	; (e200 <analog_init+0xc4>)
    e190:	2201      	movs	r2, #1
    e192:	701a      	strb	r2, [r3, #0]
}
    e194:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e196:	4b17      	ldr	r3, [pc, #92]	; (e1f4 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e198:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e19a:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e19c:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e19e:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e1a0:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e1a2:	60da      	str	r2, [r3, #12]
    e1a4:	e7e0      	b.n	e168 <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    e1a6:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    e1a8:	6213      	str	r3, [r2, #32]
    e1aa:	e7e5      	b.n	e178 <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    e1ac:	2380      	movs	r3, #128	; 0x80
    e1ae:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    e1b0:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    e1b2:	4b13      	ldr	r3, [pc, #76]	; (e200 <analog_init+0xc4>)
    e1b4:	2201      	movs	r2, #1
    e1b6:	701a      	strb	r2, [r3, #0]
}
    e1b8:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e1ba:	4b0e      	ldr	r3, [pc, #56]	; (e1f4 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e1bc:	2101      	movs	r1, #1
    e1be:	e7ec      	b.n	e19a <analog_init+0x5e>
	} else if (num <= 8) {
    e1c0:	2b08      	cmp	r3, #8
    e1c2:	d806      	bhi.n	e1d2 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    e1c4:	2385      	movs	r3, #133	; 0x85
    e1c6:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    e1c8:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    e1ca:	4b0d      	ldr	r3, [pc, #52]	; (e200 <analog_init+0xc4>)
    e1cc:	2201      	movs	r2, #1
    e1ce:	701a      	strb	r2, [r3, #0]
}
    e1d0:	4770      	bx	lr
	} else if (num <= 16) {
    e1d2:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    e1d4:	bf94      	ite	ls
    e1d6:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    e1d8:	2387      	movhi	r3, #135	; 0x87
    e1da:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    e1dc:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    e1de:	4b08      	ldr	r3, [pc, #32]	; (e200 <analog_init+0xc4>)
    e1e0:	2201      	movs	r2, #1
    e1e2:	701a      	strb	r2, [r3, #0]
}
    e1e4:	4770      	bx	lr
    e1e6:	bf00      	nop
    e1e8:	40074000 	.word	0x40074000
    e1ec:	1fff91a4 	.word	0x1fff91a4
    e1f0:	4003b000 	.word	0x4003b000
    e1f4:	400bb000 	.word	0x400bb000
    e1f8:	1fff9d6a 	.word	0x1fff9d6a
    e1fc:	1fff91a5 	.word	0x1fff91a5
    e200:	1fff9d6c 	.word	0x1fff9d6c

0000e204 <analogReadRes>:

void analogReadRes(unsigned int bits)
{
	unsigned int config;

	if (bits >= 13) {
    e204:	280c      	cmp	r0, #12
{
    e206:	b410      	push	{r4}
	if (bits >= 13) {
    e208:	d917      	bls.n	e23a <analogReadRes+0x36>
		if (bits > 16) bits = 16;
    e20a:	2310      	movs	r3, #16
    e20c:	4298      	cmp	r0, r3
    e20e:	bf28      	it	cs
    e210:	4618      	movcs	r0, r3
		config = 16;
    e212:	4619      	mov	r1, r3
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
	if (config != analog_config_bits) {
    e214:	4a10      	ldr	r2, [pc, #64]	; (e258 <analogReadRes+0x54>)
	analog_right_shift = config - bits;
    e216:	4c11      	ldr	r4, [pc, #68]	; (e25c <analogReadRes+0x58>)
    e218:	1a18      	subs	r0, r3, r0
    e21a:	7020      	strb	r0, [r4, #0]
	if (config != analog_config_bits) {
    e21c:	7810      	ldrb	r0, [r2, #0]
    e21e:	4288      	cmp	r0, r1
    e220:	d015      	beq.n	e24e <analogReadRes+0x4a>
		analog_config_bits = config;
		if (calibrating) {
    e222:	490f      	ldr	r1, [pc, #60]	; (e260 <analogReadRes+0x5c>)
		analog_config_bits = config;
    e224:	7013      	strb	r3, [r2, #0]
		if (calibrating) {
    e226:	780b      	ldrb	r3, [r1, #0]
    e228:	b123      	cbz	r3, e234 <analogReadRes+0x30>
			ADC0_SC3 = 0; // cancel cal
    e22a:	490e      	ldr	r1, [pc, #56]	; (e264 <analogReadRes+0x60>)
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
    e22c:	4a0e      	ldr	r2, [pc, #56]	; (e268 <analogReadRes+0x64>)
			ADC0_SC3 = 0; // cancel cal
    e22e:	2300      	movs	r3, #0
    e230:	624b      	str	r3, [r1, #36]	; 0x24
			ADC1_SC3 = 0;
    e232:	6253      	str	r3, [r2, #36]	; 0x24
			#endif
		}
		analog_init();
	}
}
    e234:	bc10      	pop	{r4}
		analog_init();
    e236:	f7ff bf81 	b.w	e13c <analog_init>
	} else if (bits >= 11) {
    e23a:	280a      	cmp	r0, #10
    e23c:	d902      	bls.n	e244 <analogReadRes+0x40>
    e23e:	230c      	movs	r3, #12
		config = 12;
    e240:	4619      	mov	r1, r3
    e242:	e7e7      	b.n	e214 <analogReadRes+0x10>
	} else if (bits >= 9) {
    e244:	2808      	cmp	r0, #8
    e246:	d904      	bls.n	e252 <analogReadRes+0x4e>
    e248:	230a      	movs	r3, #10
		config = 10;
    e24a:	4619      	mov	r1, r3
    e24c:	e7e2      	b.n	e214 <analogReadRes+0x10>
}
    e24e:	bc10      	pop	{r4}
    e250:	4770      	bx	lr
	} else if (bits >= 9) {
    e252:	2308      	movs	r3, #8
		config = 8;
    e254:	4619      	mov	r1, r3
    e256:	e7dd      	b.n	e214 <analogReadRes+0x10>
    e258:	1fff91a4 	.word	0x1fff91a4
    e25c:	1fff9d6b 	.word	0x1fff9d6b
    e260:	1fff9d6c 	.word	0x1fff9d6c
    e264:	4003b000 	.word	0x4003b000
    e268:	400bb000 	.word	0x400bb000

0000e26c <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    e26c:	2828      	cmp	r0, #40	; 0x28
    e26e:	d829      	bhi.n	e2c4 <analogRead+0x58>
	channel = pin2sc1a[pin];
    e270:	4b30      	ldr	r3, [pc, #192]	; (e334 <analogRead+0xc8>)
{
    e272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	channel = pin2sc1a[pin];
    e276:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    e278:	2eff      	cmp	r6, #255	; 0xff
    e27a:	d053      	beq.n	e324 <analogRead+0xb8>

	if (calibrating) wait_for_cal();
    e27c:	4b2e      	ldr	r3, [pc, #184]	; (e338 <analogRead+0xcc>)
    e27e:	781b      	ldrb	r3, [r3, #0]
    e280:	bb13      	cbnz	r3, e2c8 <analogRead+0x5c>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    e282:	0634      	lsls	r4, r6, #24
    e284:	d424      	bmi.n	e2d0 <analogRead+0x64>
#endif

	// This interrupt disable stuff is meant to allow use of
	// analogRead() in both main program and interrupts.
	__disable_irq();
    e286:	b672      	cpsid	i
    e288:	4c2c      	ldr	r4, [pc, #176]	; (e33c <analogRead+0xd0>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    e28a:	4d2d      	ldr	r5, [pc, #180]	; (e340 <analogRead+0xd4>)
	analogReadBusyADC0 = 1;
    e28c:	2701      	movs	r7, #1
	ADC0_SC1A = channel;
    e28e:	602e      	str	r6, [r5, #0]
	analogReadBusyADC0 = 1;
    e290:	7027      	strb	r7, [r4, #0]
	__enable_irq();
    e292:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    e294:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    e296:	682b      	ldr	r3, [r5, #0]
    e298:	0618      	lsls	r0, r3, #24
    e29a:	d409      	bmi.n	e2b0 <analogRead+0x44>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    e29c:	7823      	ldrb	r3, [r4, #0]
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d0f5      	beq.n	e28e <analogRead+0x22>
		__enable_irq();
    e2a2:	b662      	cpsie	i
		yield(); // TODO: what happens if yield-called code uses analogRead()
    e2a4:	f002 feb4 	bl	11010 <yield>
		__disable_irq();
    e2a8:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    e2aa:	682b      	ldr	r3, [r5, #0]
    e2ac:	0619      	lsls	r1, r3, #24
    e2ae:	d5f5      	bpl.n	e29c <analogRead+0x30>
			result = ADC0_RA;
    e2b0:	4a23      	ldr	r2, [pc, #140]	; (e340 <analogRead+0xd4>)
			analogReadBusyADC0 = 0;
    e2b2:	2300      	movs	r3, #0
			result = ADC0_RA;
    e2b4:	6910      	ldr	r0, [r2, #16]
			analogReadBusyADC0 = 0;
    e2b6:	7023      	strb	r3, [r4, #0]
			__enable_irq();
    e2b8:	b662      	cpsie	i
			result >>= analog_right_shift;
    e2ba:	4b22      	ldr	r3, [pc, #136]	; (e344 <analogRead+0xd8>)
    e2bc:	781b      	ldrb	r3, [r3, #0]
    e2be:	4118      	asrs	r0, r3
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    e2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pin >= sizeof(pin2sc1a)) return 0;
    e2c4:	2000      	movs	r0, #0
}
    e2c6:	4770      	bx	lr
	if (calibrating) wait_for_cal();
    e2c8:	f7ff fedc 	bl	e084 <wait_for_cal>
	if (channel & 0x80) goto beginADC1;
    e2cc:	0634      	lsls	r4, r6, #24
    e2ce:	d5da      	bpl.n	e286 <analogRead+0x1a>
	__disable_irq();
    e2d0:	b672      	cpsid	i
    e2d2:	4d1d      	ldr	r5, [pc, #116]	; (e348 <analogRead+0xdc>)
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    e2d4:	4c1d      	ldr	r4, [pc, #116]	; (e34c <analogRead+0xe0>)
    e2d6:	f006 0840 	and.w	r8, r6, #64	; 0x40
	analogReadBusyADC1 = 1;
    e2da:	2701      	movs	r7, #1
	ADC1_SC1A = channel & 0x3F;
    e2dc:	f006 063f 	and.w	r6, r6, #63	; 0x3f
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    e2e0:	68e3      	ldr	r3, [r4, #12]
	if (channel & 0x40) {
    e2e2:	f1b8 0f00 	cmp.w	r8, #0
    e2e6:	d020      	beq.n	e32a <analogRead+0xbe>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    e2e8:	f023 0310 	bic.w	r3, r3, #16
    e2ec:	60e3      	str	r3, [r4, #12]
	ADC1_SC1A = channel & 0x3F;
    e2ee:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    e2f0:	702f      	strb	r7, [r5, #0]
	__enable_irq();
    e2f2:	b662      	cpsie	i
		__disable_irq();
    e2f4:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    e2f6:	6823      	ldr	r3, [r4, #0]
    e2f8:	061a      	lsls	r2, r3, #24
    e2fa:	d409      	bmi.n	e310 <analogRead+0xa4>
		if (!analogReadBusyADC1) goto startADC1;
    e2fc:	782b      	ldrb	r3, [r5, #0]
    e2fe:	2b00      	cmp	r3, #0
    e300:	d0ee      	beq.n	e2e0 <analogRead+0x74>
		__enable_irq();
    e302:	b662      	cpsie	i
		yield();
    e304:	f002 fe84 	bl	11010 <yield>
		__disable_irq();
    e308:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    e30a:	6823      	ldr	r3, [r4, #0]
    e30c:	061b      	lsls	r3, r3, #24
    e30e:	d5f5      	bpl.n	e2fc <analogRead+0x90>
			result = ADC1_RA;
    e310:	4a0e      	ldr	r2, [pc, #56]	; (e34c <analogRead+0xe0>)
			analogReadBusyADC1 = 0;
    e312:	2300      	movs	r3, #0
			result = ADC1_RA;
    e314:	6910      	ldr	r0, [r2, #16]
			analogReadBusyADC1 = 0;
    e316:	702b      	strb	r3, [r5, #0]
			__enable_irq();
    e318:	b662      	cpsie	i
			result >>= analog_right_shift;
    e31a:	4b0a      	ldr	r3, [pc, #40]	; (e344 <analogRead+0xd8>)
    e31c:	781b      	ldrb	r3, [r3, #0]
    e31e:	4118      	asrs	r0, r3
}
    e320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pin >= sizeof(pin2sc1a)) return 0;
    e324:	2000      	movs	r0, #0
}
    e326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    e32a:	f043 0310 	orr.w	r3, r3, #16
    e32e:	60e3      	str	r3, [r4, #12]
    e330:	e7dd      	b.n	e2ee <analogRead+0x82>
    e332:	bf00      	nop
    e334:	00015e00 	.word	0x00015e00
    e338:	1fff9d6c 	.word	0x1fff9d6c
    e33c:	1fff9d68 	.word	0x1fff9d68
    e340:	4003b000 	.word	0x4003b000
    e344:	1fff9d6b 	.word	0x1fff9d6b
    e348:	1fff9d69 	.word	0x1fff9d69
    e34c:	400bb000 	.word	0x400bb000

0000e350 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    e350:	4a0b      	ldr	r2, [pc, #44]	; (e380 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    e352:	490c      	ldr	r1, [pc, #48]	; (e384 <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    e354:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    e356:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e35a:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    e35c:	780b      	ldrb	r3, [r1, #0]
    e35e:	b14b      	cbz	r3, e374 <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    e360:	4b09      	ldr	r3, [pc, #36]	; (e388 <analogWriteDAC0+0x38>)
    e362:	2280      	movs	r2, #128	; 0x80
    e364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    e368:	4b07      	ldr	r3, [pc, #28]	; (e388 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    e36a:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    e36e:	b200      	sxth	r0, r0
    e370:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    e372:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    e374:	4b04      	ldr	r3, [pc, #16]	; (e388 <analogWriteDAC0+0x38>)
    e376:	22c0      	movs	r2, #192	; 0xc0
    e378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    e37c:	e7f4      	b.n	e368 <analogWriteDAC0+0x18>
    e37e:	bf00      	nop
    e380:	40048000 	.word	0x40048000
    e384:	1fff9d6a 	.word	0x1fff9d6a
    e388:	400cc000 	.word	0x400cc000

0000e38c <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    e38c:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    e38e:	4b17      	ldr	r3, [pc, #92]	; (e3ec <eeprom_initialize+0x60>)
    e390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    e392:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    e394:	46ec      	mov	ip, sp
    e396:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    e39a:	4b15      	ldr	r3, [pc, #84]	; (e3f0 <eeprom_initialize+0x64>)
    e39c:	785a      	ldrb	r2, [r3, #1]
    e39e:	0791      	lsls	r1, r2, #30
    e3a0:	d517      	bpl.n	e3d2 <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    e3a2:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    e3a4:	4c12      	ldr	r4, [pc, #72]	; (e3f0 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    e3a6:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    e3aa:	bf18      	it	ne
    e3ac:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    e3ae:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    e3b0:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    e3b2:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    e3b4:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    e3b6:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    e3b8:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    e3ba:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    e3bc:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    e3be:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    e3c0:	f04c 0301 	orr.w	r3, ip, #1
    e3c4:	4620      	mov	r0, r4
    e3c6:	4798      	blx	r3
		__enable_irq();
    e3c8:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    e3ca:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    e3cc:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    e3d0:	d109      	bne.n	e3e6 <eeprom_initialize+0x5a>
{
    e3d2:	4b08      	ldr	r3, [pc, #32]	; (e3f4 <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    e3d4:	4906      	ldr	r1, [pc, #24]	; (e3f0 <eeprom_initialize+0x64>)
    e3d6:	e001      	b.n	e3dc <eeprom_initialize+0x50>
		if (++count > 200000) break;
    e3d8:	3b01      	subs	r3, #1
    e3da:	d002      	beq.n	e3e2 <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    e3dc:	784a      	ldrb	r2, [r1, #1]
    e3de:	07d2      	lsls	r2, r2, #31
    e3e0:	d5fa      	bpl.n	e3d8 <eeprom_initialize+0x4c>
	}
}
    e3e2:	b004      	add	sp, #16
    e3e4:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    e3e6:	7023      	strb	r3, [r4, #0]
}
    e3e8:	b004      	add	sp, #16
    e3ea:	bd10      	pop	{r4, pc}
    e3ec:	00015e2c 	.word	0x00015e2c
    e3f0:	40020000 	.word	0x40020000
    e3f4:	00030d41 	.word	0x00030d41

0000e3f8 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    e3f8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    e3fc:	d211      	bcs.n	e422 <eeprom_read_byte+0x2a>
{
    e3fe:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    e400:	4b09      	ldr	r3, [pc, #36]	; (e428 <eeprom_read_byte+0x30>)
    e402:	785b      	ldrb	r3, [r3, #1]
    e404:	07db      	lsls	r3, r3, #31
    e406:	4604      	mov	r4, r0
    e408:	d504      	bpl.n	e414 <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    e40a:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    e40e:	7820      	ldrb	r0, [r4, #0]
    e410:	b2c0      	uxtb	r0, r0
}
    e412:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    e414:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    e418:	f7ff ffb8 	bl	e38c <eeprom_initialize>
	return FlexRAM[offset];
    e41c:	7820      	ldrb	r0, [r4, #0]
    e41e:	b2c0      	uxtb	r0, r0
}
    e420:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    e422:	2000      	movs	r0, #0
}
    e424:	4770      	bx	lr
    e426:	bf00      	nop
    e428:	40020000 	.word	0x40020000

0000e42c <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    e42c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    e430:	d21f      	bcs.n	e472 <eeprom_write_byte+0x46>
{
    e432:	b538      	push	{r3, r4, r5, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    e434:	4b0f      	ldr	r3, [pc, #60]	; (e474 <eeprom_write_byte+0x48>)
    e436:	785b      	ldrb	r3, [r3, #1]
    e438:	07da      	lsls	r2, r3, #31
    e43a:	4604      	mov	r4, r0
    e43c:	460d      	mov	r5, r1
    e43e:	d510      	bpl.n	e462 <eeprom_write_byte+0x36>
	if (FlexRAM[offset] != value) {
    e440:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    e444:	7823      	ldrb	r3, [r4, #0]
    e446:	42ab      	cmp	r3, r5
    e448:	d00a      	beq.n	e460 <eeprom_write_byte+0x34>
		kinetis_hsrun_disable();
		uint8_t stat = FTFL_FSTAT & 0x70;
    e44a:	4a0a      	ldr	r2, [pc, #40]	; (e474 <eeprom_write_byte+0x48>)
    e44c:	7813      	ldrb	r3, [r2, #0]
		if (stat) FTFL_FSTAT = stat;
    e44e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    e452:	bf18      	it	ne
    e454:	7013      	strbne	r3, [r2, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    e456:	4a07      	ldr	r2, [pc, #28]	; (e474 <eeprom_write_byte+0x48>)
		FlexRAM[offset] = value;
    e458:	7025      	strb	r5, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    e45a:	7853      	ldrb	r3, [r2, #1]
    e45c:	07db      	lsls	r3, r3, #31
    e45e:	d5fc      	bpl.n	e45a <eeprom_write_byte+0x2e>
		flexram_wait();
		kinetis_hsrun_enable();
	}
}
    e460:	bd38      	pop	{r3, r4, r5, pc}
	if (FlexRAM[offset] != value) {
    e462:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    e466:	f7ff ff91 	bl	e38c <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    e46a:	7823      	ldrb	r3, [r4, #0]
    e46c:	42ab      	cmp	r3, r5
    e46e:	d1ec      	bne.n	e44a <eeprom_write_byte+0x1e>
    e470:	e7f6      	b.n	e460 <eeprom_write_byte+0x34>
    e472:	4770      	bx	lr
    e474:	40020000 	.word	0x40020000

0000e478 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    e478:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    e47a:	f7f4 f971 	bl	2760 <setup>
	while (1) {
		loop();
    e47e:	f7f5 fa6d 	bl	395c <loop>
		yield();
    e482:	f002 fdc5 	bl	11010 <yield>
	while (1) {
    e486:	e7fa      	b.n	e47e <main+0x6>

0000e488 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    e488:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    e48a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    e48e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    e492:	d16f      	bne.n	e574 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e494:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    e496:	d341      	bcc.n	e51c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e498:	f851 3b04 	ldr.w	r3, [r1], #4
    e49c:	f840 3b04 	str.w	r3, [r0], #4
    e4a0:	f851 3b04 	ldr.w	r3, [r1], #4
    e4a4:	f840 3b04 	str.w	r3, [r0], #4
    e4a8:	f851 3b04 	ldr.w	r3, [r1], #4
    e4ac:	f840 3b04 	str.w	r3, [r0], #4
    e4b0:	f851 3b04 	ldr.w	r3, [r1], #4
    e4b4:	f840 3b04 	str.w	r3, [r0], #4
    e4b8:	f851 3b04 	ldr.w	r3, [r1], #4
    e4bc:	f840 3b04 	str.w	r3, [r0], #4
    e4c0:	f851 3b04 	ldr.w	r3, [r1], #4
    e4c4:	f840 3b04 	str.w	r3, [r0], #4
    e4c8:	f851 3b04 	ldr.w	r3, [r1], #4
    e4cc:	f840 3b04 	str.w	r3, [r0], #4
    e4d0:	f851 3b04 	ldr.w	r3, [r1], #4
    e4d4:	f840 3b04 	str.w	r3, [r0], #4
    e4d8:	f851 3b04 	ldr.w	r3, [r1], #4
    e4dc:	f840 3b04 	str.w	r3, [r0], #4
    e4e0:	f851 3b04 	ldr.w	r3, [r1], #4
    e4e4:	f840 3b04 	str.w	r3, [r0], #4
    e4e8:	f851 3b04 	ldr.w	r3, [r1], #4
    e4ec:	f840 3b04 	str.w	r3, [r0], #4
    e4f0:	f851 3b04 	ldr.w	r3, [r1], #4
    e4f4:	f840 3b04 	str.w	r3, [r0], #4
    e4f8:	f851 3b04 	ldr.w	r3, [r1], #4
    e4fc:	f840 3b04 	str.w	r3, [r0], #4
    e500:	f851 3b04 	ldr.w	r3, [r1], #4
    e504:	f840 3b04 	str.w	r3, [r0], #4
    e508:	f851 3b04 	ldr.w	r3, [r1], #4
    e50c:	f840 3b04 	str.w	r3, [r0], #4
    e510:	f851 3b04 	ldr.w	r3, [r1], #4
    e514:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e518:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    e51a:	d2bd      	bcs.n	e498 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    e51c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    e51e:	d311      	bcc.n	e544 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e520:	f851 3b04 	ldr.w	r3, [r1], #4
    e524:	f840 3b04 	str.w	r3, [r0], #4
    e528:	f851 3b04 	ldr.w	r3, [r1], #4
    e52c:	f840 3b04 	str.w	r3, [r0], #4
    e530:	f851 3b04 	ldr.w	r3, [r1], #4
    e534:	f840 3b04 	str.w	r3, [r0], #4
    e538:	f851 3b04 	ldr.w	r3, [r1], #4
    e53c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    e540:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    e542:	d2ed      	bcs.n	e520 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    e544:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    e546:	d305      	bcc.n	e554 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    e548:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    e54c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    e550:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    e552:	d2f9      	bcs.n	e548 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    e554:	3204      	adds	r2, #4
	beq	.Ldone
    e556:	d00a      	beq.n	e56e <memcpy+0xe6>

	lsls	r2, r2, #31
    e558:	07d2      	lsls	r2, r2, #31
	itt ne
    e55a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e55c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e560:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    e564:	d303      	bcc.n	e56e <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    e566:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    e568:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    e56a:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    e56c:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    e56e:	bc01      	pop	{r0}
#endif
	bx	lr
    e570:	4770      	bx	lr
    e572:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    e574:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    e576:	d34a      	bcc.n	e60e <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    e578:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    e57c:	d011      	beq.n	e5a2 <memcpy+0x11a>

	rsb	r3, #4
    e57e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    e582:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    e584:	07db      	lsls	r3, r3, #31
	itt ne
    e586:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e588:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e58c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    e590:	d307      	bcc.n	e5a2 <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    e592:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e596:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    e59a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e59e:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    e5a2:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    e5a6:	f43f af75 	beq.w	e494 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    e5aa:	b430      	push	{r4, r5}
	subs	r2, #4
    e5ac:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    e5ae:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    e5b0:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    e5b4:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    e5b8:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    e5ba:	d019      	beq.n	e5f0 <memcpy+0x168>
	cmp	r3, #3
    e5bc:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    e5be:	d00b      	beq.n	e5d8 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    e5c0:	0a24      	lsrs	r4, r4, #8
    e5c2:	f851 3b04 	ldr.w	r3, [r1], #4
    e5c6:	061d      	lsls	r5, r3, #24
    e5c8:	ea44 0405 	orr.w	r4, r4, r5
    e5cc:	f840 4b04 	str.w	r4, [r0], #4
    e5d0:	461c      	mov	r4, r3
    e5d2:	3a04      	subs	r2, #4
    e5d4:	d2f4      	bcs.n	e5c0 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    e5d6:	e016      	b.n	e606 <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    e5d8:	0e24      	lsrs	r4, r4, #24
    e5da:	f851 3b04 	ldr.w	r3, [r1], #4
    e5de:	021d      	lsls	r5, r3, #8
    e5e0:	ea44 0405 	orr.w	r4, r4, r5
    e5e4:	f840 4b04 	str.w	r4, [r0], #4
    e5e8:	461c      	mov	r4, r3
    e5ea:	3a04      	subs	r2, #4
    e5ec:	d2f4      	bcs.n	e5d8 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    e5ee:	e00a      	b.n	e606 <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    e5f0:	0c24      	lsrs	r4, r4, #16
    e5f2:	f851 3b04 	ldr.w	r3, [r1], #4
    e5f6:	041d      	lsls	r5, r3, #16
    e5f8:	ea44 0405 	orr.w	r4, r4, r5
    e5fc:	f840 4b04 	str.w	r4, [r0], #4
    e600:	461c      	mov	r4, r3
    e602:	3a04      	subs	r2, #4
    e604:	d2f4      	bcs.n	e5f0 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    e606:	3204      	adds	r2, #4
	subs	r1, ip
    e608:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    e60c:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    e60e:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    e610:	d3a0      	bcc.n	e554 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    e612:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    e614:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e618:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    e61c:	d2f9      	bcs.n	e612 <memcpy+0x18a>

	ldrb	r3, [r1]
    e61e:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    e620:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    e622:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    e624:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    e626:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    e628:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    e62a:	bc01      	pop	{r0}
#endif
	bx	lr
    e62c:	4770      	bx	lr
    e62e:	bf00      	nop

0000e630 <fault_isr>:
{
    e630:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    e632:	4c0f      	ldr	r4, [pc, #60]	; (e670 <fault_isr+0x40>)
    e634:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e636:	0358      	lsls	r0, r3, #13
    e638:	d40d      	bmi.n	e656 <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    e63a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e63c:	0559      	lsls	r1, r3, #21
    e63e:	d40f      	bmi.n	e660 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    e640:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e642:	051a      	lsls	r2, r3, #20
    e644:	d411      	bmi.n	e66a <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    e646:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e648:	04db      	lsls	r3, r3, #19
    e64a:	d5f3      	bpl.n	e634 <fault_isr+0x4>
    e64c:	f001 fb98 	bl	fd80 <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    e650:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e652:	0358      	lsls	r0, r3, #13
    e654:	d5f1      	bpl.n	e63a <fault_isr+0xa>
    e656:	f001 fd51 	bl	100fc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    e65a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e65c:	0559      	lsls	r1, r3, #21
    e65e:	d5ef      	bpl.n	e640 <fault_isr+0x10>
    e660:	f000 f808 	bl	e674 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    e664:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e666:	051a      	lsls	r2, r3, #20
    e668:	d5ed      	bpl.n	e646 <fault_isr+0x16>
    e66a:	f000 ffe5 	bl	f638 <uart1_status_isr>
    e66e:	e7ea      	b.n	e646 <fault_isr+0x16>
    e670:	40048000 	.word	0x40048000

0000e674 <unused_isr>:
{
    e674:	b508      	push	{r3, lr}
	fault_isr();
    e676:	f7ff ffdb 	bl	e630 <fault_isr>
    e67a:	bf00      	nop

0000e67c <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    e67c:	4b01      	ldr	r3, [pc, #4]	; (e684 <startup_early_hook+0x8>)
    e67e:	2210      	movs	r2, #16
    e680:	801a      	strh	r2, [r3, #0]
}
    e682:	4770      	bx	lr
    e684:	40052000 	.word	0x40052000

0000e688 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    e688:	4770      	bx	lr
    e68a:	bf00      	nop

0000e68c <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    e68c:	4a09      	ldr	r2, [pc, #36]	; (e6b4 <_sbrk+0x28>)
{
    e68e:	b508      	push	{r3, lr}
    e690:	4603      	mov	r3, r0
	prev = __brkval;
    e692:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    e694:	b133      	cbz	r3, e6a4 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    e696:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    e698:	4403      	add	r3, r0
    e69a:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    e69e:	428b      	cmp	r3, r1
    e6a0:	d201      	bcs.n	e6a6 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    e6a2:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    e6a4:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    e6a6:	f004 f847 	bl	12738 <__errno>
    e6aa:	230c      	movs	r3, #12
    e6ac:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    e6ae:	f04f 30ff 	mov.w	r0, #4294967295
}
    e6b2:	bd08      	pop	{r3, pc}
    e6b4:	1fff91a8 	.word	0x1fff91a8

0000e6b8 <__cxa_pure_virtual>:
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
	while (1);
    e6b8:	e7fe      	b.n	e6b8 <__cxa_pure_virtual>
    e6ba:	bf00      	nop

0000e6bc <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    e6bc:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    e6c0:	b9cb      	cbnz	r3, e6f6 <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    e6c2:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    e6c6:	b9a0      	cbnz	r0, e6f2 <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    e6c8:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    e6cc:	b943      	cbnz	r3, e6e0 <nvic_execution_priority+0x24>
	uint32_t priority=256;
    e6ce:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    e6d2:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    e6d6:	b15b      	cbz	r3, e6f0 <nvic_execution_priority+0x34>
    e6d8:	4298      	cmp	r0, r3
    e6da:	bf28      	it	cs
    e6dc:	4618      	movcs	r0, r3
	return priority;
    e6de:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    e6e0:	2b0f      	cmp	r3, #15
    e6e2:	d9f6      	bls.n	e6d2 <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    e6e4:	4a05      	ldr	r2, [pc, #20]	; (e6fc <nvic_execution_priority+0x40>)
    e6e6:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    e6e8:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	d1f3      	bne.n	e6d8 <nvic_execution_priority+0x1c>
}
    e6f0:	4770      	bx	lr
	if (primask) return 0;
    e6f2:	4618      	mov	r0, r3
}
    e6f4:	4770      	bx	lr
	if (faultmask) return -1;
    e6f6:	f04f 30ff 	mov.w	r0, #4294967295
    e6fa:	4770      	bx	lr
    e6fc:	e000e3f0 	.word	0xe000e3f0

0000e700 <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    e700:	f003 b9f8 	b.w	11af4 <malloc>

0000e704 <operator delete(void*, unsigned int)>:
  free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
  free(ptr);
    e704:	f003 b9fe 	b.w	11b04 <free>

0000e708 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    e708:	f101 3cff 	add.w	ip, r1, #4294967295
{
    e70c:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    e70e:	4665      	mov	r5, ip
	int i=0, j;
    e710:	2400      	movs	r4, #0
    e712:	e001      	b.n	e718 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    e714:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    e716:	3401      	adds	r4, #1
		digit = val % radix;
    e718:	fbb0 fef2 	udiv	lr, r0, r2
    e71c:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e720:	2b09      	cmp	r3, #9
    e722:	f103 0630 	add.w	r6, r3, #48	; 0x30
    e726:	bf8a      	itet	hi
    e728:	3337      	addhi	r3, #55	; 0x37
    e72a:	b2f3      	uxtbls	r3, r6
    e72c:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    e72e:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e730:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    e734:	d2ee      	bcs.n	e714 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    e736:	1c63      	adds	r3, r4, #1
    e738:	2200      	movs	r2, #0
    e73a:	54ca      	strb	r2, [r1, r3]
    e73c:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    e73e:	b17c      	cbz	r4, e760 <ultoa+0x58>
		t = buf[j];
    e740:	4662      	mov	r2, ip
    e742:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    e746:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    e74a:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    e74e:	eba1 030c 	sub.w	r3, r1, ip
    e752:	3202      	adds	r2, #2
    e754:	3b01      	subs	r3, #1
    e756:	1a52      	subs	r2, r2, r1
    e758:	4423      	add	r3, r4
    e75a:	429a      	cmp	r2, r3
		buf[i] = t;
    e75c:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    e75e:	dbef      	blt.n	e740 <ultoa+0x38>
	}
	return buf;
}
    e760:	4608      	mov	r0, r1
    e762:	bd70      	pop	{r4, r5, r6, pc}

0000e764 <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    e764:	4770      	bx	lr
    e766:	bf00      	nop

0000e768 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    e768:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    e76a:	4b0f      	ldr	r3, [pc, #60]	; (e7a8 <digitalWrite.part.0+0x40>)
    e76c:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    e770:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    e774:	b12c      	cbz	r4, e782 <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    e776:	2301      	movs	r3, #1
		if (val) {
    e778:	b191      	cbz	r1, e7a0 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    e77a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e77e:	bc10      	pop	{r4}
    e780:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    e782:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    e786:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    e788:	681a      	ldr	r2, [r3, #0]
		if (val) {
    e78a:	b921      	cbnz	r1, e796 <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    e78c:	f022 0202 	bic.w	r2, r2, #2
}
    e790:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    e792:	601a      	str	r2, [r3, #0]
}
    e794:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    e796:	f042 0203 	orr.w	r2, r2, #3
}
    e79a:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    e79c:	601a      	str	r2, [r3, #0]
}
    e79e:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    e7a0:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    e7a4:	bc10      	pop	{r4}
    e7a6:	4770      	bx	lr
    e7a8:	00015e50 	.word	0x00015e50

0000e7ac <attachInterrupt>:
	if (pin >= CORE_NUM_DIGITAL) return;
    e7ac:	2821      	cmp	r0, #33	; 0x21
    e7ae:	d835      	bhi.n	e81c <attachInterrupt+0x70>
	switch (mode) {
    e7b0:	2a04      	cmp	r2, #4
    e7b2:	d833      	bhi.n	e81c <attachInterrupt+0x70>
{
    e7b4:	b430      	push	{r4, r5}
	mask = (mask << 16) | 0x01000000;
    e7b6:	4b2a      	ldr	r3, [pc, #168]	; (e860 <attachInterrupt+0xb4>)
	config = portConfigRegister(pin);
    e7b8:	4d2a      	ldr	r5, [pc, #168]	; (e864 <attachInterrupt+0xb8>)
	mask = (mask << 16) | 0x01000000;
    e7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	config = portConfigRegister(pin);
    e7be:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
	mask = (mask << 16) | 0x01000000;
    e7c2:	041b      	lsls	r3, r3, #16
	config = portConfigRegister(pin);
    e7c4:	6854      	ldr	r4, [r2, #4]
	if ((*config & 0x00000700) == 0) {
    e7c6:	6822      	ldr	r2, [r4, #0]
    e7c8:	f412 62e0 	ands.w	r2, r2, #1792	; 0x700
    e7cc:	d039      	beq.n	e842 <attachInterrupt+0x96>
	_VectorsRam[irq + 16] = function;
    e7ce:	4a26      	ldr	r2, [pc, #152]	; (e868 <attachInterrupt+0xbc>)
    e7d0:	4826      	ldr	r0, [pc, #152]	; (e86c <attachInterrupt+0xc0>)
    e7d2:	f8c2 019c 	str.w	r0, [r2, #412]	; 0x19c
    e7d6:	4826      	ldr	r0, [pc, #152]	; (e870 <attachInterrupt+0xc4>)
    e7d8:	f8c2 01a0 	str.w	r0, [r2, #416]	; 0x1a0
    e7dc:	4825      	ldr	r0, [pc, #148]	; (e874 <attachInterrupt+0xc8>)
    e7de:	f8c2 01a4 	str.w	r0, [r2, #420]	; 0x1a4
    e7e2:	4825      	ldr	r0, [pc, #148]	; (e878 <attachInterrupt+0xcc>)
    e7e4:	f8c2 01a8 	str.w	r0, [r2, #424]	; 0x1a8
    e7e8:	4824      	ldr	r0, [pc, #144]	; (e87c <attachInterrupt+0xd0>)
    e7ea:	f8c2 01ac 	str.w	r0, [r2, #428]	; 0x1ac
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    e7ee:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
    e7f2:	f5a2 2092 	sub.w	r0, r2, #299008	; 0x49000
    e7f6:	287c      	cmp	r0, #124	; 0x7c
    e7f8:	d811      	bhi.n	e81e <attachInterrupt+0x72>
    e7fa:	4821      	ldr	r0, [pc, #132]	; (e880 <attachInterrupt+0xd4>)
	__disable_irq();
    e7fc:	b672      	cpsid	i
	cfg = *config;
    e7fe:	6822      	ldr	r2, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    e800:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
	*config = cfg;
    e804:	6022      	str	r2, [r4, #0]
    e806:	4313      	orrs	r3, r2
	return (v % 128) / 4;
    e808:	f3c4 0284 	ubfx	r2, r4, #2, #5
	cfg |= mask;
    e80c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	isr_table[pin_index] = function;	// set the function pointer
    e810:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	*config = cfg;			// enable the new interrupt
    e814:	6023      	str	r3, [r4, #0]
	__enable_irq();
    e816:	b662      	cpsie	i
}
    e818:	bc30      	pop	{r4, r5}
    e81a:	4770      	bx	lr
    e81c:	4770      	bx	lr
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    e81e:	f5a2 2094 	sub.w	r0, r2, #303104	; 0x4a000
    e822:	287c      	cmp	r0, #124	; 0x7c
    e824:	d915      	bls.n	e852 <attachInterrupt+0xa6>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    e826:	f5a2 2096 	sub.w	r0, r2, #307200	; 0x4b000
    e82a:	287c      	cmp	r0, #124	; 0x7c
    e82c:	d913      	bls.n	e856 <attachInterrupt+0xaa>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    e82e:	f5a2 2098 	sub.w	r0, r2, #311296	; 0x4c000
    e832:	287c      	cmp	r0, #124	; 0x7c
    e834:	d911      	bls.n	e85a <attachInterrupt+0xae>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    e836:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    e83a:	2a7c      	cmp	r2, #124	; 0x7c
    e83c:	d8ec      	bhi.n	e818 <attachInterrupt+0x6c>
    e83e:	4811      	ldr	r0, [pc, #68]	; (e884 <attachInterrupt+0xd8>)
    e840:	e7dc      	b.n	e7fc <attachInterrupt+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    e842:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
    e846:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    e84a:	f44f 7280 	mov.w	r2, #256	; 0x100
    e84e:	6022      	str	r2, [r4, #0]
    e850:	e7bd      	b.n	e7ce <attachInterrupt+0x22>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    e852:	480d      	ldr	r0, [pc, #52]	; (e888 <attachInterrupt+0xdc>)
    e854:	e7d2      	b.n	e7fc <attachInterrupt+0x50>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    e856:	480d      	ldr	r0, [pc, #52]	; (e88c <attachInterrupt+0xe0>)
    e858:	e7d0      	b.n	e7fc <attachInterrupt+0x50>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    e85a:	480d      	ldr	r0, [pc, #52]	; (e890 <attachInterrupt+0xe4>)
    e85c:	e7ce      	b.n	e7fc <attachInterrupt+0x50>
    e85e:	bf00      	nop
    e860:	00015e3c 	.word	0x00015e3c
    e864:	00015e50 	.word	0x00015e50
    e868:	1fff8200 	.word	0x1fff8200
    e86c:	1fff8d01 	.word	0x1fff8d01
    e870:	1fff8ccd 	.word	0x1fff8ccd
    e874:	1fff8c99 	.word	0x1fff8c99
    e878:	1fff8c65 	.word	0x1fff8c65
    e87c:	1fff8c31 	.word	0x1fff8c31
    e880:	1fff91b0 	.word	0x1fff91b0
    e884:	1fff9288 	.word	0x1fff9288
    e888:	1fff91e8 	.word	0x1fff91e8
    e88c:	1fff9238 	.word	0x1fff9238
    e890:	1fff9268 	.word	0x1fff9268

0000e894 <detachInterrupt>:
	config = portConfigRegister(pin);
    e894:	4b1a      	ldr	r3, [pc, #104]	; (e900 <detachInterrupt+0x6c>)
    e896:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    e89a:	685a      	ldr	r2, [r3, #4]
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    e89c:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
    e8a0:	f5a3 2192 	sub.w	r1, r3, #299008	; 0x49000
    e8a4:	297c      	cmp	r1, #124	; 0x7c
    e8a6:	d905      	bls.n	e8b4 <detachInterrupt+0x20>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    e8a8:	f5a3 2194 	sub.w	r1, r3, #303104	; 0x4a000
    e8ac:	297c      	cmp	r1, #124	; 0x7c
    e8ae:	d814      	bhi.n	e8da <detachInterrupt+0x46>
    e8b0:	4914      	ldr	r1, [pc, #80]	; (e904 <detachInterrupt+0x70>)
    e8b2:	e000      	b.n	e8b6 <detachInterrupt+0x22>
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    e8b4:	4914      	ldr	r1, [pc, #80]	; (e908 <detachInterrupt+0x74>)
{
    e8b6:	b410      	push	{r4}
	__disable_irq();
    e8b8:	b672      	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    e8ba:	6813      	ldr	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    e8bc:	4c13      	ldr	r4, [pc, #76]	; (e90c <detachInterrupt+0x78>)
	*config = ((*config & ~0x000F0000) | 0x01000000);
    e8be:	f023 7387 	bic.w	r3, r3, #17694720	; 0x10e0000
	return (v % 128) / 4;
    e8c2:	f3c2 0084 	ubfx	r0, r2, #2, #5
	*config = ((*config & ~0x000F0000) | 0x01000000);
    e8c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e8ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e8ce:	6013      	str	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    e8d0:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
	__enable_irq();
    e8d4:	b662      	cpsie	i
}
    e8d6:	bc10      	pop	{r4}
    e8d8:	4770      	bx	lr
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    e8da:	f5a3 2196 	sub.w	r1, r3, #307200	; 0x4b000
    e8de:	297c      	cmp	r1, #124	; 0x7c
    e8e0:	d909      	bls.n	e8f6 <detachInterrupt+0x62>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    e8e2:	f5a3 2198 	sub.w	r1, r3, #311296	; 0x4c000
    e8e6:	297c      	cmp	r1, #124	; 0x7c
    e8e8:	d907      	bls.n	e8fa <detachInterrupt+0x66>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    e8ea:	f5a3 239a 	sub.w	r3, r3, #315392	; 0x4d000
    e8ee:	2b7c      	cmp	r3, #124	; 0x7c
    e8f0:	d805      	bhi.n	e8fe <detachInterrupt+0x6a>
    e8f2:	4907      	ldr	r1, [pc, #28]	; (e910 <detachInterrupt+0x7c>)
    e8f4:	e7df      	b.n	e8b6 <detachInterrupt+0x22>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    e8f6:	4907      	ldr	r1, [pc, #28]	; (e914 <detachInterrupt+0x80>)
    e8f8:	e7dd      	b.n	e8b6 <detachInterrupt+0x22>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    e8fa:	4907      	ldr	r1, [pc, #28]	; (e918 <detachInterrupt+0x84>)
    e8fc:	e7db      	b.n	e8b6 <detachInterrupt+0x22>
    e8fe:	4770      	bx	lr
    e900:	00015e50 	.word	0x00015e50
    e904:	1fff91e8 	.word	0x1fff91e8
    e908:	1fff91b0 	.word	0x1fff91b0
    e90c:	0000e765 	.word	0x0000e765
    e910:	1fff9288 	.word	0x1fff9288
    e914:	1fff9238 	.word	0x1fff9238
    e918:	1fff9268 	.word	0x1fff9268

0000e91c <rtc_set>:
	RTC_SR = 0;
    e91c:	4b03      	ldr	r3, [pc, #12]	; (e92c <rtc_set+0x10>)
    e91e:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    e920:	2110      	movs	r1, #16
	RTC_SR = 0;
    e922:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    e924:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    e926:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    e928:	6159      	str	r1, [r3, #20]
}
    e92a:	4770      	bx	lr
    e92c:	4003d000 	.word	0x4003d000

0000e930 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    e930:	4770      	bx	lr
    e932:	bf00      	nop

0000e934 <_init_Teensyduino_internal_>:
{
    e934:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    e936:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    e93a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    e93e:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    e942:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    e946:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    e94a:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    e94e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    e952:	4a1d      	ldr	r2, [pc, #116]	; (e9c8 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    e954:	481d      	ldr	r0, [pc, #116]	; (e9cc <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    e956:	491e      	ldr	r1, [pc, #120]	; (e9d0 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    e958:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    e95c:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    e960:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    e962:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    e964:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e968:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    e96a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    e96e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    e972:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    e974:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    e976:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    e978:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    e97a:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    e97c:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    e97e:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    e980:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    e982:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    e984:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    e986:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e988:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    e98a:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    e98c:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    e98e:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    e990:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e992:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    e994:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    e996:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    e998:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    e99a:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e99c:	600d      	str	r5, [r1, #0]
	analog_init();
    e99e:	f7ff fbcd 	bl	e13c <analog_init>
	startup_middle_hook();
    e9a2:	f7ff ffc5 	bl	e930 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    e9a6:	4c0b      	ldr	r4, [pc, #44]	; (e9d4 <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    e9a8:	6823      	ldr	r3, [r4, #0]
    e9aa:	9300      	str	r3, [sp, #0]
	return ret;
    e9ac:	9b00      	ldr	r3, [sp, #0]
    e9ae:	2b13      	cmp	r3, #19
    e9b0:	d9fa      	bls.n	e9a8 <_init_Teensyduino_internal_+0x74>
	usb_init();
    e9b2:	f001 ff5f 	bl	10874 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    e9b6:	6823      	ldr	r3, [r4, #0]
    e9b8:	9301      	str	r3, [sp, #4]
	return ret;
    e9ba:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    e9bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    e9c0:	d3f9      	bcc.n	e9b6 <_init_Teensyduino_internal_+0x82>
}
    e9c2:	b003      	add	sp, #12
    e9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9c6:	bf00      	nop
    e9c8:	40038000 	.word	0x40038000
    e9cc:	40039000 	.word	0x40039000
    e9d0:	400b8000 	.word	0x400b8000
    e9d4:	1fff9d70 	.word	0x1fff9d70

0000e9d8 <analogWrite>:
	if (pin == A14) {
    e9d8:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    e9da:	4b7f      	ldr	r3, [pc, #508]	; (ebd8 <analogWrite+0x200>)
	if (pin == A14) {
    e9dc:	d036      	beq.n	ea4c <analogWrite+0x74>
	if (val <= 0) {
    e9de:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    e9e0:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    e9e2:	dd3f      	ble.n	ea64 <analogWrite+0x8c>
	max = 1 << analog_write_res;
    e9e4:	2201      	movs	r2, #1
    e9e6:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    e9ea:	4561      	cmp	r1, ip
{
    e9ec:	b510      	push	{r4, lr}
	} else if (val >= max) {
    e9ee:	d254      	bcs.n	ea9a <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    e9f0:	1ec2      	subs	r2, r0, #3
    e9f2:	2a01      	cmp	r2, #1
    e9f4:	d970      	bls.n	ead8 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    e9f6:	2820      	cmp	r0, #32
    e9f8:	d067      	beq.n	eaca <analogWrite+0xf2>
    e9fa:	2819      	cmp	r0, #25
    e9fc:	d065      	beq.n	eaca <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    e9fe:	4a77      	ldr	r2, [pc, #476]	; (ebdc <analogWrite+0x204>)
    ea00:	6892      	ldr	r2, [r2, #8]
    ea02:	fb02 1201 	mla	r2, r2, r1, r1
    ea06:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    ea0a:	1f42      	subs	r2, r0, #5
    ea0c:	2a1b      	cmp	r2, #27
    ea0e:	d87d      	bhi.n	eb0c <analogWrite+0x134>
    ea10:	e8df f012 	tbh	[pc, r2, lsl #1]
    ea14:	00bf00c6 	.word	0x00bf00c6
    ea18:	007c007c 	.word	0x007c007c
    ea1c:	00b100b8 	.word	0x00b100b8
    ea20:	007c007c 	.word	0x007c007c
    ea24:	007c007c 	.word	0x007c007c
    ea28:	007c007c 	.word	0x007c007c
    ea2c:	007c007c 	.word	0x007c007c
    ea30:	00aa007c 	.word	0x00aa007c
    ea34:	009c00a3 	.word	0x009c00a3
    ea38:	007c0095 	.word	0x007c0095
    ea3c:	007c00cd 	.word	0x007c00cd
    ea40:	007c007c 	.word	0x007c007c
    ea44:	007c007c 	.word	0x007c007c
    ea48:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    ea4c:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    ea4e:	280b      	cmp	r0, #11
			val <<= 12 - res;
    ea50:	bf95      	itete	ls
    ea52:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    ea56:	380c      	subhi	r0, #12
			val <<= 12 - res;
    ea58:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    ea5c:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    ea60:	f7ff bc76 	b.w	e350 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    ea64:	2821      	cmp	r0, #33	; 0x21
    ea66:	d817      	bhi.n	ea98 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    ea68:	4b5d      	ldr	r3, [pc, #372]	; (ebe0 <analogWrite+0x208>)
    ea6a:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    ea6e:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    ea72:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    ea76:	2900      	cmp	r1, #0
    ea78:	d03c      	beq.n	eaf4 <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    ea7a:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    ea7c:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    ea7e:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		*portModeRegister(pin) = 1;
    ea82:	2001      	movs	r0, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    ea84:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    ea88:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    ea8c:	6019      	str	r1, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    ea8e:	681a      	ldr	r2, [r3, #0]
    ea90:	f022 0220 	bic.w	r2, r2, #32
    ea94:	601a      	str	r2, [r3, #0]
    ea96:	4770      	bx	lr
    ea98:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    ea9a:	2821      	cmp	r0, #33	; 0x21
    ea9c:	d814      	bhi.n	eac8 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    ea9e:	4b50      	ldr	r3, [pc, #320]	; (ebe0 <analogWrite+0x208>)
    eaa0:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    eaa4:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    eaa8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    eaac:	b344      	cbz	r4, eb00 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    eaae:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    eab0:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    eab4:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    eab8:	2001      	movs	r0, #1
    eaba:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    eabe:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    eac0:	681a      	ldr	r2, [r3, #0]
    eac2:	f022 0220 	bic.w	r2, r2, #32
    eac6:	601a      	str	r2, [r3, #0]
}
    eac8:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    eaca:	4a46      	ldr	r2, [pc, #280]	; (ebe4 <analogWrite+0x20c>)
    eacc:	6892      	ldr	r2, [r2, #8]
    eace:	fb02 1201 	mla	r2, r2, r1, r1
    ead2:	fa22 f303 	lsr.w	r3, r2, r3
    ead6:	e798      	b.n	ea0a <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    ead8:	4c43      	ldr	r4, [pc, #268]	; (ebe8 <analogWrite+0x210>)
    eada:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    eadc:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    eade:	fb02 1201 	mla	r2, r2, r1, r1
    eae2:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    eae6:	d170      	bne.n	ebca <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    eae8:	4b40      	ldr	r3, [pc, #256]	; (ebec <analogWrite+0x214>)
		FTM1_C1V = cval;
    eaea:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    eaec:	f44f 7151 	mov.w	r1, #836	; 0x344
    eaf0:	6359      	str	r1, [r3, #52]	; 0x34
}
    eaf2:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    eaf4:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    eaf6:	6819      	ldr	r1, [r3, #0]
    eaf8:	f021 0102 	bic.w	r1, r1, #2
    eafc:	6019      	str	r1, [r3, #0]
    eafe:	e7c0      	b.n	ea82 <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    eb00:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    eb02:	681a      	ldr	r2, [r3, #0]
    eb04:	f042 0203 	orr.w	r2, r2, #3
    eb08:	601a      	str	r2, [r3, #0]
    eb0a:	e7d3      	b.n	eab4 <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    eb0c:	2821      	cmp	r0, #33	; 0x21
    eb0e:	d8db      	bhi.n	eac8 <analogWrite+0xf0>
    eb10:	297f      	cmp	r1, #127	; 0x7f
    eb12:	bfd4      	ite	le
    eb14:	2100      	movle	r1, #0
    eb16:	2101      	movgt	r1, #1
    eb18:	f7ff fe26 	bl	e768 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    eb1c:	4b30      	ldr	r3, [pc, #192]	; (ebe0 <analogWrite+0x208>)
    eb1e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    eb22:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    eb26:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    eb28:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    eb2a:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    eb2e:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    eb32:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    eb34:	681a      	ldr	r2, [r3, #0]
    eb36:	f022 0220 	bic.w	r2, r2, #32
    eb3a:	601a      	str	r2, [r3, #0]
}
    eb3c:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    eb3e:	4827      	ldr	r0, [pc, #156]	; (ebdc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb40:	4a2b      	ldr	r2, [pc, #172]	; (ebf0 <analogWrite+0x218>)
		FTM0_C1V = cval;
    eb42:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb44:	f240 4144 	movw	r1, #1092	; 0x444
    eb48:	6091      	str	r1, [r2, #8]
}
    eb4a:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    eb4c:	4823      	ldr	r0, [pc, #140]	; (ebdc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb4e:	4a28      	ldr	r2, [pc, #160]	; (ebf0 <analogWrite+0x218>)
		FTM0_C0V = cval;
    eb50:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb52:	f240 4144 	movw	r1, #1092	; 0x444
    eb56:	6051      	str	r1, [r2, #4]
}
    eb58:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    eb5a:	4820      	ldr	r0, [pc, #128]	; (ebdc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb5c:	4a25      	ldr	r2, [pc, #148]	; (ebf4 <analogWrite+0x21c>)
		FTM0_C6V = cval;
    eb5e:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb60:	f240 4144 	movw	r1, #1092	; 0x444
    eb64:	6191      	str	r1, [r2, #24]
}
    eb66:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    eb68:	481c      	ldr	r0, [pc, #112]	; (ebdc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb6a:	4a22      	ldr	r2, [pc, #136]	; (ebf4 <analogWrite+0x21c>)
		FTM0_C5V = cval;
    eb6c:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb6e:	f240 4144 	movw	r1, #1092	; 0x444
    eb72:	6151      	str	r1, [r2, #20]
}
    eb74:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    eb76:	4819      	ldr	r0, [pc, #100]	; (ebdc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb78:	4a1d      	ldr	r2, [pc, #116]	; (ebf0 <analogWrite+0x218>)
		FTM0_C3V = cval;
    eb7a:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb7c:	f240 4144 	movw	r1, #1092	; 0x444
    eb80:	6111      	str	r1, [r2, #16]
}
    eb82:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    eb84:	4815      	ldr	r0, [pc, #84]	; (ebdc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb86:	4a1a      	ldr	r2, [pc, #104]	; (ebf0 <analogWrite+0x218>)
		FTM0_C2V = cval;
    eb88:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb8a:	f240 4144 	movw	r1, #1092	; 0x444
    eb8e:	60d1      	str	r1, [r2, #12]
}
    eb90:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    eb92:	4812      	ldr	r0, [pc, #72]	; (ebdc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb94:	4a17      	ldr	r2, [pc, #92]	; (ebf4 <analogWrite+0x21c>)
		FTM0_C4V = cval;
    eb96:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eb98:	f240 4144 	movw	r1, #1092	; 0x444
    eb9c:	6111      	str	r1, [r2, #16]
}
    eb9e:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    eba0:	480e      	ldr	r0, [pc, #56]	; (ebdc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eba2:	4a14      	ldr	r2, [pc, #80]	; (ebf4 <analogWrite+0x21c>)
		FTM0_C7V = cval;
    eba4:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    eba6:	f240 4144 	movw	r1, #1092	; 0x444
    ebaa:	61d1      	str	r1, [r2, #28]
}
    ebac:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    ebae:	480d      	ldr	r0, [pc, #52]	; (ebe4 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    ebb0:	4a11      	ldr	r2, [pc, #68]	; (ebf8 <analogWrite+0x220>)
		FTM2_C1V = cval;
    ebb2:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    ebb4:	f44f 7151 	mov.w	r1, #836	; 0x344
    ebb8:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    ebba:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    ebbc:	4809      	ldr	r0, [pc, #36]	; (ebe4 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    ebbe:	4a0e      	ldr	r2, [pc, #56]	; (ebf8 <analogWrite+0x220>)
		FTM2_C0V = cval;
    ebc0:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    ebc2:	f44f 7151 	mov.w	r1, #836	; 0x344
    ebc6:	6491      	str	r1, [r2, #72]	; 0x48
}
    ebc8:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    ebca:	4b08      	ldr	r3, [pc, #32]	; (ebec <analogWrite+0x214>)
		FTM1_C0V = cval;
    ebcc:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    ebce:	f44f 7151 	mov.w	r1, #836	; 0x344
    ebd2:	6319      	str	r1, [r3, #48]	; 0x30
}
    ebd4:	bd10      	pop	{r4, pc}
    ebd6:	bf00      	nop
    ebd8:	1fff91ac 	.word	0x1fff91ac
    ebdc:	40038000 	.word	0x40038000
    ebe0:	00015e50 	.word	0x00015e50
    ebe4:	400b8000 	.word	0x400b8000
    ebe8:	40039000 	.word	0x40039000
    ebec:	40049000 	.word	0x40049000
    ebf0:	4004b000 	.word	0x4004b000
    ebf4:	4004c000 	.word	0x4004c000
    ebf8:	4004a000 	.word	0x4004a000

0000ebfc <analogWriteRes>:
{
    ebfc:	4603      	mov	r3, r0
	analog_write_res = bits;
    ebfe:	2b10      	cmp	r3, #16
    ec00:	bf28      	it	cs
    ec02:	2310      	movcs	r3, #16
	prior_res = analog_write_res;
    ec04:	4a03      	ldr	r2, [pc, #12]	; (ec14 <analogWriteRes+0x18>)
	analog_write_res = bits;
    ec06:	2b01      	cmp	r3, #1
    ec08:	bf38      	it	cc
    ec0a:	2301      	movcc	r3, #1
	prior_res = analog_write_res;
    ec0c:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    ec0e:	7013      	strb	r3, [r2, #0]
}
    ec10:	4770      	bx	lr
    ec12:	bf00      	nop
    ec14:	1fff91ac 	.word	0x1fff91ac

0000ec18 <analogWriteFrequency>:
{
    ec18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec1c:	460e      	mov	r6, r1
    ec1e:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    ec20:	492c      	ldr	r1, [pc, #176]	; (ecd4 <analogWriteFrequency+0xbc>)
    ec22:	4630      	mov	r0, r6
    ec24:	f002 fef8 	bl	11a18 <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    ec28:	4b2b      	ldr	r3, [pc, #172]	; (ecd8 <analogWriteFrequency+0xc0>)
    ec2a:	2800      	cmp	r0, #0
    ec2c:	f647 2712 	movw	r7, #31250	; 0x7a12
    ec30:	bf12      	itee	ne
    ec32:	f04f 0a02 	movne.w	sl, #2
    ec36:	f04f 0a01 	moveq.w	sl, #1
    ec3a:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    ec3c:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    ec3e:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    ec42:	fa27 f004 	lsr.w	r0, r7, r4
    ec46:	f002 fcf1 	bl	1162c <__aeabi_ui2f>
    ec4a:	4649      	mov	r1, r9
    ec4c:	4605      	mov	r5, r0
    ec4e:	f002 fd45 	bl	116dc <__aeabi_fmul>
    ec52:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    ec54:	4630      	mov	r0, r6
    ec56:	f002 fef3 	bl	11a40 <__aeabi_fcmpge>
    ec5a:	b930      	cbnz	r0, ec6a <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    ec5c:	3401      	adds	r4, #1
    ec5e:	2c07      	cmp	r4, #7
    ec60:	d1ef      	bne.n	ec42 <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    ec62:	09f8      	lsrs	r0, r7, #7
    ec64:	f002 fce2 	bl	1162c <__aeabi_ui2f>
    ec68:	4605      	mov	r5, r0
    ec6a:	4631      	mov	r1, r6
    ec6c:	4628      	mov	r0, r5
    ec6e:	f002 fde9 	bl	11844 <__aeabi_fdiv>
    ec72:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    ec76:	f002 fc27 	bl	114c8 <__aeabi_fsub>
    ec7a:	f002 ff1b 	bl	11ab4 <__aeabi_f2uiz>
    ec7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ec82:	4298      	cmp	r0, r3
    ec84:	bf28      	it	cs
    ec86:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    ec88:	f1a8 0303 	sub.w	r3, r8, #3
    ec8c:	2b01      	cmp	r3, #1
    ec8e:	d911      	bls.n	ecb4 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    ec90:	f1a8 0805 	sub.w	r8, r8, #5
    ec94:	fa5f f888 	uxtb.w	r8, r8
    ec98:	f1b8 0f1b 	cmp.w	r8, #27
    ec9c:	d808      	bhi.n	ecb0 <analogWriteFrequency+0x98>
    ec9e:	4a0f      	ldr	r2, [pc, #60]	; (ecdc <analogWriteFrequency+0xc4>)
    eca0:	2301      	movs	r3, #1
    eca2:	fa03 f308 	lsl.w	r3, r3, r8
    eca6:	401a      	ands	r2, r3
    eca8:	d110      	bne.n	eccc <analogWriteFrequency+0xb4>
    ecaa:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    ecae:	d10b      	bne.n	ecc8 <analogWriteFrequency+0xb0>
}
    ecb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    ecb4:	4b0a      	ldr	r3, [pc, #40]	; (ece0 <analogWriteFrequency+0xc8>)
    ecb6:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    ecb8:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    ecbc:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    ecbe:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    ecc0:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    ecc2:	601c      	str	r4, [r3, #0]
}
    ecc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    ecc8:	4b06      	ldr	r3, [pc, #24]	; (ece4 <analogWriteFrequency+0xcc>)
    ecca:	e7f5      	b.n	ecb8 <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    eccc:	4b06      	ldr	r3, [pc, #24]	; (ece8 <analogWriteFrequency+0xd0>)
    ecce:	2200      	movs	r2, #0
    ecd0:	e7f2      	b.n	ecb8 <analogWriteFrequency+0xa0>
    ecd2:	bf00      	nop
    ecd4:	40b71b00 	.word	0x40b71b00
    ecd8:	02dc6c00 	.word	0x02dc6c00
    ecdc:	00078033 	.word	0x00078033
    ece0:	40039000 	.word	0x40039000
    ece4:	400b8000 	.word	0x400b8000
    ece8:	40038000 	.word	0x40038000

0000ecec <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    ecec:	2821      	cmp	r0, #33	; 0x21
    ecee:	d816      	bhi.n	ed1e <digitalWrite+0x32>
{
    ecf0:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    ecf2:	4b10      	ldr	r3, [pc, #64]	; (ed34 <digitalWrite+0x48>)
    ecf4:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    ecf8:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    ecfc:	b12c      	cbz	r4, ed0a <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    ecfe:	2301      	movs	r3, #1
		if (val) {
    ed00:	b971      	cbnz	r1, ed20 <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    ed02:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    ed06:	bc10      	pop	{r4}
    ed08:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    ed0a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    ed0e:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    ed10:	681a      	ldr	r2, [r3, #0]
		if (val) {
    ed12:	b149      	cbz	r1, ed28 <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    ed14:	f042 0203 	orr.w	r2, r2, #3
}
    ed18:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    ed1a:	601a      	str	r2, [r3, #0]
}
    ed1c:	4770      	bx	lr
    ed1e:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    ed20:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    ed24:	bc10      	pop	{r4}
    ed26:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    ed28:	f022 0202 	bic.w	r2, r2, #2
}
    ed2c:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    ed2e:	601a      	str	r2, [r3, #0]
}
    ed30:	4770      	bx	lr
    ed32:	bf00      	nop
    ed34:	00015e50 	.word	0x00015e50

0000ed38 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    ed38:	2821      	cmp	r0, #33	; 0x21
    ed3a:	d806      	bhi.n	ed4a <digitalRead+0x12>
	return *portInputRegister(pin);
    ed3c:	4b04      	ldr	r3, [pc, #16]	; (ed50 <digitalRead+0x18>)
    ed3e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    ed42:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    ed46:	b2c0      	uxtb	r0, r0
    ed48:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    ed4a:	2000      	movs	r0, #0
}
    ed4c:	4770      	bx	lr
    ed4e:	bf00      	nop
    ed50:	00015e50 	.word	0x00015e50

0000ed54 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    ed54:	2821      	cmp	r0, #33	; 0x21
    ed56:	d820      	bhi.n	ed9a <pinMode+0x46>
	config = portConfigRegister(pin);
    ed58:	4a1b      	ldr	r2, [pc, #108]	; (edc8 <pinMode+0x74>)
    ed5a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ed5e:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    ed60:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ed62:	d00f      	beq.n	ed84 <pinMode+0x30>
    ed64:	2904      	cmp	r1, #4
    ed66:	d01d      	beq.n	eda4 <pinMode+0x50>
		*portModeRegister(pin) = 0;
    ed68:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    ed6c:	2200      	movs	r2, #0
    ed6e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
		if (mode == INPUT) {
    ed72:	b199      	cbz	r1, ed9c <pinMode+0x48>
		} else if (mode == INPUT_PULLUP) {
    ed74:	2902      	cmp	r1, #2
    ed76:	d022      	beq.n	edbe <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    ed78:	2903      	cmp	r1, #3
    ed7a:	d10d      	bne.n	ed98 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    ed7c:	f44f 7281 	mov.w	r2, #258	; 0x102
    ed80:	601a      	str	r2, [r3, #0]
    ed82:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    ed84:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    ed88:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    ed8c:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    ed90:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    ed92:	681a      	ldr	r2, [r3, #0]
    ed94:	f022 0220 	bic.w	r2, r2, #32
    ed98:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    ed9a:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    ed9c:	f44f 7280 	mov.w	r2, #256	; 0x100
    eda0:	601a      	str	r2, [r3, #0]
    eda2:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    eda4:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    eda8:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    edac:	2001      	movs	r0, #1
    edae:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    edb2:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    edb4:	681a      	ldr	r2, [r3, #0]
    edb6:	f042 0220 	orr.w	r2, r2, #32
    edba:	601a      	str	r2, [r3, #0]
    edbc:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    edbe:	f240 1203 	movw	r2, #259	; 0x103
    edc2:	601a      	str	r2, [r3, #0]
    edc4:	4770      	bx	lr
    edc6:	bf00      	nop
    edc8:	00015e50 	.word	0x00015e50

0000edcc <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    edcc:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    edce:	490d      	ldr	r1, [pc, #52]	; (ee04 <micros+0x38>)
	current = SYST_CVR;
    edd0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    edd4:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    edd6:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    edd8:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    eddc:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    edde:	0152      	lsls	r2, r2, #5
    ede0:	d502      	bpl.n	ede8 <micros+0x1c>
    ede2:	2b32      	cmp	r3, #50	; 0x32
    ede4:	bf88      	it	hi
    ede6:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ede8:	4a07      	ldr	r2, [pc, #28]	; (ee08 <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    edea:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    edee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    edf2:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    edf4:	fba2 2303 	umull	r2, r3, r2, r3
    edf8:	fb01 f000 	mul.w	r0, r1, r0
}
    edfc:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    ee00:	4770      	bx	lr
    ee02:	bf00      	nop
    ee04:	1fff9d70 	.word	0x1fff9d70
    ee08:	aaaaaaab 	.word	0xaaaaaaab

0000ee0c <delay>:

void delay(uint32_t ms)
{
    ee0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee10:	4604      	mov	r4, r0
	__disable_irq();
    ee12:	b672      	cpsid	i
	count = systick_millis_count;
    ee14:	4f20      	ldr	r7, [pc, #128]	; (ee98 <delay+0x8c>)
	current = SYST_CVR;
    ee16:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ee1a:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    ee1c:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee1e:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    ee22:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ee24:	0152      	lsls	r2, r2, #5
    ee26:	d502      	bpl.n	ee2e <delay+0x22>
    ee28:	2b32      	cmp	r3, #50	; 0x32
    ee2a:	bf88      	it	hi
    ee2c:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    ee2e:	b90c      	cbnz	r4, ee34 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    ee30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    ee34:	f8df 9064 	ldr.w	r9, [pc, #100]	; ee9c <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    ee38:	f8df 8064 	ldr.w	r8, [pc, #100]	; eea0 <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    ee3c:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    ee40:	fba8 2303 	umull	r2, r3, r8, r3
    ee44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee48:	fb02 f505 	mul.w	r5, r2, r5
    ee4c:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    ee50:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    ee54:	b672      	cpsid	i
	current = SYST_CVR;
    ee56:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    ee58:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee5a:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    ee5e:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    ee60:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    ee64:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ee68:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    ee6c:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    ee70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ee74:	d002      	beq.n	ee7c <delay+0x70>
    ee76:	2932      	cmp	r1, #50	; 0x32
    ee78:	bf88      	it	hi
    ee7a:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    ee7c:	fb00 3302 	mla	r3, r0, r2, r3
    ee80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    ee84:	d304      	bcc.n	ee90 <delay+0x84>
				if (ms == 0) return;
    ee86:	3c01      	subs	r4, #1
    ee88:	d0d2      	beq.n	ee30 <delay+0x24>
				start += 1000;
    ee8a:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    ee8e:	e7e1      	b.n	ee54 <delay+0x48>
			yield();
    ee90:	f002 f8be 	bl	11010 <yield>
			while ((micros() - start) >= 1000) {
    ee94:	e7de      	b.n	ee54 <delay+0x48>
    ee96:	bf00      	nop
    ee98:	1fff9d70 	.word	0x1fff9d70
    ee9c:	000176ff 	.word	0x000176ff
    eea0:	aaaaaaab 	.word	0xaaaaaaab

0000eea4 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    eea4:	4a2a      	ldr	r2, [pc, #168]	; (ef50 <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    eea6:	492b      	ldr	r1, [pc, #172]	; (ef54 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    eea8:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    eeaa:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    eeac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    eeb0:	4d29      	ldr	r5, [pc, #164]	; (ef58 <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    eeb2:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    eeb4:	4e29      	ldr	r6, [pc, #164]	; (ef5c <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    eeb6:	4c2a      	ldr	r4, [pc, #168]	; (ef60 <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    eeb8:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    eeba:	2300      	movs	r3, #0
    eebc:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    eebe:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    eec0:	4928      	ldr	r1, [pc, #160]	; (ef64 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    eec2:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    eec4:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    eec6:	4928      	ldr	r1, [pc, #160]	; (ef68 <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    eec8:	2a09      	cmp	r2, #9
	transmitting = 0;
    eeca:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    eecc:	d033      	beq.n	ef36 <serial2_begin+0x92>
    eece:	2a1a      	cmp	r2, #26
    eed0:	d103      	bne.n	eeda <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    eed2:	4b26      	ldr	r3, [pc, #152]	; (ef6c <serial2_begin+0xc8>)
    eed4:	f240 3213 	movw	r2, #787	; 0x313
    eed8:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    eeda:	4b25      	ldr	r3, [pc, #148]	; (ef70 <serial2_begin+0xcc>)
    eedc:	781b      	ldrb	r3, [r3, #0]
    eede:	2b0a      	cmp	r3, #10
    eee0:	d031      	beq.n	ef46 <serial2_begin+0xa2>
    eee2:	2b1f      	cmp	r3, #31
    eee4:	d103      	bne.n	eeee <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    eee6:	4b21      	ldr	r3, [pc, #132]	; (ef6c <serial2_begin+0xc8>)
    eee8:	f44f 7251 	mov.w	r2, #836	; 0x344
    eeec:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    eeee:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    eef0:	4b20      	ldr	r3, [pc, #128]	; (ef74 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    eef2:	4c21      	ldr	r4, [pc, #132]	; (ef78 <serial2_begin+0xd4>)
    eef4:	bf38      	it	cc
    eef6:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    eef8:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    eefc:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    ef00:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    ef04:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    ef08:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    ef0c:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    ef0e:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    ef10:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    ef12:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    ef14:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    ef16:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    ef18:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    ef1a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    ef1e:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    ef20:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    ef22:	203c      	movs	r0, #60	; 0x3c
    ef24:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    ef26:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    ef2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    ef2e:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    ef30:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    ef34:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    ef36:	4b11      	ldr	r3, [pc, #68]	; (ef7c <serial2_begin+0xd8>)
    ef38:	f240 3213 	movw	r2, #787	; 0x313
    ef3c:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    ef3e:	4b0c      	ldr	r3, [pc, #48]	; (ef70 <serial2_begin+0xcc>)
    ef40:	781b      	ldrb	r3, [r3, #0]
    ef42:	2b0a      	cmp	r3, #10
    ef44:	d1cd      	bne.n	eee2 <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    ef46:	4b0d      	ldr	r3, [pc, #52]	; (ef7c <serial2_begin+0xd8>)
    ef48:	f44f 7251 	mov.w	r2, #836	; 0x344
    ef4c:	611a      	str	r2, [r3, #16]
    ef4e:	e7ce      	b.n	eeee <serial2_begin+0x4a>
    ef50:	40048000 	.word	0x40048000
    ef54:	1fff9dc0 	.word	0x1fff9dc0
    ef58:	1fff9db8 	.word	0x1fff9db8
    ef5c:	1fff929c 	.word	0x1fff929c
    ef60:	1fff9df4 	.word	0x1fff9df4
    ef64:	1fff9dfc 	.word	0x1fff9dfc
    ef68:	1fff9dc8 	.word	0x1fff9dc8
    ef6c:	4004d000 	.word	0x4004d000
    ef70:	1fff92a4 	.word	0x1fff92a4
    ef74:	4006b000 	.word	0x4006b000
    ef78:	e000e400 	.word	0xe000e400
    ef7c:	4004b000 	.word	0x4004b000

0000ef80 <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    ef80:	4b29      	ldr	r3, [pc, #164]	; (f028 <serial2_format+0xa8>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    ef82:	4929      	ldr	r1, [pc, #164]	; (f028 <serial2_format+0xa8>)
	c = UART1_C1;
    ef84:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    ef86:	f000 0203 	and.w	r2, r0, #3
    ef8a:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    ef8e:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    ef90:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ef92:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    ef96:	bf48      	it	mi
    ef98:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ef9c:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    ef9e:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    efa0:	d103      	bne.n	efaa <serial2_format+0x2a>
    efa2:	798b      	ldrb	r3, [r1, #6]
    efa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    efa8:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    efaa:	4b1f      	ldr	r3, [pc, #124]	; (f028 <serial2_format+0xa8>)
    efac:	795a      	ldrb	r2, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    efae:	06c3      	lsls	r3, r0, #27
	c = UART1_S2 & ~0x10;
    efb0:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	UART1_S2 = c;
    efb4:	4b1c      	ldr	r3, [pc, #112]	; (f028 <serial2_format+0xa8>)
	if (format & 0x10) c |= 0x10;		// rx invert
    efb6:	bf48      	it	mi
    efb8:	f042 0210 	orrmi.w	r2, r2, #16
	UART1_S2 = c;
    efbc:	715a      	strb	r2, [r3, #5]
	c = UART1_C3 & ~0x10;
    efbe:	799a      	ldrb	r2, [r3, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    efc0:	0681      	lsls	r1, r0, #26
	c = UART1_C3 & ~0x10;
    efc2:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x20) c |= 0x10;		// tx invert
    efc6:	d511      	bpl.n	efec <serial2_format+0x6c>
    efc8:	f042 0210 	orr.w	r2, r2, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    efcc:	0581      	lsls	r1, r0, #22
	UART1_C3 = c;
    efce:	719a      	strb	r2, [r3, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    efd0:	d50f      	bpl.n	eff2 <serial2_format+0x72>
		c = UART1_C1;
    efd2:	789a      	ldrb	r2, [r3, #2]
		uint32_t pin_cfg = PORT_PCR_PE | PORT_PCR_PFE | PORT_PCR_MUX(3);
		if ((format & 0x20) == 0) pin_cfg |=  PORT_PCR_PS;  // if not inverted PU else leve as PD
		CORE_PIN10_CONFIG = pin_cfg;
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    efd4:	4915      	ldr	r1, [pc, #84]	; (f02c <serial2_format+0xac>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    efd6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
		UART1_C1 = c;
    efda:	709a      	strb	r2, [r3, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    efdc:	7809      	ldrb	r1, [r1, #0]
    efde:	4b14      	ldr	r3, [pc, #80]	; (f030 <serial2_format+0xb0>)
    efe0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		uint32_t pin_cfg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE;
    efe4:	f240 3246 	movw	r2, #838	; 0x346
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    efe8:	685b      	ldr	r3, [r3, #4]
		if ((format & 0x20) == 0) pin_cfg |=  PORT_PCR_PS;  // if not inverted PU else leve as PD
    efea:	e014      	b.n	f016 <serial2_format+0x96>
	UART1_C3 = c;
    efec:	719a      	strb	r2, [r3, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    efee:	0582      	lsls	r2, r0, #22
    eff0:	d405      	bmi.n	effe <serial2_format+0x7e>

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    eff2:	4b10      	ldr	r3, [pc, #64]	; (f034 <serial2_format+0xb4>)
    eff4:	4a10      	ldr	r2, [pc, #64]	; (f038 <serial2_format+0xb8>)
    eff6:	6819      	ldr	r1, [r3, #0]
    eff8:	4291      	cmp	r1, r2
    effa:	d011      	beq.n	f020 <serial2_format+0xa0>
		#endif
	}
}
    effc:	4770      	bx	lr
		c = UART1_C1;
    effe:	789a      	ldrb	r2, [r3, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    f000:	490a      	ldr	r1, [pc, #40]	; (f02c <serial2_format+0xac>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    f002:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
		UART1_C1 = c;
    f006:	709a      	strb	r2, [r3, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    f008:	7809      	ldrb	r1, [r1, #0]
    f00a:	4b09      	ldr	r3, [pc, #36]	; (f030 <serial2_format+0xb0>)
    f00c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		if ((format & 0x20) == 0) pin_cfg |=  PORT_PCR_PS;  // if not inverted PU else leve as PD
    f010:	f240 3247 	movw	r2, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    f014:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    f016:	4907      	ldr	r1, [pc, #28]	; (f034 <serial2_format+0xb4>)
    f018:	4807      	ldr	r0, [pc, #28]	; (f038 <serial2_format+0xb8>)
		*reg = pin_cfg;
    f01a:	601a      	str	r2, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    f01c:	6008      	str	r0, [r1, #0]
    f01e:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    f020:	2200      	movs	r2, #0
    f022:	601a      	str	r2, [r3, #0]
}
    f024:	4770      	bx	lr
    f026:	bf00      	nop
    f028:	4006b000 	.word	0x4006b000
    f02c:	1fff92a4 	.word	0x1fff92a4
    f030:	00015e50 	.word	0x00015e50
    f034:	1fff9dc4 	.word	0x1fff9dc4
    f038:	42d600d4 	.word	0x42d600d4

0000f03c <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    f03c:	4b29      	ldr	r3, [pc, #164]	; (f0e4 <serial2_end+0xa8>)
    f03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f040:	051b      	lsls	r3, r3, #20
    f042:	d54d      	bpl.n	f0e0 <serial2_end+0xa4>
{
    f044:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    f046:	4c28      	ldr	r4, [pc, #160]	; (f0e8 <serial2_end+0xac>)
    f048:	7823      	ldrb	r3, [r4, #0]
    f04a:	b123      	cbz	r3, f056 <serial2_end+0x1a>
    f04c:	f001 ffe0 	bl	11010 <yield>
    f050:	7823      	ldrb	r3, [r4, #0]
    f052:	2b00      	cmp	r3, #0
    f054:	d1fa      	bne.n	f04c <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    f056:	4a25      	ldr	r2, [pc, #148]	; (f0ec <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    f058:	4b25      	ldr	r3, [pc, #148]	; (f0f0 <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    f05a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    f05e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    f062:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    f064:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    f068:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    f06a:	781b      	ldrb	r3, [r3, #0]
    f06c:	2b09      	cmp	r3, #9
    f06e:	d02c      	beq.n	f0ca <serial2_end+0x8e>
    f070:	2b1a      	cmp	r3, #26
    f072:	d01b      	beq.n	f0ac <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    f074:	4b1f      	ldr	r3, [pc, #124]	; (f0f4 <serial2_end+0xb8>)
    f076:	781b      	ldrb	r3, [r3, #0]
    f078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f07c:	2b0a      	cmp	r3, #10
    f07e:	d01f      	beq.n	f0c0 <serial2_end+0x84>
    f080:	2b1f      	cmp	r3, #31
    f082:	d00e      	beq.n	f0a2 <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    f084:	4b1c      	ldr	r3, [pc, #112]	; (f0f8 <serial2_end+0xbc>)
	UART1_S1;
    f086:	4a19      	ldr	r2, [pc, #100]	; (f0ec <serial2_end+0xb0>)
	rx_buffer_head = 0;
    f088:	4c1c      	ldr	r4, [pc, #112]	; (f0fc <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    f08a:	481d      	ldr	r0, [pc, #116]	; (f100 <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    f08c:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    f08e:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    f092:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    f094:	2300      	movs	r3, #0
    f096:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    f098:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    f09a:	b109      	cbz	r1, f0a0 <serial2_end+0x64>
    f09c:	2301      	movs	r3, #1
    f09e:	700b      	strb	r3, [r1, #0]
}
    f0a0:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    f0a2:	4b18      	ldr	r3, [pc, #96]	; (f104 <serial2_end+0xc8>)
    f0a4:	f240 1203 	movw	r2, #259	; 0x103
    f0a8:	601a      	str	r2, [r3, #0]
    f0aa:	e7eb      	b.n	f084 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    f0ac:	4b15      	ldr	r3, [pc, #84]	; (f104 <serial2_end+0xc8>)
    f0ae:	f240 1203 	movw	r2, #259	; 0x103
    f0b2:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    f0b4:	4b0f      	ldr	r3, [pc, #60]	; (f0f4 <serial2_end+0xb8>)
    f0b6:	781b      	ldrb	r3, [r3, #0]
    f0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f0bc:	2b0a      	cmp	r3, #10
    f0be:	d1df      	bne.n	f080 <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    f0c0:	4b11      	ldr	r3, [pc, #68]	; (f108 <serial2_end+0xcc>)
    f0c2:	f240 1203 	movw	r2, #259	; 0x103
    f0c6:	611a      	str	r2, [r3, #16]
    f0c8:	e7dc      	b.n	f084 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    f0ca:	4b0f      	ldr	r3, [pc, #60]	; (f108 <serial2_end+0xcc>)
    f0cc:	f240 1203 	movw	r2, #259	; 0x103
    f0d0:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    f0d2:	4b08      	ldr	r3, [pc, #32]	; (f0f4 <serial2_end+0xb8>)
    f0d4:	781b      	ldrb	r3, [r3, #0]
    f0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f0da:	2b0a      	cmp	r3, #10
    f0dc:	d1d0      	bne.n	f080 <serial2_end+0x44>
    f0de:	e7ef      	b.n	f0c0 <serial2_end+0x84>
    f0e0:	4770      	bx	lr
    f0e2:	bf00      	nop
    f0e4:	40048000 	.word	0x40048000
    f0e8:	1fff9dc8 	.word	0x1fff9dc8
    f0ec:	4006b000 	.word	0x4006b000
    f0f0:	1fff929c 	.word	0x1fff929c
    f0f4:	1fff92a4 	.word	0x1fff92a4
    f0f8:	1fff9d74 	.word	0x1fff9d74
    f0fc:	1fff9db8 	.word	0x1fff9db8
    f100:	1fff9dc0 	.word	0x1fff9dc0
    f104:	4004d000 	.word	0x4004d000
    f108:	4004b000 	.word	0x4004b000

0000f10c <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    f10c:	4a0a      	ldr	r2, [pc, #40]	; (f138 <serial2_set_transmit_pin+0x2c>)
{
    f10e:	b538      	push	{r3, r4, r5, lr}
    f110:	4605      	mov	r5, r0
	while (transmitting) ;
    f112:	7813      	ldrb	r3, [r2, #0]
    f114:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    f118:	2b00      	cmp	r3, #0
    f11a:	d1fa      	bne.n	f112 <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    f11c:	2101      	movs	r1, #1
    f11e:	4628      	mov	r0, r5
    f120:	f7ff fe18 	bl	ed54 <pinMode>
	digitalWrite(pin, LOW);
    f124:	4621      	mov	r1, r4
    f126:	4628      	mov	r0, r5
    f128:	f7ff fde0 	bl	ecec <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    f12c:	4a03      	ldr	r2, [pc, #12]	; (f13c <serial2_set_transmit_pin+0x30>)
    f12e:	4b04      	ldr	r3, [pc, #16]	; (f140 <serial2_set_transmit_pin+0x34>)
    f130:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    f134:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    f136:	bd38      	pop	{r3, r4, r5, pc}
    f138:	1fff9dc8 	.word	0x1fff9dc8
    f13c:	00015e50 	.word	0x00015e50
    f140:	1fff9dc4 	.word	0x1fff9dc4

0000f144 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    f144:	b109      	cbz	r1, f14a <serial2_set_tx+0x6>
    f146:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    f14a:	4a19      	ldr	r2, [pc, #100]	; (f1b0 <serial2_set_tx+0x6c>)
    f14c:	7813      	ldrb	r3, [r2, #0]
    f14e:	4283      	cmp	r3, r0
    f150:	d017      	beq.n	f182 <serial2_set_tx+0x3e>
{
    f152:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    f154:	4c17      	ldr	r4, [pc, #92]	; (f1b4 <serial2_set_tx+0x70>)
    f156:	6b64      	ldr	r4, [r4, #52]	; 0x34
    f158:	0524      	lsls	r4, r4, #20
    f15a:	d50f      	bpl.n	f17c <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    f15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f160:	2b0a      	cmp	r3, #10
    f162:	d021      	beq.n	f1a8 <serial2_set_tx+0x64>
    f164:	2b1f      	cmp	r3, #31
    f166:	d014      	beq.n	f192 <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    f168:	2900      	cmp	r1, #0
    f16a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    f16e:	bf14      	ite	ne
    f170:	2160      	movne	r1, #96	; 0x60
    f172:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    f174:	2b0a      	cmp	r3, #10
    f176:	d010      	beq.n	f19a <serial2_set_tx+0x56>
    f178:	2b1f      	cmp	r3, #31
    f17a:	d003      	beq.n	f184 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    f17c:	7010      	strb	r0, [r2, #0]
	#endif
}
    f17e:	bc10      	pop	{r4}
    f180:	4770      	bx	lr
    f182:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    f184:	4b0c      	ldr	r3, [pc, #48]	; (f1b8 <serial2_set_tx+0x74>)
    f186:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    f18a:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    f18c:	7010      	strb	r0, [r2, #0]
}
    f18e:	bc10      	pop	{r4}
    f190:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    f192:	4b09      	ldr	r3, [pc, #36]	; (f1b8 <serial2_set_tx+0x74>)
    f194:	2400      	movs	r4, #0
    f196:	601c      	str	r4, [r3, #0]
    f198:	e7e6      	b.n	f168 <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    f19a:	4b08      	ldr	r3, [pc, #32]	; (f1bc <serial2_set_tx+0x78>)
    f19c:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    f1a0:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    f1a2:	7010      	strb	r0, [r2, #0]
}
    f1a4:	bc10      	pop	{r4}
    f1a6:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    f1a8:	4b04      	ldr	r3, [pc, #16]	; (f1bc <serial2_set_tx+0x78>)
    f1aa:	2400      	movs	r4, #0
    f1ac:	611c      	str	r4, [r3, #16]
    f1ae:	e7db      	b.n	f168 <serial2_set_tx+0x24>
    f1b0:	1fff92a4 	.word	0x1fff92a4
    f1b4:	40048000 	.word	0x40048000
    f1b8:	4004d000 	.word	0x4004d000
    f1bc:	4004b000 	.word	0x4004b000

0000f1c0 <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    f1c0:	4b12      	ldr	r3, [pc, #72]	; (f20c <serial2_set_rx+0x4c>)
    f1c2:	781a      	ldrb	r2, [r3, #0]
    f1c4:	4282      	cmp	r2, r0
    f1c6:	d00c      	beq.n	f1e2 <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    f1c8:	4911      	ldr	r1, [pc, #68]	; (f210 <serial2_set_rx+0x50>)
    f1ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
    f1cc:	0509      	lsls	r1, r1, #20
    f1ce:	d507      	bpl.n	f1e0 <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    f1d0:	2a09      	cmp	r2, #9
    f1d2:	d016      	beq.n	f202 <serial2_set_rx+0x42>
    f1d4:	2a1a      	cmp	r2, #26
    f1d6:	d00a      	beq.n	f1ee <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    f1d8:	2809      	cmp	r0, #9
    f1da:	d00d      	beq.n	f1f8 <serial2_set_rx+0x38>
    f1dc:	281a      	cmp	r0, #26
    f1de:	d001      	beq.n	f1e4 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    f1e0:	7018      	strb	r0, [r3, #0]
	#endif
}
    f1e2:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f1e4:	4a0b      	ldr	r2, [pc, #44]	; (f214 <serial2_set_rx+0x54>)
    f1e6:	f240 3113 	movw	r1, #787	; 0x313
    f1ea:	6051      	str	r1, [r2, #4]
    f1ec:	e7f8      	b.n	f1e0 <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    f1ee:	4a09      	ldr	r2, [pc, #36]	; (f214 <serial2_set_rx+0x54>)
    f1f0:	2100      	movs	r1, #0
		switch (pin) {
    f1f2:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    f1f4:	6051      	str	r1, [r2, #4]
		switch (pin) {
    f1f6:	d1f1      	bne.n	f1dc <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f1f8:	4a07      	ldr	r2, [pc, #28]	; (f218 <serial2_set_rx+0x58>)
    f1fa:	f240 3113 	movw	r1, #787	; 0x313
    f1fe:	60d1      	str	r1, [r2, #12]
    f200:	e7ee      	b.n	f1e0 <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    f202:	4a05      	ldr	r2, [pc, #20]	; (f218 <serial2_set_rx+0x58>)
    f204:	2100      	movs	r1, #0
    f206:	60d1      	str	r1, [r2, #12]
    f208:	e7e6      	b.n	f1d8 <serial2_set_rx+0x18>
    f20a:	bf00      	nop
    f20c:	1fff929c 	.word	0x1fff929c
    f210:	40048000 	.word	0x40048000
    f214:	4004d000 	.word	0x4004d000
    f218:	4004b000 	.word	0x4004b000

0000f21c <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    f21c:	4b0d      	ldr	r3, [pc, #52]	; (f254 <serial2_set_rts+0x38>)
    f21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f220:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    f224:	d013      	beq.n	f24e <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    f226:	2821      	cmp	r0, #33	; 0x21
    f228:	d903      	bls.n	f232 <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    f22a:	4b0b      	ldr	r3, [pc, #44]	; (f258 <serial2_set_rts+0x3c>)
    f22c:	2000      	movs	r0, #0
    f22e:	6018      	str	r0, [r3, #0]
		return 0;
    f230:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    f232:	4b0a      	ldr	r3, [pc, #40]	; (f25c <serial2_set_rts+0x40>)
{
    f234:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    f236:	4c08      	ldr	r4, [pc, #32]	; (f258 <serial2_set_rts+0x3c>)
    f238:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    f23c:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    f23e:	2101      	movs	r1, #1
    f240:	f7ff fd88 	bl	ed54 <pinMode>
		rts_assert();
    f244:	6823      	ldr	r3, [r4, #0]
    f246:	2200      	movs	r2, #0
    f248:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    f24a:	2001      	movs	r0, #1
}
    f24c:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    f24e:	4618      	mov	r0, r3
}
    f250:	4770      	bx	lr
    f252:	bf00      	nop
    f254:	40048000 	.word	0x40048000
    f258:	1fff9d74 	.word	0x1fff9d74
    f25c:	00015e50 	.word	0x00015e50

0000f260 <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    f260:	4b0c      	ldr	r3, [pc, #48]	; (f294 <serial2_set_cts+0x34>)
    f262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f264:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    f268:	d012      	beq.n	f290 <serial2_set_cts+0x30>
	if (pin == 23) {
    f26a:	2817      	cmp	r0, #23
    f26c:	d109      	bne.n	f282 <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    f26e:	4b0a      	ldr	r3, [pc, #40]	; (f298 <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    f270:	4a0a      	ldr	r2, [pc, #40]	; (f29c <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    f272:	f240 3102 	movw	r1, #770	; 0x302
    f276:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    f278:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    f27a:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    f27c:	4303      	orrs	r3, r0
    f27e:	7353      	strb	r3, [r2, #13]
	return 1;
    f280:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    f282:	4a06      	ldr	r2, [pc, #24]	; (f29c <serial2_set_cts+0x3c>)
    f284:	7b53      	ldrb	r3, [r2, #13]
    f286:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    f28a:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    f28c:	7353      	strb	r3, [r2, #13]
		return 0;
    f28e:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    f290:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    f292:	4770      	bx	lr
    f294:	40048000 	.word	0x40048000
    f298:	4004b000 	.word	0x4004b000
    f29c:	4006b000 	.word	0x4006b000

0000f2a0 <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    f2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    f2a4:	4b33      	ldr	r3, [pc, #204]	; (f374 <serial2_putchar+0xd4>)
    f2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f2a8:	051a      	lsls	r2, r3, #20
    f2aa:	d53a      	bpl.n	f322 <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    f2ac:	4b32      	ldr	r3, [pc, #200]	; (f378 <serial2_putchar+0xd8>)
    f2ae:	681b      	ldr	r3, [r3, #0]
    f2b0:	4606      	mov	r6, r0
    f2b2:	b10b      	cbz	r3, f2b8 <serial2_putchar+0x18>
    f2b4:	2201      	movs	r2, #1
    f2b6:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    f2b8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; f37c <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    f2bc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; f380 <serial2_putchar+0xe0>
	head = tx_buffer_head;
    f2c0:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    f2c4:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    f2c8:	4d2e      	ldr	r5, [pc, #184]	; (f384 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    f2ca:	3401      	adds	r4, #1
    f2cc:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    f2ce:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    f2d0:	d929      	bls.n	f326 <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    f2d2:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    f2d4:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    f2d8:	d114      	bne.n	f304 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    f2da:	4f2b      	ldr	r7, [pc, #172]	; (f388 <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    f2dc:	f8df b0ac 	ldr.w	fp, [pc, #172]	; f38c <serial2_putchar+0xec>
    f2e0:	e005      	b.n	f2ee <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    f2e2:	793b      	ldrb	r3, [r7, #4]
    f2e4:	061b      	lsls	r3, r3, #24
    f2e6:	d423      	bmi.n	f330 <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    f2e8:	782b      	ldrb	r3, [r5, #0]
    f2ea:	42a3      	cmp	r3, r4
    f2ec:	d10a      	bne.n	f304 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    f2ee:	f7ff f9e5 	bl	e6bc <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    f2f2:	2840      	cmp	r0, #64	; 0x40
    f2f4:	ddf5      	ble.n	f2e2 <serial2_putchar+0x42>
		} else if (priority >= 256) {
    f2f6:	28ff      	cmp	r0, #255	; 0xff
    f2f8:	ddf6      	ble.n	f2e8 <serial2_putchar+0x48>
			yield(); // wait
    f2fa:	f001 fe89 	bl	11010 <yield>
	while (tx_buffer_tail == head) {
    f2fe:	782b      	ldrb	r3, [r5, #0]
    f300:	42a3      	cmp	r3, r4
    f302:	d0f4      	beq.n	f2ee <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    f304:	2c27      	cmp	r4, #39	; 0x27
    f306:	d929      	bls.n	f35c <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    f308:	4b21      	ldr	r3, [pc, #132]	; (f390 <serial2_putchar+0xf0>)
    f30a:	3c28      	subs	r4, #40	; 0x28
    f30c:	681b      	ldr	r3, [r3, #0]
    f30e:	b2f6      	uxtb	r6, r6
    f310:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    f312:	4a20      	ldr	r2, [pc, #128]	; (f394 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    f314:	4b1c      	ldr	r3, [pc, #112]	; (f388 <serial2_putchar+0xe8>)
	transmitting = 1;
    f316:	2101      	movs	r1, #1
    f318:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    f31a:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    f31c:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    f320:	70da      	strb	r2, [r3, #3]
}
    f322:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    f326:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    f32a:	b9a3      	cbnz	r3, f356 <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    f32c:	4654      	mov	r4, sl
    f32e:	e7d4      	b.n	f2da <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    f330:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f332:	f8d8 1000 	ldr.w	r1, [r8]
    f336:	1c5a      	adds	r2, r3, #1
    f338:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    f33a:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f33c:	d908      	bls.n	f350 <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    f33e:	2a27      	cmp	r2, #39	; 0x27
    f340:	d810      	bhi.n	f364 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    f342:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    f344:	f81b 3002 	ldrb.w	r3, [fp, r2]
    f348:	b2db      	uxtb	r3, r3
				UART1_D = n;
    f34a:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    f34c:	7029      	strb	r1, [r5, #0]
    f34e:	e7cb      	b.n	f2e8 <serial2_putchar+0x48>
    f350:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f352:	460a      	mov	r2, r1
    f354:	e7f6      	b.n	f344 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    f356:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    f35a:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    f35c:	4b0b      	ldr	r3, [pc, #44]	; (f38c <serial2_putchar+0xec>)
    f35e:	b2f6      	uxtb	r6, r6
    f360:	551e      	strb	r6, [r3, r4]
    f362:	e7d6      	b.n	f312 <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    f364:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    f366:	4a0a      	ldr	r2, [pc, #40]	; (f390 <serial2_putchar+0xf0>)
    f368:	3b27      	subs	r3, #39	; 0x27
    f36a:	6812      	ldr	r2, [r2, #0]
    f36c:	5cd3      	ldrb	r3, [r2, r3]
    f36e:	b2db      	uxtb	r3, r3
    f370:	e7eb      	b.n	f34a <serial2_putchar+0xaa>
    f372:	bf00      	nop
    f374:	40048000 	.word	0x40048000
    f378:	1fff9dc4 	.word	0x1fff9dc4
    f37c:	1fff9df4 	.word	0x1fff9df4
    f380:	1fff92a0 	.word	0x1fff92a0
    f384:	1fff9dfc 	.word	0x1fff9dfc
    f388:	4006b000 	.word	0x4006b000
    f38c:	1fff9dcc 	.word	0x1fff9dcc
    f390:	1fff9df8 	.word	0x1fff9df8
    f394:	1fff9dc8 	.word	0x1fff9dc8

0000f398 <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    f398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    f39c:	4b39      	ldr	r3, [pc, #228]	; (f484 <serial2_write+0xec>)
    f39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f3a0:	051a      	lsls	r2, r3, #20
    f3a2:	d53c      	bpl.n	f41e <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    f3a4:	4b38      	ldr	r3, [pc, #224]	; (f488 <serial2_write+0xf0>)
    f3a6:	681b      	ldr	r3, [r3, #0]
    f3a8:	b10b      	cbz	r3, f3ae <serial2_write+0x16>
    f3aa:	2201      	movs	r2, #1
    f3ac:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    f3ae:	1847      	adds	r7, r0, r1
	while (p < end) {
    f3b0:	42b8      	cmp	r0, r7
    f3b2:	d231      	bcs.n	f418 <serial2_write+0x80>
    f3b4:	4e35      	ldr	r6, [pc, #212]	; (f48c <serial2_write+0xf4>)
    f3b6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; f490 <serial2_write+0xf8>
    f3ba:	4c36      	ldr	r4, [pc, #216]	; (f494 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    f3bc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; f498 <serial2_write+0x100>
    f3c0:	f100 0a01 	add.w	sl, r0, #1
    f3c4:	e013      	b.n	f3ee <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    f3c6:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    f3ca:	b353      	cbz	r3, f422 <serial2_write+0x8a>
    f3cc:	f04f 0b00 	mov.w	fp, #0
    f3d0:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    f3d2:	4a32      	ldr	r2, [pc, #200]	; (f49c <serial2_write+0x104>)
    f3d4:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    f3d8:	5553      	strb	r3, [r2, r5]
    f3da:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    f3dc:	4930      	ldr	r1, [pc, #192]	; (f4a0 <serial2_write+0x108>)
    f3de:	2301      	movs	r3, #1
	while (p < end) {
    f3e0:	42ba      	cmp	r2, r7
		transmitting = 1;
    f3e2:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    f3e4:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    f3e8:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    f3ec:	d214      	bcs.n	f418 <serial2_write+0x80>
		head = tx_buffer_head;
    f3ee:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    f3f0:	f8d8 3000 	ldr.w	r3, [r8]
    f3f4:	3501      	adds	r5, #1
    f3f6:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    f3f8:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    f3fa:	d9e4      	bls.n	f3c6 <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    f3fc:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    f3fe:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    f402:	d00f      	beq.n	f424 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    f404:	2d27      	cmp	r5, #39	; 0x27
    f406:	d9e4      	bls.n	f3d2 <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    f408:	4b26      	ldr	r3, [pc, #152]	; (f4a4 <serial2_write+0x10c>)
    f40a:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    f40e:	681b      	ldr	r3, [r3, #0]
    f410:	3d28      	subs	r5, #40	; 0x28
    f412:	555a      	strb	r2, [r3, r5]
    f414:	4652      	mov	r2, sl
    f416:	e7e1      	b.n	f3dc <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    f418:	4b1f      	ldr	r3, [pc, #124]	; (f498 <serial2_write+0x100>)
    f41a:	22bc      	movs	r2, #188	; 0xbc
    f41c:	70da      	strb	r2, [r3, #3]
}
    f41e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    f422:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    f424:	f06f 0343 	mvn.w	r3, #67	; 0x43
    f428:	f889 3003 	strb.w	r3, [r9, #3]
    f42c:	e006      	b.n	f43c <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    f42e:	f899 3004 	ldrb.w	r3, [r9, #4]
    f432:	061b      	lsls	r3, r3, #24
    f434:	d40b      	bmi.n	f44e <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    f436:	7823      	ldrb	r3, [r4, #0]
    f438:	42ab      	cmp	r3, r5
    f43a:	d1e3      	bne.n	f404 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    f43c:	f7ff f93e 	bl	e6bc <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    f440:	2840      	cmp	r0, #64	; 0x40
    f442:	ddf4      	ble.n	f42e <serial2_write+0x96>
				} else if (priority >= 256) {
    f444:	28ff      	cmp	r0, #255	; 0xff
    f446:	ddf6      	ble.n	f436 <serial2_write+0x9e>
					yield();
    f448:	f001 fde2 	bl	11010 <yield>
    f44c:	e7f3      	b.n	f436 <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    f44e:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    f450:	f8d8 1000 	ldr.w	r1, [r8]
    f454:	1c5a      	adds	r2, r3, #1
    f456:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    f458:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    f45a:	d903      	bls.n	f464 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    f45c:	2a27      	cmp	r2, #39	; 0x27
    f45e:	d80a      	bhi.n	f476 <serial2_write+0xde>
						tx_buffer_tail = tail;
    f460:	b2d1      	uxtb	r1, r2
    f462:	e001      	b.n	f468 <serial2_write+0xd0>
    f464:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    f466:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    f468:	4b0c      	ldr	r3, [pc, #48]	; (f49c <serial2_write+0x104>)
    f46a:	5c9b      	ldrb	r3, [r3, r2]
    f46c:	b2db      	uxtb	r3, r3
						UART1_D = n;
    f46e:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    f472:	7021      	strb	r1, [r4, #0]
    f474:	e7df      	b.n	f436 <serial2_write+0x9e>
    f476:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    f478:	4a0a      	ldr	r2, [pc, #40]	; (f4a4 <serial2_write+0x10c>)
    f47a:	3b27      	subs	r3, #39	; 0x27
    f47c:	6812      	ldr	r2, [r2, #0]
    f47e:	5cd3      	ldrb	r3, [r2, r3]
    f480:	b2db      	uxtb	r3, r3
    f482:	e7f4      	b.n	f46e <serial2_write+0xd6>
    f484:	40048000 	.word	0x40048000
    f488:	1fff9dc4 	.word	0x1fff9dc4
    f48c:	1fff9df4 	.word	0x1fff9df4
    f490:	1fff92a0 	.word	0x1fff92a0
    f494:	1fff9dfc 	.word	0x1fff9dfc
    f498:	4006b000 	.word	0x4006b000
    f49c:	1fff9dcc 	.word	0x1fff9dcc
    f4a0:	1fff9dc8 	.word	0x1fff9dc8
    f4a4:	1fff9df8 	.word	0x1fff9df8

0000f4a8 <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    f4a8:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    f4aa:	4c04      	ldr	r4, [pc, #16]	; (f4bc <serial2_flush+0x14>)
    f4ac:	7823      	ldrb	r3, [r4, #0]
    f4ae:	b123      	cbz	r3, f4ba <serial2_flush+0x12>
    f4b0:	f001 fdae 	bl	11010 <yield>
    f4b4:	7823      	ldrb	r3, [r4, #0]
    f4b6:	2b00      	cmp	r3, #0
    f4b8:	d1fa      	bne.n	f4b0 <serial2_flush+0x8>
}
    f4ba:	bd10      	pop	{r4, pc}
    f4bc:	1fff9dc8 	.word	0x1fff9dc8

0000f4c0 <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    f4c0:	4a08      	ldr	r2, [pc, #32]	; (f4e4 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    f4c2:	4b09      	ldr	r3, [pc, #36]	; (f4e8 <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    f4c4:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    f4c6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    f4c8:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    f4ca:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    f4cc:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    f4ce:	d202      	bcs.n	f4d6 <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    f4d0:	3b01      	subs	r3, #1
    f4d2:	1a18      	subs	r0, r3, r0
}
    f4d4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    f4d6:	4a05      	ldr	r2, [pc, #20]	; (f4ec <serial2_write_buffer_free+0x2c>)
    f4d8:	6812      	ldr	r2, [r2, #0]
    f4da:	3a01      	subs	r2, #1
    f4dc:	4413      	add	r3, r2
    f4de:	1a18      	subs	r0, r3, r0
    f4e0:	4770      	bx	lr
    f4e2:	bf00      	nop
    f4e4:	1fff9df4 	.word	0x1fff9df4
    f4e8:	1fff9dfc 	.word	0x1fff9dfc
    f4ec:	1fff92a0 	.word	0x1fff92a0

0000f4f0 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f4f0:	4a06      	ldr	r2, [pc, #24]	; (f50c <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    f4f2:	4b07      	ldr	r3, [pc, #28]	; (f510 <serial2_available+0x20>)
	head = rx_buffer_head;
    f4f4:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    f4f6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    f4f8:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    f4fa:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    f4fc:	bf3c      	itt	cc
    f4fe:	4a05      	ldrcc	r2, [pc, #20]	; (f514 <serial2_available+0x24>)
    f500:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    f502:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    f504:	bf38      	it	cc
    f506:	189b      	addcc	r3, r3, r2
    f508:	1a18      	subs	r0, r3, r0
}
    f50a:	4770      	bx	lr
    f50c:	1fff9db8 	.word	0x1fff9db8
    f510:	1fff9dc0 	.word	0x1fff9dc0
    f514:	1fff9298 	.word	0x1fff9298

0000f518 <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    f518:	4b1b      	ldr	r3, [pc, #108]	; (f588 <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    f51a:	491c      	ldr	r1, [pc, #112]	; (f58c <serial2_getchar+0x74>)
	head = rx_buffer_head;
    f51c:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    f51e:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    f520:	429a      	cmp	r2, r3
    f522:	d02e      	beq.n	f582 <serial2_getchar+0x6a>
{
    f524:	b510      	push	{r4, lr}
    f526:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f52a:	4a19      	ldr	r2, [pc, #100]	; (f590 <serial2_getchar+0x78>)
    f52c:	b2d8      	uxtb	r0, r3
    f52e:	6812      	ldr	r2, [r2, #0]
    f530:	1c43      	adds	r3, r0, #1
    f532:	429a      	cmp	r2, r3
    f534:	d919      	bls.n	f56a <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    f536:	2b3f      	cmp	r3, #63	; 0x3f
    f538:	d81b      	bhi.n	f572 <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    f53a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    f53e:	4815      	ldr	r0, [pc, #84]	; (f594 <serial2_getchar+0x7c>)
    f540:	5cc0      	ldrb	r0, [r0, r3]
    f542:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    f544:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    f548:	4913      	ldr	r1, [pc, #76]	; (f598 <serial2_getchar+0x80>)
    f54a:	6809      	ldr	r1, [r1, #0]
    f54c:	b161      	cbz	r1, f568 <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    f54e:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    f550:	bf3c      	itt	cc
    f552:	4472      	addcc	r2, lr
    f554:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    f556:	4a11      	ldr	r2, [pc, #68]	; (f59c <serial2_getchar+0x84>)
    f558:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    f55a:	bf28      	it	cs
    f55c:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    f560:	429a      	cmp	r2, r3
    f562:	d301      	bcc.n	f568 <serial2_getchar+0x50>
    f564:	2300      	movs	r3, #0
    f566:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    f568:	bd10      	pop	{r4, pc}
    f56a:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f56e:	4663      	mov	r3, ip
    f570:	e7e5      	b.n	f53e <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    f572:	4c0b      	ldr	r4, [pc, #44]	; (f5a0 <serial2_getchar+0x88>)
    f574:	383f      	subs	r0, #63	; 0x3f
    f576:	6824      	ldr	r4, [r4, #0]
    f578:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    f57a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    f57e:	b2c0      	uxtb	r0, r0
    f580:	e7e0      	b.n	f544 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    f582:	f04f 30ff 	mov.w	r0, #4294967295
}
    f586:	4770      	bx	lr
    f588:	1fff9db8 	.word	0x1fff9db8
    f58c:	1fff9dc0 	.word	0x1fff9dc0
    f590:	1fff9298 	.word	0x1fff9298
    f594:	1fff9d78 	.word	0x1fff9d78
    f598:	1fff9d74 	.word	0x1fff9d74
    f59c:	1fff9294 	.word	0x1fff9294
    f5a0:	1fff9dbc 	.word	0x1fff9dbc

0000f5a4 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f5a4:	4a0d      	ldr	r2, [pc, #52]	; (f5dc <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    f5a6:	4b0e      	ldr	r3, [pc, #56]	; (f5e0 <serial2_peek+0x3c>)
	head = rx_buffer_head;
    f5a8:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    f5aa:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    f5ac:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    f5ae:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    f5b0:	d011      	beq.n	f5d6 <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f5b2:	490c      	ldr	r1, [pc, #48]	; (f5e4 <serial2_peek+0x40>)
    f5b4:	6809      	ldr	r1, [r1, #0]
    f5b6:	1c53      	adds	r3, r2, #1
    f5b8:	4299      	cmp	r1, r3
    f5ba:	d907      	bls.n	f5cc <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    f5bc:	2b3f      	cmp	r3, #63	; 0x3f
    f5be:	d906      	bls.n	f5ce <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    f5c0:	4b09      	ldr	r3, [pc, #36]	; (f5e8 <serial2_peek+0x44>)
    f5c2:	3a3f      	subs	r2, #63	; 0x3f
    f5c4:	681b      	ldr	r3, [r3, #0]
    f5c6:	5c98      	ldrb	r0, [r3, r2]
    f5c8:	b2c0      	uxtb	r0, r0
    f5ca:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f5cc:	2300      	movs	r3, #0
		return rx_buffer[tail];
    f5ce:	4a07      	ldr	r2, [pc, #28]	; (f5ec <serial2_peek+0x48>)
    f5d0:	5cd0      	ldrb	r0, [r2, r3]
    f5d2:	b2c0      	uxtb	r0, r0
    f5d4:	4770      	bx	lr
	if (head == tail) return -1;
    f5d6:	f04f 30ff 	mov.w	r0, #4294967295
}
    f5da:	4770      	bx	lr
    f5dc:	1fff9db8 	.word	0x1fff9db8
    f5e0:	1fff9dc0 	.word	0x1fff9dc0
    f5e4:	1fff9298 	.word	0x1fff9298
    f5e8:	1fff9dbc 	.word	0x1fff9dbc
    f5ec:	1fff9d78 	.word	0x1fff9d78

0000f5f0 <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    f5f0:	4b0c      	ldr	r3, [pc, #48]	; (f624 <serial2_clear+0x34>)
    f5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f5f4:	051b      	lsls	r3, r3, #20
    f5f6:	d514      	bpl.n	f622 <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    f5f8:	4b0b      	ldr	r3, [pc, #44]	; (f628 <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    f5fa:	480c      	ldr	r0, [pc, #48]	; (f62c <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    f5fc:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    f5fe:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    f600:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    f604:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    f606:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    f608:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    f60a:	4909      	ldr	r1, [pc, #36]	; (f630 <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    f60c:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    f610:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    f612:	4a08      	ldr	r2, [pc, #32]	; (f634 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    f614:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    f616:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    f618:	b2db      	uxtb	r3, r3
    f61a:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    f61c:	b10a      	cbz	r2, f622 <serial2_clear+0x32>
    f61e:	2300      	movs	r3, #0
    f620:	7013      	strb	r3, [r2, #0]
}
    f622:	4770      	bx	lr
    f624:	40048000 	.word	0x40048000
    f628:	4006b000 	.word	0x4006b000
    f62c:	1fff9dc0 	.word	0x1fff9dc0
    f630:	1fff9db8 	.word	0x1fff9db8
    f634:	1fff9d74 	.word	0x1fff9d74

0000f638 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    f638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    f63c:	4c50      	ldr	r4, [pc, #320]	; (f780 <uart1_status_isr+0x148>)
    f63e:	7923      	ldrb	r3, [r4, #4]
    f640:	f013 0f30 	tst.w	r3, #48	; 0x30
    f644:	d047      	beq.n	f6d6 <uart1_status_isr+0x9e>
		__disable_irq();
    f646:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    f648:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    f64a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    f64e:	2b00      	cmp	r3, #0
    f650:	d058      	beq.n	f704 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    f652:	b662      	cpsie	i
			head = rx_buffer_head;
    f654:	f8df 812c 	ldr.w	r8, [pc, #300]	; f784 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    f658:	484b      	ldr	r0, [pc, #300]	; (f788 <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    f65a:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    f65e:	4a4b      	ldr	r2, [pc, #300]	; (f78c <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    f660:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    f662:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    f664:	4f4a      	ldr	r7, [pc, #296]	; (f790 <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    f666:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    f66a:	4b4a      	ldr	r3, [pc, #296]	; (f794 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    f66c:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    f66e:	f8d3 e000 	ldr.w	lr, [r3]
    f672:	e008      	b.n	f686 <uart1_status_isr+0x4e>
				if (newhead != tail) {
    f674:	b11d      	cbz	r5, f67e <uart1_status_isr+0x46>
    f676:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    f67a:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    f67e:	1e4a      	subs	r2, r1, #1
    f680:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    f684:	d012      	beq.n	f6ac <uart1_status_isr+0x74>
					n = UART1_D;
    f686:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    f688:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    f68c:	4296      	cmp	r6, r2
					n = UART1_D;
    f68e:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    f690:	d9f0      	bls.n	f674 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    f692:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    f694:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    f698:	d0f1      	beq.n	f67e <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    f69a:	2a3f      	cmp	r2, #63	; 0x3f
    f69c:	d96d      	bls.n	f77a <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    f69e:	4694      	mov	ip, r2
			} while (--avail > 0);
    f6a0:	1e4a      	subs	r2, r1, #1
    f6a2:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    f6a6:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    f6aa:	d1ec      	bne.n	f686 <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    f6ac:	fa5f f38c 	uxtb.w	r3, ip
    f6b0:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    f6b4:	4b38      	ldr	r3, [pc, #224]	; (f798 <uart1_status_isr+0x160>)
    f6b6:	6819      	ldr	r1, [r3, #0]
    f6b8:	b169      	cbz	r1, f6d6 <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    f6ba:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    f6bc:	bf3c      	itt	cc
    f6be:	1b72      	subcc	r2, r6, r5
    f6c0:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    f6c4:	4a35      	ldr	r2, [pc, #212]	; (f79c <uart1_status_isr+0x164>)
    f6c6:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    f6c8:	bf28      	it	cs
    f6ca:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    f6ce:	429a      	cmp	r2, r3
    f6d0:	bf9c      	itt	ls
    f6d2:	2301      	movls	r3, #1
    f6d4:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    f6d6:	482a      	ldr	r0, [pc, #168]	; (f780 <uart1_status_isr+0x148>)
    f6d8:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    f6da:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    f6dc:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    f6de:	d416      	bmi.n	f70e <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    f6e0:	066a      	lsls	r2, r5, #25
    f6e2:	d50d      	bpl.n	f700 <uart1_status_isr+0xc8>
    f6e4:	4b26      	ldr	r3, [pc, #152]	; (f780 <uart1_status_isr+0x148>)
    f6e6:	791b      	ldrb	r3, [r3, #4]
    f6e8:	065b      	lsls	r3, r3, #25
    f6ea:	d509      	bpl.n	f700 <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    f6ec:	4b2c      	ldr	r3, [pc, #176]	; (f7a0 <uart1_status_isr+0x168>)
		transmitting = 0;
    f6ee:	492d      	ldr	r1, [pc, #180]	; (f7a4 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    f6f0:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    f6f2:	2200      	movs	r2, #0
    f6f4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    f6f6:	b103      	cbz	r3, f6fa <uart1_status_isr+0xc2>
    f6f8:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    f6fa:	4b21      	ldr	r3, [pc, #132]	; (f780 <uart1_status_isr+0x148>)
    f6fc:	223c      	movs	r2, #60	; 0x3c
    f6fe:	70da      	strb	r2, [r3, #3]
	}
}
    f700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    f704:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    f706:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    f708:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    f70a:	b662      	cpsie	i
    f70c:	e7e3      	b.n	f6d6 <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    f70e:	7903      	ldrb	r3, [r0, #4]
    f710:	061c      	lsls	r4, r3, #24
    f712:	d5e5      	bpl.n	f6e0 <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    f714:	4b24      	ldr	r3, [pc, #144]	; (f7a8 <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    f716:	4a25      	ldr	r2, [pc, #148]	; (f7ac <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    f718:	f8df e094 	ldr.w	lr, [pc, #148]	; f7b0 <uart1_status_isr+0x178>
		head = tx_buffer_head;
    f71c:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    f71e:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    f720:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    f724:	4a23      	ldr	r2, [pc, #140]	; (f7b4 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    f726:	4f24      	ldr	r7, [pc, #144]	; (f7b8 <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    f728:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    f72c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    f72e:	b2db      	uxtb	r3, r3
    f730:	e007      	b.n	f742 <uart1_status_isr+0x10a>
			avail = UART1_S1;
    f732:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    f734:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    f736:	5cfa      	ldrb	r2, [r7, r3]
    f738:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    f73a:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    f73c:	7d02      	ldrb	r2, [r0, #20]
    f73e:	2a07      	cmp	r2, #7
    f740:	d811      	bhi.n	f766 <uart1_status_isr+0x12e>
			if (tail == head) break;
    f742:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    f744:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    f748:	d00e      	beq.n	f768 <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    f74a:	428e      	cmp	r6, r1
    f74c:	d9f1      	bls.n	f732 <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    f74e:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    f750:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    f752:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    f756:	d801      	bhi.n	f75c <uart1_status_isr+0x124>
    f758:	460b      	mov	r3, r1
    f75a:	e7ec      	b.n	f736 <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    f75c:	f81c 2003 	ldrb.w	r2, [ip, r3]
    f760:	460b      	mov	r3, r1
    f762:	b2d2      	uxtb	r2, r2
    f764:	e7e9      	b.n	f73a <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    f766:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    f768:	4b05      	ldr	r3, [pc, #20]	; (f780 <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    f76a:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    f76e:	791a      	ldrb	r2, [r3, #4]
    f770:	0611      	lsls	r1, r2, #24
    f772:	bf44      	itt	mi
    f774:	227c      	movmi	r2, #124	; 0x7c
    f776:	70da      	strbmi	r2, [r3, #3]
    f778:	e7b2      	b.n	f6e0 <uart1_status_isr+0xa8>
    f77a:	4694      	mov	ip, r2
    f77c:	e77d      	b.n	f67a <uart1_status_isr+0x42>
    f77e:	bf00      	nop
    f780:	4006b000 	.word	0x4006b000
    f784:	1fff9db8 	.word	0x1fff9db8
    f788:	1fff9dc0 	.word	0x1fff9dc0
    f78c:	1fff9298 	.word	0x1fff9298
    f790:	1fff9d78 	.word	0x1fff9d78
    f794:	1fff9dbc 	.word	0x1fff9dbc
    f798:	1fff9d74 	.word	0x1fff9d74
    f79c:	1fff9290 	.word	0x1fff9290
    f7a0:	1fff9dc4 	.word	0x1fff9dc4
    f7a4:	1fff9dc8 	.word	0x1fff9dc8
    f7a8:	1fff9df4 	.word	0x1fff9df4
    f7ac:	1fff92a0 	.word	0x1fff92a0
    f7b0:	1fff9dfc 	.word	0x1fff9dfc
    f7b4:	1fff9df8 	.word	0x1fff9df8
    f7b8:	1fff9dcc 	.word	0x1fff9dcc

0000f7bc <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    f7bc:	4b09      	ldr	r3, [pc, #36]	; (f7e4 <serial2_add_memory_for_read+0x28>)
{
    f7be:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    f7c0:	6018      	str	r0, [r3, #0]
	if (buffer) {
    f7c2:	b160      	cbz	r0, f7de <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    f7c4:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    f7c8:	4b07      	ldr	r3, [pc, #28]	; (f7e8 <serial2_add_memory_for_read+0x2c>)
    f7ca:	4808      	ldr	r0, [pc, #32]	; (f7ec <serial2_add_memory_for_read+0x30>)
    f7cc:	f101 021a 	add.w	r2, r1, #26
    f7d0:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    f7d2:	4b07      	ldr	r3, [pc, #28]	; (f7f0 <serial2_add_memory_for_read+0x34>)
    f7d4:	6004      	str	r4, [r0, #0]
    f7d6:	3128      	adds	r1, #40	; 0x28
}
    f7d8:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    f7da:	6019      	str	r1, [r3, #0]
}
    f7dc:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    f7de:	2440      	movs	r4, #64	; 0x40
    f7e0:	e7f2      	b.n	f7c8 <serial2_add_memory_for_read+0xc>
    f7e2:	bf00      	nop
    f7e4:	1fff9dbc 	.word	0x1fff9dbc
    f7e8:	1fff9294 	.word	0x1fff9294
    f7ec:	1fff9298 	.word	0x1fff9298
    f7f0:	1fff9290 	.word	0x1fff9290

0000f7f4 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    f7f4:	4b05      	ldr	r3, [pc, #20]	; (f80c <serial2_add_memory_for_write+0x18>)
    f7f6:	6018      	str	r0, [r3, #0]
	if (buffer) {
    f7f8:	b118      	cbz	r0, f802 <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    f7fa:	4b05      	ldr	r3, [pc, #20]	; (f810 <serial2_add_memory_for_write+0x1c>)
    f7fc:	3128      	adds	r1, #40	; 0x28
    f7fe:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    f800:	4770      	bx	lr
    f802:	4b03      	ldr	r3, [pc, #12]	; (f810 <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    f804:	2128      	movs	r1, #40	; 0x28
    f806:	6019      	str	r1, [r3, #0]
}
    f808:	4770      	bx	lr
    f80a:	bf00      	nop
    f80c:	1fff9df8 	.word	0x1fff9df8
    f810:	1fff92a0 	.word	0x1fff92a0

0000f814 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    f814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    f818:	4b31      	ldr	r3, [pc, #196]	; (f8e0 <serial3_putchar.part.0+0xcc>)
    f81a:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    f81c:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    f81e:	b10b      	cbz	r3, f824 <serial3_putchar.part.0+0x10>
    f820:	2201      	movs	r2, #1
    f822:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    f824:	f8df 90bc 	ldr.w	r9, [pc, #188]	; f8e4 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    f828:	f8df 80bc 	ldr.w	r8, [pc, #188]	; f8e8 <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    f82c:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    f830:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    f834:	4d2d      	ldr	r5, [pc, #180]	; (f8ec <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    f836:	3401      	adds	r4, #1
    f838:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    f83a:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    f83c:	d32a      	bcc.n	f894 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    f83e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    f842:	2b00      	cmp	r3, #0
    f844:	d13e      	bne.n	f8c4 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    f846:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    f848:	4e29      	ldr	r6, [pc, #164]	; (f8f0 <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    f84a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; f8f4 <serial3_putchar.part.0+0xe0>
    f84e:	e005      	b.n	f85c <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    f850:	7933      	ldrb	r3, [r6, #4]
    f852:	061b      	lsls	r3, r3, #24
    f854:	d423      	bmi.n	f89e <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    f856:	782b      	ldrb	r3, [r5, #0]
    f858:	42a3      	cmp	r3, r4
    f85a:	d10a      	bne.n	f872 <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    f85c:	f7fe ff2e 	bl	e6bc <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    f860:	2840      	cmp	r0, #64	; 0x40
    f862:	ddf5      	ble.n	f850 <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    f864:	28ff      	cmp	r0, #255	; 0xff
    f866:	ddf6      	ble.n	f856 <serial3_putchar.part.0+0x42>
			yield(); // wait
    f868:	f001 fbd2 	bl	11010 <yield>
	while (tx_buffer_tail == head) {
    f86c:	782b      	ldrb	r3, [r5, #0]
    f86e:	42a3      	cmp	r3, r4
    f870:	d0f4      	beq.n	f85c <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    f872:	2c27      	cmp	r4, #39	; 0x27
    f874:	d929      	bls.n	f8ca <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    f876:	4b20      	ldr	r3, [pc, #128]	; (f8f8 <serial3_putchar.part.0+0xe4>)
    f878:	3c28      	subs	r4, #40	; 0x28
    f87a:	681b      	ldr	r3, [r3, #0]
    f87c:	b2ff      	uxtb	r7, r7
    f87e:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    f880:	4a1e      	ldr	r2, [pc, #120]	; (f8fc <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    f882:	4b1b      	ldr	r3, [pc, #108]	; (f8f0 <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    f884:	2101      	movs	r1, #1
    f886:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    f888:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    f88a:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    f88e:	70da      	strb	r2, [r3, #3]
}
    f890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    f894:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    f896:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    f89a:	d0d5      	beq.n	f848 <serial3_putchar.part.0+0x34>
    f89c:	e7e9      	b.n	f872 <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    f89e:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f8a0:	f8d8 1000 	ldr.w	r1, [r8]
    f8a4:	1c5a      	adds	r2, r3, #1
    f8a6:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    f8a8:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f8aa:	d203      	bcs.n	f8b4 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    f8ac:	2a27      	cmp	r2, #39	; 0x27
    f8ae:	d810      	bhi.n	f8d2 <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    f8b0:	b2d1      	uxtb	r1, r2
    f8b2:	e001      	b.n	f8b8 <serial3_putchar.part.0+0xa4>
    f8b4:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f8b6:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    f8b8:	f81b 3002 	ldrb.w	r3, [fp, r2]
    f8bc:	b2db      	uxtb	r3, r3
				UART2_D = n;
    f8be:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    f8c0:	7029      	strb	r1, [r5, #0]
    f8c2:	e7c8      	b.n	f856 <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    f8c4:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    f8c8:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    f8ca:	4b0a      	ldr	r3, [pc, #40]	; (f8f4 <serial3_putchar.part.0+0xe0>)
    f8cc:	b2ff      	uxtb	r7, r7
    f8ce:	551f      	strb	r7, [r3, r4]
    f8d0:	e7d6      	b.n	f880 <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    f8d2:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    f8d4:	4a08      	ldr	r2, [pc, #32]	; (f8f8 <serial3_putchar.part.0+0xe4>)
    f8d6:	3b27      	subs	r3, #39	; 0x27
    f8d8:	6812      	ldr	r2, [r2, #0]
    f8da:	5cd3      	ldrb	r3, [r2, r3]
    f8dc:	b2db      	uxtb	r3, r3
    f8de:	e7ee      	b.n	f8be <serial3_putchar.part.0+0xaa>
    f8e0:	1fff9e50 	.word	0x1fff9e50
    f8e4:	1fff9e80 	.word	0x1fff9e80
    f8e8:	1fff92b4 	.word	0x1fff92b4
    f8ec:	1fff9e88 	.word	0x1fff9e88
    f8f0:	4006c000 	.word	0x4006c000
    f8f4:	1fff9e58 	.word	0x1fff9e58
    f8f8:	1fff9e84 	.word	0x1fff9e84
    f8fc:	1fff9e54 	.word	0x1fff9e54

0000f900 <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    f900:	4a1d      	ldr	r2, [pc, #116]	; (f978 <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    f902:	491e      	ldr	r1, [pc, #120]	; (f97c <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    f904:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    f906:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    f90a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    f90e:	4d1c      	ldr	r5, [pc, #112]	; (f980 <serial3_begin+0x80>)
	rx_buffer_head = 0;
    f910:	f8df 8070 	ldr.w	r8, [pc, #112]	; f984 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    f914:	f8df 9070 	ldr.w	r9, [pc, #112]	; f988 <serial3_begin+0x88>
	tx_buffer_head = 0;
    f918:	4f1c      	ldr	r7, [pc, #112]	; (f98c <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    f91a:	4e1d      	ldr	r6, [pc, #116]	; (f990 <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    f91c:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    f91e:	2300      	movs	r3, #0
    f920:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    f924:	2820      	cmp	r0, #32
    f926:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    f92a:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    f92c:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    f92e:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    f930:	f240 3513 	movw	r5, #787	; 0x313
    f934:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    f936:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    f93a:	bf38      	it	cc
    f93c:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    f93e:	f44f 7551 	mov.w	r5, #836	; 0x344
    f942:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    f944:	f3c0 3144 	ubfx	r1, r0, #13, #5
    f948:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    f94a:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    f94e:	4c11      	ldr	r4, [pc, #68]	; (f994 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    f950:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    f954:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    f958:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    f95a:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    f95c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    f960:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    f962:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    f964:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    f966:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    f968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    f96c:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    f970:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    f974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f978:	40048000 	.word	0x40048000
    f97c:	4004c000 	.word	0x4004c000
    f980:	1fff9e54 	.word	0x1fff9e54
    f984:	1fff9e44 	.word	0x1fff9e44
    f988:	1fff9e4c 	.word	0x1fff9e4c
    f98c:	1fff9e80 	.word	0x1fff9e80
    f990:	1fff9e88 	.word	0x1fff9e88
    f994:	e000e400 	.word	0xe000e400

0000f998 <serial3_format>:
	c = UART2_C1;
    f998:	4b29      	ldr	r3, [pc, #164]	; (fa40 <serial3_format+0xa8>)
	UART2_C1 = c;
    f99a:	4929      	ldr	r1, [pc, #164]	; (fa40 <serial3_format+0xa8>)
	c = UART2_C1;
    f99c:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    f99e:	f000 0203 	and.w	r2, r0, #3
    f9a2:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    f9a6:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    f9a8:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    f9aa:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    f9ae:	bf48      	it	mi
    f9b0:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    f9b4:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    f9b6:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    f9b8:	d103      	bne.n	f9c2 <serial3_format+0x2a>
    f9ba:	798b      	ldrb	r3, [r1, #6]
    f9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f9c0:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    f9c2:	4b1f      	ldr	r3, [pc, #124]	; (fa40 <serial3_format+0xa8>)
    f9c4:	795a      	ldrb	r2, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    f9c6:	06c3      	lsls	r3, r0, #27
	c = UART2_S2 & ~0x10;
    f9c8:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	UART2_S2 = c;
    f9cc:	4b1c      	ldr	r3, [pc, #112]	; (fa40 <serial3_format+0xa8>)
	if (format & 0x10) c |= 0x10;		// rx invert
    f9ce:	bf48      	it	mi
    f9d0:	f042 0210 	orrmi.w	r2, r2, #16
	UART2_S2 = c;
    f9d4:	715a      	strb	r2, [r3, #5]
	c = UART2_C3 & ~0x10;
    f9d6:	799a      	ldrb	r2, [r3, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    f9d8:	0681      	lsls	r1, r0, #26
	c = UART2_C3 & ~0x10;
    f9da:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	if (format & 0x20) c |= 0x10;		// tx invert
    f9de:	d511      	bpl.n	fa04 <serial3_format+0x6c>
    f9e0:	f042 0210 	orr.w	r2, r2, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    f9e4:	0581      	lsls	r1, r0, #22
	UART2_C3 = c;
    f9e6:	719a      	strb	r2, [r3, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    f9e8:	d50f      	bpl.n	fa0a <serial3_format+0x72>
		c = UART2_C1;
    f9ea:	789a      	ldrb	r2, [r3, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    f9ec:	4915      	ldr	r1, [pc, #84]	; (fa44 <serial3_format+0xac>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    f9ee:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
		UART2_C1 = c;
    f9f2:	709a      	strb	r2, [r3, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    f9f4:	7809      	ldrb	r1, [r1, #0]
    f9f6:	4b14      	ldr	r3, [pc, #80]	; (fa48 <serial3_format+0xb0>)
    f9f8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		uint32_t pin_cfg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE;
    f9fc:	f240 3246 	movw	r2, #838	; 0x346
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    fa00:	685b      	ldr	r3, [r3, #4]
		if ((format & 0x20) == 0) pin_cfg |=  PORT_PCR_PS;  // if not inverted PU else leve as PD
    fa02:	e014      	b.n	fa2e <serial3_format+0x96>
	UART2_C3 = c;
    fa04:	719a      	strb	r2, [r3, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    fa06:	0582      	lsls	r2, r0, #22
    fa08:	d405      	bmi.n	fa16 <serial3_format+0x7e>
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    fa0a:	4b10      	ldr	r3, [pc, #64]	; (fa4c <serial3_format+0xb4>)
    fa0c:	4a10      	ldr	r2, [pc, #64]	; (fa50 <serial3_format+0xb8>)
    fa0e:	6819      	ldr	r1, [r3, #0]
    fa10:	4291      	cmp	r1, r2
    fa12:	d011      	beq.n	fa38 <serial3_format+0xa0>
}
    fa14:	4770      	bx	lr
		c = UART2_C1;
    fa16:	789a      	ldrb	r2, [r3, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    fa18:	490a      	ldr	r1, [pc, #40]	; (fa44 <serial3_format+0xac>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    fa1a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
		UART2_C1 = c;
    fa1e:	709a      	strb	r2, [r3, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    fa20:	7809      	ldrb	r1, [r1, #0]
    fa22:	4b09      	ldr	r3, [pc, #36]	; (fa48 <serial3_format+0xb0>)
    fa24:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		if ((format & 0x20) == 0) pin_cfg |=  PORT_PCR_PS;  // if not inverted PU else leve as PD
    fa28:	f240 3247 	movw	r2, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    fa2c:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    fa2e:	4907      	ldr	r1, [pc, #28]	; (fa4c <serial3_format+0xb4>)
    fa30:	4807      	ldr	r0, [pc, #28]	; (fa50 <serial3_format+0xb8>)
		*reg = pin_cfg;
    fa32:	601a      	str	r2, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    fa34:	6008      	str	r0, [r1, #0]
    fa36:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    fa38:	2200      	movs	r2, #0
    fa3a:	601a      	str	r2, [r3, #0]
}
    fa3c:	4770      	bx	lr
    fa3e:	bf00      	nop
    fa40:	4006c000 	.word	0x4006c000
    fa44:	1fff92b8 	.word	0x1fff92b8
    fa48:	00015e50 	.word	0x00015e50
    fa4c:	1fff9e50 	.word	0x1fff9e50
    fa50:	42d800d4 	.word	0x42d800d4

0000fa54 <serial3_end>:
{
    fa54:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    fa56:	4b13      	ldr	r3, [pc, #76]	; (faa4 <serial3_end+0x50>)
    fa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fa5a:	04db      	lsls	r3, r3, #19
    fa5c:	d520      	bpl.n	faa0 <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    fa5e:	4c12      	ldr	r4, [pc, #72]	; (faa8 <serial3_end+0x54>)
    fa60:	7823      	ldrb	r3, [r4, #0]
    fa62:	b123      	cbz	r3, fa6e <serial3_end+0x1a>
    fa64:	f001 fad4 	bl	11010 <yield>
    fa68:	7823      	ldrb	r3, [r4, #0]
    fa6a:	2b00      	cmp	r3, #0
    fa6c:	d1fa      	bne.n	fa64 <serial3_end+0x10>
	UART2_C2 = 0;
    fa6e:	4a0f      	ldr	r2, [pc, #60]	; (faac <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    fa70:	490f      	ldr	r1, [pc, #60]	; (fab0 <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    fa72:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    fa76:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    fa78:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    fa7c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    fa80:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    fa84:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    fa86:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    fa88:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    fa8a:	490a      	ldr	r1, [pc, #40]	; (fab4 <serial3_end+0x60>)
	rx_buffer_head = 0;
    fa8c:	4c0a      	ldr	r4, [pc, #40]	; (fab8 <serial3_end+0x64>)
	rx_buffer_tail = 0;
    fa8e:	480b      	ldr	r0, [pc, #44]	; (fabc <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    fa90:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    fa92:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    fa94:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    fa96:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    fa98:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    fa9a:	b109      	cbz	r1, faa0 <serial3_end+0x4c>
    fa9c:	2301      	movs	r3, #1
    fa9e:	700b      	strb	r3, [r1, #0]
}
    faa0:	bd38      	pop	{r3, r4, r5, pc}
    faa2:	bf00      	nop
    faa4:	40048000 	.word	0x40048000
    faa8:	1fff9e54 	.word	0x1fff9e54
    faac:	4006c000 	.word	0x4006c000
    fab0:	4004c000 	.word	0x4004c000
    fab4:	1fff9e00 	.word	0x1fff9e00
    fab8:	1fff9e44 	.word	0x1fff9e44
    fabc:	1fff9e4c 	.word	0x1fff9e4c

0000fac0 <serial3_set_transmit_pin>:
	while (transmitting) ;
    fac0:	4a0a      	ldr	r2, [pc, #40]	; (faec <serial3_set_transmit_pin+0x2c>)
{
    fac2:	b538      	push	{r3, r4, r5, lr}
    fac4:	4605      	mov	r5, r0
	while (transmitting) ;
    fac6:	7813      	ldrb	r3, [r2, #0]
    fac8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    facc:	2b00      	cmp	r3, #0
    face:	d1fa      	bne.n	fac6 <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    fad0:	2101      	movs	r1, #1
    fad2:	4628      	mov	r0, r5
    fad4:	f7ff f93e 	bl	ed54 <pinMode>
	digitalWrite(pin, LOW);
    fad8:	4621      	mov	r1, r4
    fada:	4628      	mov	r0, r5
    fadc:	f7ff f906 	bl	ecec <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    fae0:	4a03      	ldr	r2, [pc, #12]	; (faf0 <serial3_set_transmit_pin+0x30>)
    fae2:	4b04      	ldr	r3, [pc, #16]	; (faf4 <serial3_set_transmit_pin+0x34>)
    fae4:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    fae8:	601a      	str	r2, [r3, #0]
}
    faea:	bd38      	pop	{r3, r4, r5, pc}
    faec:	1fff9e54 	.word	0x1fff9e54
    faf0:	00015e50 	.word	0x00015e50
    faf4:	1fff9e50 	.word	0x1fff9e50

0000faf8 <serial3_set_tx>:
	if (opendrain) pin |= 128;
    faf8:	b109      	cbz	r1, fafe <serial3_set_tx+0x6>
    fafa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    fafe:	4a11      	ldr	r2, [pc, #68]	; (fb44 <serial3_set_tx+0x4c>)
    fb00:	7813      	ldrb	r3, [r2, #0]
    fb02:	4283      	cmp	r3, r0
    fb04:	d016      	beq.n	fb34 <serial3_set_tx+0x3c>
{
    fb06:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    fb08:	4c0f      	ldr	r4, [pc, #60]	; (fb48 <serial3_set_tx+0x50>)
    fb0a:	6b64      	ldr	r4, [r4, #52]	; 0x34
    fb0c:	04e4      	lsls	r4, r4, #19
    fb0e:	d50e      	bpl.n	fb2e <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    fb10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fb14:	2b08      	cmp	r3, #8
    fb16:	d102      	bne.n	fb1e <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    fb18:	4b0c      	ldr	r3, [pc, #48]	; (fb4c <serial3_set_tx+0x54>)
    fb1a:	2400      	movs	r4, #0
    fb1c:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    fb1e:	2900      	cmp	r1, #0
		switch (pin & 127) {
    fb20:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    fb24:	bf14      	ite	ne
    fb26:	2160      	movne	r1, #96	; 0x60
    fb28:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    fb2a:	2b08      	cmp	r3, #8
    fb2c:	d003      	beq.n	fb36 <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    fb2e:	7010      	strb	r0, [r2, #0]
}
    fb30:	bc10      	pop	{r4}
    fb32:	4770      	bx	lr
    fb34:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    fb36:	4b05      	ldr	r3, [pc, #20]	; (fb4c <serial3_set_tx+0x54>)
    fb38:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    fb3c:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    fb3e:	7010      	strb	r0, [r2, #0]
}
    fb40:	bc10      	pop	{r4}
    fb42:	4770      	bx	lr
    fb44:	1fff92b8 	.word	0x1fff92b8
    fb48:	40048000 	.word	0x40048000
    fb4c:	4004c000 	.word	0x4004c000

0000fb50 <serial3_set_rx>:
}
    fb50:	4770      	bx	lr
    fb52:	bf00      	nop

0000fb54 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    fb54:	4b0d      	ldr	r3, [pc, #52]	; (fb8c <serial3_set_rts+0x38>)
    fb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fb58:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    fb5c:	d013      	beq.n	fb86 <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    fb5e:	2821      	cmp	r0, #33	; 0x21
    fb60:	d903      	bls.n	fb6a <serial3_set_rts+0x16>
		rts_pin = NULL;
    fb62:	4b0b      	ldr	r3, [pc, #44]	; (fb90 <serial3_set_rts+0x3c>)
    fb64:	2000      	movs	r0, #0
    fb66:	6018      	str	r0, [r3, #0]
		return 0;
    fb68:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    fb6a:	4b0a      	ldr	r3, [pc, #40]	; (fb94 <serial3_set_rts+0x40>)
{
    fb6c:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    fb6e:	4c08      	ldr	r4, [pc, #32]	; (fb90 <serial3_set_rts+0x3c>)
    fb70:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    fb74:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    fb76:	2101      	movs	r1, #1
    fb78:	f7ff f8ec 	bl	ed54 <pinMode>
		rts_assert();
    fb7c:	6823      	ldr	r3, [r4, #0]
    fb7e:	2200      	movs	r2, #0
    fb80:	701a      	strb	r2, [r3, #0]
	return 1;
    fb82:	2001      	movs	r0, #1
}
    fb84:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    fb86:	4618      	mov	r0, r3
}
    fb88:	4770      	bx	lr
    fb8a:	bf00      	nop
    fb8c:	40048000 	.word	0x40048000
    fb90:	1fff9e00 	.word	0x1fff9e00
    fb94:	00015e50 	.word	0x00015e50

0000fb98 <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    fb98:	4b0c      	ldr	r3, [pc, #48]	; (fbcc <serial3_set_cts+0x34>)
    fb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fb9c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    fba0:	d012      	beq.n	fbc8 <serial3_set_cts+0x30>
	if (pin == 14) {
    fba2:	280e      	cmp	r0, #14
    fba4:	d109      	bne.n	fbba <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    fba6:	4b0a      	ldr	r3, [pc, #40]	; (fbd0 <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    fba8:	4a0a      	ldr	r2, [pc, #40]	; (fbd4 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    fbaa:	f240 3102 	movw	r1, #770	; 0x302
    fbae:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    fbb0:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    fbb2:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    fbb4:	4303      	orrs	r3, r0
    fbb6:	7353      	strb	r3, [r2, #13]
	return 1;
    fbb8:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    fbba:	4a06      	ldr	r2, [pc, #24]	; (fbd4 <serial3_set_cts+0x3c>)
    fbbc:	7b53      	ldrb	r3, [r2, #13]
    fbbe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    fbc2:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    fbc4:	7353      	strb	r3, [r2, #13]
		return 0;
    fbc6:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    fbc8:	4618      	mov	r0, r3
}
    fbca:	4770      	bx	lr
    fbcc:	40048000 	.word	0x40048000
    fbd0:	4004c000 	.word	0x4004c000
    fbd4:	4006c000 	.word	0x4006c000

0000fbd8 <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    fbd8:	4b03      	ldr	r3, [pc, #12]	; (fbe8 <serial3_putchar+0x10>)
    fbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fbdc:	04db      	lsls	r3, r3, #19
    fbde:	d501      	bpl.n	fbe4 <serial3_putchar+0xc>
    fbe0:	f7ff be18 	b.w	f814 <serial3_putchar.part.0>
}
    fbe4:	4770      	bx	lr
    fbe6:	bf00      	nop
    fbe8:	40048000 	.word	0x40048000

0000fbec <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    fbec:	b179      	cbz	r1, fc0e <serial3_write+0x22>
{
    fbee:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    fbf0:	4e07      	ldr	r6, [pc, #28]	; (fc10 <serial3_write+0x24>)
    fbf2:	4604      	mov	r4, r0
    fbf4:	1845      	adds	r5, r0, r1
    fbf6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    fbf8:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    fbfa:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    fbfe:	d503      	bpl.n	fc08 <serial3_write+0x1c>
    fc00:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    fc04:	f7ff fe06 	bl	f814 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    fc08:	42ac      	cmp	r4, r5
    fc0a:	d1f4      	bne.n	fbf6 <serial3_write+0xa>
}
    fc0c:	bd70      	pop	{r4, r5, r6, pc}
    fc0e:	4770      	bx	lr
    fc10:	40048000 	.word	0x40048000

0000fc14 <serial3_flush>:

void serial3_flush(void)
{
    fc14:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    fc16:	4c04      	ldr	r4, [pc, #16]	; (fc28 <serial3_flush+0x14>)
    fc18:	7823      	ldrb	r3, [r4, #0]
    fc1a:	b123      	cbz	r3, fc26 <serial3_flush+0x12>
    fc1c:	f001 f9f8 	bl	11010 <yield>
    fc20:	7823      	ldrb	r3, [r4, #0]
    fc22:	2b00      	cmp	r3, #0
    fc24:	d1fa      	bne.n	fc1c <serial3_flush+0x8>
}
    fc26:	bd10      	pop	{r4, pc}
    fc28:	1fff9e54 	.word	0x1fff9e54

0000fc2c <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    fc2c:	4a08      	ldr	r2, [pc, #32]	; (fc50 <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    fc2e:	4b09      	ldr	r3, [pc, #36]	; (fc54 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    fc30:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    fc32:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    fc34:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    fc36:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    fc38:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    fc3a:	d202      	bcs.n	fc42 <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    fc3c:	3b01      	subs	r3, #1
    fc3e:	1a18      	subs	r0, r3, r0
}
    fc40:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    fc42:	4a05      	ldr	r2, [pc, #20]	; (fc58 <serial3_write_buffer_free+0x2c>)
    fc44:	6812      	ldr	r2, [r2, #0]
    fc46:	3a01      	subs	r2, #1
    fc48:	4413      	add	r3, r2
    fc4a:	1a18      	subs	r0, r3, r0
    fc4c:	4770      	bx	lr
    fc4e:	bf00      	nop
    fc50:	1fff9e80 	.word	0x1fff9e80
    fc54:	1fff9e88 	.word	0x1fff9e88
    fc58:	1fff92b4 	.word	0x1fff92b4

0000fc5c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    fc5c:	4a06      	ldr	r2, [pc, #24]	; (fc78 <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    fc5e:	4b07      	ldr	r3, [pc, #28]	; (fc7c <serial3_available+0x20>)
	head = rx_buffer_head;
    fc60:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    fc62:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    fc64:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    fc66:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    fc68:	bf3c      	itt	cc
    fc6a:	4a05      	ldrcc	r2, [pc, #20]	; (fc80 <serial3_available+0x24>)
    fc6c:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    fc6e:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    fc70:	bf38      	it	cc
    fc72:	189b      	addcc	r3, r3, r2
    fc74:	1a18      	subs	r0, r3, r0
}
    fc76:	4770      	bx	lr
    fc78:	1fff9e44 	.word	0x1fff9e44
    fc7c:	1fff9e4c 	.word	0x1fff9e4c
    fc80:	1fff92b0 	.word	0x1fff92b0

0000fc84 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    fc84:	4b1b      	ldr	r3, [pc, #108]	; (fcf4 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    fc86:	491c      	ldr	r1, [pc, #112]	; (fcf8 <serial3_getchar+0x74>)
	head = rx_buffer_head;
    fc88:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    fc8a:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    fc8c:	429a      	cmp	r2, r3
    fc8e:	d02e      	beq.n	fcee <serial3_getchar+0x6a>
{
    fc90:	b510      	push	{r4, lr}
    fc92:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    fc96:	4a19      	ldr	r2, [pc, #100]	; (fcfc <serial3_getchar+0x78>)
    fc98:	b2d8      	uxtb	r0, r3
    fc9a:	6812      	ldr	r2, [r2, #0]
    fc9c:	1c43      	adds	r3, r0, #1
    fc9e:	429a      	cmp	r2, r3
    fca0:	d919      	bls.n	fcd6 <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    fca2:	2b3f      	cmp	r3, #63	; 0x3f
    fca4:	d81b      	bhi.n	fcde <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    fca6:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    fcaa:	4815      	ldr	r0, [pc, #84]	; (fd00 <serial3_getchar+0x7c>)
    fcac:	5cc0      	ldrb	r0, [r0, r3]
    fcae:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    fcb0:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    fcb4:	4913      	ldr	r1, [pc, #76]	; (fd04 <serial3_getchar+0x80>)
    fcb6:	6809      	ldr	r1, [r1, #0]
    fcb8:	b161      	cbz	r1, fcd4 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    fcba:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    fcbc:	bf3c      	itt	cc
    fcbe:	4472      	addcc	r2, lr
    fcc0:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    fcc2:	4a11      	ldr	r2, [pc, #68]	; (fd08 <serial3_getchar+0x84>)
    fcc4:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    fcc6:	bf28      	it	cs
    fcc8:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    fccc:	429a      	cmp	r2, r3
    fcce:	d301      	bcc.n	fcd4 <serial3_getchar+0x50>
    fcd0:	2300      	movs	r3, #0
    fcd2:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    fcd4:	bd10      	pop	{r4, pc}
    fcd6:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    fcda:	4663      	mov	r3, ip
    fcdc:	e7e5      	b.n	fcaa <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    fcde:	4c0b      	ldr	r4, [pc, #44]	; (fd0c <serial3_getchar+0x88>)
    fce0:	383f      	subs	r0, #63	; 0x3f
    fce2:	6824      	ldr	r4, [r4, #0]
    fce4:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    fce6:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    fcea:	b2c0      	uxtb	r0, r0
    fcec:	e7e0      	b.n	fcb0 <serial3_getchar+0x2c>
	if (head == tail) return -1;
    fcee:	f04f 30ff 	mov.w	r0, #4294967295
}
    fcf2:	4770      	bx	lr
    fcf4:	1fff9e44 	.word	0x1fff9e44
    fcf8:	1fff9e4c 	.word	0x1fff9e4c
    fcfc:	1fff92b0 	.word	0x1fff92b0
    fd00:	1fff9e04 	.word	0x1fff9e04
    fd04:	1fff9e00 	.word	0x1fff9e00
    fd08:	1fff92ac 	.word	0x1fff92ac
    fd0c:	1fff9e48 	.word	0x1fff9e48

0000fd10 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    fd10:	4a0d      	ldr	r2, [pc, #52]	; (fd48 <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    fd12:	4b0e      	ldr	r3, [pc, #56]	; (fd4c <serial3_peek+0x3c>)
	head = rx_buffer_head;
    fd14:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    fd16:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    fd18:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    fd1a:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    fd1c:	d011      	beq.n	fd42 <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    fd1e:	490c      	ldr	r1, [pc, #48]	; (fd50 <serial3_peek+0x40>)
    fd20:	6809      	ldr	r1, [r1, #0]
    fd22:	1c53      	adds	r3, r2, #1
    fd24:	4299      	cmp	r1, r3
    fd26:	d907      	bls.n	fd38 <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    fd28:	2b3f      	cmp	r3, #63	; 0x3f
    fd2a:	d906      	bls.n	fd3a <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    fd2c:	4b09      	ldr	r3, [pc, #36]	; (fd54 <serial3_peek+0x44>)
    fd2e:	3a3f      	subs	r2, #63	; 0x3f
    fd30:	681b      	ldr	r3, [r3, #0]
    fd32:	5c98      	ldrb	r0, [r3, r2]
    fd34:	b2c0      	uxtb	r0, r0
    fd36:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    fd38:	2300      	movs	r3, #0
		return rx_buffer[tail];
    fd3a:	4a07      	ldr	r2, [pc, #28]	; (fd58 <serial3_peek+0x48>)
    fd3c:	5cd0      	ldrb	r0, [r2, r3]
    fd3e:	b2c0      	uxtb	r0, r0
    fd40:	4770      	bx	lr
	if (head == tail) return -1;
    fd42:	f04f 30ff 	mov.w	r0, #4294967295
}
    fd46:	4770      	bx	lr
    fd48:	1fff9e44 	.word	0x1fff9e44
    fd4c:	1fff9e4c 	.word	0x1fff9e4c
    fd50:	1fff92b0 	.word	0x1fff92b0
    fd54:	1fff9e48 	.word	0x1fff9e48
    fd58:	1fff9e04 	.word	0x1fff9e04

0000fd5c <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    fd5c:	4b05      	ldr	r3, [pc, #20]	; (fd74 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    fd5e:	4a06      	ldr	r2, [pc, #24]	; (fd78 <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    fd60:	781b      	ldrb	r3, [r3, #0]
    fd62:	4906      	ldr	r1, [pc, #24]	; (fd7c <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    fd64:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    fd66:	b2db      	uxtb	r3, r3
    fd68:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    fd6a:	b10a      	cbz	r2, fd70 <serial3_clear+0x14>
    fd6c:	2300      	movs	r3, #0
    fd6e:	7013      	strb	r3, [r2, #0]
}
    fd70:	4770      	bx	lr
    fd72:	bf00      	nop
    fd74:	1fff9e4c 	.word	0x1fff9e4c
    fd78:	1fff9e00 	.word	0x1fff9e00
    fd7c:	1fff9e44 	.word	0x1fff9e44

0000fd80 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    fd80:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    fd82:	4b3a      	ldr	r3, [pc, #232]	; (fe6c <uart2_status_isr+0xec>)
    fd84:	791a      	ldrb	r2, [r3, #4]
    fd86:	0695      	lsls	r5, r2, #26
    fd88:	d524      	bpl.n	fdd4 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    fd8a:	4d39      	ldr	r5, [pc, #228]	; (fe70 <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    fd8c:	4939      	ldr	r1, [pc, #228]	; (fe74 <uart2_status_isr+0xf4>)
			n = UART2_D;
    fd8e:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    fd90:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    fd92:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    fd94:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    fd96:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    fd98:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    fd9a:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    fd9c:	d831      	bhi.n	fe02 <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    fd9e:	4b36      	ldr	r3, [pc, #216]	; (fe78 <uart2_status_isr+0xf8>)
    fda0:	781a      	ldrb	r2, [r3, #0]
    fda2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    fda6:	b122      	cbz	r2, fdb2 <uart2_status_isr+0x32>
    fda8:	2200      	movs	r2, #0
    fdaa:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    fdac:	4933      	ldr	r1, [pc, #204]	; (fe7c <uart2_status_isr+0xfc>)
    fdae:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    fdb0:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    fdb2:	4933      	ldr	r1, [pc, #204]	; (fe80 <uart2_status_isr+0x100>)
    fdb4:	6809      	ldr	r1, [r1, #0]
    fdb6:	b169      	cbz	r1, fdd4 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    fdb8:	4a32      	ldr	r2, [pc, #200]	; (fe84 <uart2_status_isr+0x104>)
    fdba:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    fdbc:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    fdbe:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    fdc0:	bf8a      	itet	hi
    fdc2:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    fdc4:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    fdc6:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    fdc8:	4a2f      	ldr	r2, [pc, #188]	; (fe88 <uart2_status_isr+0x108>)
    fdca:	6812      	ldr	r2, [r2, #0]
    fdcc:	429a      	cmp	r2, r3
    fdce:	bf9c      	itt	ls
    fdd0:	2301      	movls	r3, #1
    fdd2:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    fdd4:	4a25      	ldr	r2, [pc, #148]	; (fe6c <uart2_status_isr+0xec>)
    fdd6:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    fdd8:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    fdda:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    fddc:	d41e      	bmi.n	fe1c <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    fdde:	064a      	lsls	r2, r1, #25
    fde0:	d50d      	bpl.n	fdfe <uart2_status_isr+0x7e>
    fde2:	4b22      	ldr	r3, [pc, #136]	; (fe6c <uart2_status_isr+0xec>)
    fde4:	791b      	ldrb	r3, [r3, #4]
    fde6:	065b      	lsls	r3, r3, #25
    fde8:	d509      	bpl.n	fdfe <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    fdea:	4b28      	ldr	r3, [pc, #160]	; (fe8c <uart2_status_isr+0x10c>)
		transmitting = 0;
    fdec:	4928      	ldr	r1, [pc, #160]	; (fe90 <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    fdee:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    fdf0:	2200      	movs	r2, #0
    fdf2:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    fdf4:	b103      	cbz	r3, fdf8 <uart2_status_isr+0x78>
    fdf6:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    fdf8:	4b1c      	ldr	r3, [pc, #112]	; (fe6c <uart2_status_isr+0xec>)
    fdfa:	222c      	movs	r2, #44	; 0x2c
    fdfc:	70da      	strb	r2, [r3, #3]
	}
}
    fdfe:	bc30      	pop	{r4, r5}
    fe00:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    fe02:	491d      	ldr	r1, [pc, #116]	; (fe78 <uart2_status_isr+0xf8>)
    fe04:	7809      	ldrb	r1, [r1, #0]
    fe06:	4299      	cmp	r1, r3
    fe08:	d0d3      	beq.n	fdb2 <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    fe0a:	2b3f      	cmp	r3, #63	; 0x3f
    fe0c:	d92c      	bls.n	fe68 <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    fe0e:	4921      	ldr	r1, [pc, #132]	; (fe94 <uart2_status_isr+0x114>)
    fe10:	3a3f      	subs	r2, #63	; 0x3f
    fe12:	6809      	ldr	r1, [r1, #0]
    fe14:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    fe16:	b2da      	uxtb	r2, r3
    fe18:	702a      	strb	r2, [r5, #0]
    fe1a:	e7ca      	b.n	fdb2 <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    fe1c:	7913      	ldrb	r3, [r2, #4]
    fe1e:	0618      	lsls	r0, r3, #24
    fe20:	d5dd      	bpl.n	fdde <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    fe22:	4b1d      	ldr	r3, [pc, #116]	; (fe98 <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    fe24:	4817      	ldr	r0, [pc, #92]	; (fe84 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    fe26:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    fe28:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    fe2a:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    fe2c:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    fe2e:	d008      	beq.n	fe42 <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    fe30:	4a1a      	ldr	r2, [pc, #104]	; (fe9c <uart2_status_isr+0x11c>)
    fe32:	6812      	ldr	r2, [r2, #0]
    fe34:	1c63      	adds	r3, r4, #1
    fe36:	429a      	cmp	r2, r3
    fe38:	d906      	bls.n	fe48 <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    fe3a:	2b27      	cmp	r3, #39	; 0x27
    fe3c:	d80d      	bhi.n	fe5a <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    fe3e:	b2da      	uxtb	r2, r3
    fe40:	e004      	b.n	fe4c <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    fe42:	236c      	movs	r3, #108	; 0x6c
    fe44:	70d3      	strb	r3, [r2, #3]
    fe46:	e7ca      	b.n	fdde <uart2_status_isr+0x5e>
    fe48:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    fe4a:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    fe4c:	4c14      	ldr	r4, [pc, #80]	; (fea0 <uart2_status_isr+0x120>)
    fe4e:	5ce3      	ldrb	r3, [r4, r3]
    fe50:	b2db      	uxtb	r3, r3
			UART2_D = n;
    fe52:	4c06      	ldr	r4, [pc, #24]	; (fe6c <uart2_status_isr+0xec>)
    fe54:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    fe56:	7002      	strb	r2, [r0, #0]
    fe58:	e7c1      	b.n	fdde <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    fe5a:	4a12      	ldr	r2, [pc, #72]	; (fea4 <uart2_status_isr+0x124>)
    fe5c:	3c27      	subs	r4, #39	; 0x27
    fe5e:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    fe60:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    fe62:	5d2b      	ldrb	r3, [r5, r4]
    fe64:	b2db      	uxtb	r3, r3
    fe66:	e7f4      	b.n	fe52 <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    fe68:	b2da      	uxtb	r2, r3
    fe6a:	e79f      	b.n	fdac <uart2_status_isr+0x2c>
    fe6c:	4006c000 	.word	0x4006c000
    fe70:	1fff9e44 	.word	0x1fff9e44
    fe74:	1fff92b0 	.word	0x1fff92b0
    fe78:	1fff9e4c 	.word	0x1fff9e4c
    fe7c:	1fff9e04 	.word	0x1fff9e04
    fe80:	1fff9e00 	.word	0x1fff9e00
    fe84:	1fff9e88 	.word	0x1fff9e88
    fe88:	1fff92a8 	.word	0x1fff92a8
    fe8c:	1fff9e50 	.word	0x1fff9e50
    fe90:	1fff9e54 	.word	0x1fff9e54
    fe94:	1fff9e48 	.word	0x1fff9e48
    fe98:	1fff9e80 	.word	0x1fff9e80
    fe9c:	1fff92b4 	.word	0x1fff92b4
    fea0:	1fff9e58 	.word	0x1fff9e58
    fea4:	1fff9e84 	.word	0x1fff9e84

0000fea8 <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    fea8:	4b09      	ldr	r3, [pc, #36]	; (fed0 <serial3_add_memory_for_read+0x28>)
{
    feaa:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    feac:	6018      	str	r0, [r3, #0]
	if (buffer) {
    feae:	b160      	cbz	r0, feca <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    feb0:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    feb4:	4b07      	ldr	r3, [pc, #28]	; (fed4 <serial3_add_memory_for_read+0x2c>)
    feb6:	4808      	ldr	r0, [pc, #32]	; (fed8 <serial3_add_memory_for_read+0x30>)
    feb8:	f101 021a 	add.w	r2, r1, #26
    febc:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    febe:	4b07      	ldr	r3, [pc, #28]	; (fedc <serial3_add_memory_for_read+0x34>)
    fec0:	6004      	str	r4, [r0, #0]
    fec2:	3128      	adds	r1, #40	; 0x28
}
    fec4:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    fec6:	6019      	str	r1, [r3, #0]
}
    fec8:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    feca:	2440      	movs	r4, #64	; 0x40
    fecc:	e7f2      	b.n	feb4 <serial3_add_memory_for_read+0xc>
    fece:	bf00      	nop
    fed0:	1fff9e48 	.word	0x1fff9e48
    fed4:	1fff92ac 	.word	0x1fff92ac
    fed8:	1fff92b0 	.word	0x1fff92b0
    fedc:	1fff92a8 	.word	0x1fff92a8

0000fee0 <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    fee0:	4b05      	ldr	r3, [pc, #20]	; (fef8 <serial3_add_memory_for_write+0x18>)
    fee2:	6018      	str	r0, [r3, #0]
	if (buffer) {
    fee4:	b118      	cbz	r0, feee <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    fee6:	4b05      	ldr	r3, [pc, #20]	; (fefc <serial3_add_memory_for_write+0x1c>)
    fee8:	3128      	adds	r1, #40	; 0x28
    feea:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    feec:	4770      	bx	lr
    feee:	4b03      	ldr	r3, [pc, #12]	; (fefc <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    fef0:	2128      	movs	r1, #40	; 0x28
    fef2:	6019      	str	r1, [r3, #0]
}
    fef4:	4770      	bx	lr
    fef6:	bf00      	nop
    fef8:	1fff9e84 	.word	0x1fff9e84
    fefc:	1fff92b4 	.word	0x1fff92b4

0000ff00 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    ff00:	4770      	bx	lr
    ff02:	bf00      	nop

0000ff04 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    ff04:	4770      	bx	lr
    ff06:	bf00      	nop

0000ff08 <touchRead>:

int touchRead(uint8_t pin)
{
	uint32_t ch;

	if (pin >= NUM_DIGITAL_PINS) return 0;
    ff08:	2821      	cmp	r0, #33	; 0x21
    ff0a:	d829      	bhi.n	ff60 <L_87_delayMicroseconds+0x12>
	ch = pin2tsi[pin];
    ff0c:	4b15      	ldr	r3, [pc, #84]	; (ff64 <L_87_delayMicroseconds+0x16>)
    ff0e:	5c19      	ldrb	r1, [r3, r0]
	if (ch == 255) return 0;
    ff10:	29ff      	cmp	r1, #255	; 0xff
    ff12:	d025      	beq.n	ff60 <L_87_delayMicroseconds+0x12>

	*portConfigRegister(pin) = PORT_PCR_MUX(0);
    ff14:	4b14      	ldr	r3, [pc, #80]	; (ff68 <L_87_delayMicroseconds+0x1a>)
	SIM_SCGC5 |= SIM_SCGC5_TSI;
#if defined(HAS_KINETIS_TSI)
	TSI0_GENCS = 0;
    ff16:	4a15      	ldr	r2, [pc, #84]	; (ff6c <L_87_delayMicroseconds+0x1e>)
	*portConfigRegister(pin) = PORT_PCR_MUX(0);
    ff18:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
{
    ff1c:	b410      	push	{r4}
	*portConfigRegister(pin) = PORT_PCR_MUX(0);
    ff1e:	685b      	ldr	r3, [r3, #4]
	SIM_SCGC5 |= SIM_SCGC5_TSI;
    ff20:	4c13      	ldr	r4, [pc, #76]	; (ff70 <L_87_delayMicroseconds+0x22>)
	*portConfigRegister(pin) = PORT_PCR_MUX(0);
    ff22:	2000      	movs	r0, #0
    ff24:	6018      	str	r0, [r3, #0]
	SIM_SCGC5 |= SIM_SCGC5_TSI;
    ff26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ff28:	f043 0320 	orr.w	r3, r3, #32
    ff2c:	63a3      	str	r3, [r4, #56]	; 0x38
	TSI0_PEN = (1 << ch);
    ff2e:	2301      	movs	r3, #1
	TSI0_GENCS = 0;
    ff30:	6010      	str	r0, [r2, #0]
	TSI0_PEN = (1 << ch);
    ff32:	408b      	lsls	r3, r1
	TSI0_SCANC = TSI_SCANC_REFCHRG(3) | TSI_SCANC_EXTCHRG(CURRENT);
    ff34:	4c0f      	ldr	r4, [pc, #60]	; (ff74 <L_87_delayMicroseconds+0x26>)
	TSI0_GENCS = TSI_GENCS_NSCN(NSCAN) | TSI_GENCS_PS(PRESCALE) | TSI_GENCS_TSIEN | TSI_GENCS_SWTS;
    ff36:	4810      	ldr	r0, [pc, #64]	; (ff78 <L_87_delayMicroseconds+0x2a>)
	TSI0_PEN = (1 << ch);
    ff38:	6093      	str	r3, [r2, #8]
	TSI0_SCANC = TSI_SCANC_REFCHRG(3) | TSI_SCANC_EXTCHRG(CURRENT);
    ff3a:	6054      	str	r4, [r2, #4]
	__asm__ volatile(
    ff3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
	TSI0_GENCS = TSI_GENCS_NSCN(NSCAN) | TSI_GENCS_PS(PRESCALE) | TSI_GENCS_TSIEN | TSI_GENCS_SWTS;
    ff40:	6010      	str	r0, [r2, #0]

0000ff42 <L_62_delayMicroseconds>:
    ff42:	3b01      	subs	r3, #1
    ff44:	d1fd      	bne.n	ff42 <L_62_delayMicroseconds>
	delayMicroseconds(10);
	while (TSI0_GENCS & TSI_GENCS_SCNIP) ; // wait
    ff46:	6813      	ldr	r3, [r2, #0]
    ff48:	059b      	lsls	r3, r3, #22
    ff4a:	d4fc      	bmi.n	ff46 <L_62_delayMicroseconds+0x4>
    ff4c:	2320      	movs	r3, #32

0000ff4e <L_87_delayMicroseconds>:
    ff4e:	3b01      	subs	r3, #1
    ff50:	d1fd      	bne.n	ff4e <L_87_delayMicroseconds>
	delayMicroseconds(1);
	return *((volatile uint16_t *)(&TSI0_CNTR1) + ch);
    ff52:	4b0a      	ldr	r3, [pc, #40]	; (ff7c <L_87_delayMicroseconds+0x2e>)
	delayMicroseconds(10);
	while (TSI0_GENCS & TSI_GENCS_SCNIP) ; // wait
	delayMicroseconds(1);
	return TSI0_DATA & 0xFFFF;
#endif
}
    ff54:	bc10      	pop	{r4}
	return *((volatile uint16_t *)(&TSI0_CNTR1) + ch);
    ff56:	b209      	sxth	r1, r1
    ff58:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
    ff5c:	b280      	uxth	r0, r0
}
    ff5e:	4770      	bx	lr
	if (pin >= NUM_DIGITAL_PINS) return 0;
    ff60:	2000      	movs	r0, #0
}
    ff62:	4770      	bx	lr
    ff64:	00015f60 	.word	0x00015f60
    ff68:	00015e50 	.word	0x00015e50
    ff6c:	40045000 	.word	0x40045000
    ff70:	40048000 	.word	0x40048000
    ff74:	03020000 	.word	0x03020000
    ff78:	004a0180 	.word	0x004a0180
    ff7c:	40045100 	.word	0x40045100

0000ff80 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    ff80:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    ff82:	2b04      	cmp	r3, #4
    ff84:	d817      	bhi.n	ffb6 <usb_rx+0x36>
	__disable_irq();
    ff86:	b672      	cpsid	i
	ret = rx_first[endpoint];
    ff88:	490c      	ldr	r1, [pc, #48]	; (ffbc <usb_rx+0x3c>)
    ff8a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    ff8e:	b180      	cbz	r0, ffb2 <usb_rx+0x32>
{
    ff90:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    ff92:	4c0b      	ldr	r4, [pc, #44]	; (ffc0 <usb_rx+0x40>)
    ff94:	f8b0 c000 	ldrh.w	ip, [r0]
    ff98:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    ff9c:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    ffa0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    ffa4:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    ffa8:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    ffac:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    ffae:	bc10      	pop	{r4}
    ffb0:	4770      	bx	lr
	__enable_irq();
    ffb2:	b662      	cpsie	i
}
    ffb4:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    ffb6:	2000      	movs	r0, #0
    ffb8:	4770      	bx	lr
    ffba:	bf00      	nop
    ffbc:	1fff9f1c 	.word	0x1fff9f1c
    ffc0:	1fff9f7c 	.word	0x1fff9f7c

0000ffc4 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    ffc4:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    ffc6:	2804      	cmp	r0, #4
    ffc8:	d80b      	bhi.n	ffe2 <usb_tx_packet_count+0x1e>
	__disable_irq();
    ffca:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    ffcc:	4b07      	ldr	r3, [pc, #28]	; (ffec <usb_tx_packet_count+0x28>)
    ffce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    ffd2:	b143      	cbz	r3, ffe6 <usb_tx_packet_count+0x22>
	uint32_t count=0;
    ffd4:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    ffd6:	685b      	ldr	r3, [r3, #4]
    ffd8:	3001      	adds	r0, #1
    ffda:	2b00      	cmp	r3, #0
    ffdc:	d1fb      	bne.n	ffd6 <usb_tx_packet_count+0x12>
	__enable_irq();
    ffde:	b662      	cpsie	i
	return count;
    ffe0:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    ffe2:	2000      	movs	r0, #0
}
    ffe4:	4770      	bx	lr
	uint32_t count=0;
    ffe6:	4618      	mov	r0, r3
    ffe8:	e7f9      	b.n	ffde <usb_tx_packet_count+0x1a>
    ffea:	bf00      	nop
    ffec:	1fff9f4c 	.word	0x1fff9f4c

0000fff0 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    fff0:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    fff2:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    fff4:	4a19      	ldr	r2, [pc, #100]	; (1005c <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    fff6:	4c1a      	ldr	r4, [pc, #104]	; (10060 <usb_rx_memory+0x70>)
	__disable_irq();
    fff8:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    fffa:	f812 1b01 	ldrb.w	r1, [r2], #1
    fffe:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   10000:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   10004:	d505      	bpl.n	10012 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
   10006:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
   1000a:	b161      	cbz	r1, 10026 <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
   1000c:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
   10010:	b1b9      	cbz	r1, 10042 <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
   10012:	3304      	adds	r3, #4
   10014:	2b18      	cmp	r3, #24
   10016:	d1f0      	bne.n	fffa <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
   10018:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
   1001a:	4b12      	ldr	r3, [pc, #72]	; (10064 <usb_rx_memory+0x74>)
   1001c:	2200      	movs	r2, #0
   1001e:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
   10020:	bc10      	pop	{r4}
	usb_free(packet);
   10022:	f000 bc8b 	b.w	1093c <usb_free>
				usb_rx_memory_needed--;
   10026:	490f      	ldr	r1, [pc, #60]	; (10064 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
   10028:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1002c:	3008      	adds	r0, #8
   1002e:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
   10030:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   10032:	480d      	ldr	r0, [pc, #52]	; (10068 <usb_rx_memory+0x78>)
   10034:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
   10038:	3a01      	subs	r2, #1
   1003a:	700a      	strb	r2, [r1, #0]
				__enable_irq();
   1003c:	b662      	cpsie	i
}
   1003e:	bc10      	pop	{r4}
   10040:	4770      	bx	lr
				usb_rx_memory_needed--;
   10042:	4a08      	ldr	r2, [pc, #32]	; (10064 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   10044:	4909      	ldr	r1, [pc, #36]	; (1006c <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
   10046:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
   1004a:	3008      	adds	r0, #8
   1004c:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
   1004e:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   10050:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
   10054:	3b01      	subs	r3, #1
   10056:	7013      	strb	r3, [r2, #0]
				__enable_irq();
   10058:	b662      	cpsie	i
				return;
   1005a:	e7f0      	b.n	1003e <usb_rx_memory+0x4e>
   1005c:	00015fe4 	.word	0x00015fe4
   10060:	1fff8000 	.word	0x1fff8000
   10064:	1fff9f86 	.word	0x1fff9f86
   10068:	00400088 	.word	0x00400088
   1006c:	004000c8 	.word	0x004000c8

00010070 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
   10070:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
   10072:	2a04      	cmp	r2, #4
   10074:	d80e      	bhi.n	10094 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
   10076:	4b1c      	ldr	r3, [pc, #112]	; (100e8 <usb_tx+0x78>)
   10078:	0140      	lsls	r0, r0, #5
   1007a:	f040 0010 	orr.w	r0, r0, #16
{
   1007e:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
   10080:	4403      	add	r3, r0
	__disable_irq();
   10082:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
   10084:	4c19      	ldr	r4, [pc, #100]	; (100ec <usb_tx+0x7c>)
   10086:	5ca0      	ldrb	r0, [r4, r2]
   10088:	2803      	cmp	r0, #3
   1008a:	d81c      	bhi.n	100c6 <usb_tx+0x56>
   1008c:	e8df f000 	tbb	[pc, r0]
   10090:	18031513 	.word	0x18031513
   10094:	4770      	bx	lr
   10096:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
   10098:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   1009a:	f013 0f08 	tst.w	r3, #8
   1009e:	8808      	ldrh	r0, [r1, #0]
   100a0:	bf14      	ite	ne
   100a2:	22c8      	movne	r2, #200	; 0xc8
   100a4:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
   100a6:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   100a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
   100ac:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   100ae:	601a      	str	r2, [r3, #0]
	__enable_irq();
   100b0:	b662      	cpsie	i
}
   100b2:	bc10      	pop	{r4}
   100b4:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
   100b6:	2003      	movs	r0, #3
   100b8:	e7ee      	b.n	10098 <usb_tx+0x28>
		b++;
   100ba:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
   100bc:	2002      	movs	r0, #2
		break;
   100be:	e7eb      	b.n	10098 <usb_tx+0x28>
		b++;
   100c0:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
   100c2:	2004      	movs	r0, #4
		break;
   100c4:	e7e8      	b.n	10098 <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
   100c6:	4b0a      	ldr	r3, [pc, #40]	; (100f0 <usb_tx+0x80>)
   100c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   100cc:	b138      	cbz	r0, 100de <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
   100ce:	4b09      	ldr	r3, [pc, #36]	; (100f4 <usb_tx+0x84>)
   100d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   100d4:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
   100d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
   100da:	b662      	cpsie	i
		return;
   100dc:	e7e9      	b.n	100b2 <usb_tx+0x42>
			tx_first[endpoint] = packet;
   100de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   100e2:	4b04      	ldr	r3, [pc, #16]	; (100f4 <usb_tx+0x84>)
   100e4:	e7f7      	b.n	100d6 <usb_tx+0x66>
   100e6:	bf00      	nop
   100e8:	1fff8000 	.word	0x1fff8000
   100ec:	1fff9f74 	.word	0x1fff9f74
   100f0:	1fff9f4c 	.word	0x1fff9f4c
   100f4:	1fff9f60 	.word	0x1fff9f60

000100f8 <_reboot_Teensyduino_>:


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
   100f8:	be00      	bkpt	0x0000
   100fa:	bf00      	nop

000100fc <usb_isr>:
}



void usb_isr(void)
{
   100fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
   10100:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 103d4 <usb_isr+0x2d8>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
   10104:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 103d8 <usb_isr+0x2dc>
{
   10108:	b085      	sub	sp, #20
   1010a:	e03d      	b.n	10188 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
   1010c:	4db3      	ldr	r5, [pc, #716]	; (103dc <usb_isr+0x2e0>)
   1010e:	089e      	lsrs	r6, r3, #2
   10110:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
   10114:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
   10116:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
   10118:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
   1011c:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
   1011e:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
   10122:	f040 80ba 	bne.w	1029a <usb_isr+0x19e>
				packet->len = b->desc >> 16;
   10126:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
   1012a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
   1012e:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
   10130:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
   10134:	f000 80a9 	beq.w	1028a <usb_isr+0x18e>
					packet->index = 0;
   10138:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
   1013c:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
   10140:	4ba7      	ldr	r3, [pc, #668]	; (103e0 <usb_isr+0x2e4>)
   10142:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   10146:	2a00      	cmp	r2, #0
   10148:	f000 8203 	beq.w	10552 <usb_isr+0x456>
						rx_last[endpoint]->next = packet;
   1014c:	4ba5      	ldr	r3, [pc, #660]	; (103e4 <usb_isr+0x2e8>)
   1014e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   10152:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
   10154:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
   10158:	4ba3      	ldr	r3, [pc, #652]	; (103e8 <usb_isr+0x2ec>)
   1015a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
   1015e:	4494      	add	ip, r2
   10160:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
   10164:	f000 fbca 	bl	108fc <usb_malloc>
					if (packet) {
   10168:	2800      	cmp	r0, #0
   1016a:	f000 81eb 	beq.w	10544 <usb_isr+0x448>
						b->desc = BDT_DESC(64,
   1016e:	f017 0f08 	tst.w	r7, #8
   10172:	4b9e      	ldr	r3, [pc, #632]	; (103ec <usb_isr+0x2f0>)
						b->addr = packet->buf;
   10174:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
   10178:	bf18      	it	ne
   1017a:	465b      	movne	r3, fp
						b->addr = packet->buf;
   1017c:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
   1017e:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
   10182:	2308      	movs	r3, #8
   10184:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
   10188:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
   1018c:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
   1018e:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
   10190:	d51d      	bpl.n	101ce <usb_isr+0xd2>
		if (usb_configuration) {
   10192:	4b97      	ldr	r3, [pc, #604]	; (103f0 <usb_isr+0x2f4>)
   10194:	781b      	ldrb	r3, [r3, #0]
   10196:	b1bb      	cbz	r3, 101c8 <usb_isr+0xcc>
			t = usb_reboot_timer;
   10198:	4996      	ldr	r1, [pc, #600]	; (103f4 <usb_isr+0x2f8>)
   1019a:	780a      	ldrb	r2, [r1, #0]
			if (t) {
   1019c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   101a0:	b12a      	cbz	r2, 101ae <usb_isr+0xb2>
				usb_reboot_timer = --t;
   101a2:	3b01      	subs	r3, #1
   101a4:	b2db      	uxtb	r3, r3
   101a6:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
   101a8:	2b00      	cmp	r3, #0
   101aa:	f000 8348 	beq.w	1083e <usb_isr+0x742>
			t = usb_cdc_transmit_flush_timer;
   101ae:	4992      	ldr	r1, [pc, #584]	; (103f8 <usb_isr+0x2fc>)
   101b0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
   101b2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   101b6:	b12a      	cbz	r2, 101c4 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
   101b8:	3b01      	subs	r3, #1
   101ba:	b2db      	uxtb	r3, r3
   101bc:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
   101be:	2b00      	cmp	r3, #0
   101c0:	f000 81ed 	beq.w	1059e <usb_isr+0x4a2>
                        usb_midi_flush_output();
   101c4:	f000 fcb8 	bl	10b38 <usb_midi_flush_output>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
   101c8:	2304      	movs	r3, #4
   101ca:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
   101ce:	f014 0208 	ands.w	r2, r4, #8
   101d2:	f000 81cc 	beq.w	1056e <usb_isr+0x472>
		stat = USB0_STAT;
   101d6:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
   101da:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
   101dc:	0912      	lsrs	r2, r2, #4
   101de:	d195      	bne.n	1010c <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
   101e0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 103dc <usb_isr+0x2e0>
   101e4:	089b      	lsrs	r3, r3, #2
   101e6:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
   101ea:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
   101ee:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
   101f0:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
   101f4:	2809      	cmp	r0, #9
   101f6:	d07c      	beq.n	102f2 <usb_isr+0x1f6>
   101f8:	d80f      	bhi.n	1021a <usb_isr+0x11e>
   101fa:	3801      	subs	r0, #1
   101fc:	2801      	cmp	r0, #1
   101fe:	d808      	bhi.n	10212 <usb_isr+0x116>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
   10200:	4a7e      	ldr	r2, [pc, #504]	; (103fc <usb_isr+0x300>)
   10202:	8815      	ldrh	r5, [r2, #0]
   10204:	f242 0021 	movw	r0, #8225	; 0x2021
   10208:	4285      	cmp	r5, r0
   1020a:	f000 81fb 	beq.w	10604 <usb_isr+0x508>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
   1020e:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   10212:	2301      	movs	r3, #1
   10214:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
   10218:	e7b3      	b.n	10182 <usb_isr+0x86>
	switch (pid) {
   1021a:	280d      	cmp	r0, #13
   1021c:	d1f9      	bne.n	10212 <usb_isr+0x116>
		setup.word2 = *(uint32_t *)(buf + 4);
   1021e:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
   10222:	4d77      	ldr	r5, [pc, #476]	; (10400 <usb_isr+0x304>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
   10224:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
   10228:	4e74      	ldr	r6, [pc, #464]	; (103fc <usb_isr+0x300>)
		ep0_tx_data_toggle = 1;
   1022a:	4c76      	ldr	r4, [pc, #472]	; (10404 <usb_isr+0x308>)
		table[index(0, TX, EVEN)].desc = 0;
   1022c:	f8c9 2010 	str.w	r2, [r9, #16]
   10230:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
   10232:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
   10236:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
   1023a:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
   1023c:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
   1023e:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
   10242:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
   10246:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
   10248:	f200 80ff 	bhi.w	1044a <usb_isr+0x34e>
   1024c:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
   10250:	f080 82cb 	bcs.w	107ea <usb_isr+0x6ee>
   10254:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   10258:	f000 8226 	beq.w	106a8 <usb_isr+0x5ac>
   1025c:	f240 80de 	bls.w	1041c <usb_isr+0x320>
   10260:	f240 3202 	movw	r2, #770	; 0x302
   10264:	4293      	cmp	r3, r2
   10266:	d17b      	bne.n	10360 <usb_isr+0x264>
		i = setup.wIndex & 0x7F;
   10268:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   1026c:	2f05      	cmp	r7, #5
   1026e:	f200 8108 	bhi.w	10482 <usb_isr+0x386>
   10272:	0c02      	lsrs	r2, r0, #16
   10274:	f040 8105 	bne.w	10482 <usb_isr+0x386>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
   10278:	4963      	ldr	r1, [pc, #396]	; (10408 <usb_isr+0x30c>)
   1027a:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
   1027e:	f043 0302 	orr.w	r3, r3, #2
   10282:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
   10286:	4613      	mov	r3, r2
		break;
   10288:	e070      	b.n	1036c <usb_isr+0x270>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
   1028a:	f017 0f08 	tst.w	r7, #8
   1028e:	4b57      	ldr	r3, [pc, #348]	; (103ec <usb_isr+0x2f0>)
   10290:	bf18      	it	ne
   10292:	465b      	movne	r3, fp
   10294:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
   10298:	e773      	b.n	10182 <usb_isr+0x86>
				usb_free(packet);
   1029a:	f000 fb4f 	bl	1093c <usb_free>
				packet = tx_first[endpoint];
   1029e:	495b      	ldr	r1, [pc, #364]	; (1040c <usb_isr+0x310>)
					switch (tx_state[endpoint]) {
   102a0:	4a5b      	ldr	r2, [pc, #364]	; (10410 <usb_isr+0x314>)
				packet = tx_first[endpoint];
   102a2:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
   102a6:	2b00      	cmp	r3, #0
   102a8:	f000 8157 	beq.w	1055a <usb_isr+0x45e>
					tx_first[endpoint] = packet->next;
   102ac:	6858      	ldr	r0, [r3, #4]
   102ae:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
   102b2:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
   102b4:	f103 0008 	add.w	r0, r3, #8
   102b8:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
   102ba:	2903      	cmp	r1, #3
   102bc:	d805      	bhi.n	102ca <usb_isr+0x1ce>
   102be:	e8df f001 	tbb	[pc, r1]
   102c2:	0f12      	.short	0x0f12
   102c4:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
   102c6:	2104      	movs	r1, #4
   102c8:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
   102ca:	881a      	ldrh	r2, [r3, #0]
   102cc:	f017 0f08 	tst.w	r7, #8
   102d0:	bf14      	ite	ne
   102d2:	23c8      	movne	r3, #200	; 0xc8
   102d4:	2388      	moveq	r3, #136	; 0x88
   102d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   102da:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
   102de:	e750      	b.n	10182 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
   102e0:	2102      	movs	r1, #2
   102e2:	5511      	strb	r1, [r2, r4]
						break;
   102e4:	e7f1      	b.n	102ca <usb_isr+0x1ce>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
   102e6:	2103      	movs	r1, #3
   102e8:	5511      	strb	r1, [r2, r4]
						break;
   102ea:	e7ee      	b.n	102ca <usb_isr+0x1ce>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
   102ec:	2105      	movs	r1, #5
   102ee:	5511      	strb	r1, [r2, r4]
						break;
   102f0:	e7eb      	b.n	102ca <usb_isr+0x1ce>
		data = ep0_tx_ptr;
   102f2:	4d43      	ldr	r5, [pc, #268]	; (10400 <usb_isr+0x304>)
   102f4:	682a      	ldr	r2, [r5, #0]
		if (data) {
   102f6:	b33a      	cbz	r2, 10348 <usb_isr+0x24c>
			size = ep0_tx_len;
   102f8:	4946      	ldr	r1, [pc, #280]	; (10414 <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   102fa:	4c42      	ldr	r4, [pc, #264]	; (10404 <usb_isr+0x308>)
			size = ep0_tx_len;
   102fc:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   102fe:	4846      	ldr	r0, [pc, #280]	; (10418 <usb_isr+0x31c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10300:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10304:	7806      	ldrb	r6, [r0, #0]
   10306:	2f40      	cmp	r7, #64	; 0x40
   10308:	463b      	mov	r3, r7
   1030a:	bf28      	it	cs
   1030c:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1030e:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
   10312:	f08e 0e01 	eor.w	lr, lr, #1
   10316:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1031a:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
   1031e:	f086 0601 	eor.w	r6, r6, #1
   10322:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10324:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   10328:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1032a:	bf14      	ite	ne
   1032c:	20c8      	movne	r0, #200	; 0xc8
   1032e:	2088      	moveq	r0, #136	; 0x88
   10330:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
   10334:	441a      	add	r2, r3
			ep0_tx_len -= size;
   10336:	1afb      	subs	r3, r7, r3
   10338:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1033a:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
   1033e:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
   10340:	2b00      	cmp	r3, #0
   10342:	f000 8136 	beq.w	105b2 <usb_isr+0x4b6>
   10346:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
   10348:	4b2c      	ldr	r3, [pc, #176]	; (103fc <usb_isr+0x300>)
   1034a:	881a      	ldrh	r2, [r3, #0]
   1034c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   10350:	f47f af5f 	bne.w	10212 <usb_isr+0x116>
			USB0_ADDR = setup.wValue;
   10354:	789a      	ldrb	r2, [r3, #2]
   10356:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
   1035a:	2200      	movs	r2, #0
   1035c:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
   1035e:	e758      	b.n	10212 <usb_isr+0x116>
	switch (setup.wRequestAndType) {
   10360:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   10364:	f040 808d 	bne.w	10482 <usb_isr+0x386>
	uint32_t datalen = 0;
   10368:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
   1036a:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
   1036c:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10370:	4829      	ldr	r0, [pc, #164]	; (10418 <usb_isr+0x31c>)
   10372:	4594      	cmp	ip, r2
   10374:	bf28      	it	cs
   10376:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
   10378:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1037a:	7802      	ldrb	r2, [r0, #0]
   1037c:	2f40      	cmp	r7, #64	; 0x40
   1037e:	bf28      	it	cs
   10380:	2740      	movcs	r7, #64	; 0x40
   10382:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10386:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10388:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1038c:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10390:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10394:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
   10398:	2600      	movs	r6, #0
	data += size;
   1039a:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
   1039c:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
   1039e:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
   103a2:	f082 0601 	eor.w	r6, r2, #1
   103a6:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
   103a8:	f040 8111 	bne.w	105ce <usb_isr+0x4d2>
   103ac:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
   103b0:	f04f 0501 	mov.w	r5, #1
   103b4:	d909      	bls.n	103ca <usb_isr+0x2ce>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   103b6:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
   103ba:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   103bc:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
   103c0:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   103c2:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   103c4:	2388      	movs	r3, #136	; 0x88
   103c6:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   103ca:	2301      	movs	r3, #1
   103cc:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
   103d0:	e71f      	b.n	10212 <usb_isr+0x116>
   103d2:	bf00      	nop
   103d4:	40072000 	.word	0x40072000
   103d8:	004000c8 	.word	0x004000c8
   103dc:	1fff8000 	.word	0x1fff8000
   103e0:	1fff9f1c 	.word	0x1fff9f1c
   103e4:	1fff9f30 	.word	0x1fff9f30
   103e8:	1fff9f7c 	.word	0x1fff9f7c
   103ec:	00400088 	.word	0x00400088
   103f0:	1fff9f79 	.word	0x1fff9f79
   103f4:	1fff9f7a 	.word	0x1fff9f7a
   103f8:	1fffa12c 	.word	0x1fffa12c
   103fc:	1fff9f44 	.word	0x1fff9f44
   10400:	1fff9f10 	.word	0x1fff9f10
   10404:	1fff9f0d 	.word	0x1fff9f0d
   10408:	400720c0 	.word	0x400720c0
   1040c:	1fff9f4c 	.word	0x1fff9f4c
   10410:	1fff9f74 	.word	0x1fff9f74
   10414:	1fff9f0e 	.word	0x1fff9f0e
   10418:	1fff9f0c 	.word	0x1fff9f0c
	switch (setup.wRequestAndType) {
   1041c:	2b80      	cmp	r3, #128	; 0x80
   1041e:	f000 818b 	beq.w	10738 <usb_isr+0x63c>
   10422:	2b82      	cmp	r3, #130	; 0x82
   10424:	d12d      	bne.n	10482 <usb_isr+0x386>
		i = setup.wIndex & 0x7F;
   10426:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
   1042a:	2f05      	cmp	r7, #5
   1042c:	d829      	bhi.n	10482 <usb_isr+0x386>
		reply_buffer[0] = 0;
   1042e:	4aa7      	ldr	r2, [pc, #668]	; (106cc <usb_isr+0x5d0>)
   10430:	2300      	movs	r3, #0
   10432:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
   10434:	4ba6      	ldr	r3, [pc, #664]	; (106d0 <usb_isr+0x5d4>)
   10436:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
   1043a:	079f      	lsls	r7, r3, #30
   1043c:	f140 81fc 	bpl.w	10838 <usb_isr+0x73c>
   10440:	2301      	movs	r3, #1
   10442:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
   10444:	4ba1      	ldr	r3, [pc, #644]	; (106cc <usb_isr+0x5d0>)
		datalen = 2;
   10446:	2202      	movs	r2, #2
   10448:	e790      	b.n	1036c <usb_isr+0x270>
	switch (setup.wRequestAndType) {
   1044a:	f242 0c21 	movw	ip, #8225	; 0x2021
   1044e:	4563      	cmp	r3, ip
   10450:	d0bb      	beq.n	103ca <usb_isr+0x2ce>
   10452:	d91d      	bls.n	10490 <usb_isr+0x394>
   10454:	f242 2221 	movw	r2, #8737	; 0x2221
   10458:	4293      	cmp	r3, r2
   1045a:	d10d      	bne.n	10478 <usb_isr+0x37c>
		switch (setup.wIndex) {
   1045c:	b2bf      	uxth	r7, r7
   1045e:	2f00      	cmp	r7, #0
   10460:	d182      	bne.n	10368 <usb_isr+0x26c>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   10462:	4b9c      	ldr	r3, [pc, #624]	; (106d4 <usb_isr+0x5d8>)
   10464:	681a      	ldr	r2, [r3, #0]
   10466:	4b9c      	ldr	r3, [pc, #624]	; (106d8 <usb_isr+0x5dc>)
   10468:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   1046a:	4b9c      	ldr	r3, [pc, #624]	; (106dc <usb_isr+0x5e0>)
   1046c:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
   10470:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
   10472:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
   10474:	4613      	mov	r3, r2
			break;
   10476:	e779      	b.n	1036c <usb_isr+0x270>
	switch (setup.wRequestAndType) {
   10478:	f242 3221 	movw	r2, #8993	; 0x2321
   1047c:	4293      	cmp	r3, r2
   1047e:	f43f af73 	beq.w	10368 <usb_isr+0x26c>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   10482:	230f      	movs	r3, #15
   10484:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   10488:	2301      	movs	r3, #1
   1048a:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
   1048e:	e6c0      	b.n	10212 <usb_isr+0x116>
	switch (setup.wRequestAndType) {
   10490:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
   10494:	f000 814a 	beq.w	1072c <usb_isr+0x630>
   10498:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
   1049c:	d1f1      	bne.n	10482 <usb_isr+0x386>
		usb_configuration = setup.wValue;
   1049e:	4b90      	ldr	r3, [pc, #576]	; (106e0 <usb_isr+0x5e4>)
   104a0:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
   104a4:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
   104a6:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
   104a8:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
   104ac:	061a      	lsls	r2, r3, #24
   104ae:	d406      	bmi.n	104be <usb_isr+0x3c2>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
   104b0:	3501      	adds	r5, #1
   104b2:	2d18      	cmp	r5, #24
   104b4:	d00c      	beq.n	104d0 <usb_isr+0x3d4>
			if (table[i].desc & BDT_OWN) {
   104b6:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
   104ba:	061a      	lsls	r2, r3, #24
   104bc:	d5f8      	bpl.n	104b0 <usb_isr+0x3b4>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
   104be:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
   104c2:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
   104c4:	6858      	ldr	r0, [r3, #4]
   104c6:	3808      	subs	r0, #8
   104c8:	f000 fa38 	bl	1093c <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
   104cc:	2d18      	cmp	r5, #24
   104ce:	d1f2      	bne.n	104b6 <usb_isr+0x3ba>
   104d0:	4a84      	ldr	r2, [pc, #528]	; (106e4 <usb_isr+0x5e8>)
   104d2:	4b85      	ldr	r3, [pc, #532]	; (106e8 <usb_isr+0x5ec>)
   104d4:	9202      	str	r2, [sp, #8]
   104d6:	4a85      	ldr	r2, [pc, #532]	; (106ec <usb_isr+0x5f0>)
   104d8:	9201      	str	r2, [sp, #4]
   104da:	4e85      	ldr	r6, [pc, #532]	; (106f0 <usb_isr+0x5f4>)
   104dc:	4a85      	ldr	r2, [pc, #532]	; (106f4 <usb_isr+0x5f8>)
   104de:	f8df 8218 	ldr.w	r8, [pc, #536]	; 106f8 <usb_isr+0x5fc>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
   104e2:	9403      	str	r4, [sp, #12]
   104e4:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
   104e6:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
   104e8:	461c      	mov	r4, r3
			p = rx_first[i];
   104ea:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
   104ee:	b12f      	cbz	r7, 104fc <usb_isr+0x400>
				n = p->next;
   104f0:	4638      	mov	r0, r7
   104f2:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
   104f4:	f000 fa22 	bl	1093c <usb_free>
			while (p) {
   104f8:	2f00      	cmp	r7, #0
   104fa:	d1f9      	bne.n	104f0 <usb_isr+0x3f4>
			rx_last[i] = NULL;
   104fc:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
   104fe:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
   10502:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
   10506:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
   1050a:	9300      	str	r3, [sp, #0]
			while (p) {
   1050c:	b12f      	cbz	r7, 1051a <usb_isr+0x41e>
				n = p->next;
   1050e:	4638      	mov	r0, r7
   10510:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
   10512:	f000 fa13 	bl	1093c <usb_free>
			while (p) {
   10516:	2f00      	cmp	r7, #0
   10518:	d1f9      	bne.n	1050e <usb_isr+0x412>
			tx_last[i] = NULL;
   1051a:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
   1051c:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
   10520:	f843 5b04 	str.w	r5, [r3], #4
   10524:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
   10526:	9b01      	ldr	r3, [sp, #4]
   10528:	f823 5b02 	strh.w	r5, [r3], #2
   1052c:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
   1052e:	7823      	ldrb	r3, [r4, #0]
   10530:	3b02      	subs	r3, #2
   10532:	2b03      	cmp	r3, #3
   10534:	f200 8109 	bhi.w	1074a <usb_isr+0x64e>
   10538:	e8df f013 	tbh	[pc, r3, lsl #1]
   1053c:	0104013f 	.word	0x0104013f
   10540:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
   10544:	4a6d      	ldr	r2, [pc, #436]	; (106fc <usb_isr+0x600>)
						b->desc = 0;
   10546:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
   1054a:	7813      	ldrb	r3, [r2, #0]
   1054c:	3301      	adds	r3, #1
   1054e:	7013      	strb	r3, [r2, #0]
   10550:	e617      	b.n	10182 <usb_isr+0x86>
						rx_first[endpoint] = packet;
   10552:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
   10556:	4b67      	ldr	r3, [pc, #412]	; (106f4 <usb_isr+0x5f8>)
   10558:	e5fc      	b.n	10154 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
   1055a:	5d11      	ldrb	r1, [r2, r4]
   1055c:	2902      	cmp	r1, #2
   1055e:	d026      	beq.n	105ae <usb_isr+0x4b2>
   10560:	f67f ae0f 	bls.w	10182 <usb_isr+0x86>
   10564:	2903      	cmp	r1, #3
   10566:	d11d      	bne.n	105a4 <usb_isr+0x4a8>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
   10568:	2301      	movs	r3, #1
   1056a:	5513      	strb	r3, [r2, r4]
						break;
   1056c:	e609      	b.n	10182 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
   1056e:	07e0      	lsls	r0, r4, #31
   10570:	d46e      	bmi.n	10650 <usb_isr+0x554>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
   10572:	0621      	lsls	r1, r4, #24
   10574:	d421      	bmi.n	105ba <usb_isr+0x4be>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
   10576:	07a2      	lsls	r2, r4, #30
   10578:	d508      	bpl.n	1058c <usb_isr+0x490>
		uint8_t err = USB0_ERRSTAT;
   1057a:	4b61      	ldr	r3, [pc, #388]	; (10700 <usb_isr+0x604>)
   1057c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
   10580:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
   10582:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
   10584:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
   10588:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
   1058c:	06e3      	lsls	r3, r4, #27
   1058e:	d503      	bpl.n	10598 <usb_isr+0x49c>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
   10590:	4b5b      	ldr	r3, [pc, #364]	; (10700 <usb_isr+0x604>)
   10592:	2210      	movs	r2, #16
   10594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
   10598:	b005      	add	sp, #20
   1059a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
   1059e:	f000 fd13 	bl	10fc8 <usb_serial_flush_callback>
   105a2:	e60f      	b.n	101c4 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
   105a4:	f017 0f08 	tst.w	r7, #8
   105a8:	bf14      	ite	ne
   105aa:	2303      	movne	r3, #3
   105ac:	2302      	moveq	r3, #2
   105ae:	5513      	strb	r3, [r2, r4]
						break;
   105b0:	e5e7      	b.n	10182 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
   105b2:	2f3f      	cmp	r7, #63	; 0x3f
   105b4:	bf98      	it	ls
   105b6:	2200      	movls	r2, #0
   105b8:	e6c5      	b.n	10346 <usb_isr+0x24a>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   105ba:	4b51      	ldr	r3, [pc, #324]	; (10700 <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
   105bc:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   105be:	210d      	movs	r1, #13
   105c0:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
   105c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
   105c8:	07a2      	lsls	r2, r4, #30
   105ca:	d5df      	bpl.n	1058c <usb_isr+0x490>
   105cc:	e7d5      	b.n	1057a <usb_isr+0x47e>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   105ce:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
   105d2:	7002      	strb	r2, [r0, #0]
   105d4:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   105d6:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
   105da:	463a      	mov	r2, r7
   105dc:	bf28      	it	cs
   105de:	2240      	movcs	r2, #64	; 0x40
   105e0:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   105e2:	0410      	lsls	r0, r2, #16
	data += size;
   105e4:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   105e6:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
   105ea:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
   105ec:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   105ee:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
   105f2:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
   105f4:	d055      	beq.n	106a2 <usb_isr+0x5a6>
	ep0_tx_ptr = data;
   105f6:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
   105f8:	4b42      	ldr	r3, [pc, #264]	; (10704 <usb_isr+0x608>)
   105fa:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   105fc:	2301      	movs	r3, #1
   105fe:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
   10602:	e606      	b.n	10212 <usb_isr+0x116>
			switch (setup.wIndex) {
   10604:	8892      	ldrh	r2, [r2, #4]
   10606:	b95a      	cbnz	r2, 10620 <usb_isr+0x524>
   10608:	4a3f      	ldr	r2, [pc, #252]	; (10708 <usb_isr+0x60c>)
   1060a:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
   1060c:	f814 1b01 	ldrb.w	r1, [r4], #1
   10610:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
   10614:	42ac      	cmp	r4, r5
   10616:	d1f9      	bne.n	1060c <usb_isr+0x510>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   10618:	4a3c      	ldr	r2, [pc, #240]	; (1070c <usb_isr+0x610>)
   1061a:	6812      	ldr	r2, [r2, #0]
   1061c:	2a86      	cmp	r2, #134	; 0x86
   1061e:	d03c      	beq.n	1069a <usb_isr+0x59e>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10620:	4c3b      	ldr	r4, [pc, #236]	; (10710 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10622:	483c      	ldr	r0, [pc, #240]	; (10714 <usb_isr+0x618>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10624:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10626:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10628:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
   1062a:	f085 0501 	eor.w	r5, r5, #1
   1062e:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10630:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
   10634:	f082 0201 	eor.w	r2, r2, #1
   10638:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1063a:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
   1063e:	f04f 0000 	mov.w	r0, #0
   10642:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10644:	bf14      	ite	ne
   10646:	22c8      	movne	r2, #200	; 0xc8
   10648:	2288      	moveq	r2, #136	; 0x88
   1064a:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
   1064e:	e5de      	b.n	1020e <usb_isr+0x112>
		USB0_CTL = USB_CTL_ODDRST;
   10650:	4b2b      	ldr	r3, [pc, #172]	; (10700 <usb_isr+0x604>)
		ep0_tx_bdt_bank = 0;
   10652:	4830      	ldr	r0, [pc, #192]	; (10714 <usb_isr+0x618>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
   10654:	4930      	ldr	r1, [pc, #192]	; (10718 <usb_isr+0x61c>)
   10656:	4c31      	ldr	r4, [pc, #196]	; (1071c <usb_isr+0x620>)
		USB0_CTL = USB_CTL_ODDRST;
   10658:	2502      	movs	r5, #2
   1065a:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
   1065e:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
   10660:	482f      	ldr	r0, [pc, #188]	; (10720 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
   10662:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
   10664:	4d2f      	ldr	r5, [pc, #188]	; (10724 <usb_isr+0x628>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
   10666:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
   10668:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   1066a:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
   1066c:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
   1066e:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
   10670:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
   10672:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   10674:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
   10678:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
   1067a:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
   1067c:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
   10680:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
   10684:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
   10688:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
   1068c:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
   10690:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
   10694:	b005      	add	sp, #20
   10696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   1069a:	4a23      	ldr	r2, [pc, #140]	; (10728 <usb_isr+0x62c>)
   1069c:	200f      	movs	r0, #15
   1069e:	7010      	strb	r0, [r2, #0]
   106a0:	e7be      	b.n	10620 <usb_isr+0x524>
	if (datalen == 0 && size < EP0_SIZE) return;
   106a2:	2f3f      	cmp	r7, #63	; 0x3f
   106a4:	d8a7      	bhi.n	105f6 <usb_isr+0x4fa>
   106a6:	e690      	b.n	103ca <usb_isr+0x2ce>
		i = setup.wIndex & 0x7F;
   106a8:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   106ac:	2f05      	cmp	r7, #5
   106ae:	f63f aee8 	bhi.w	10482 <usb_isr+0x386>
   106b2:	0c00      	lsrs	r0, r0, #16
   106b4:	f47f aee5 	bne.w	10482 <usb_isr+0x386>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
   106b8:	4a05      	ldr	r2, [pc, #20]	; (106d0 <usb_isr+0x5d4>)
   106ba:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
   106be:	f023 0302 	bic.w	r3, r3, #2
   106c2:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
   106c6:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
   106c8:	4613      	mov	r3, r2
		break;
   106ca:	e64f      	b.n	1036c <usb_isr+0x270>
   106cc:	1fff9f14 	.word	0x1fff9f14
   106d0:	400720c0 	.word	0x400720c0
   106d4:	1fff9d70 	.word	0x1fff9d70
   106d8:	1fffa128 	.word	0x1fffa128
   106dc:	1fffa124 	.word	0x1fffa124
   106e0:	1fff9f79 	.word	0x1fff9f79
   106e4:	1fff9f60 	.word	0x1fff9f60
   106e8:	1fff9f74 	.word	0x1fff9f74
   106ec:	1fff9f7c 	.word	0x1fff9f7c
   106f0:	1fff9f1c 	.word	0x1fff9f1c
   106f4:	1fff9f30 	.word	0x1fff9f30
   106f8:	1fff9f4c 	.word	0x1fff9f4c
   106fc:	1fff9f86 	.word	0x1fff9f86
   10700:	40072000 	.word	0x40072000
   10704:	1fff9f0e 	.word	0x1fff9f0e
   10708:	1fffa11b 	.word	0x1fffa11b
   1070c:	1fffa11c 	.word	0x1fffa11c
   10710:	1fff9f0d 	.word	0x1fff9f0d
   10714:	1fff9f0c 	.word	0x1fff9f0c
   10718:	1fff8000 	.word	0x1fff8000
   1071c:	00400088 	.word	0x00400088
   10720:	1fff9e8c 	.word	0x1fff9e8c
   10724:	1fff9ecc 	.word	0x1fff9ecc
   10728:	1fff9f7a 	.word	0x1fff9f7a
		reply_buffer[0] = usb_configuration;
   1072c:	4b48      	ldr	r3, [pc, #288]	; (10850 <usb_isr+0x754>)
   1072e:	4949      	ldr	r1, [pc, #292]	; (10854 <usb_isr+0x758>)
   10730:	781b      	ldrb	r3, [r3, #0]
   10732:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
   10734:	460b      	mov	r3, r1
		break;
   10736:	e619      	b.n	1036c <usb_isr+0x270>
		reply_buffer[0] = 0;
   10738:	4a46      	ldr	r2, [pc, #280]	; (10854 <usb_isr+0x758>)
   1073a:	2300      	movs	r3, #0
   1073c:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
   1073e:	4b45      	ldr	r3, [pc, #276]	; (10854 <usb_isr+0x758>)
		datalen = 2;
   10740:	2202      	movs	r2, #2
		break;
   10742:	e613      	b.n	1036c <usb_isr+0x270>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
   10744:	f04f 0301 	mov.w	r3, #1
   10748:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
   1074a:	4b43      	ldr	r3, [pc, #268]	; (10858 <usb_isr+0x75c>)
   1074c:	42b3      	cmp	r3, r6
   1074e:	f104 0401 	add.w	r4, r4, #1
   10752:	f47f aeca 	bne.w	104ea <usb_isr+0x3ee>
		usb_rx_memory_needed = 0;
   10756:	4e41      	ldr	r6, [pc, #260]	; (1085c <usb_isr+0x760>)
   10758:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
   1075a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 10860 <usb_isr+0x764>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1075e:	4f41      	ldr	r7, [pc, #260]	; (10864 <usb_isr+0x768>)
		usb_rx_memory_needed = 0;
   10760:	2300      	movs	r3, #0
   10762:	7033      	strb	r3, [r6, #0]
   10764:	2504      	movs	r5, #4
			epconf = *cfg++;
   10766:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
   1076a:	4a3f      	ldr	r2, [pc, #252]	; (10868 <usb_isr+0x76c>)
   1076c:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
   1076e:	071b      	lsls	r3, r3, #28
   10770:	d425      	bmi.n	107be <usb_isr+0x6c2>
			table[index(i, TX, EVEN)].desc = 0;
   10772:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
   10776:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
   1077a:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
   1077c:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
   1077e:	2d18      	cmp	r5, #24
			table[index(i, TX, EVEN)].desc = 0;
   10780:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
   10784:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
   10788:	d1ed      	bne.n	10766 <usb_isr+0x66a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1078a:	4f38      	ldr	r7, [pc, #224]	; (1086c <usb_isr+0x770>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1078c:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1078e:	783a      	ldrb	r2, [r7, #0]
   10790:	f042 0002 	orr.w	r0, r2, #2
   10794:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
   10798:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1079c:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   107a0:	2d00      	cmp	r5, #0
   107a2:	d14d      	bne.n	10840 <usb_isr+0x744>
   107a4:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
   107a6:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
   107aa:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
   107ac:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   107ae:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   107b2:	2301      	movs	r3, #1
   107b4:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
   107b8:	e52b      	b.n	10212 <usb_isr+0x116>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
   107ba:	7025      	strb	r5, [r4, #0]
				break;
   107bc:	e7c5      	b.n	1074a <usb_isr+0x64e>
				p = usb_malloc();
   107be:	f000 f89d 	bl	108fc <usb_malloc>
				if (p) {
   107c2:	2800      	cmp	r0, #0
   107c4:	d032      	beq.n	1082c <usb_isr+0x730>
					table[index(i, RX, EVEN)].addr = p->buf;
   107c6:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   107ca:	3008      	adds	r0, #8
   107cc:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   107ce:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
   107d2:	f000 f893 	bl	108fc <usb_malloc>
				if (p) {
   107d6:	b308      	cbz	r0, 1081c <usb_isr+0x720>
					table[index(i, RX, ODD)].addr = p->buf;
   107d8:	f045 0301 	orr.w	r3, r5, #1
   107dc:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
   107e0:	3008      	adds	r0, #8
   107e2:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   107e4:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
   107e8:	e7c3      	b.n	10772 <usb_isr+0x676>
			if (list->addr == NULL) break;
   107ea:	4a21      	ldr	r2, [pc, #132]	; (10870 <usb_isr+0x774>)
   107ec:	6853      	ldr	r3, [r2, #4]
   107ee:	2b00      	cmp	r3, #0
   107f0:	f43f ae47 	beq.w	10482 <usb_isr+0x386>
   107f4:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   107f6:	b2bf      	uxth	r7, r7
   107f8:	e004      	b.n	10804 <usb_isr+0x708>
			if (list->addr == NULL) break;
   107fa:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
   107fc:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
   107fe:	2b00      	cmp	r3, #0
   10800:	f43f ae3f 	beq.w	10482 <usb_isr+0x386>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   10804:	8811      	ldrh	r1, [r2, #0]
   10806:	4281      	cmp	r1, r0
   10808:	d1f7      	bne.n	107fa <usb_isr+0x6fe>
   1080a:	8851      	ldrh	r1, [r2, #2]
   1080c:	42b9      	cmp	r1, r7
   1080e:	d1f4      	bne.n	107fa <usb_isr+0x6fe>
				if ((setup.wValue >> 8) == 3) {
   10810:	0a00      	lsrs	r0, r0, #8
   10812:	2803      	cmp	r0, #3
					datalen = *(list->addr);
   10814:	bf0c      	ite	eq
   10816:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
   10818:	8912      	ldrhne	r2, [r2, #8]
   1081a:	e5a7      	b.n	1036c <usb_isr+0x270>
					usb_rx_memory_needed++;
   1081c:	7833      	ldrb	r3, [r6, #0]
   1081e:	3301      	adds	r3, #1
   10820:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
   10822:	f045 0301 	orr.w	r3, r5, #1
   10826:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
   1082a:	e7a2      	b.n	10772 <usb_isr+0x676>
					usb_rx_memory_needed++;
   1082c:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
   1082e:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
   10832:	3301      	adds	r3, #1
   10834:	7033      	strb	r3, [r6, #0]
   10836:	e7cc      	b.n	107d2 <usb_isr+0x6d6>
		data = reply_buffer;
   10838:	4b06      	ldr	r3, [pc, #24]	; (10854 <usb_isr+0x758>)
		datalen = 2;
   1083a:	2202      	movs	r2, #2
   1083c:	e596      	b.n	1036c <usb_isr+0x270>
	__asm__ volatile("bkpt");
   1083e:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
   10840:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10842:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
   10844:	f082 0601 	eor.w	r6, r2, #1
   10848:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1084a:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
   1084e:	e5bc      	b.n	103ca <usb_isr+0x2ce>
   10850:	1fff9f79 	.word	0x1fff9f79
   10854:	1fff9f14 	.word	0x1fff9f14
   10858:	1fff9f30 	.word	0x1fff9f30
   1085c:	1fff9f86 	.word	0x1fff9f86
   10860:	00015fe4 	.word	0x00015fe4
   10864:	00400088 	.word	0x00400088
   10868:	400720c0 	.word	0x400720c0
   1086c:	1fff9f0c 	.word	0x1fff9f0c
   10870:	00015f84 	.word	0x00015f84

00010874 <usb_init>:



void usb_init(void)
{
   10874:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
   10876:	f000 fc6d 	bl	11154 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
   1087a:	2300      	movs	r3, #0
   1087c:	4a1a      	ldr	r2, [pc, #104]	; (108e8 <usb_init+0x74>)
		table[i].desc = 0;
   1087e:	4619      	mov	r1, r3
   10880:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
   10884:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
   10888:	3301      	adds	r3, #1
   1088a:	2b18      	cmp	r3, #24
		table[i].addr = 0;
   1088c:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
   1088e:	d1f7      	bne.n	10880 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   10890:	4c16      	ldr	r4, [pc, #88]	; (108ec <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   10892:	4b17      	ldr	r3, [pc, #92]	; (108f0 <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   10894:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   10896:	4d17      	ldr	r5, [pc, #92]	; (108f4 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   10898:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
   1089c:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   1089e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   108a2:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
   108a6:	4c14      	ldr	r4, [pc, #80]	; (108f8 <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
   108a8:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
   108aa:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   108ae:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   108b2:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   108b4:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   108b8:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   108bc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
   108c0:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
   108c4:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
   108c8:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
   108ca:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
   108ce:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
   108d0:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   108d4:	2370      	movs	r3, #112	; 0x70
   108d6:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   108da:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   108de:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   108e0:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   108e4:	7223      	strb	r3, [r4, #8]
}
   108e6:	bd70      	pop	{r4, r5, r6, pc}
   108e8:	1fff8000 	.word	0x1fff8000
   108ec:	40048000 	.word	0x40048000
   108f0:	40072000 	.word	0x40072000
   108f4:	e000e400 	.word	0xe000e400
   108f8:	40072100 	.word	0x40072100

000108fc <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
   108fc:	b672      	cpsid	i
	avail = usb_buffer_available;
   108fe:	490d      	ldr	r1, [pc, #52]	; (10934 <usb_malloc+0x38>)
   10900:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
   10902:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
   10906:	281d      	cmp	r0, #29
   10908:	dc10      	bgt.n	1092c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
   1090a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1090e:	40c2      	lsrs	r2, r0
   10910:	ea23 0302 	bic.w	r3, r3, r2
   10914:	600b      	str	r3, [r1, #0]
	__enable_irq();
   10916:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
   10918:	4a07      	ldr	r2, [pc, #28]	; (10938 <usb_malloc+0x3c>)
   1091a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1091e:	00c1      	lsls	r1, r0, #3
   10920:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
   10924:	2300      	movs	r3, #0
   10926:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
   10928:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
   1092a:	4770      	bx	lr
		__enable_irq();
   1092c:	b662      	cpsie	i
		return NULL;
   1092e:	2000      	movs	r0, #0
   10930:	4770      	bx	lr
   10932:	bf00      	nop
   10934:	1fff92bc 	.word	0x1fff92bc
   10938:	1fff83bc 	.word	0x1fff83bc

0001093c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
   1093c:	4b0e      	ldr	r3, [pc, #56]	; (10978 <usb_free+0x3c>)
   1093e:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
   10940:	f5b3 6f07 	cmp.w	r3, #2160	; 0x870
   10944:	d210      	bcs.n	10968 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
   10946:	4a0d      	ldr	r2, [pc, #52]	; (1097c <usb_free+0x40>)
   10948:	7812      	ldrb	r2, [r2, #0]
   1094a:	b972      	cbnz	r2, 1096a <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
   1094c:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
   1094e:	4a0c      	ldr	r2, [pc, #48]	; (10980 <usb_free+0x44>)
	usb_buffer_available |= mask;
   10950:	490c      	ldr	r1, [pc, #48]	; (10984 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
   10952:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
   10956:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
   10958:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
   1095c:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
   1095e:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
   10962:	4303      	orrs	r3, r0
   10964:	600b      	str	r3, [r1, #0]
	__enable_irq();
   10966:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
   10968:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
   1096a:	4a07      	ldr	r2, [pc, #28]	; (10988 <usb_free+0x4c>)
   1096c:	7812      	ldrb	r2, [r2, #0]
   1096e:	2a00      	cmp	r2, #0
   10970:	d0ec      	beq.n	1094c <usb_free+0x10>
		usb_rx_memory(p);
   10972:	f7ff bb3d 	b.w	fff0 <usb_rx_memory>
   10976:	bf00      	nop
   10978:	1fff83bc 	.word	0x1fff83bc
   1097c:	1fff9f86 	.word	0x1fff9f86
   10980:	38e38e39 	.word	0x38e38e39
   10984:	1fff92bc 	.word	0x1fff92bc
   10988:	1fff9f79 	.word	0x1fff9f79

0001098c <sysex_byte>:
		tx_noautoflush = 0;
	}
}

static void sysex_byte(uint8_t b)
{
   1098c:	b538      	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   1098e:	4b0c      	ldr	r3, [pc, #48]	; (109c0 <sysex_byte+0x34>)
   10990:	4d0c      	ldr	r5, [pc, #48]	; (109c4 <sysex_byte+0x38>)
   10992:	681b      	ldr	r3, [r3, #0]
   10994:	8829      	ldrh	r1, [r5, #0]
{
   10996:	4604      	mov	r4, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   10998:	b143      	cbz	r3, 109ac <sysex_byte+0x20>
   1099a:	f5b1 7f91 	cmp.w	r1, #290	; 0x122
   1099e:	d209      	bcs.n	109b4 <sysex_byte+0x28>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   109a0:	1c4b      	adds	r3, r1, #1
   109a2:	b29b      	uxth	r3, r3
   109a4:	4a08      	ldr	r2, [pc, #32]	; (109c8 <sysex_byte+0x3c>)
   109a6:	802b      	strh	r3, [r5, #0]
   109a8:	5454      	strb	r4, [r2, r1]
	}
}
   109aa:	bd38      	pop	{r3, r4, r5, pc}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
   109ac:	f5b1 7f91 	cmp.w	r1, #290	; 0x122
   109b0:	d3f6      	bcc.n	109a0 <sysex_byte+0x14>
}
   109b2:	bd38      	pop	{r3, r4, r5, pc}
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
   109b4:	4804      	ldr	r0, [pc, #16]	; (109c8 <sysex_byte+0x3c>)
   109b6:	2200      	movs	r2, #0
   109b8:	4798      	blx	r3
   109ba:	2100      	movs	r1, #0
   109bc:	2301      	movs	r3, #1
   109be:	e7f1      	b.n	109a4 <sysex_byte+0x18>
   109c0:	1fff9fd0 	.word	0x1fff9fd0
   109c4:	1fffa10a 	.word	0x1fffa10a
   109c8:	1fff9fe8 	.word	0x1fff9fe8

000109cc <usb_midi_write_packed>:
{
   109cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!tx_packet) {
   109d0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 10a5c <usb_midi_write_packed+0x90>
	tx_noautoflush = 1;
   109d4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 10a60 <usb_midi_write_packed+0x94>
	if (!tx_packet) {
   109d8:	f8d8 1000 	ldr.w	r1, [r8]
	tx_noautoflush = 1;
   109dc:	2301      	movs	r3, #1
{
   109de:	4607      	mov	r7, r0
	tx_noautoflush = 1;
   109e0:	f889 3000 	strb.w	r3, [r9]
	if (!tx_packet) {
   109e4:	b1b9      	cbz	r1, 10a16 <usb_midi_write_packed+0x4a>
   109e6:	4d1f      	ldr	r5, [pc, #124]	; (10a64 <usb_midi_write_packed+0x98>)
	index = tx_packet->index;
   109e8:	884b      	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
   109ea:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   109ee:	3301      	adds	r3, #1
	transmit_previous_timeout = 0;
   109f0:	2400      	movs	r4, #0
	if (index < MIDI_TX_SIZE/4) {
   109f2:	2b0f      	cmp	r3, #15
	transmit_previous_timeout = 0;
   109f4:	702c      	strb	r4, [r5, #0]
	((uint32_t *)(tx_packet->buf))[index++] = n;
   109f6:	6097      	str	r7, [r2, #8]
	if (index < MIDI_TX_SIZE/4) {
   109f8:	d805      	bhi.n	10a06 <usb_midi_write_packed+0x3a>
		tx_packet->index = index;
   109fa:	804b      	strh	r3, [r1, #2]
	tx_noautoflush = 0;
   109fc:	2300      	movs	r3, #0
   109fe:	f889 3000 	strb.w	r3, [r9]
}
   10a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		tx_packet->len = MIDI_TX_SIZE;
   10a06:	2340      	movs	r3, #64	; 0x40
   10a08:	800b      	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
   10a0a:	2004      	movs	r0, #4
   10a0c:	f7ff fb30 	bl	10070 <usb_tx>
		tx_packet = NULL;
   10a10:	f8c8 4000 	str.w	r4, [r8]
   10a14:	e7f2      	b.n	109fc <usb_midi_write_packed+0x30>
                	if (!usb_configuration) {
   10a16:	4e14      	ldr	r6, [pc, #80]	; (10a68 <usb_midi_write_packed+0x9c>)
   10a18:	7833      	ldrb	r3, [r6, #0]
   10a1a:	2b00      	cmp	r3, #0
   10a1c:	d0f1      	beq.n	10a02 <usb_midi_write_packed+0x36>
   10a1e:	4d11      	ldr	r5, [pc, #68]	; (10a64 <usb_midi_write_packed+0x98>)
   10a20:	f645 5421 	movw	r4, #23841	; 0x5d21
   10a24:	e008      	b.n	10a38 <usb_midi_write_packed+0x6c>
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
   10a26:	3c01      	subs	r4, #1
   10a28:	d013      	beq.n	10a52 <usb_midi_write_packed+0x86>
   10a2a:	782b      	ldrb	r3, [r5, #0]
   10a2c:	b98b      	cbnz	r3, 10a52 <usb_midi_write_packed+0x86>
                	yield();
   10a2e:	f000 faef 	bl	11010 <yield>
                	if (!usb_configuration) {
   10a32:	7833      	ldrb	r3, [r6, #0]
   10a34:	2b00      	cmp	r3, #0
   10a36:	d0e4      	beq.n	10a02 <usb_midi_write_packed+0x36>
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
   10a38:	2004      	movs	r0, #4
   10a3a:	f7ff fac3 	bl	ffc4 <usb_tx_packet_count>
   10a3e:	2805      	cmp	r0, #5
   10a40:	d8f1      	bhi.n	10a26 <usb_midi_write_packed+0x5a>
                        	tx_packet = usb_malloc();
   10a42:	f7ff ff5b 	bl	108fc <usb_malloc>
   10a46:	4601      	mov	r1, r0
   10a48:	f8c8 0000 	str.w	r0, [r8]
                        	if (tx_packet) break;
   10a4c:	2800      	cmp	r0, #0
   10a4e:	d0ea      	beq.n	10a26 <usb_midi_write_packed+0x5a>
   10a50:	e7ca      	b.n	109e8 <usb_midi_write_packed+0x1c>
                        	transmit_previous_timeout = 1;
   10a52:	2301      	movs	r3, #1
   10a54:	702b      	strb	r3, [r5, #0]
}
   10a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10a5a:	bf00      	nop
   10a5c:	1fff9f90 	.word	0x1fff9f90
   10a60:	1fff9f8d 	.word	0x1fff9f8d
   10a64:	1fff9f8c 	.word	0x1fff9f8c
   10a68:	1fff9f79 	.word	0x1fff9f79

00010a6c <usb_midi_send_sysex_add_term_bytes>:
	cable = (cable & 0x0F) << 4;
   10a6c:	0112      	lsls	r2, r2, #4
{
   10a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cable = (cable & 0x0F) << 4;
   10a70:	b2d5      	uxtb	r5, r2
	if (length == 0) {
   10a72:	b3a1      	cbz	r1, 10ade <usb_midi_send_sysex_add_term_bytes+0x72>
	} else if (length == 1) {
   10a74:	2901      	cmp	r1, #1
		usb_midi_write_packed(0x07 | cable | (0xF0 << 8) | (data[0] << 16) | (0xF7 << 24));
   10a76:	7803      	ldrb	r3, [r0, #0]
   10a78:	4604      	mov	r4, r0
	} else if (length == 1) {
   10a7a:	d041      	beq.n	10b00 <usb_midi_send_sysex_add_term_bytes+0x94>
		usb_midi_write_packed(0x04 | cable | (0xF0 << 8) | (data[0] << 16) | (data[1] << 24));
   10a7c:	7840      	ldrb	r0, [r0, #1]
   10a7e:	0600      	lsls	r0, r0, #24
   10a80:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   10a84:	f045 0604 	orr.w	r6, r5, #4
   10a88:	4330      	orrs	r0, r6
		length -= 2;
   10a8a:	1e8f      	subs	r7, r1, #2
		usb_midi_write_packed(0x04 | cable | (0xF0 << 8) | (data[0] << 16) | (data[1] << 24));
   10a8c:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000
   10a90:	f7ff ff9c 	bl	109cc <usb_midi_write_packed>
	while (length >= 3) {
   10a94:	2f02      	cmp	r7, #2
		data += 2;
   10a96:	f104 0302 	add.w	r3, r4, #2
	while (length >= 3) {
   10a9a:	d914      	bls.n	10ac6 <usb_midi_send_sysex_add_term_bytes+0x5a>
   10a9c:	3405      	adds	r4, #5
		usb_midi_write_packed(0x04 | cable | (data[0] << 8) | (data[1] << 16) | (data[2] << 24));
   10a9e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   10aa2:	f814 2c03 	ldrb.w	r2, [r4, #-3]
   10aa6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   10aaa:	041b      	lsls	r3, r3, #16
   10aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10ab0:	4333      	orrs	r3, r6
   10ab2:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
		length -= 3;
   10ab6:	3f03      	subs	r7, #3
		usb_midi_write_packed(0x04 | cable | (data[0] << 8) | (data[1] << 16) | (data[2] << 24));
   10ab8:	f7ff ff88 	bl	109cc <usb_midi_write_packed>
	while (length >= 3) {
   10abc:	2f02      	cmp	r7, #2
   10abe:	4623      	mov	r3, r4
   10ac0:	f104 0403 	add.w	r4, r4, #3
   10ac4:	d8eb      	bhi.n	10a9e <usb_midi_send_sysex_add_term_bytes+0x32>
	if (length == 2) {
   10ac6:	2f02      	cmp	r7, #2
   10ac8:	d026      	beq.n	10b18 <usb_midi_send_sysex_add_term_bytes+0xac>
	} else if (length == 1) {
   10aca:	2f01      	cmp	r7, #1
   10acc:	d00d      	beq.n	10aea <usb_midi_send_sysex_add_term_bytes+0x7e>
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
   10ace:	f445 4077 	orr.w	r0, r5, #63232	; 0xf700
   10ad2:	f040 0005 	orr.w	r0, r0, #5
}
   10ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
   10ada:	f7ff bf77 	b.w	109cc <usb_midi_write_packed>
		usb_midi_write_packed(0x06 | cable | (0xF0 << 8) | (0xF7 << 16));
   10ade:	4815      	ldr	r0, [pc, #84]	; (10b34 <usb_midi_send_sysex_add_term_bytes+0xc8>)
   10ae0:	4328      	orrs	r0, r5
}
   10ae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		usb_midi_write_packed(0x06 | cable | (0xF0 << 8) | (0xF7 << 16));
   10ae6:	f7ff bf71 	b.w	109cc <usb_midi_write_packed>
                usb_midi_write_packed(0x06 | cable | (data[0] << 8) | (0xF7 << 16));
   10aea:	781b      	ldrb	r3, [r3, #0]
   10aec:	f045 0006 	orr.w	r0, r5, #6
   10af0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10af4:	f440 0077 	orr.w	r0, r0, #16187392	; 0xf70000
}
   10af8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                usb_midi_write_packed(0x06 | cable | (data[0] << 8) | (0xF7 << 16));
   10afc:	f7ff bf66 	b.w	109cc <usb_midi_write_packed>
		usb_midi_write_packed(0x07 | cable | (0xF0 << 8) | (data[0] << 16) | (0xF7 << 24));
   10b00:	f045 0007 	orr.w	r0, r5, #7
   10b04:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   10b08:	f040 4077 	orr.w	r0, r0, #4143972352	; 0xf7000000
}
   10b0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		usb_midi_write_packed(0x07 | cable | (0xF0 << 8) | (data[0] << 16) | (0xF7 << 24));
   10b10:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000
   10b14:	f7ff bf5a 	b.w	109cc <usb_midi_write_packed>
		usb_midi_write_packed(0x07 | cable | (data[0] << 8) | (data[1] << 16) | (0xF7 << 24));
   10b18:	7858      	ldrb	r0, [r3, #1]
   10b1a:	781b      	ldrb	r3, [r3, #0]
   10b1c:	0400      	lsls	r0, r0, #16
   10b1e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10b22:	4328      	orrs	r0, r5
   10b24:	f040 4077 	orr.w	r0, r0, #4143972352	; 0xf7000000
}
   10b28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		usb_midi_write_packed(0x07 | cable | (data[0] << 8) | (data[1] << 16) | (0xF7 << 24));
   10b2c:	f040 0007 	orr.w	r0, r0, #7
   10b30:	f7ff bf4c 	b.w	109cc <usb_midi_write_packed>
   10b34:	00f7f006 	.word	0x00f7f006

00010b38 <usb_midi_flush_output>:
{
   10b38:	b570      	push	{r4, r5, r6, lr}
	if (tx_noautoflush == 0) {
   10b3a:	4c0b      	ldr	r4, [pc, #44]	; (10b68 <usb_midi_flush_output+0x30>)
   10b3c:	7825      	ldrb	r5, [r4, #0]
   10b3e:	b945      	cbnz	r5, 10b52 <usb_midi_flush_output+0x1a>
		if (tx_packet && tx_packet->index > 0) {
   10b40:	4e0a      	ldr	r6, [pc, #40]	; (10b6c <usb_midi_flush_output+0x34>)
   10b42:	6831      	ldr	r1, [r6, #0]
		tx_noautoflush = 1;
   10b44:	2301      	movs	r3, #1
   10b46:	7023      	strb	r3, [r4, #0]
		if (tx_packet && tx_packet->index > 0) {
   10b48:	b109      	cbz	r1, 10b4e <usb_midi_flush_output+0x16>
   10b4a:	884b      	ldrh	r3, [r1, #2]
   10b4c:	b913      	cbnz	r3, 10b54 <usb_midi_flush_output+0x1c>
		tx_noautoflush = 0;
   10b4e:	2300      	movs	r3, #0
   10b50:	7023      	strb	r3, [r4, #0]
}
   10b52:	bd70      	pop	{r4, r5, r6, pc}
			tx_packet->len = tx_packet->index * 4;
   10b54:	009b      	lsls	r3, r3, #2
   10b56:	800b      	strh	r3, [r1, #0]
			usb_tx(MIDI_TX_ENDPOINT, tx_packet);
   10b58:	2004      	movs	r0, #4
   10b5a:	f7ff fa89 	bl	10070 <usb_tx>
		tx_noautoflush = 0;
   10b5e:	2300      	movs	r3, #0
			tx_packet = NULL;
   10b60:	6035      	str	r5, [r6, #0]
		tx_noautoflush = 0;
   10b62:	7023      	strb	r3, [r4, #0]
   10b64:	e7f5      	b.n	10b52 <usb_midi_flush_output+0x1a>
   10b66:	bf00      	nop
   10b68:	1fff9f8d 	.word	0x1fff9f8d
   10b6c:	1fff9f90 	.word	0x1fff9f90

00010b70 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
   10b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
   10b74:	4eac      	ldr	r6, [pc, #688]	; (10e28 <usb_midi_read+0x2b8>)
   10b76:	6833      	ldr	r3, [r6, #0]
{
   10b78:	4607      	mov	r7, r0
	if (!rx_packet) {
   10b7a:	2b00      	cmp	r3, #0
   10b7c:	d063      	beq.n	10c46 <usb_midi_read+0xd6>
	n = ((uint32_t *)rx_packet->buf)[index/4];
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
   10b7e:	881c      	ldrh	r4, [r3, #0]
	index = rx_packet->index;
   10b80:	885a      	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
   10b82:	f022 0103 	bic.w	r1, r2, #3
   10b86:	4419      	add	r1, r3
	index += 4;
   10b88:	3204      	adds	r2, #4
	if (index < rx_packet->len) {
   10b8a:	4294      	cmp	r4, r2
	n = ((uint32_t *)rx_packet->buf)[index/4];
   10b8c:	688d      	ldr	r5, [r1, #8]
	if (index < rx_packet->len) {
   10b8e:	d96d      	bls.n	10c6c <usb_midi_read+0xfc>
		rx_packet->index = index;
   10b90:	805a      	strh	r2, [r3, #2]
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
   10b92:	f3c5 2303 	ubfx	r3, r5, #8, #4
	usb_midi_msg_cable = (n >> 4) & 15;
   10b96:	4aa5      	ldr	r2, [pc, #660]	; (10e2c <usb_midi_read+0x2bc>)
	type1 = n & 15;
   10b98:	f005 060f 	and.w	r6, r5, #15
	ch = (b1 & 15) + 1;
   10b9c:	1c5c      	adds	r4, r3, #1
	usb_midi_msg_cable = (n >> 4) & 15;
   10b9e:	f3c5 1303 	ubfx	r3, r5, #4, #4
   10ba2:	7013      	strb	r3, [r2, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
   10ba4:	f1a6 0308 	sub.w	r3, r6, #8
   10ba8:	2b06      	cmp	r3, #6
	b1 = (n >> 8) & 0xFF;
   10baa:	ea4f 2815 	mov.w	r8, r5, lsr #8
	if (type1 >= 0x08 && type1 <= 0x0E) {
   10bae:	d914      	bls.n	10bda <usb_midi_read+0x6a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   10bb0:	1eb3      	subs	r3, r6, #2
   10bb2:	2b01      	cmp	r3, #1
	b1 = (n >> 8) & 0xFF;
   10bb4:	fa5f f088 	uxtb.w	r0, r8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   10bb8:	d960      	bls.n	10c7c <usb_midi_read+0x10c>
   10bba:	2e05      	cmp	r6, #5
   10bbc:	f000 80b6 	beq.w	10d2c <usb_midi_read+0x1bc>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
   10bc0:	2e04      	cmp	r6, #4
   10bc2:	f000 819a 	beq.w	10efa <usb_midi_read+0x38a>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
   10bc6:	1f73      	subs	r3, r6, #5
   10bc8:	2b02      	cmp	r3, #2
   10bca:	f240 81a1 	bls.w	10f10 <usb_midi_read+0x3a0>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
   10bce:	2e0f      	cmp	r6, #15
   10bd0:	f000 80e9 	beq.w	10da6 <usb_midi_read+0x236>
		switch (b1) {
   10bd4:	2000      	movs	r0, #0
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
}
   10bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (channel && channel != ch) {
   10bda:	b10f      	cbz	r7, 10be0 <usb_midi_read+0x70>
   10bdc:	42bc      	cmp	r4, r7
   10bde:	d1f9      	bne.n	10bd4 <usb_midi_read+0x64>
		if (type1 == 0x08 && type2 == 0x08) {
   10be0:	2e08      	cmp	r6, #8
	type2 = (n >> 12) & 15;
   10be2:	f3c5 3303 	ubfx	r3, r5, #12, #4
		if (type1 == 0x08 && type2 == 0x08) {
   10be6:	d06d      	beq.n	10cc4 <usb_midi_read+0x154>
		if (type1 == 0x09 && type2 == 0x09) {
   10be8:	2e09      	cmp	r6, #9
   10bea:	d07d      	beq.n	10ce8 <usb_midi_read+0x178>
		if (type1 == 0x0A && type2 == 0x0A) {
   10bec:	2e0a      	cmp	r6, #10
   10bee:	f000 808d 	beq.w	10d0c <usb_midi_read+0x19c>
		if (type1 == 0x0B && type2 == 0x0B) {
   10bf2:	2e0b      	cmp	r6, #11
   10bf4:	f000 8092 	beq.w	10d1c <usb_midi_read+0x1ac>
		if (type1 == 0x0C && type2 == 0x0C) {
   10bf8:	2e0c      	cmp	r6, #12
   10bfa:	f000 80b3 	beq.w	10d64 <usb_midi_read+0x1f4>
		if (type1 == 0x0D && type2 == 0x0D) {
   10bfe:	2e0d      	cmp	r6, #13
   10c00:	f000 80c3 	beq.w	10d8a <usb_midi_read+0x21a>
		if (type1 == 0x0E && type2 == 0x0E) {
   10c04:	2b0e      	cmp	r3, #14
   10c06:	d1e5      	bne.n	10bd4 <usb_midi_read+0x64>
			if (usb_midi_handlePitchChange) {
   10c08:	4b89      	ldr	r3, [pc, #548]	; (10e30 <usb_midi_read+0x2c0>)
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   10c0a:	4a8a      	ldr	r2, [pc, #552]	; (10e34 <usb_midi_read+0x2c4>)
			if (usb_midi_handlePitchChange) {
   10c0c:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   10c0e:	21e0      	movs	r1, #224	; 0xe0
   10c10:	7011      	strb	r1, [r2, #0]
			if (usb_midi_handlePitchChange) {
   10c12:	2b00      	cmp	r3, #0
   10c14:	f000 819b 	beq.w	10f4e <usb_midi_read+0x3de>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   10c18:	0c69      	lsrs	r1, r5, #17
   10c1a:	f3c5 4206 	ubfx	r2, r5, #16, #7
   10c1e:	f401 517e 	and.w	r1, r1, #16256	; 0x3f80
   10c22:	4311      	orrs	r1, r2
				(*usb_midi_handlePitchChange)(ch, value);
   10c24:	b2e4      	uxtb	r4, r4
   10c26:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
   10c2a:	4620      	mov	r0, r4
   10c2c:	4798      	blx	r3
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   10c2e:	0c2e      	lsrs	r6, r5, #16
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10c30:	b2f6      	uxtb	r6, r6
   10c32:	0e2d      	lsrs	r5, r5, #24
		usb_midi_msg_channel = ch;
   10c34:	4b80      	ldr	r3, [pc, #512]	; (10e38 <usb_midi_read+0x2c8>)
		usb_midi_msg_data1 = (n >> 16);
   10c36:	4a81      	ldr	r2, [pc, #516]	; (10e3c <usb_midi_read+0x2cc>)
		usb_midi_msg_channel = ch;
   10c38:	701c      	strb	r4, [r3, #0]
		usb_midi_msg_data2 = (n >> 24);
   10c3a:	4b81      	ldr	r3, [pc, #516]	; (10e40 <usb_midi_read+0x2d0>)
		usb_midi_msg_data1 = (n >> 16);
   10c3c:	7016      	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
   10c3e:	701d      	strb	r5, [r3, #0]
		return 1;
   10c40:	2001      	movs	r0, #1
}
   10c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!usb_configuration) return 0;
   10c46:	4b7f      	ldr	r3, [pc, #508]	; (10e44 <usb_midi_read+0x2d4>)
   10c48:	781b      	ldrb	r3, [r3, #0]
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	d0c2      	beq.n	10bd4 <usb_midi_read+0x64>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
   10c4e:	2005      	movs	r0, #5
   10c50:	f7ff f996 	bl	ff80 <usb_rx>
   10c54:	4603      	mov	r3, r0
   10c56:	6030      	str	r0, [r6, #0]
		if (!rx_packet) return 0;
   10c58:	2800      	cmp	r0, #0
   10c5a:	d0bb      	beq.n	10bd4 <usb_midi_read+0x64>
		if (rx_packet->len == 0) {
   10c5c:	8804      	ldrh	r4, [r0, #0]
   10c5e:	2c00      	cmp	r4, #0
   10c60:	d18e      	bne.n	10b80 <usb_midi_read+0x10>
			usb_free(rx_packet);
   10c62:	f7ff fe6b 	bl	1093c <usb_free>
			rx_packet = NULL;
   10c66:	6034      	str	r4, [r6, #0]
			return 0;
   10c68:	4620      	mov	r0, r4
   10c6a:	e7b4      	b.n	10bd6 <usb_midi_read+0x66>
		usb_free(rx_packet);
   10c6c:	4618      	mov	r0, r3
   10c6e:	f7ff fe65 	bl	1093c <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
   10c72:	2005      	movs	r0, #5
   10c74:	f7ff f984 	bl	ff80 <usb_rx>
   10c78:	6030      	str	r0, [r6, #0]
   10c7a:	e78a      	b.n	10b92 <usb_midi_read+0x22>
		switch (b1) {
   10c7c:	38f1      	subs	r0, #241	; 0xf1
   10c7e:	280e      	cmp	r0, #14
   10c80:	d8a8      	bhi.n	10bd4 <usb_midi_read+0x64>
   10c82:	a301      	add	r3, pc, #4	; (adr r3, 10c88 <usb_midi_read+0x118>)
   10c84:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   10c88:	00010ecb 	.word	0x00010ecb
   10c8c:	00010dc3 	.word	0x00010dc3
   10c90:	00010deb 	.word	0x00010deb
   10c94:	00010bd5 	.word	0x00010bd5
   10c98:	00010bd5 	.word	0x00010bd5
   10c9c:	00010ef1 	.word	0x00010ef1
   10ca0:	00010bd5 	.word	0x00010bd5
   10ca4:	00010dfd 	.word	0x00010dfd
   10ca8:	00010bd5 	.word	0x00010bd5
   10cac:	00010e0f 	.word	0x00010e0f
   10cb0:	00010e81 	.word	0x00010e81
   10cb4:	00010e9b 	.word	0x00010e9b
   10cb8:	00010bd5 	.word	0x00010bd5
   10cbc:	00010eb3 	.word	0x00010eb3
   10cc0:	00010ed9 	.word	0x00010ed9
		if (type1 == 0x08 && type2 == 0x08) {
   10cc4:	2b08      	cmp	r3, #8
   10cc6:	d185      	bne.n	10bd4 <usb_midi_read+0x64>
			if (usb_midi_handleNoteOff)
   10cc8:	4b5f      	ldr	r3, [pc, #380]	; (10e48 <usb_midi_read+0x2d8>)
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
   10cca:	4a5a      	ldr	r2, [pc, #360]	; (10e34 <usb_midi_read+0x2c4>)
			if (usb_midi_handleNoteOff)
   10ccc:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
   10cce:	2180      	movs	r1, #128	; 0x80
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   10cd0:	f3c5 4607 	ubfx	r6, r5, #16, #8
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   10cd4:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   10cd6:	b2e4      	uxtb	r4, r4
   10cd8:	0e2d      	lsrs	r5, r5, #24
			if (usb_midi_handleControlChange)
   10cda:	2b00      	cmp	r3, #0
   10cdc:	d0aa      	beq.n	10c34 <usb_midi_read+0xc4>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   10cde:	462a      	mov	r2, r5
   10ce0:	4631      	mov	r1, r6
   10ce2:	4620      	mov	r0, r4
   10ce4:	4798      	blx	r3
   10ce6:	e7a5      	b.n	10c34 <usb_midi_read+0xc4>
		if (type1 == 0x09 && type2 == 0x09) {
   10ce8:	2b09      	cmp	r3, #9
   10cea:	f47f af73 	bne.w	10bd4 <usb_midi_read+0x64>
			if ((n >> 24) > 0) {
   10cee:	0e2a      	lsrs	r2, r5, #24
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   10cf0:	4b50      	ldr	r3, [pc, #320]	; (10e34 <usb_midi_read+0x2c4>)
			if ((n >> 24) > 0) {
   10cf2:	f000 811f 	beq.w	10f34 <usb_midi_read+0x3c4>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   10cf6:	2190      	movs	r1, #144	; 0x90
   10cf8:	7019      	strb	r1, [r3, #0]
				if (usb_midi_handleNoteOn)
   10cfa:	4b54      	ldr	r3, [pc, #336]	; (10e4c <usb_midi_read+0x2dc>)
   10cfc:	681b      	ldr	r3, [r3, #0]
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   10cfe:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10d02:	b2e4      	uxtb	r4, r4
   10d04:	b2d5      	uxtb	r5, r2
				if (usb_midi_handleNoteOn)
   10d06:	2b00      	cmp	r3, #0
   10d08:	d1e9      	bne.n	10cde <usb_midi_read+0x16e>
   10d0a:	e793      	b.n	10c34 <usb_midi_read+0xc4>
		if (type1 == 0x0A && type2 == 0x0A) {
   10d0c:	2b0a      	cmp	r3, #10
   10d0e:	f47f af61 	bne.w	10bd4 <usb_midi_read+0x64>
			if (usb_midi_handleVelocityChange)
   10d12:	4b4f      	ldr	r3, [pc, #316]	; (10e50 <usb_midi_read+0x2e0>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
   10d14:	4a47      	ldr	r2, [pc, #284]	; (10e34 <usb_midi_read+0x2c4>)
			if (usb_midi_handleVelocityChange)
   10d16:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
   10d18:	21a0      	movs	r1, #160	; 0xa0
   10d1a:	e7d9      	b.n	10cd0 <usb_midi_read+0x160>
		if (type1 == 0x0B && type2 == 0x0B) {
   10d1c:	2b0b      	cmp	r3, #11
   10d1e:	f47f af59 	bne.w	10bd4 <usb_midi_read+0x64>
			if (usb_midi_handleControlChange)
   10d22:	4b4c      	ldr	r3, [pc, #304]	; (10e54 <usb_midi_read+0x2e4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   10d24:	4a43      	ldr	r2, [pc, #268]	; (10e34 <usb_midi_read+0x2c4>)
			if (usb_midi_handleControlChange)
   10d26:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   10d28:	21b0      	movs	r1, #176	; 0xb0
   10d2a:	e7d1      	b.n	10cd0 <usb_midi_read+0x160>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   10d2c:	28f0      	cmp	r0, #240	; 0xf0
   10d2e:	d901      	bls.n	10d34 <usb_midi_read+0x1c4>
   10d30:	28f7      	cmp	r0, #247	; 0xf7
   10d32:	d1a3      	bne.n	10c7c <usb_midi_read+0x10c>
		if (type1 == 0x07) sysex_byte(n >> 24);
   10d34:	f7ff fe2a 	bl	1098c <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
   10d38:	4b47      	ldr	r3, [pc, #284]	; (10e58 <usb_midi_read+0x2e8>)
		usb_midi_msg_data1 = len;
   10d3a:	4a40      	ldr	r2, [pc, #256]	; (10e3c <usb_midi_read+0x2cc>)
		uint16_t len = usb_midi_msg_sysex_len;
   10d3c:	8819      	ldrh	r1, [r3, #0]
		usb_midi_msg_data2 = len >> 8;
   10d3e:	4840      	ldr	r0, [pc, #256]	; (10e40 <usb_midi_read+0x2d0>)
		if (usb_midi_handleSysExPartial) {
   10d40:	4c46      	ldr	r4, [pc, #280]	; (10e5c <usb_midi_read+0x2ec>)
		usb_midi_msg_data1 = len;
   10d42:	7011      	strb	r1, [r2, #0]
		usb_midi_msg_data2 = len >> 8;
   10d44:	0a0d      	lsrs	r5, r1, #8
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   10d46:	4a3b      	ldr	r2, [pc, #236]	; (10e34 <usb_midi_read+0x2c4>)
		usb_midi_msg_data2 = len >> 8;
   10d48:	7005      	strb	r5, [r0, #0]
		if (usb_midi_handleSysExPartial) {
   10d4a:	6824      	ldr	r4, [r4, #0]
		usb_midi_msg_sysex_len = 0;
   10d4c:	2000      	movs	r0, #0
   10d4e:	8018      	strh	r0, [r3, #0]
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   10d50:	23f0      	movs	r3, #240	; 0xf0
   10d52:	7013      	strb	r3, [r2, #0]
		if (usb_midi_handleSysExPartial) {
   10d54:	2c00      	cmp	r4, #0
   10d56:	f000 80e6 	beq.w	10f26 <usb_midi_read+0x3b6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
   10d5a:	4841      	ldr	r0, [pc, #260]	; (10e60 <usb_midi_read+0x2f0>)
   10d5c:	2201      	movs	r2, #1
   10d5e:	47a0      	blx	r4
		return 1;
   10d60:	2001      	movs	r0, #1
   10d62:	e738      	b.n	10bd6 <usb_midi_read+0x66>
		if (type1 == 0x0C && type2 == 0x0C) {
   10d64:	2b0c      	cmp	r3, #12
   10d66:	f47f af35 	bne.w	10bd4 <usb_midi_read+0x64>
			if (usb_midi_handleProgramChange)
   10d6a:	4b3e      	ldr	r3, [pc, #248]	; (10e64 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
   10d6c:	4a31      	ldr	r2, [pc, #196]	; (10e34 <usb_midi_read+0x2c4>)
			if (usb_midi_handleProgramChange)
   10d6e:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
   10d70:	21c0      	movs	r1, #192	; 0xc0
   10d72:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
   10d74:	b2e4      	uxtb	r4, r4
   10d76:	f3c5 4607 	ubfx	r6, r5, #16, #8
			if (usb_midi_handleProgramChange)
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	f43f af59 	beq.w	10c32 <usb_midi_read+0xc2>
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   10d80:	4631      	mov	r1, r6
   10d82:	4620      	mov	r0, r4
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10d84:	0e2d      	lsrs	r5, r5, #24
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   10d86:	4798      	blx	r3
   10d88:	e754      	b.n	10c34 <usb_midi_read+0xc4>
		if (type1 == 0x0D && type2 == 0x0D) {
   10d8a:	2b0d      	cmp	r3, #13
   10d8c:	f47f af22 	bne.w	10bd4 <usb_midi_read+0x64>
			if (usb_midi_handleAfterTouch)
   10d90:	4b35      	ldr	r3, [pc, #212]	; (10e68 <usb_midi_read+0x2f8>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   10d92:	4a28      	ldr	r2, [pc, #160]	; (10e34 <usb_midi_read+0x2c4>)
			if (usb_midi_handleAfterTouch)
   10d94:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   10d96:	21d0      	movs	r1, #208	; 0xd0
   10d98:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   10d9a:	b2e4      	uxtb	r4, r4
   10d9c:	f3c5 4607 	ubfx	r6, r5, #16, #8
			if (usb_midi_handleAfterTouch)
   10da0:	2b00      	cmp	r3, #0
   10da2:	d1ed      	bne.n	10d80 <usb_midi_read+0x210>
   10da4:	e745      	b.n	10c32 <usb_midi_read+0xc2>
		if (b1 >= 0xF8) {
   10da6:	28f7      	cmp	r0, #247	; 0xf7
   10da8:	f63f af68 	bhi.w	10c7c <usb_midi_read+0x10c>
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
   10dac:	28f0      	cmp	r0, #240	; 0xf0
   10dae:	d004      	beq.n	10dba <usb_midi_read+0x24a>
   10db0:	4b29      	ldr	r3, [pc, #164]	; (10e58 <usb_midi_read+0x2e8>)
   10db2:	881b      	ldrh	r3, [r3, #0]
   10db4:	2b00      	cmp	r3, #0
   10db6:	f43f af0d 	beq.w	10bd4 <usb_midi_read+0x64>
			sysex_byte(b1);
   10dba:	f7ff fde7 	bl	1098c <sysex_byte>
	return 0;
   10dbe:	2000      	movs	r0, #0
   10dc0:	e709      	b.n	10bd6 <usb_midi_read+0x66>
			if (usb_midi_handleSongPosition) {
   10dc2:	4b2a      	ldr	r3, [pc, #168]	; (10e6c <usb_midi_read+0x2fc>)
   10dc4:	681a      	ldr	r2, [r3, #0]
   10dc6:	2a00      	cmp	r2, #0
   10dc8:	f000 808f 	beq.w	10eea <usb_midi_read+0x37a>
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
   10dcc:	0c6b      	lsrs	r3, r5, #17
   10dce:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
   10dd2:	f3c5 4006 	ubfx	r0, r5, #16, #7
   10dd6:	0c2e      	lsrs	r6, r5, #16
				(*usb_midi_handleSongPosition)(
   10dd8:	4318      	orrs	r0, r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10dda:	b2f6      	uxtb	r6, r6
				(*usb_midi_handleSongPosition)(
   10ddc:	4790      	blx	r2
		usb_midi_msg_type = b1;
   10dde:	4b15      	ldr	r3, [pc, #84]	; (10e34 <usb_midi_read+0x2c4>)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10de0:	b2e4      	uxtb	r4, r4
		usb_midi_msg_type = b1;
   10de2:	f883 8000 	strb.w	r8, [r3]
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10de6:	0e2d      	lsrs	r5, r5, #24
		goto return_message;
   10de8:	e724      	b.n	10c34 <usb_midi_read+0xc4>
			if (usb_midi_handleSongSelect) {
   10dea:	4b21      	ldr	r3, [pc, #132]	; (10e70 <usb_midi_read+0x300>)
   10dec:	681b      	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
   10dee:	f3c5 4607 	ubfx	r6, r5, #16, #8
			if (usb_midi_handleSongSelect) {
   10df2:	2b00      	cmp	r3, #0
   10df4:	d0f3      	beq.n	10dde <usb_midi_read+0x26e>
				(*usb_midi_handleSongSelect)(n >> 16);
   10df6:	4630      	mov	r0, r6
   10df8:	4798      	blx	r3
   10dfa:	e7f0      	b.n	10dde <usb_midi_read+0x26e>
			if (usb_midi_handleClock) {
   10dfc:	4b1d      	ldr	r3, [pc, #116]	; (10e74 <usb_midi_read+0x304>)
   10dfe:	681b      	ldr	r3, [r3, #0]
   10e00:	2b00      	cmp	r3, #0
   10e02:	f000 80a9 	beq.w	10f58 <usb_midi_read+0x3e8>
				(*usb_midi_handleSystemReset)();
   10e06:	4798      	blx	r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10e08:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10e0c:	e7e7      	b.n	10dde <usb_midi_read+0x26e>
			if (usb_midi_handleStart) {
   10e0e:	4b1a      	ldr	r3, [pc, #104]	; (10e78 <usb_midi_read+0x308>)
   10e10:	681b      	ldr	r3, [r3, #0]
   10e12:	2b00      	cmp	r3, #0
   10e14:	d1f7      	bne.n	10e06 <usb_midi_read+0x296>
			} else if (usb_midi_handleRealTimeSystem) {
   10e16:	4b19      	ldr	r3, [pc, #100]	; (10e7c <usb_midi_read+0x30c>)
   10e18:	681b      	ldr	r3, [r3, #0]
   10e1a:	2b00      	cmp	r3, #0
   10e1c:	d065      	beq.n	10eea <usb_midi_read+0x37a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
   10e1e:	20fa      	movs	r0, #250	; 0xfa
   10e20:	4798      	blx	r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10e22:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10e26:	e7da      	b.n	10dde <usb_midi_read+0x26e>
   10e28:	1fff9f88 	.word	0x1fff9f88
   10e2c:	1fff9fe4 	.word	0x1fff9fe4
   10e30:	1fff9fb0 	.word	0x1fff9fb0
   10e34:	1fffa10c 	.word	0x1fffa10c
   10e38:	1fff9fe5 	.word	0x1fff9fe5
   10e3c:	1fff9fe6 	.word	0x1fff9fe6
   10e40:	1fff9fe7 	.word	0x1fff9fe7
   10e44:	1fff9f79 	.word	0x1fff9f79
   10e48:	1fff9fa8 	.word	0x1fff9fa8
   10e4c:	1fff9fac 	.word	0x1fff9fac
   10e50:	1fff9fe0 	.word	0x1fff9fe0
   10e54:	1fff9fa4 	.word	0x1fff9fa4
   10e58:	1fffa10a 	.word	0x1fffa10a
   10e5c:	1fff9fd0 	.word	0x1fff9fd0
   10e60:	1fff9fe8 	.word	0x1fff9fe8
   10e64:	1fff9fb4 	.word	0x1fff9fb4
   10e68:	1fff9f98 	.word	0x1fff9f98
   10e6c:	1fff9fbc 	.word	0x1fff9fbc
   10e70:	1fff9fc0 	.word	0x1fff9fc0
   10e74:	1fff9f9c 	.word	0x1fff9f9c
   10e78:	1fff9fc4 	.word	0x1fff9fc4
   10e7c:	1fff9fb8 	.word	0x1fff9fb8
			if (usb_midi_handleContinue) {
   10e80:	4b3c      	ldr	r3, [pc, #240]	; (10f74 <usb_midi_read+0x404>)
   10e82:	681b      	ldr	r3, [r3, #0]
   10e84:	2b00      	cmp	r3, #0
   10e86:	d1be      	bne.n	10e06 <usb_midi_read+0x296>
			} else if (usb_midi_handleRealTimeSystem) {
   10e88:	4b3b      	ldr	r3, [pc, #236]	; (10f78 <usb_midi_read+0x408>)
   10e8a:	681b      	ldr	r3, [r3, #0]
   10e8c:	2b00      	cmp	r3, #0
   10e8e:	d02c      	beq.n	10eea <usb_midi_read+0x37a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
   10e90:	20fb      	movs	r0, #251	; 0xfb
   10e92:	4798      	blx	r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10e94:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10e98:	e7a1      	b.n	10dde <usb_midi_read+0x26e>
			if (usb_midi_handleStop) {
   10e9a:	4b38      	ldr	r3, [pc, #224]	; (10f7c <usb_midi_read+0x40c>)
   10e9c:	681b      	ldr	r3, [r3, #0]
   10e9e:	2b00      	cmp	r3, #0
   10ea0:	d1b1      	bne.n	10e06 <usb_midi_read+0x296>
			} else if (usb_midi_handleRealTimeSystem) {
   10ea2:	4b35      	ldr	r3, [pc, #212]	; (10f78 <usb_midi_read+0x408>)
   10ea4:	681b      	ldr	r3, [r3, #0]
   10ea6:	b303      	cbz	r3, 10eea <usb_midi_read+0x37a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
   10ea8:	20fc      	movs	r0, #252	; 0xfc
   10eaa:	4798      	blx	r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10eac:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10eb0:	e795      	b.n	10dde <usb_midi_read+0x26e>
			if (usb_midi_handleActiveSensing) {
   10eb2:	4b33      	ldr	r3, [pc, #204]	; (10f80 <usb_midi_read+0x410>)
   10eb4:	681b      	ldr	r3, [r3, #0]
   10eb6:	2b00      	cmp	r3, #0
   10eb8:	d1a5      	bne.n	10e06 <usb_midi_read+0x296>
			} else if (usb_midi_handleRealTimeSystem) {
   10eba:	4b2f      	ldr	r3, [pc, #188]	; (10f78 <usb_midi_read+0x408>)
   10ebc:	681b      	ldr	r3, [r3, #0]
   10ebe:	b1a3      	cbz	r3, 10eea <usb_midi_read+0x37a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
   10ec0:	20fe      	movs	r0, #254	; 0xfe
   10ec2:	4798      	blx	r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10ec4:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10ec8:	e789      	b.n	10dde <usb_midi_read+0x26e>
			if (usb_midi_handleTimeCodeQuarterFrame) {
   10eca:	4b2e      	ldr	r3, [pc, #184]	; (10f84 <usb_midi_read+0x414>)
   10ecc:	681b      	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
   10ece:	f3c5 4607 	ubfx	r6, r5, #16, #8
			if (usb_midi_handleTimeCodeQuarterFrame) {
   10ed2:	2b00      	cmp	r3, #0
   10ed4:	d18f      	bne.n	10df6 <usb_midi_read+0x286>
   10ed6:	e782      	b.n	10dde <usb_midi_read+0x26e>
			if (usb_midi_handleSystemReset) {
   10ed8:	4b2b      	ldr	r3, [pc, #172]	; (10f88 <usb_midi_read+0x418>)
   10eda:	681b      	ldr	r3, [r3, #0]
   10edc:	2b00      	cmp	r3, #0
   10ede:	d192      	bne.n	10e06 <usb_midi_read+0x296>
			} else if (usb_midi_handleRealTimeSystem) {
   10ee0:	4b25      	ldr	r3, [pc, #148]	; (10f78 <usb_midi_read+0x408>)
   10ee2:	681b      	ldr	r3, [r3, #0]
   10ee4:	b10b      	cbz	r3, 10eea <usb_midi_read+0x37a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
   10ee6:	20ff      	movs	r0, #255	; 0xff
   10ee8:	4798      	blx	r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10eea:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10eee:	e776      	b.n	10dde <usb_midi_read+0x26e>
			if (usb_midi_handleTuneRequest) {
   10ef0:	4b26      	ldr	r3, [pc, #152]	; (10f8c <usb_midi_read+0x41c>)
   10ef2:	681b      	ldr	r3, [r3, #0]
   10ef4:	2b00      	cmp	r3, #0
   10ef6:	d186      	bne.n	10e06 <usb_midi_read+0x296>
   10ef8:	e7f7      	b.n	10eea <usb_midi_read+0x37a>
		sysex_byte(n >> 8);
   10efa:	f7ff fd47 	bl	1098c <sysex_byte>
		sysex_byte(n >> 16);
   10efe:	f3c5 4007 	ubfx	r0, r5, #16, #8
   10f02:	f7ff fd43 	bl	1098c <sysex_byte>
		sysex_byte(n >> 24);
   10f06:	0e28      	lsrs	r0, r5, #24
   10f08:	f7ff fd40 	bl	1098c <sysex_byte>
		return 0;
   10f0c:	2000      	movs	r0, #0
   10f0e:	e662      	b.n	10bd6 <usb_midi_read+0x66>
		sysex_byte(b1);
   10f10:	f7ff fd3c 	bl	1098c <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
   10f14:	f3c5 4007 	ubfx	r0, r5, #16, #8
   10f18:	f7ff fd38 	bl	1098c <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
   10f1c:	2e07      	cmp	r6, #7
   10f1e:	f47f af0b 	bne.w	10d38 <usb_midi_read+0x1c8>
   10f22:	0e28      	lsrs	r0, r5, #24
   10f24:	e706      	b.n	10d34 <usb_midi_read+0x1c4>
		} else if (usb_midi_handleSysExComplete) {
   10f26:	4b1a      	ldr	r3, [pc, #104]	; (10f90 <usb_midi_read+0x420>)
   10f28:	681b      	ldr	r3, [r3, #0]
   10f2a:	b1f3      	cbz	r3, 10f6a <usb_midi_read+0x3fa>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
   10f2c:	4819      	ldr	r0, [pc, #100]	; (10f94 <usb_midi_read+0x424>)
   10f2e:	4798      	blx	r3
		return 1;
   10f30:	2001      	movs	r0, #1
   10f32:	e650      	b.n	10bd6 <usb_midi_read+0x66>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   10f34:	2180      	movs	r1, #128	; 0x80
   10f36:	7019      	strb	r1, [r3, #0]
				if (usb_midi_handleNoteOff)
   10f38:	4b17      	ldr	r3, [pc, #92]	; (10f98 <usb_midi_read+0x428>)
   10f3a:	681b      	ldr	r3, [r3, #0]
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10f3c:	b2e4      	uxtb	r4, r4
   10f3e:	f3c5 4607 	ubfx	r6, r5, #16, #8
				if (usb_midi_handleNoteOff)
   10f42:	b1a3      	cbz	r3, 10f6e <usb_midi_read+0x3fe>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10f44:	4631      	mov	r1, r6
   10f46:	4620      	mov	r0, r4
   10f48:	4615      	mov	r5, r2
   10f4a:	4798      	blx	r3
   10f4c:	e672      	b.n	10c34 <usb_midi_read+0xc4>
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10f4e:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10f52:	b2e4      	uxtb	r4, r4
   10f54:	0e2d      	lsrs	r5, r5, #24
   10f56:	e66d      	b.n	10c34 <usb_midi_read+0xc4>
			} else if (usb_midi_handleRealTimeSystem) {
   10f58:	4b07      	ldr	r3, [pc, #28]	; (10f78 <usb_midi_read+0x408>)
   10f5a:	681b      	ldr	r3, [r3, #0]
   10f5c:	2b00      	cmp	r3, #0
   10f5e:	d0c4      	beq.n	10eea <usb_midi_read+0x37a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
   10f60:	20f8      	movs	r0, #248	; 0xf8
   10f62:	4798      	blx	r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10f64:	f3c5 4607 	ubfx	r6, r5, #16, #8
   10f68:	e739      	b.n	10dde <usb_midi_read+0x26e>
		return 1;
   10f6a:	2001      	movs	r0, #1
   10f6c:	e633      	b.n	10bd6 <usb_midi_read+0x66>
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   10f6e:	461d      	mov	r5, r3
   10f70:	e660      	b.n	10c34 <usb_midi_read+0xc4>
   10f72:	bf00      	nop
   10f74:	1fff9fa0 	.word	0x1fff9fa0
   10f78:	1fff9fb8 	.word	0x1fff9fb8
   10f7c:	1fff9fc8 	.word	0x1fff9fc8
   10f80:	1fff9f94 	.word	0x1fff9f94
   10f84:	1fff9fd8 	.word	0x1fff9fd8
   10f88:	1fff9fd4 	.word	0x1fff9fd4
   10f8c:	1fff9fdc 	.word	0x1fff9fdc
   10f90:	1fff9fcc 	.word	0x1fff9fcc
   10f94:	1fff9fe8 	.word	0x1fff9fe8
   10f98:	1fff9fa8 	.word	0x1fff9fa8

00010f9c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
   10f9c:	4b08      	ldr	r3, [pc, #32]	; (10fc0 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
   10f9e:	4a09      	ldr	r2, [pc, #36]	; (10fc4 <usb_serial_available+0x28>)
   10fa0:	681b      	ldr	r3, [r3, #0]
{
   10fa2:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
   10fa4:	8854      	ldrh	r4, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
   10fa6:	b11b      	cbz	r3, 10fb0 <usb_serial_available+0x14>
   10fa8:	881a      	ldrh	r2, [r3, #0]
   10faa:	885b      	ldrh	r3, [r3, #2]
   10fac:	1ad3      	subs	r3, r2, r3
   10fae:	441c      	add	r4, r3
	if (count == 0) yield();
   10fb0:	b10c      	cbz	r4, 10fb6 <usb_serial_available+0x1a>
	return count;
}
   10fb2:	4620      	mov	r0, r4
   10fb4:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
   10fb6:	f000 f82b 	bl	11010 <yield>
}
   10fba:	4620      	mov	r0, r4
   10fbc:	bd10      	pop	{r4, pc}
   10fbe:	bf00      	nop
   10fc0:	1fffa110 	.word	0x1fffa110
   10fc4:	1fff9f7c 	.word	0x1fff9f7c

00010fc8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
   10fc8:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
   10fca:	4b0e      	ldr	r3, [pc, #56]	; (11004 <usb_serial_flush_callback+0x3c>)
   10fcc:	781b      	ldrb	r3, [r3, #0]
   10fce:	b953      	cbnz	r3, 10fe6 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
   10fd0:	4c0d      	ldr	r4, [pc, #52]	; (11008 <usb_serial_flush_callback+0x40>)
   10fd2:	6821      	ldr	r1, [r4, #0]
   10fd4:	b141      	cbz	r1, 10fe8 <usb_serial_flush_callback+0x20>
   10fd6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
   10fda:	884b      	ldrh	r3, [r1, #2]
   10fdc:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
   10fde:	2003      	movs	r0, #3
   10fe0:	f7ff f846 	bl	10070 <usb_tx>
		tx_packet = NULL;
   10fe4:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
   10fe6:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
   10fe8:	f7ff fc88 	bl	108fc <usb_malloc>
		if (tx) {
   10fec:	4601      	mov	r1, r0
   10fee:	b120      	cbz	r0, 10ffa <usb_serial_flush_callback+0x32>
}
   10ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
   10ff4:	2003      	movs	r0, #3
   10ff6:	f7ff b83b 	b.w	10070 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
   10ffa:	4b04      	ldr	r3, [pc, #16]	; (1100c <usb_serial_flush_callback+0x44>)
   10ffc:	2201      	movs	r2, #1
   10ffe:	701a      	strb	r2, [r3, #0]
}
   11000:	bd38      	pop	{r3, r4, r5, pc}
   11002:	bf00      	nop
   11004:	1fffa114 	.word	0x1fffa114
   11008:	1fffa118 	.word	0x1fffa118
   1100c:	1fffa12c 	.word	0x1fffa12c

00011010 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
   11010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
   11014:	4e32      	ldr	r6, [pc, #200]	; (110e0 <yield+0xd0>)
   11016:	7833      	ldrb	r3, [r6, #0]
   11018:	b163      	cbz	r3, 11034 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
   1101a:	4f32      	ldr	r7, [pc, #200]	; (110e4 <yield+0xd4>)
   1101c:	783a      	ldrb	r2, [r7, #0]
   1101e:	b94a      	cbnz	r2, 11034 <yield+0x24>
	running = 1;
   11020:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   11022:	07d9      	lsls	r1, r3, #31
	running = 1;
   11024:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   11026:	d443      	bmi.n	110b0 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   11028:	079a      	lsls	r2, r3, #30
   1102a:	d426      	bmi.n	1107a <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
   1102c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   1102e:	075b      	lsls	r3, r3, #29
	running = 0;
   11030:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   11032:	d401      	bmi.n	11038 <yield+0x28>
	
};
   11034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   11038:	4b2b      	ldr	r3, [pc, #172]	; (110e8 <yield+0xd8>)
   1103a:	681a      	ldr	r2, [r3, #0]
   1103c:	2a00      	cmp	r2, #0
   1103e:	d0f9      	beq.n	11034 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   11040:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   11044:	2a00      	cmp	r2, #0
   11046:	d1f5      	bne.n	11034 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   11048:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   1104c:	b672      	cpsid	i
		EventResponder *first = firstYield;
   1104e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   11050:	2800      	cmp	r0, #0
   11052:	d03a      	beq.n	110ca <yield+0xba>
		if (runningFromYield) {
   11054:	4c25      	ldr	r4, [pc, #148]	; (110ec <yield+0xdc>)
   11056:	7821      	ldrb	r1, [r4, #0]
   11058:	2900      	cmp	r1, #0
   1105a:	d136      	bne.n	110ca <yield+0xba>
		firstYield = first->_next;
   1105c:	6942      	ldr	r2, [r0, #20]
   1105e:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
   11060:	2301      	movs	r3, #1
   11062:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
   11064:	2a00      	cmp	r2, #0
   11066:	d037      	beq.n	110d8 <yield+0xc8>
			firstYield->_prev = nullptr;
   11068:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   1106a:	b905      	cbnz	r5, 1106e <yield+0x5e>
   1106c:	b662      	cpsie	i
		first->_triggered = false;
   1106e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   11070:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   11072:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   11074:	4798      	blx	r3
		runningFromYield = false;
   11076:	7025      	strb	r5, [r4, #0]
   11078:	e7dc      	b.n	11034 <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1107a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 110f0 <yield+0xe0>
   1107e:	f898 2000 	ldrb.w	r2, [r8]
   11082:	2a00      	cmp	r2, #0
   11084:	d0d2      	beq.n	1102c <yield+0x1c>
   11086:	2500      	movs	r5, #0
   11088:	f8df 9068 	ldr.w	r9, [pc, #104]	; 110f4 <yield+0xe4>
   1108c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   1108e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
   11092:	6823      	ldr	r3, [r4, #0]
   11094:	4620      	mov	r0, r4
   11096:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   11098:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
   1109a:	4798      	blx	r3
   1109c:	b108      	cbz	r0, 110a2 <yield+0x92>
   1109e:	6923      	ldr	r3, [r4, #16]
   110a0:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   110a2:	f898 2000 	ldrb.w	r2, [r8]
   110a6:	b2eb      	uxtb	r3, r5
   110a8:	429a      	cmp	r2, r3
   110aa:	d8f0      	bhi.n	1108e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   110ac:	7833      	ldrb	r3, [r6, #0]
   110ae:	e7bd      	b.n	1102c <yield+0x1c>
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
   110b0:	f7ff ff74 	bl	10f9c <usb_serial_available>
		if (Serial.available()) serialEvent();
   110b4:	b968      	cbnz	r0, 110d2 <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
   110b6:	4b10      	ldr	r3, [pc, #64]	; (110f8 <yield+0xe8>)
   110b8:	781b      	ldrb	r3, [r3, #0]
   110ba:	b90b      	cbnz	r3, 110c0 <yield+0xb0>
   110bc:	7833      	ldrb	r3, [r6, #0]
   110be:	e7b3      	b.n	11028 <yield+0x18>
   110c0:	7833      	ldrb	r3, [r6, #0]
   110c2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   110c6:	7033      	strb	r3, [r6, #0]
   110c8:	e7ae      	b.n	11028 <yield+0x18>
		if (doit) __enable_irq();
   110ca:	2d00      	cmp	r5, #0
   110cc:	d1b2      	bne.n	11034 <yield+0x24>
   110ce:	b662      	cpsie	i
   110d0:	e7b0      	b.n	11034 <yield+0x24>
		if (Serial.available()) serialEvent();
   110d2:	f000 f83d 	bl	11150 <serialEvent()>
   110d6:	e7ee      	b.n	110b6 <yield+0xa6>
			lastYield = nullptr;
   110d8:	4b08      	ldr	r3, [pc, #32]	; (110fc <yield+0xec>)
   110da:	601a      	str	r2, [r3, #0]
   110dc:	e7c5      	b.n	1106a <yield+0x5a>
   110de:	bf00      	nop
   110e0:	1fff92c0 	.word	0x1fff92c0
   110e4:	1fffa12d 	.word	0x1fffa12d
   110e8:	1fff9cf0 	.word	0x1fff9cf0
   110ec:	1fff9cfc 	.word	0x1fff9cfc
   110f0:	1fffa13c 	.word	0x1fffa13c
   110f4:	1fffa130 	.word	0x1fffa130
   110f8:	00015d1c 	.word	0x00015d1c
   110fc:	1fff9d00 	.word	0x1fff9d00

00011100 <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
   11100:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   11102:	4e10      	ldr	r6, [pc, #64]	; (11144 <HardwareSerial::addToSerialEventsList()+0x44>)
   11104:	4d10      	ldr	r5, [pc, #64]	; (11148 <HardwareSerial::addToSerialEventsList()+0x48>)
   11106:	7834      	ldrb	r4, [r6, #0]
   11108:	b1d4      	cbz	r4, 11140 <HardwareSerial::addToSerialEventsList()+0x40>
   1110a:	1e62      	subs	r2, r4, #1
   1110c:	b2d2      	uxtb	r2, r2
   1110e:	1d29      	adds	r1, r5, #4
   11110:	462b      	mov	r3, r5
   11112:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   11116:	e001      	b.n	1111c <HardwareSerial::addToSerialEventsList()+0x1c>
   11118:	428b      	cmp	r3, r1
   1111a:	d005      	beq.n	11128 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
   1111c:	f853 2b04 	ldr.w	r2, [r3], #4
   11120:	4282      	cmp	r2, r0
   11122:	d1f9      	bne.n	11118 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
   11124:	bc70      	pop	{r4, r5, r6}
   11126:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
   11128:	1c63      	adds	r3, r4, #1
   1112a:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
   1112c:	4a07      	ldr	r2, [pc, #28]	; (1114c <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
   1112e:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
   11130:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
   11132:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
   11136:	f043 0302 	orr.w	r3, r3, #2
   1113a:	7013      	strb	r3, [r2, #0]
}
   1113c:	bc70      	pop	{r4, r5, r6}
   1113e:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   11140:	2301      	movs	r3, #1
   11142:	e7f3      	b.n	1112c <HardwareSerial::addToSerialEventsList()+0x2c>
   11144:	1fffa13c 	.word	0x1fffa13c
   11148:	1fffa130 	.word	0x1fffa130
   1114c:	1fff92c0 	.word	0x1fff92c0

00011150 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
   11150:	4770      	bx	lr
   11152:	bf00      	nop

00011154 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   11154:	b510      	push	{r4, lr}
   11156:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
   11158:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   1115a:	4a17      	ldr	r2, [pc, #92]	; (111b8 <usb_init_serialnumber+0x64>)
   1115c:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
   1115e:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
   11160:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   11162:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   11164:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
   11166:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
   11168:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   1116a:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   1116c:	7813      	ldrb	r3, [r2, #0]
   1116e:	061b      	lsls	r3, r3, #24
   11170:	d5fc      	bpl.n	1116c <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
   11172:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
   11174:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   11176:	4b11      	ldr	r3, [pc, #68]	; (111bc <usb_init_serialnumber+0x68>)
   11178:	4c11      	ldr	r4, [pc, #68]	; (111c0 <usb_init_serialnumber+0x6c>)
   1117a:	4298      	cmp	r0, r3
   1117c:	bf38      	it	cc
   1117e:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
   11182:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
   11184:	bf38      	it	cc
   11186:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
   11188:	220a      	movs	r2, #10
   1118a:	f7fd fabd 	bl	e708 <ultoa>
	for (i=0; i<10; i++) {
   1118e:	a901      	add	r1, sp, #4
   11190:	4620      	mov	r0, r4
   11192:	2300      	movs	r3, #0
		char c = buf[i];
   11194:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
   11198:	3301      	adds	r3, #1
		if (!c) break;
   1119a:	b13a      	cbz	r2, 111ac <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
   1119c:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
   1119e:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
   111a2:	d1f7      	bne.n	11194 <usb_init_serialnumber+0x40>
   111a4:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   111a6:	7023      	strb	r3, [r4, #0]
}
   111a8:	b004      	add	sp, #16
   111aa:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   111ac:	005b      	lsls	r3, r3, #1
   111ae:	b2db      	uxtb	r3, r3
   111b0:	7023      	strb	r3, [r4, #0]
}
   111b2:	b004      	add	sp, #16
   111b4:	bd10      	pop	{r4, pc}
   111b6:	bf00      	nop
   111b8:	40020000 	.word	0x40020000
   111bc:	00989680 	.word	0x00989680
   111c0:	1fff939c 	.word	0x1fff939c

000111c4 <expf>:
   111c4:	b538      	push	{r3, r4, r5, lr}
   111c6:	4604      	mov	r4, r0
   111c8:	f000 f82c 	bl	11224 <__ieee754_expf>
   111cc:	4605      	mov	r5, r0
   111ce:	4620      	mov	r0, r4
   111d0:	f000 f820 	bl	11214 <finitef>
   111d4:	b148      	cbz	r0, 111ea <expf+0x26>
   111d6:	490d      	ldr	r1, [pc, #52]	; (1120c <expf+0x48>)
   111d8:	4620      	mov	r0, r4
   111da:	f000 fc3b 	bl	11a54 <__aeabi_fcmpgt>
   111de:	b930      	cbnz	r0, 111ee <expf+0x2a>
   111e0:	490b      	ldr	r1, [pc, #44]	; (11210 <expf+0x4c>)
   111e2:	4620      	mov	r0, r4
   111e4:	f000 fc18 	bl	11a18 <__aeabi_fcmplt>
   111e8:	b948      	cbnz	r0, 111fe <expf+0x3a>
   111ea:	4628      	mov	r0, r5
   111ec:	bd38      	pop	{r3, r4, r5, pc}
   111ee:	f001 faa3 	bl	12738 <__errno>
   111f2:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
   111f6:	2322      	movs	r3, #34	; 0x22
   111f8:	6003      	str	r3, [r0, #0]
   111fa:	4628      	mov	r0, r5
   111fc:	bd38      	pop	{r3, r4, r5, pc}
   111fe:	f001 fa9b 	bl	12738 <__errno>
   11202:	2322      	movs	r3, #34	; 0x22
   11204:	2500      	movs	r5, #0
   11206:	6003      	str	r3, [r0, #0]
   11208:	e7ef      	b.n	111ea <expf+0x26>
   1120a:	bf00      	nop
   1120c:	42b17217 	.word	0x42b17217
   11210:	c2cff1b5 	.word	0xc2cff1b5

00011214 <finitef>:
   11214:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   11218:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1121c:	bfac      	ite	ge
   1121e:	2000      	movge	r0, #0
   11220:	2001      	movlt	r0, #1
   11222:	4770      	bx	lr

00011224 <__ieee754_expf>:
   11224:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   11228:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1122c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11230:	4604      	mov	r4, r0
   11232:	d86c      	bhi.n	1130e <__ieee754_expf+0xea>
   11234:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   11238:	f000 80c6 	beq.w	113c8 <__ieee754_expf+0x1a4>
   1123c:	497a      	ldr	r1, [pc, #488]	; (11428 <__ieee754_expf+0x204>)
   1123e:	4288      	cmp	r0, r1
   11240:	f300 80b4 	bgt.w	113ac <__ieee754_expf+0x188>
   11244:	2800      	cmp	r0, #0
   11246:	f2c0 80b6 	blt.w	113b6 <__ieee754_expf+0x192>
   1124a:	4b78      	ldr	r3, [pc, #480]	; (1142c <__ieee754_expf+0x208>)
   1124c:	429a      	cmp	r2, r3
   1124e:	d963      	bls.n	11318 <__ieee754_expf+0xf4>
   11250:	4b77      	ldr	r3, [pc, #476]	; (11430 <__ieee754_expf+0x20c>)
   11252:	429a      	cmp	r2, r3
   11254:	f200 80c5 	bhi.w	113e2 <__ieee754_expf+0x1be>
   11258:	4b76      	ldr	r3, [pc, #472]	; (11434 <__ieee754_expf+0x210>)
   1125a:	4620      	mov	r0, r4
   1125c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   11260:	f000 f932 	bl	114c8 <__aeabi_fsub>
   11264:	4b74      	ldr	r3, [pc, #464]	; (11438 <__ieee754_expf+0x214>)
   11266:	f1c5 0601 	rsb	r6, r5, #1
   1126a:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
   1126e:	4680      	mov	r8, r0
   11270:	1b76      	subs	r6, r6, r5
   11272:	4649      	mov	r1, r9
   11274:	4640      	mov	r0, r8
   11276:	f000 f927 	bl	114c8 <__aeabi_fsub>
   1127a:	4601      	mov	r1, r0
   1127c:	4605      	mov	r5, r0
   1127e:	f000 fa2d 	bl	116dc <__aeabi_fmul>
   11282:	496e      	ldr	r1, [pc, #440]	; (1143c <__ieee754_expf+0x218>)
   11284:	4604      	mov	r4, r0
   11286:	f000 fa29 	bl	116dc <__aeabi_fmul>
   1128a:	496d      	ldr	r1, [pc, #436]	; (11440 <__ieee754_expf+0x21c>)
   1128c:	f000 f91c 	bl	114c8 <__aeabi_fsub>
   11290:	4621      	mov	r1, r4
   11292:	f000 fa23 	bl	116dc <__aeabi_fmul>
   11296:	496b      	ldr	r1, [pc, #428]	; (11444 <__ieee754_expf+0x220>)
   11298:	f000 f918 	bl	114cc <__addsf3>
   1129c:	4621      	mov	r1, r4
   1129e:	f000 fa1d 	bl	116dc <__aeabi_fmul>
   112a2:	4969      	ldr	r1, [pc, #420]	; (11448 <__ieee754_expf+0x224>)
   112a4:	f000 f910 	bl	114c8 <__aeabi_fsub>
   112a8:	4621      	mov	r1, r4
   112aa:	f000 fa17 	bl	116dc <__aeabi_fmul>
   112ae:	4967      	ldr	r1, [pc, #412]	; (1144c <__ieee754_expf+0x228>)
   112b0:	f000 f90c 	bl	114cc <__addsf3>
   112b4:	4621      	mov	r1, r4
   112b6:	f000 fa11 	bl	116dc <__aeabi_fmul>
   112ba:	4601      	mov	r1, r0
   112bc:	4628      	mov	r0, r5
   112be:	f000 f903 	bl	114c8 <__aeabi_fsub>
   112c2:	462c      	mov	r4, r5
   112c4:	4607      	mov	r7, r0
   112c6:	4682      	mov	sl, r0
   112c8:	2e00      	cmp	r6, #0
   112ca:	d057      	beq.n	1137c <__ieee754_expf+0x158>
   112cc:	4639      	mov	r1, r7
   112ce:	4628      	mov	r0, r5
   112d0:	f000 fa04 	bl	116dc <__aeabi_fmul>
   112d4:	4639      	mov	r1, r7
   112d6:	4604      	mov	r4, r0
   112d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   112dc:	f000 f8f4 	bl	114c8 <__aeabi_fsub>
   112e0:	4601      	mov	r1, r0
   112e2:	4620      	mov	r0, r4
   112e4:	f000 faae 	bl	11844 <__aeabi_fdiv>
   112e8:	4601      	mov	r1, r0
   112ea:	4648      	mov	r0, r9
   112ec:	f000 f8ec 	bl	114c8 <__aeabi_fsub>
   112f0:	4641      	mov	r1, r8
   112f2:	f000 f8e9 	bl	114c8 <__aeabi_fsub>
   112f6:	4601      	mov	r1, r0
   112f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   112fc:	f000 f8e4 	bl	114c8 <__aeabi_fsub>
   11300:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
   11304:	db64      	blt.n	113d0 <__ieee754_expf+0x1ac>
   11306:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
   1130a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1130e:	4601      	mov	r1, r0
   11310:	f000 f8dc 	bl	114cc <__addsf3>
   11314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11318:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
   1131c:	d209      	bcs.n	11332 <__ieee754_expf+0x10e>
   1131e:	494c      	ldr	r1, [pc, #304]	; (11450 <__ieee754_expf+0x22c>)
   11320:	4620      	mov	r0, r4
   11322:	f000 f8d3 	bl	114cc <__addsf3>
   11326:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1132a:	f000 fb93 	bl	11a54 <__aeabi_fcmpgt>
   1132e:	2800      	cmp	r0, #0
   11330:	d174      	bne.n	1141c <__ieee754_expf+0x1f8>
   11332:	4621      	mov	r1, r4
   11334:	4620      	mov	r0, r4
   11336:	f000 f9d1 	bl	116dc <__aeabi_fmul>
   1133a:	4940      	ldr	r1, [pc, #256]	; (1143c <__ieee754_expf+0x218>)
   1133c:	4605      	mov	r5, r0
   1133e:	f000 f9cd 	bl	116dc <__aeabi_fmul>
   11342:	493f      	ldr	r1, [pc, #252]	; (11440 <__ieee754_expf+0x21c>)
   11344:	f000 f8c0 	bl	114c8 <__aeabi_fsub>
   11348:	4629      	mov	r1, r5
   1134a:	f000 f9c7 	bl	116dc <__aeabi_fmul>
   1134e:	493d      	ldr	r1, [pc, #244]	; (11444 <__ieee754_expf+0x220>)
   11350:	f000 f8bc 	bl	114cc <__addsf3>
   11354:	4629      	mov	r1, r5
   11356:	f000 f9c1 	bl	116dc <__aeabi_fmul>
   1135a:	493b      	ldr	r1, [pc, #236]	; (11448 <__ieee754_expf+0x224>)
   1135c:	f000 f8b4 	bl	114c8 <__aeabi_fsub>
   11360:	4629      	mov	r1, r5
   11362:	f000 f9bb 	bl	116dc <__aeabi_fmul>
   11366:	4939      	ldr	r1, [pc, #228]	; (1144c <__ieee754_expf+0x228>)
   11368:	f000 f8b0 	bl	114cc <__addsf3>
   1136c:	4629      	mov	r1, r5
   1136e:	f000 f9b5 	bl	116dc <__aeabi_fmul>
   11372:	4601      	mov	r1, r0
   11374:	4620      	mov	r0, r4
   11376:	f000 f8a7 	bl	114c8 <__aeabi_fsub>
   1137a:	4682      	mov	sl, r0
   1137c:	4651      	mov	r1, sl
   1137e:	4620      	mov	r0, r4
   11380:	f000 f9ac 	bl	116dc <__aeabi_fmul>
   11384:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11388:	4605      	mov	r5, r0
   1138a:	4650      	mov	r0, sl
   1138c:	f000 f89c 	bl	114c8 <__aeabi_fsub>
   11390:	4601      	mov	r1, r0
   11392:	4628      	mov	r0, r5
   11394:	f000 fa56 	bl	11844 <__aeabi_fdiv>
   11398:	4621      	mov	r1, r4
   1139a:	f000 f895 	bl	114c8 <__aeabi_fsub>
   1139e:	4601      	mov	r1, r0
   113a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   113a4:	f000 f890 	bl	114c8 <__aeabi_fsub>
   113a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   113ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113b0:	2000      	movs	r0, #0
   113b2:	f000 b87b 	b.w	114ac <__math_oflowf>
   113b6:	4b27      	ldr	r3, [pc, #156]	; (11454 <__ieee754_expf+0x230>)
   113b8:	429a      	cmp	r2, r3
   113ba:	f67f af46 	bls.w	1124a <__ieee754_expf+0x26>
   113be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113c2:	2000      	movs	r0, #0
   113c4:	f000 b86e 	b.w	114a4 <__math_uflowf>
   113c8:	2d00      	cmp	r5, #0
   113ca:	d0a3      	beq.n	11314 <__ieee754_expf+0xf0>
   113cc:	2000      	movs	r0, #0
   113ce:	e7a1      	b.n	11314 <__ieee754_expf+0xf0>
   113d0:	3664      	adds	r6, #100	; 0x64
   113d2:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   113d6:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
   113da:	f000 f97f 	bl	116dc <__aeabi_fmul>
   113de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   113e2:	491d      	ldr	r1, [pc, #116]	; (11458 <__ieee754_expf+0x234>)
   113e4:	4620      	mov	r0, r4
   113e6:	f000 f979 	bl	116dc <__aeabi_fmul>
   113ea:	4b1c      	ldr	r3, [pc, #112]	; (1145c <__ieee754_expf+0x238>)
   113ec:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   113f0:	f000 f86c 	bl	114cc <__addsf3>
   113f4:	f000 fb38 	bl	11a68 <__aeabi_f2iz>
   113f8:	4606      	mov	r6, r0
   113fa:	f000 f91b 	bl	11634 <__aeabi_i2f>
   113fe:	4918      	ldr	r1, [pc, #96]	; (11460 <__ieee754_expf+0x23c>)
   11400:	4605      	mov	r5, r0
   11402:	f000 f96b 	bl	116dc <__aeabi_fmul>
   11406:	4601      	mov	r1, r0
   11408:	4620      	mov	r0, r4
   1140a:	f000 f85d 	bl	114c8 <__aeabi_fsub>
   1140e:	4915      	ldr	r1, [pc, #84]	; (11464 <__ieee754_expf+0x240>)
   11410:	4680      	mov	r8, r0
   11412:	4628      	mov	r0, r5
   11414:	f000 f962 	bl	116dc <__aeabi_fmul>
   11418:	4681      	mov	r9, r0
   1141a:	e72a      	b.n	11272 <__ieee754_expf+0x4e>
   1141c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   11420:	4620      	mov	r0, r4
   11422:	f000 f853 	bl	114cc <__addsf3>
   11426:	e775      	b.n	11314 <__ieee754_expf+0xf0>
   11428:	42b17217 	.word	0x42b17217
   1142c:	3eb17218 	.word	0x3eb17218
   11430:	3f851591 	.word	0x3f851591
   11434:	00015ff4 	.word	0x00015ff4
   11438:	00015ffc 	.word	0x00015ffc
   1143c:	3331bb4c 	.word	0x3331bb4c
   11440:	35ddea0e 	.word	0x35ddea0e
   11444:	388ab355 	.word	0x388ab355
   11448:	3b360b61 	.word	0x3b360b61
   1144c:	3e2aaaab 	.word	0x3e2aaaab
   11450:	7149f2ca 	.word	0x7149f2ca
   11454:	42cff1b5 	.word	0x42cff1b5
   11458:	3fb8aa3b 	.word	0x3fb8aa3b
   1145c:	00015fec 	.word	0x00015fec
   11460:	3f317180 	.word	0x3f317180
   11464:	3717f7d1 	.word	0x3717f7d1

00011468 <with_errnof>:
   11468:	b538      	push	{r3, r4, r5, lr}
   1146a:	4605      	mov	r5, r0
   1146c:	460c      	mov	r4, r1
   1146e:	f001 f963 	bl	12738 <__errno>
   11472:	4603      	mov	r3, r0
   11474:	4628      	mov	r0, r5
   11476:	601c      	str	r4, [r3, #0]
   11478:	bd38      	pop	{r3, r4, r5, pc}
   1147a:	bf00      	nop

0001147c <xflowf>:
   1147c:	b508      	push	{r3, lr}
   1147e:	b140      	cbz	r0, 11492 <xflowf+0x16>
   11480:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
   11484:	f000 f92a 	bl	116dc <__aeabi_fmul>
   11488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1148c:	2122      	movs	r1, #34	; 0x22
   1148e:	f7ff bfeb 	b.w	11468 <with_errnof>
   11492:	4608      	mov	r0, r1
   11494:	f000 f922 	bl	116dc <__aeabi_fmul>
   11498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1149c:	2122      	movs	r1, #34	; 0x22
   1149e:	f7ff bfe3 	b.w	11468 <with_errnof>
   114a2:	bf00      	nop

000114a4 <__math_uflowf>:
   114a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   114a8:	f7ff bfe8 	b.w	1147c <xflowf>

000114ac <__math_oflowf>:
   114ac:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
   114b0:	f7ff bfe4 	b.w	1147c <xflowf>

000114b4 <__aeabi_atexit>:
   114b4:	4603      	mov	r3, r0
   114b6:	4608      	mov	r0, r1
   114b8:	4619      	mov	r1, r3
   114ba:	f000 bfdf 	b.w	1247c <__cxa_atexit>
   114be:	bf00      	nop

000114c0 <__aeabi_frsub>:
   114c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   114c4:	e002      	b.n	114cc <__addsf3>
   114c6:	bf00      	nop

000114c8 <__aeabi_fsub>:
   114c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000114cc <__addsf3>:
   114cc:	0042      	lsls	r2, r0, #1
   114ce:	bf1f      	itttt	ne
   114d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   114d4:	ea92 0f03 	teqne	r2, r3
   114d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   114dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   114e0:	d06a      	beq.n	115b8 <__addsf3+0xec>
   114e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   114e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   114ea:	bfc1      	itttt	gt
   114ec:	18d2      	addgt	r2, r2, r3
   114ee:	4041      	eorgt	r1, r0
   114f0:	4048      	eorgt	r0, r1
   114f2:	4041      	eorgt	r1, r0
   114f4:	bfb8      	it	lt
   114f6:	425b      	neglt	r3, r3
   114f8:	2b19      	cmp	r3, #25
   114fa:	bf88      	it	hi
   114fc:	4770      	bxhi	lr
   114fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   11502:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11506:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1150a:	bf18      	it	ne
   1150c:	4240      	negne	r0, r0
   1150e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   11512:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   11516:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1151a:	bf18      	it	ne
   1151c:	4249      	negne	r1, r1
   1151e:	ea92 0f03 	teq	r2, r3
   11522:	d03f      	beq.n	115a4 <__addsf3+0xd8>
   11524:	f1a2 0201 	sub.w	r2, r2, #1
   11528:	fa41 fc03 	asr.w	ip, r1, r3
   1152c:	eb10 000c 	adds.w	r0, r0, ip
   11530:	f1c3 0320 	rsb	r3, r3, #32
   11534:	fa01 f103 	lsl.w	r1, r1, r3
   11538:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1153c:	d502      	bpl.n	11544 <__addsf3+0x78>
   1153e:	4249      	negs	r1, r1
   11540:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   11544:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11548:	d313      	bcc.n	11572 <__addsf3+0xa6>
   1154a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1154e:	d306      	bcc.n	1155e <__addsf3+0x92>
   11550:	0840      	lsrs	r0, r0, #1
   11552:	ea4f 0131 	mov.w	r1, r1, rrx
   11556:	f102 0201 	add.w	r2, r2, #1
   1155a:	2afe      	cmp	r2, #254	; 0xfe
   1155c:	d251      	bcs.n	11602 <__addsf3+0x136>
   1155e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   11562:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   11566:	bf08      	it	eq
   11568:	f020 0001 	biceq.w	r0, r0, #1
   1156c:	ea40 0003 	orr.w	r0, r0, r3
   11570:	4770      	bx	lr
   11572:	0049      	lsls	r1, r1, #1
   11574:	eb40 0000 	adc.w	r0, r0, r0
   11578:	3a01      	subs	r2, #1
   1157a:	bf28      	it	cs
   1157c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   11580:	d2ed      	bcs.n	1155e <__addsf3+0x92>
   11582:	fab0 fc80 	clz	ip, r0
   11586:	f1ac 0c08 	sub.w	ip, ip, #8
   1158a:	ebb2 020c 	subs.w	r2, r2, ip
   1158e:	fa00 f00c 	lsl.w	r0, r0, ip
   11592:	bfaa      	itet	ge
   11594:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   11598:	4252      	neglt	r2, r2
   1159a:	4318      	orrge	r0, r3
   1159c:	bfbc      	itt	lt
   1159e:	40d0      	lsrlt	r0, r2
   115a0:	4318      	orrlt	r0, r3
   115a2:	4770      	bx	lr
   115a4:	f092 0f00 	teq	r2, #0
   115a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   115ac:	bf06      	itte	eq
   115ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   115b2:	3201      	addeq	r2, #1
   115b4:	3b01      	subne	r3, #1
   115b6:	e7b5      	b.n	11524 <__addsf3+0x58>
   115b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   115bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   115c0:	bf18      	it	ne
   115c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   115c6:	d021      	beq.n	1160c <__addsf3+0x140>
   115c8:	ea92 0f03 	teq	r2, r3
   115cc:	d004      	beq.n	115d8 <__addsf3+0x10c>
   115ce:	f092 0f00 	teq	r2, #0
   115d2:	bf08      	it	eq
   115d4:	4608      	moveq	r0, r1
   115d6:	4770      	bx	lr
   115d8:	ea90 0f01 	teq	r0, r1
   115dc:	bf1c      	itt	ne
   115de:	2000      	movne	r0, #0
   115e0:	4770      	bxne	lr
   115e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   115e6:	d104      	bne.n	115f2 <__addsf3+0x126>
   115e8:	0040      	lsls	r0, r0, #1
   115ea:	bf28      	it	cs
   115ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   115f0:	4770      	bx	lr
   115f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   115f6:	bf3c      	itt	cc
   115f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   115fc:	4770      	bxcc	lr
   115fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11602:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   11606:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1160a:	4770      	bx	lr
   1160c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   11610:	bf16      	itet	ne
   11612:	4608      	movne	r0, r1
   11614:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   11618:	4601      	movne	r1, r0
   1161a:	0242      	lsls	r2, r0, #9
   1161c:	bf06      	itte	eq
   1161e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   11622:	ea90 0f01 	teqeq	r0, r1
   11626:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1162a:	4770      	bx	lr

0001162c <__aeabi_ui2f>:
   1162c:	f04f 0300 	mov.w	r3, #0
   11630:	e004      	b.n	1163c <__aeabi_i2f+0x8>
   11632:	bf00      	nop

00011634 <__aeabi_i2f>:
   11634:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   11638:	bf48      	it	mi
   1163a:	4240      	negmi	r0, r0
   1163c:	ea5f 0c00 	movs.w	ip, r0
   11640:	bf08      	it	eq
   11642:	4770      	bxeq	lr
   11644:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   11648:	4601      	mov	r1, r0
   1164a:	f04f 0000 	mov.w	r0, #0
   1164e:	e01c      	b.n	1168a <__aeabi_l2f+0x2a>

00011650 <__aeabi_ul2f>:
   11650:	ea50 0201 	orrs.w	r2, r0, r1
   11654:	bf08      	it	eq
   11656:	4770      	bxeq	lr
   11658:	f04f 0300 	mov.w	r3, #0
   1165c:	e00a      	b.n	11674 <__aeabi_l2f+0x14>
   1165e:	bf00      	nop

00011660 <__aeabi_l2f>:
   11660:	ea50 0201 	orrs.w	r2, r0, r1
   11664:	bf08      	it	eq
   11666:	4770      	bxeq	lr
   11668:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1166c:	d502      	bpl.n	11674 <__aeabi_l2f+0x14>
   1166e:	4240      	negs	r0, r0
   11670:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11674:	ea5f 0c01 	movs.w	ip, r1
   11678:	bf02      	ittt	eq
   1167a:	4684      	moveq	ip, r0
   1167c:	4601      	moveq	r1, r0
   1167e:	2000      	moveq	r0, #0
   11680:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   11684:	bf08      	it	eq
   11686:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1168a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1168e:	fabc f28c 	clz	r2, ip
   11692:	3a08      	subs	r2, #8
   11694:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   11698:	db10      	blt.n	116bc <__aeabi_l2f+0x5c>
   1169a:	fa01 fc02 	lsl.w	ip, r1, r2
   1169e:	4463      	add	r3, ip
   116a0:	fa00 fc02 	lsl.w	ip, r0, r2
   116a4:	f1c2 0220 	rsb	r2, r2, #32
   116a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   116ac:	fa20 f202 	lsr.w	r2, r0, r2
   116b0:	eb43 0002 	adc.w	r0, r3, r2
   116b4:	bf08      	it	eq
   116b6:	f020 0001 	biceq.w	r0, r0, #1
   116ba:	4770      	bx	lr
   116bc:	f102 0220 	add.w	r2, r2, #32
   116c0:	fa01 fc02 	lsl.w	ip, r1, r2
   116c4:	f1c2 0220 	rsb	r2, r2, #32
   116c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   116cc:	fa21 f202 	lsr.w	r2, r1, r2
   116d0:	eb43 0002 	adc.w	r0, r3, r2
   116d4:	bf08      	it	eq
   116d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   116da:	4770      	bx	lr

000116dc <__aeabi_fmul>:
   116dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   116e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   116e4:	bf1e      	ittt	ne
   116e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   116ea:	ea92 0f0c 	teqne	r2, ip
   116ee:	ea93 0f0c 	teqne	r3, ip
   116f2:	d06f      	beq.n	117d4 <__aeabi_fmul+0xf8>
   116f4:	441a      	add	r2, r3
   116f6:	ea80 0c01 	eor.w	ip, r0, r1
   116fa:	0240      	lsls	r0, r0, #9
   116fc:	bf18      	it	ne
   116fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   11702:	d01e      	beq.n	11742 <__aeabi_fmul+0x66>
   11704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   11708:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1170c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   11710:	fba0 3101 	umull	r3, r1, r0, r1
   11714:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   11718:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1171c:	bf3e      	ittt	cc
   1171e:	0049      	lslcc	r1, r1, #1
   11720:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   11724:	005b      	lslcc	r3, r3, #1
   11726:	ea40 0001 	orr.w	r0, r0, r1
   1172a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1172e:	2afd      	cmp	r2, #253	; 0xfd
   11730:	d81d      	bhi.n	1176e <__aeabi_fmul+0x92>
   11732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   11736:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1173a:	bf08      	it	eq
   1173c:	f020 0001 	biceq.w	r0, r0, #1
   11740:	4770      	bx	lr
   11742:	f090 0f00 	teq	r0, #0
   11746:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1174a:	bf08      	it	eq
   1174c:	0249      	lsleq	r1, r1, #9
   1174e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   11752:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   11756:	3a7f      	subs	r2, #127	; 0x7f
   11758:	bfc2      	ittt	gt
   1175a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1175e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   11762:	4770      	bxgt	lr
   11764:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11768:	f04f 0300 	mov.w	r3, #0
   1176c:	3a01      	subs	r2, #1
   1176e:	dc5d      	bgt.n	1182c <__aeabi_fmul+0x150>
   11770:	f112 0f19 	cmn.w	r2, #25
   11774:	bfdc      	itt	le
   11776:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1177a:	4770      	bxle	lr
   1177c:	f1c2 0200 	rsb	r2, r2, #0
   11780:	0041      	lsls	r1, r0, #1
   11782:	fa21 f102 	lsr.w	r1, r1, r2
   11786:	f1c2 0220 	rsb	r2, r2, #32
   1178a:	fa00 fc02 	lsl.w	ip, r0, r2
   1178e:	ea5f 0031 	movs.w	r0, r1, rrx
   11792:	f140 0000 	adc.w	r0, r0, #0
   11796:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1179a:	bf08      	it	eq
   1179c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   117a0:	4770      	bx	lr
   117a2:	f092 0f00 	teq	r2, #0
   117a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   117aa:	bf02      	ittt	eq
   117ac:	0040      	lsleq	r0, r0, #1
   117ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   117b2:	3a01      	subeq	r2, #1
   117b4:	d0f9      	beq.n	117aa <__aeabi_fmul+0xce>
   117b6:	ea40 000c 	orr.w	r0, r0, ip
   117ba:	f093 0f00 	teq	r3, #0
   117be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   117c2:	bf02      	ittt	eq
   117c4:	0049      	lsleq	r1, r1, #1
   117c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   117ca:	3b01      	subeq	r3, #1
   117cc:	d0f9      	beq.n	117c2 <__aeabi_fmul+0xe6>
   117ce:	ea41 010c 	orr.w	r1, r1, ip
   117d2:	e78f      	b.n	116f4 <__aeabi_fmul+0x18>
   117d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   117d8:	ea92 0f0c 	teq	r2, ip
   117dc:	bf18      	it	ne
   117de:	ea93 0f0c 	teqne	r3, ip
   117e2:	d00a      	beq.n	117fa <__aeabi_fmul+0x11e>
   117e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   117e8:	bf18      	it	ne
   117ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   117ee:	d1d8      	bne.n	117a2 <__aeabi_fmul+0xc6>
   117f0:	ea80 0001 	eor.w	r0, r0, r1
   117f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   117f8:	4770      	bx	lr
   117fa:	f090 0f00 	teq	r0, #0
   117fe:	bf17      	itett	ne
   11800:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   11804:	4608      	moveq	r0, r1
   11806:	f091 0f00 	teqne	r1, #0
   1180a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1180e:	d014      	beq.n	1183a <__aeabi_fmul+0x15e>
   11810:	ea92 0f0c 	teq	r2, ip
   11814:	d101      	bne.n	1181a <__aeabi_fmul+0x13e>
   11816:	0242      	lsls	r2, r0, #9
   11818:	d10f      	bne.n	1183a <__aeabi_fmul+0x15e>
   1181a:	ea93 0f0c 	teq	r3, ip
   1181e:	d103      	bne.n	11828 <__aeabi_fmul+0x14c>
   11820:	024b      	lsls	r3, r1, #9
   11822:	bf18      	it	ne
   11824:	4608      	movne	r0, r1
   11826:	d108      	bne.n	1183a <__aeabi_fmul+0x15e>
   11828:	ea80 0001 	eor.w	r0, r0, r1
   1182c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   11830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   11834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11838:	4770      	bx	lr
   1183a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1183e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   11842:	4770      	bx	lr

00011844 <__aeabi_fdiv>:
   11844:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1184c:	bf1e      	ittt	ne
   1184e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   11852:	ea92 0f0c 	teqne	r2, ip
   11856:	ea93 0f0c 	teqne	r3, ip
   1185a:	d069      	beq.n	11930 <__aeabi_fdiv+0xec>
   1185c:	eba2 0203 	sub.w	r2, r2, r3
   11860:	ea80 0c01 	eor.w	ip, r0, r1
   11864:	0249      	lsls	r1, r1, #9
   11866:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1186a:	d037      	beq.n	118dc <__aeabi_fdiv+0x98>
   1186c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11870:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   11874:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   11878:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1187c:	428b      	cmp	r3, r1
   1187e:	bf38      	it	cc
   11880:	005b      	lslcc	r3, r3, #1
   11882:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   11886:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1188a:	428b      	cmp	r3, r1
   1188c:	bf24      	itt	cs
   1188e:	1a5b      	subcs	r3, r3, r1
   11890:	ea40 000c 	orrcs.w	r0, r0, ip
   11894:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   11898:	bf24      	itt	cs
   1189a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1189e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   118a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   118a6:	bf24      	itt	cs
   118a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   118ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   118b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   118b4:	bf24      	itt	cs
   118b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   118ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   118be:	011b      	lsls	r3, r3, #4
   118c0:	bf18      	it	ne
   118c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   118c6:	d1e0      	bne.n	1188a <__aeabi_fdiv+0x46>
   118c8:	2afd      	cmp	r2, #253	; 0xfd
   118ca:	f63f af50 	bhi.w	1176e <__aeabi_fmul+0x92>
   118ce:	428b      	cmp	r3, r1
   118d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   118d4:	bf08      	it	eq
   118d6:	f020 0001 	biceq.w	r0, r0, #1
   118da:	4770      	bx	lr
   118dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   118e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   118e4:	327f      	adds	r2, #127	; 0x7f
   118e6:	bfc2      	ittt	gt
   118e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   118ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   118f0:	4770      	bxgt	lr
   118f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   118f6:	f04f 0300 	mov.w	r3, #0
   118fa:	3a01      	subs	r2, #1
   118fc:	e737      	b.n	1176e <__aeabi_fmul+0x92>
   118fe:	f092 0f00 	teq	r2, #0
   11902:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   11906:	bf02      	ittt	eq
   11908:	0040      	lsleq	r0, r0, #1
   1190a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1190e:	3a01      	subeq	r2, #1
   11910:	d0f9      	beq.n	11906 <__aeabi_fdiv+0xc2>
   11912:	ea40 000c 	orr.w	r0, r0, ip
   11916:	f093 0f00 	teq	r3, #0
   1191a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1191e:	bf02      	ittt	eq
   11920:	0049      	lsleq	r1, r1, #1
   11922:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   11926:	3b01      	subeq	r3, #1
   11928:	d0f9      	beq.n	1191e <__aeabi_fdiv+0xda>
   1192a:	ea41 010c 	orr.w	r1, r1, ip
   1192e:	e795      	b.n	1185c <__aeabi_fdiv+0x18>
   11930:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   11934:	ea92 0f0c 	teq	r2, ip
   11938:	d108      	bne.n	1194c <__aeabi_fdiv+0x108>
   1193a:	0242      	lsls	r2, r0, #9
   1193c:	f47f af7d 	bne.w	1183a <__aeabi_fmul+0x15e>
   11940:	ea93 0f0c 	teq	r3, ip
   11944:	f47f af70 	bne.w	11828 <__aeabi_fmul+0x14c>
   11948:	4608      	mov	r0, r1
   1194a:	e776      	b.n	1183a <__aeabi_fmul+0x15e>
   1194c:	ea93 0f0c 	teq	r3, ip
   11950:	d104      	bne.n	1195c <__aeabi_fdiv+0x118>
   11952:	024b      	lsls	r3, r1, #9
   11954:	f43f af4c 	beq.w	117f0 <__aeabi_fmul+0x114>
   11958:	4608      	mov	r0, r1
   1195a:	e76e      	b.n	1183a <__aeabi_fmul+0x15e>
   1195c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   11960:	bf18      	it	ne
   11962:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   11966:	d1ca      	bne.n	118fe <__aeabi_fdiv+0xba>
   11968:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1196c:	f47f af5c 	bne.w	11828 <__aeabi_fmul+0x14c>
   11970:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   11974:	f47f af3c 	bne.w	117f0 <__aeabi_fmul+0x114>
   11978:	e75f      	b.n	1183a <__aeabi_fmul+0x15e>
   1197a:	bf00      	nop

0001197c <__gesf2>:
   1197c:	f04f 3cff 	mov.w	ip, #4294967295
   11980:	e006      	b.n	11990 <__cmpsf2+0x4>
   11982:	bf00      	nop

00011984 <__lesf2>:
   11984:	f04f 0c01 	mov.w	ip, #1
   11988:	e002      	b.n	11990 <__cmpsf2+0x4>
   1198a:	bf00      	nop

0001198c <__cmpsf2>:
   1198c:	f04f 0c01 	mov.w	ip, #1
   11990:	f84d cd04 	str.w	ip, [sp, #-4]!
   11994:	ea4f 0240 	mov.w	r2, r0, lsl #1
   11998:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1199c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   119a0:	bf18      	it	ne
   119a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   119a6:	d011      	beq.n	119cc <__cmpsf2+0x40>
   119a8:	b001      	add	sp, #4
   119aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   119ae:	bf18      	it	ne
   119b0:	ea90 0f01 	teqne	r0, r1
   119b4:	bf58      	it	pl
   119b6:	ebb2 0003 	subspl.w	r0, r2, r3
   119ba:	bf88      	it	hi
   119bc:	17c8      	asrhi	r0, r1, #31
   119be:	bf38      	it	cc
   119c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   119c4:	bf18      	it	ne
   119c6:	f040 0001 	orrne.w	r0, r0, #1
   119ca:	4770      	bx	lr
   119cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   119d0:	d102      	bne.n	119d8 <__cmpsf2+0x4c>
   119d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   119d6:	d105      	bne.n	119e4 <__cmpsf2+0x58>
   119d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   119dc:	d1e4      	bne.n	119a8 <__cmpsf2+0x1c>
   119de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   119e2:	d0e1      	beq.n	119a8 <__cmpsf2+0x1c>
   119e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   119e8:	4770      	bx	lr
   119ea:	bf00      	nop

000119ec <__aeabi_cfrcmple>:
   119ec:	4684      	mov	ip, r0
   119ee:	4608      	mov	r0, r1
   119f0:	4661      	mov	r1, ip
   119f2:	e7ff      	b.n	119f4 <__aeabi_cfcmpeq>

000119f4 <__aeabi_cfcmpeq>:
   119f4:	b50f      	push	{r0, r1, r2, r3, lr}
   119f6:	f7ff ffc9 	bl	1198c <__cmpsf2>
   119fa:	2800      	cmp	r0, #0
   119fc:	bf48      	it	mi
   119fe:	f110 0f00 	cmnmi.w	r0, #0
   11a02:	bd0f      	pop	{r0, r1, r2, r3, pc}

00011a04 <__aeabi_fcmpeq>:
   11a04:	f84d ed08 	str.w	lr, [sp, #-8]!
   11a08:	f7ff fff4 	bl	119f4 <__aeabi_cfcmpeq>
   11a0c:	bf0c      	ite	eq
   11a0e:	2001      	moveq	r0, #1
   11a10:	2000      	movne	r0, #0
   11a12:	f85d fb08 	ldr.w	pc, [sp], #8
   11a16:	bf00      	nop

00011a18 <__aeabi_fcmplt>:
   11a18:	f84d ed08 	str.w	lr, [sp, #-8]!
   11a1c:	f7ff ffea 	bl	119f4 <__aeabi_cfcmpeq>
   11a20:	bf34      	ite	cc
   11a22:	2001      	movcc	r0, #1
   11a24:	2000      	movcs	r0, #0
   11a26:	f85d fb08 	ldr.w	pc, [sp], #8
   11a2a:	bf00      	nop

00011a2c <__aeabi_fcmple>:
   11a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   11a30:	f7ff ffe0 	bl	119f4 <__aeabi_cfcmpeq>
   11a34:	bf94      	ite	ls
   11a36:	2001      	movls	r0, #1
   11a38:	2000      	movhi	r0, #0
   11a3a:	f85d fb08 	ldr.w	pc, [sp], #8
   11a3e:	bf00      	nop

00011a40 <__aeabi_fcmpge>:
   11a40:	f84d ed08 	str.w	lr, [sp, #-8]!
   11a44:	f7ff ffd2 	bl	119ec <__aeabi_cfrcmple>
   11a48:	bf94      	ite	ls
   11a4a:	2001      	movls	r0, #1
   11a4c:	2000      	movhi	r0, #0
   11a4e:	f85d fb08 	ldr.w	pc, [sp], #8
   11a52:	bf00      	nop

00011a54 <__aeabi_fcmpgt>:
   11a54:	f84d ed08 	str.w	lr, [sp, #-8]!
   11a58:	f7ff ffc8 	bl	119ec <__aeabi_cfrcmple>
   11a5c:	bf34      	ite	cc
   11a5e:	2001      	movcc	r0, #1
   11a60:	2000      	movcs	r0, #0
   11a62:	f85d fb08 	ldr.w	pc, [sp], #8
   11a66:	bf00      	nop

00011a68 <__aeabi_f2iz>:
   11a68:	ea4f 0240 	mov.w	r2, r0, lsl #1
   11a6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   11a70:	d30f      	bcc.n	11a92 <__aeabi_f2iz+0x2a>
   11a72:	f04f 039e 	mov.w	r3, #158	; 0x9e
   11a76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   11a7a:	d90d      	bls.n	11a98 <__aeabi_f2iz+0x30>
   11a7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   11a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11a84:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   11a88:	fa23 f002 	lsr.w	r0, r3, r2
   11a8c:	bf18      	it	ne
   11a8e:	4240      	negne	r0, r0
   11a90:	4770      	bx	lr
   11a92:	f04f 0000 	mov.w	r0, #0
   11a96:	4770      	bx	lr
   11a98:	f112 0f61 	cmn.w	r2, #97	; 0x61
   11a9c:	d101      	bne.n	11aa2 <__aeabi_f2iz+0x3a>
   11a9e:	0242      	lsls	r2, r0, #9
   11aa0:	d105      	bne.n	11aae <__aeabi_f2iz+0x46>
   11aa2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   11aa6:	bf08      	it	eq
   11aa8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   11aac:	4770      	bx	lr
   11aae:	f04f 0000 	mov.w	r0, #0
   11ab2:	4770      	bx	lr

00011ab4 <__aeabi_f2uiz>:
   11ab4:	0042      	lsls	r2, r0, #1
   11ab6:	d20e      	bcs.n	11ad6 <__aeabi_f2uiz+0x22>
   11ab8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   11abc:	d30b      	bcc.n	11ad6 <__aeabi_f2uiz+0x22>
   11abe:	f04f 039e 	mov.w	r3, #158	; 0x9e
   11ac2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   11ac6:	d409      	bmi.n	11adc <__aeabi_f2uiz+0x28>
   11ac8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   11acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11ad0:	fa23 f002 	lsr.w	r0, r3, r2
   11ad4:	4770      	bx	lr
   11ad6:	f04f 0000 	mov.w	r0, #0
   11ada:	4770      	bx	lr
   11adc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   11ae0:	d101      	bne.n	11ae6 <__aeabi_f2uiz+0x32>
   11ae2:	0242      	lsls	r2, r0, #9
   11ae4:	d102      	bne.n	11aec <__aeabi_f2uiz+0x38>
   11ae6:	f04f 30ff 	mov.w	r0, #4294967295
   11aea:	4770      	bx	lr
   11aec:	f04f 0000 	mov.w	r0, #0
   11af0:	4770      	bx	lr
   11af2:	bf00      	nop

00011af4 <malloc>:
   11af4:	4b02      	ldr	r3, [pc, #8]	; (11b00 <malloc+0xc>)
   11af6:	4601      	mov	r1, r0
   11af8:	6818      	ldr	r0, [r3, #0]
   11afa:	f000 b80b 	b.w	11b14 <_malloc_r>
   11afe:	bf00      	nop
   11b00:	1fff98e8 	.word	0x1fff98e8

00011b04 <free>:
   11b04:	4b02      	ldr	r3, [pc, #8]	; (11b10 <free+0xc>)
   11b06:	4601      	mov	r1, r0
   11b08:	6818      	ldr	r0, [r3, #0]
   11b0a:	f000 bf6b 	b.w	129e4 <_free_r>
   11b0e:	bf00      	nop
   11b10:	1fff98e8 	.word	0x1fff98e8

00011b14 <_malloc_r>:
   11b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b18:	f101 060b 	add.w	r6, r1, #11
   11b1c:	2e16      	cmp	r6, #22
   11b1e:	b083      	sub	sp, #12
   11b20:	4604      	mov	r4, r0
   11b22:	d824      	bhi.n	11b6e <_malloc_r+0x5a>
   11b24:	2910      	cmp	r1, #16
   11b26:	f200 80ba 	bhi.w	11c9e <_malloc_r+0x18a>
   11b2a:	f000 faa3 	bl	12074 <__malloc_lock>
   11b2e:	2610      	movs	r6, #16
   11b30:	2218      	movs	r2, #24
   11b32:	2002      	movs	r0, #2
   11b34:	4fb5      	ldr	r7, [pc, #724]	; (11e0c <_malloc_r+0x2f8>)
   11b36:	443a      	add	r2, r7
   11b38:	f1a2 0108 	sub.w	r1, r2, #8
   11b3c:	6853      	ldr	r3, [r2, #4]
   11b3e:	428b      	cmp	r3, r1
   11b40:	f000 80ba 	beq.w	11cb8 <_malloc_r+0x1a4>
   11b44:	685a      	ldr	r2, [r3, #4]
   11b46:	68d9      	ldr	r1, [r3, #12]
   11b48:	f022 0203 	bic.w	r2, r2, #3
   11b4c:	441a      	add	r2, r3
   11b4e:	689d      	ldr	r5, [r3, #8]
   11b50:	60e9      	str	r1, [r5, #12]
   11b52:	608d      	str	r5, [r1, #8]
   11b54:	6851      	ldr	r1, [r2, #4]
   11b56:	f041 0101 	orr.w	r1, r1, #1
   11b5a:	4620      	mov	r0, r4
   11b5c:	6051      	str	r1, [r2, #4]
   11b5e:	f103 0508 	add.w	r5, r3, #8
   11b62:	f000 fa8d 	bl	12080 <__malloc_unlock>
   11b66:	4628      	mov	r0, r5
   11b68:	b003      	add	sp, #12
   11b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b6e:	f036 0607 	bics.w	r6, r6, #7
   11b72:	f100 8094 	bmi.w	11c9e <_malloc_r+0x18a>
   11b76:	42b1      	cmp	r1, r6
   11b78:	f200 8091 	bhi.w	11c9e <_malloc_r+0x18a>
   11b7c:	f000 fa7a 	bl	12074 <__malloc_lock>
   11b80:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   11b84:	f0c0 819a 	bcc.w	11ebc <_malloc_r+0x3a8>
   11b88:	0a73      	lsrs	r3, r6, #9
   11b8a:	f000 808f 	beq.w	11cac <_malloc_r+0x198>
   11b8e:	2b04      	cmp	r3, #4
   11b90:	f200 816f 	bhi.w	11e72 <_malloc_r+0x35e>
   11b94:	09b3      	lsrs	r3, r6, #6
   11b96:	f103 0039 	add.w	r0, r3, #57	; 0x39
   11b9a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   11b9e:	00c3      	lsls	r3, r0, #3
   11ba0:	4f9a      	ldr	r7, [pc, #616]	; (11e0c <_malloc_r+0x2f8>)
   11ba2:	443b      	add	r3, r7
   11ba4:	f1a3 0508 	sub.w	r5, r3, #8
   11ba8:	685b      	ldr	r3, [r3, #4]
   11baa:	429d      	cmp	r5, r3
   11bac:	d106      	bne.n	11bbc <_malloc_r+0xa8>
   11bae:	e00c      	b.n	11bca <_malloc_r+0xb6>
   11bb0:	2900      	cmp	r1, #0
   11bb2:	f280 8127 	bge.w	11e04 <_malloc_r+0x2f0>
   11bb6:	68db      	ldr	r3, [r3, #12]
   11bb8:	429d      	cmp	r5, r3
   11bba:	d006      	beq.n	11bca <_malloc_r+0xb6>
   11bbc:	685a      	ldr	r2, [r3, #4]
   11bbe:	f022 0203 	bic.w	r2, r2, #3
   11bc2:	1b91      	subs	r1, r2, r6
   11bc4:	290f      	cmp	r1, #15
   11bc6:	ddf3      	ble.n	11bb0 <_malloc_r+0x9c>
   11bc8:	4660      	mov	r0, ip
   11bca:	693d      	ldr	r5, [r7, #16]
   11bcc:	f8df c240 	ldr.w	ip, [pc, #576]	; 11e10 <_malloc_r+0x2fc>
   11bd0:	4565      	cmp	r5, ip
   11bd2:	d07c      	beq.n	11cce <_malloc_r+0x1ba>
   11bd4:	686a      	ldr	r2, [r5, #4]
   11bd6:	f022 0203 	bic.w	r2, r2, #3
   11bda:	1b93      	subs	r3, r2, r6
   11bdc:	2b0f      	cmp	r3, #15
   11bde:	f300 817b 	bgt.w	11ed8 <_malloc_r+0x3c4>
   11be2:	2b00      	cmp	r3, #0
   11be4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   11be8:	f280 816c 	bge.w	11ec4 <_malloc_r+0x3b0>
   11bec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   11bf0:	f080 811a 	bcs.w	11e28 <_malloc_r+0x314>
   11bf4:	08d3      	lsrs	r3, r2, #3
   11bf6:	6879      	ldr	r1, [r7, #4]
   11bf8:	3301      	adds	r3, #1
   11bfa:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   11bfe:	2201      	movs	r2, #1
   11c00:	fa02 f20e 	lsl.w	r2, r2, lr
   11c04:	430a      	orrs	r2, r1
   11c06:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   11c0a:	f8c5 e008 	str.w	lr, [r5, #8]
   11c0e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   11c12:	3908      	subs	r1, #8
   11c14:	60e9      	str	r1, [r5, #12]
   11c16:	607a      	str	r2, [r7, #4]
   11c18:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   11c1c:	f8ce 500c 	str.w	r5, [lr, #12]
   11c20:	1083      	asrs	r3, r0, #2
   11c22:	2101      	movs	r1, #1
   11c24:	4099      	lsls	r1, r3
   11c26:	4291      	cmp	r1, r2
   11c28:	d857      	bhi.n	11cda <_malloc_r+0x1c6>
   11c2a:	4211      	tst	r1, r2
   11c2c:	d106      	bne.n	11c3c <_malloc_r+0x128>
   11c2e:	f020 0003 	bic.w	r0, r0, #3
   11c32:	0049      	lsls	r1, r1, #1
   11c34:	4211      	tst	r1, r2
   11c36:	f100 0004 	add.w	r0, r0, #4
   11c3a:	d0fa      	beq.n	11c32 <_malloc_r+0x11e>
   11c3c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   11c40:	464d      	mov	r5, r9
   11c42:	4686      	mov	lr, r0
   11c44:	f8d5 800c 	ldr.w	r8, [r5, #12]
   11c48:	4545      	cmp	r5, r8
   11c4a:	d108      	bne.n	11c5e <_malloc_r+0x14a>
   11c4c:	e11d      	b.n	11e8a <_malloc_r+0x376>
   11c4e:	2b00      	cmp	r3, #0
   11c50:	f280 8124 	bge.w	11e9c <_malloc_r+0x388>
   11c54:	f8d8 800c 	ldr.w	r8, [r8, #12]
   11c58:	4545      	cmp	r5, r8
   11c5a:	f000 8116 	beq.w	11e8a <_malloc_r+0x376>
   11c5e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   11c62:	f022 0203 	bic.w	r2, r2, #3
   11c66:	1b93      	subs	r3, r2, r6
   11c68:	2b0f      	cmp	r3, #15
   11c6a:	ddf0      	ble.n	11c4e <_malloc_r+0x13a>
   11c6c:	4620      	mov	r0, r4
   11c6e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   11c72:	eb08 0106 	add.w	r1, r8, r6
   11c76:	f046 0601 	orr.w	r6, r6, #1
   11c7a:	f8c8 6004 	str.w	r6, [r8, #4]
   11c7e:	60ec      	str	r4, [r5, #12]
   11c80:	60a5      	str	r5, [r4, #8]
   11c82:	f043 0401 	orr.w	r4, r3, #1
   11c86:	e9c7 1104 	strd	r1, r1, [r7, #16]
   11c8a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   11c8e:	604c      	str	r4, [r1, #4]
   11c90:	f848 3002 	str.w	r3, [r8, r2]
   11c94:	f000 f9f4 	bl	12080 <__malloc_unlock>
   11c98:	f108 0508 	add.w	r5, r8, #8
   11c9c:	e002      	b.n	11ca4 <_malloc_r+0x190>
   11c9e:	230c      	movs	r3, #12
   11ca0:	6023      	str	r3, [r4, #0]
   11ca2:	2500      	movs	r5, #0
   11ca4:	4628      	mov	r0, r5
   11ca6:	b003      	add	sp, #12
   11ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cac:	f44f 7300 	mov.w	r3, #512	; 0x200
   11cb0:	2040      	movs	r0, #64	; 0x40
   11cb2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   11cb6:	e773      	b.n	11ba0 <_malloc_r+0x8c>
   11cb8:	68d3      	ldr	r3, [r2, #12]
   11cba:	429a      	cmp	r2, r3
   11cbc:	bf08      	it	eq
   11cbe:	3002      	addeq	r0, #2
   11cc0:	f47f af40 	bne.w	11b44 <_malloc_r+0x30>
   11cc4:	693d      	ldr	r5, [r7, #16]
   11cc6:	f8df c148 	ldr.w	ip, [pc, #328]	; 11e10 <_malloc_r+0x2fc>
   11cca:	4565      	cmp	r5, ip
   11ccc:	d182      	bne.n	11bd4 <_malloc_r+0xc0>
   11cce:	687a      	ldr	r2, [r7, #4]
   11cd0:	1083      	asrs	r3, r0, #2
   11cd2:	2101      	movs	r1, #1
   11cd4:	4099      	lsls	r1, r3
   11cd6:	4291      	cmp	r1, r2
   11cd8:	d9a7      	bls.n	11c2a <_malloc_r+0x116>
   11cda:	68bd      	ldr	r5, [r7, #8]
   11cdc:	686b      	ldr	r3, [r5, #4]
   11cde:	f023 0903 	bic.w	r9, r3, #3
   11ce2:	454e      	cmp	r6, r9
   11ce4:	d803      	bhi.n	11cee <_malloc_r+0x1da>
   11ce6:	eba9 0306 	sub.w	r3, r9, r6
   11cea:	2b0f      	cmp	r3, #15
   11cec:	dc7a      	bgt.n	11de4 <_malloc_r+0x2d0>
   11cee:	f8df b124 	ldr.w	fp, [pc, #292]	; 11e14 <_malloc_r+0x300>
   11cf2:	4b49      	ldr	r3, [pc, #292]	; (11e18 <_malloc_r+0x304>)
   11cf4:	f8db 2000 	ldr.w	r2, [fp]
   11cf8:	681b      	ldr	r3, [r3, #0]
   11cfa:	3201      	adds	r2, #1
   11cfc:	4433      	add	r3, r6
   11cfe:	eb05 0a09 	add.w	sl, r5, r9
   11d02:	f000 8133 	beq.w	11f6c <_malloc_r+0x458>
   11d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   11d0a:	330f      	adds	r3, #15
   11d0c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   11d10:	f028 080f 	bic.w	r8, r8, #15
   11d14:	4641      	mov	r1, r8
   11d16:	4620      	mov	r0, r4
   11d18:	f000 fcfc 	bl	12714 <_sbrk_r>
   11d1c:	1c41      	adds	r1, r0, #1
   11d1e:	4602      	mov	r2, r0
   11d20:	f000 80f3 	beq.w	11f0a <_malloc_r+0x3f6>
   11d24:	4582      	cmp	sl, r0
   11d26:	f200 80ee 	bhi.w	11f06 <_malloc_r+0x3f2>
   11d2a:	4b3c      	ldr	r3, [pc, #240]	; (11e1c <_malloc_r+0x308>)
   11d2c:	6819      	ldr	r1, [r3, #0]
   11d2e:	4441      	add	r1, r8
   11d30:	6019      	str	r1, [r3, #0]
   11d32:	4608      	mov	r0, r1
   11d34:	f000 814e 	beq.w	11fd4 <_malloc_r+0x4c0>
   11d38:	f8db 1000 	ldr.w	r1, [fp]
   11d3c:	9301      	str	r3, [sp, #4]
   11d3e:	3101      	adds	r1, #1
   11d40:	bf1b      	ittet	ne
   11d42:	eba2 010a 	subne.w	r1, r2, sl
   11d46:	1809      	addne	r1, r1, r0
   11d48:	f8cb 2000 	streq.w	r2, [fp]
   11d4c:	6019      	strne	r1, [r3, #0]
   11d4e:	f012 0b07 	ands.w	fp, r2, #7
   11d52:	f000 8117 	beq.w	11f84 <_malloc_r+0x470>
   11d56:	f1cb 0108 	rsb	r1, fp, #8
   11d5a:	440a      	add	r2, r1
   11d5c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   11d60:	4490      	add	r8, r2
   11d62:	3108      	adds	r1, #8
   11d64:	eba1 0108 	sub.w	r1, r1, r8
   11d68:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   11d6c:	4651      	mov	r1, sl
   11d6e:	4620      	mov	r0, r4
   11d70:	9200      	str	r2, [sp, #0]
   11d72:	f000 fccf 	bl	12714 <_sbrk_r>
   11d76:	1c42      	adds	r2, r0, #1
   11d78:	e9dd 2300 	ldrd	r2, r3, [sp]
   11d7c:	f000 814f 	beq.w	1201e <_malloc_r+0x50a>
   11d80:	1a80      	subs	r0, r0, r2
   11d82:	eb00 080a 	add.w	r8, r0, sl
   11d86:	6819      	ldr	r1, [r3, #0]
   11d88:	60ba      	str	r2, [r7, #8]
   11d8a:	f048 0001 	orr.w	r0, r8, #1
   11d8e:	4451      	add	r1, sl
   11d90:	42bd      	cmp	r5, r7
   11d92:	6050      	str	r0, [r2, #4]
   11d94:	6019      	str	r1, [r3, #0]
   11d96:	f000 8129 	beq.w	11fec <_malloc_r+0x4d8>
   11d9a:	f1b9 0f0f 	cmp.w	r9, #15
   11d9e:	f240 8127 	bls.w	11ff0 <_malloc_r+0x4dc>
   11da2:	6868      	ldr	r0, [r5, #4]
   11da4:	f1a9 0c0c 	sub.w	ip, r9, #12
   11da8:	f02c 0c07 	bic.w	ip, ip, #7
   11dac:	f000 0001 	and.w	r0, r0, #1
   11db0:	ea40 000c 	orr.w	r0, r0, ip
   11db4:	6068      	str	r0, [r5, #4]
   11db6:	f04f 0e05 	mov.w	lr, #5
   11dba:	eb05 000c 	add.w	r0, r5, ip
   11dbe:	f1bc 0f0f 	cmp.w	ip, #15
   11dc2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   11dc6:	f200 8132 	bhi.w	1202e <_malloc_r+0x51a>
   11dca:	6850      	ldr	r0, [r2, #4]
   11dcc:	4615      	mov	r5, r2
   11dce:	4b14      	ldr	r3, [pc, #80]	; (11e20 <_malloc_r+0x30c>)
   11dd0:	681a      	ldr	r2, [r3, #0]
   11dd2:	428a      	cmp	r2, r1
   11dd4:	bf38      	it	cc
   11dd6:	6019      	strcc	r1, [r3, #0]
   11dd8:	4b12      	ldr	r3, [pc, #72]	; (11e24 <_malloc_r+0x310>)
   11dda:	681a      	ldr	r2, [r3, #0]
   11ddc:	428a      	cmp	r2, r1
   11dde:	bf38      	it	cc
   11de0:	6019      	strcc	r1, [r3, #0]
   11de2:	e094      	b.n	11f0e <_malloc_r+0x3fa>
   11de4:	19aa      	adds	r2, r5, r6
   11de6:	f043 0301 	orr.w	r3, r3, #1
   11dea:	f046 0601 	orr.w	r6, r6, #1
   11dee:	606e      	str	r6, [r5, #4]
   11df0:	4620      	mov	r0, r4
   11df2:	60ba      	str	r2, [r7, #8]
   11df4:	6053      	str	r3, [r2, #4]
   11df6:	f000 f943 	bl	12080 <__malloc_unlock>
   11dfa:	3508      	adds	r5, #8
   11dfc:	4628      	mov	r0, r5
   11dfe:	b003      	add	sp, #12
   11e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e04:	68d9      	ldr	r1, [r3, #12]
   11e06:	441a      	add	r2, r3
   11e08:	e6a1      	b.n	11b4e <_malloc_r+0x3a>
   11e0a:	bf00      	nop
   11e0c:	1fff93b4 	.word	0x1fff93b4
   11e10:	1fff93bc 	.word	0x1fff93bc
   11e14:	1fff97bc 	.word	0x1fff97bc
   11e18:	1fffa170 	.word	0x1fffa170
   11e1c:	1fffa140 	.word	0x1fffa140
   11e20:	1fffa168 	.word	0x1fffa168
   11e24:	1fffa16c 	.word	0x1fffa16c
   11e28:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   11e2c:	ea4f 2352 	mov.w	r3, r2, lsr #9
   11e30:	d363      	bcc.n	11efa <_malloc_r+0x3e6>
   11e32:	2b14      	cmp	r3, #20
   11e34:	f200 80b7 	bhi.w	11fa6 <_malloc_r+0x492>
   11e38:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   11e3c:	00c9      	lsls	r1, r1, #3
   11e3e:	335b      	adds	r3, #91	; 0x5b
   11e40:	eb07 0e01 	add.w	lr, r7, r1
   11e44:	5879      	ldr	r1, [r7, r1]
   11e46:	f1ae 0e08 	sub.w	lr, lr, #8
   11e4a:	458e      	cmp	lr, r1
   11e4c:	f000 8091 	beq.w	11f72 <_malloc_r+0x45e>
   11e50:	684b      	ldr	r3, [r1, #4]
   11e52:	f023 0303 	bic.w	r3, r3, #3
   11e56:	4293      	cmp	r3, r2
   11e58:	d902      	bls.n	11e60 <_malloc_r+0x34c>
   11e5a:	6889      	ldr	r1, [r1, #8]
   11e5c:	458e      	cmp	lr, r1
   11e5e:	d1f7      	bne.n	11e50 <_malloc_r+0x33c>
   11e60:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   11e64:	687a      	ldr	r2, [r7, #4]
   11e66:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   11e6a:	f8ce 5008 	str.w	r5, [lr, #8]
   11e6e:	60cd      	str	r5, [r1, #12]
   11e70:	e6d6      	b.n	11c20 <_malloc_r+0x10c>
   11e72:	2b14      	cmp	r3, #20
   11e74:	d959      	bls.n	11f2a <_malloc_r+0x416>
   11e76:	2b54      	cmp	r3, #84	; 0x54
   11e78:	f200 809d 	bhi.w	11fb6 <_malloc_r+0x4a2>
   11e7c:	0b33      	lsrs	r3, r6, #12
   11e7e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   11e82:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   11e86:	00c3      	lsls	r3, r0, #3
   11e88:	e68a      	b.n	11ba0 <_malloc_r+0x8c>
   11e8a:	f10e 0e01 	add.w	lr, lr, #1
   11e8e:	f01e 0f03 	tst.w	lr, #3
   11e92:	f105 0508 	add.w	r5, r5, #8
   11e96:	f47f aed5 	bne.w	11c44 <_malloc_r+0x130>
   11e9a:	e051      	b.n	11f40 <_malloc_r+0x42c>
   11e9c:	4442      	add	r2, r8
   11e9e:	4645      	mov	r5, r8
   11ea0:	6853      	ldr	r3, [r2, #4]
   11ea2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   11ea6:	f043 0301 	orr.w	r3, r3, #1
   11eaa:	6053      	str	r3, [r2, #4]
   11eac:	f855 3f08 	ldr.w	r3, [r5, #8]!
   11eb0:	4620      	mov	r0, r4
   11eb2:	60d9      	str	r1, [r3, #12]
   11eb4:	608b      	str	r3, [r1, #8]
   11eb6:	f000 f8e3 	bl	12080 <__malloc_unlock>
   11eba:	e6f3      	b.n	11ca4 <_malloc_r+0x190>
   11ebc:	08f0      	lsrs	r0, r6, #3
   11ebe:	f106 0208 	add.w	r2, r6, #8
   11ec2:	e637      	b.n	11b34 <_malloc_r+0x20>
   11ec4:	442a      	add	r2, r5
   11ec6:	4620      	mov	r0, r4
   11ec8:	6853      	ldr	r3, [r2, #4]
   11eca:	f043 0301 	orr.w	r3, r3, #1
   11ece:	6053      	str	r3, [r2, #4]
   11ed0:	3508      	adds	r5, #8
   11ed2:	f000 f8d5 	bl	12080 <__malloc_unlock>
   11ed6:	e6e5      	b.n	11ca4 <_malloc_r+0x190>
   11ed8:	19a9      	adds	r1, r5, r6
   11eda:	4620      	mov	r0, r4
   11edc:	f046 0601 	orr.w	r6, r6, #1
   11ee0:	f043 0401 	orr.w	r4, r3, #1
   11ee4:	606e      	str	r6, [r5, #4]
   11ee6:	e9c7 1104 	strd	r1, r1, [r7, #16]
   11eea:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   11eee:	604c      	str	r4, [r1, #4]
   11ef0:	50ab      	str	r3, [r5, r2]
   11ef2:	f000 f8c5 	bl	12080 <__malloc_unlock>
   11ef6:	3508      	adds	r5, #8
   11ef8:	e6d4      	b.n	11ca4 <_malloc_r+0x190>
   11efa:	0993      	lsrs	r3, r2, #6
   11efc:	f103 0139 	add.w	r1, r3, #57	; 0x39
   11f00:	00c9      	lsls	r1, r1, #3
   11f02:	3338      	adds	r3, #56	; 0x38
   11f04:	e79c      	b.n	11e40 <_malloc_r+0x32c>
   11f06:	42bd      	cmp	r5, r7
   11f08:	d05f      	beq.n	11fca <_malloc_r+0x4b6>
   11f0a:	68bd      	ldr	r5, [r7, #8]
   11f0c:	6868      	ldr	r0, [r5, #4]
   11f0e:	f020 0803 	bic.w	r8, r0, #3
   11f12:	4546      	cmp	r6, r8
   11f14:	eba8 0306 	sub.w	r3, r8, r6
   11f18:	d802      	bhi.n	11f20 <_malloc_r+0x40c>
   11f1a:	2b0f      	cmp	r3, #15
   11f1c:	f73f af62 	bgt.w	11de4 <_malloc_r+0x2d0>
   11f20:	4620      	mov	r0, r4
   11f22:	f000 f8ad 	bl	12080 <__malloc_unlock>
   11f26:	2500      	movs	r5, #0
   11f28:	e6bc      	b.n	11ca4 <_malloc_r+0x190>
   11f2a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   11f2e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   11f32:	00c3      	lsls	r3, r0, #3
   11f34:	e634      	b.n	11ba0 <_malloc_r+0x8c>
   11f36:	f859 3908 	ldr.w	r3, [r9], #-8
   11f3a:	454b      	cmp	r3, r9
   11f3c:	f040 8096 	bne.w	1206c <_malloc_r+0x558>
   11f40:	f010 0f03 	tst.w	r0, #3
   11f44:	f100 30ff 	add.w	r0, r0, #4294967295
   11f48:	d1f5      	bne.n	11f36 <_malloc_r+0x422>
   11f4a:	687b      	ldr	r3, [r7, #4]
   11f4c:	ea23 0301 	bic.w	r3, r3, r1
   11f50:	607b      	str	r3, [r7, #4]
   11f52:	0049      	lsls	r1, r1, #1
   11f54:	4299      	cmp	r1, r3
   11f56:	f63f aec0 	bhi.w	11cda <_malloc_r+0x1c6>
   11f5a:	b919      	cbnz	r1, 11f64 <_malloc_r+0x450>
   11f5c:	e6bd      	b.n	11cda <_malloc_r+0x1c6>
   11f5e:	0049      	lsls	r1, r1, #1
   11f60:	f10e 0e04 	add.w	lr, lr, #4
   11f64:	4219      	tst	r1, r3
   11f66:	d0fa      	beq.n	11f5e <_malloc_r+0x44a>
   11f68:	4670      	mov	r0, lr
   11f6a:	e667      	b.n	11c3c <_malloc_r+0x128>
   11f6c:	f103 0810 	add.w	r8, r3, #16
   11f70:	e6d0      	b.n	11d14 <_malloc_r+0x200>
   11f72:	109a      	asrs	r2, r3, #2
   11f74:	f04f 0801 	mov.w	r8, #1
   11f78:	687b      	ldr	r3, [r7, #4]
   11f7a:	fa08 f202 	lsl.w	r2, r8, r2
   11f7e:	431a      	orrs	r2, r3
   11f80:	607a      	str	r2, [r7, #4]
   11f82:	e770      	b.n	11e66 <_malloc_r+0x352>
   11f84:	eb02 0108 	add.w	r1, r2, r8
   11f88:	4249      	negs	r1, r1
   11f8a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   11f8e:	4651      	mov	r1, sl
   11f90:	4620      	mov	r0, r4
   11f92:	9200      	str	r2, [sp, #0]
   11f94:	f000 fbbe 	bl	12714 <_sbrk_r>
   11f98:	1c43      	adds	r3, r0, #1
   11f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
   11f9e:	f47f aeef 	bne.w	11d80 <_malloc_r+0x26c>
   11fa2:	46da      	mov	sl, fp
   11fa4:	e6ef      	b.n	11d86 <_malloc_r+0x272>
   11fa6:	2b54      	cmp	r3, #84	; 0x54
   11fa8:	d825      	bhi.n	11ff6 <_malloc_r+0x4e2>
   11faa:	0b13      	lsrs	r3, r2, #12
   11fac:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   11fb0:	00c9      	lsls	r1, r1, #3
   11fb2:	336e      	adds	r3, #110	; 0x6e
   11fb4:	e744      	b.n	11e40 <_malloc_r+0x32c>
   11fb6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   11fba:	d825      	bhi.n	12008 <_malloc_r+0x4f4>
   11fbc:	0bf3      	lsrs	r3, r6, #15
   11fbe:	f103 0078 	add.w	r0, r3, #120	; 0x78
   11fc2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   11fc6:	00c3      	lsls	r3, r0, #3
   11fc8:	e5ea      	b.n	11ba0 <_malloc_r+0x8c>
   11fca:	4b29      	ldr	r3, [pc, #164]	; (12070 <_malloc_r+0x55c>)
   11fcc:	6818      	ldr	r0, [r3, #0]
   11fce:	4440      	add	r0, r8
   11fd0:	6018      	str	r0, [r3, #0]
   11fd2:	e6b1      	b.n	11d38 <_malloc_r+0x224>
   11fd4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   11fd8:	f1bc 0f00 	cmp.w	ip, #0
   11fdc:	f47f aeac 	bne.w	11d38 <_malloc_r+0x224>
   11fe0:	68bd      	ldr	r5, [r7, #8]
   11fe2:	44c8      	add	r8, r9
   11fe4:	f048 0001 	orr.w	r0, r8, #1
   11fe8:	6068      	str	r0, [r5, #4]
   11fea:	e6f0      	b.n	11dce <_malloc_r+0x2ba>
   11fec:	4615      	mov	r5, r2
   11fee:	e6ee      	b.n	11dce <_malloc_r+0x2ba>
   11ff0:	2301      	movs	r3, #1
   11ff2:	6053      	str	r3, [r2, #4]
   11ff4:	e794      	b.n	11f20 <_malloc_r+0x40c>
   11ff6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   11ffa:	d823      	bhi.n	12044 <_malloc_r+0x530>
   11ffc:	0bd3      	lsrs	r3, r2, #15
   11ffe:	f103 0178 	add.w	r1, r3, #120	; 0x78
   12002:	00c9      	lsls	r1, r1, #3
   12004:	3377      	adds	r3, #119	; 0x77
   12006:	e71b      	b.n	11e40 <_malloc_r+0x32c>
   12008:	f240 5254 	movw	r2, #1364	; 0x554
   1200c:	4293      	cmp	r3, r2
   1200e:	d823      	bhi.n	12058 <_malloc_r+0x544>
   12010:	0cb3      	lsrs	r3, r6, #18
   12012:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12016:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   1201a:	00c3      	lsls	r3, r0, #3
   1201c:	e5c0      	b.n	11ba0 <_malloc_r+0x8c>
   1201e:	f1ab 0b08 	sub.w	fp, fp, #8
   12022:	44d8      	add	r8, fp
   12024:	eba8 0802 	sub.w	r8, r8, r2
   12028:	f04f 0a00 	mov.w	sl, #0
   1202c:	e6ab      	b.n	11d86 <_malloc_r+0x272>
   1202e:	f105 0108 	add.w	r1, r5, #8
   12032:	4620      	mov	r0, r4
   12034:	9300      	str	r3, [sp, #0]
   12036:	f000 fcd5 	bl	129e4 <_free_r>
   1203a:	68bd      	ldr	r5, [r7, #8]
   1203c:	9b00      	ldr	r3, [sp, #0]
   1203e:	6868      	ldr	r0, [r5, #4]
   12040:	6819      	ldr	r1, [r3, #0]
   12042:	e6c4      	b.n	11dce <_malloc_r+0x2ba>
   12044:	f240 5154 	movw	r1, #1364	; 0x554
   12048:	428b      	cmp	r3, r1
   1204a:	d80b      	bhi.n	12064 <_malloc_r+0x550>
   1204c:	0c93      	lsrs	r3, r2, #18
   1204e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   12052:	00c9      	lsls	r1, r1, #3
   12054:	337c      	adds	r3, #124	; 0x7c
   12056:	e6f3      	b.n	11e40 <_malloc_r+0x32c>
   12058:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1205c:	207f      	movs	r0, #127	; 0x7f
   1205e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   12062:	e59d      	b.n	11ba0 <_malloc_r+0x8c>
   12064:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   12068:	237e      	movs	r3, #126	; 0x7e
   1206a:	e6e9      	b.n	11e40 <_malloc_r+0x32c>
   1206c:	687b      	ldr	r3, [r7, #4]
   1206e:	e770      	b.n	11f52 <_malloc_r+0x43e>
   12070:	1fffa140 	.word	0x1fffa140

00012074 <__malloc_lock>:
   12074:	4801      	ldr	r0, [pc, #4]	; (1207c <__malloc_lock+0x8>)
   12076:	f000 bb89 	b.w	1278c <__retarget_lock_acquire_recursive>
   1207a:	bf00      	nop
   1207c:	1fffa2b4 	.word	0x1fffa2b4

00012080 <__malloc_unlock>:
   12080:	4801      	ldr	r0, [pc, #4]	; (12088 <__malloc_unlock+0x8>)
   12082:	f000 bb85 	b.w	12790 <__retarget_lock_release_recursive>
   12086:	bf00      	nop
   12088:	1fffa2b4 	.word	0x1fffa2b4

0001208c <realloc>:
   1208c:	b410      	push	{r4}
   1208e:	4c04      	ldr	r4, [pc, #16]	; (120a0 <realloc+0x14>)
   12090:	4603      	mov	r3, r0
   12092:	460a      	mov	r2, r1
   12094:	6820      	ldr	r0, [r4, #0]
   12096:	bc10      	pop	{r4}
   12098:	4619      	mov	r1, r3
   1209a:	f000 b803 	b.w	120a4 <_realloc_r>
   1209e:	bf00      	nop
   120a0:	1fff98e8 	.word	0x1fff98e8

000120a4 <_realloc_r>:
   120a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120a8:	4617      	mov	r7, r2
   120aa:	2900      	cmp	r1, #0
   120ac:	f000 8098 	beq.w	121e0 <_realloc_r+0x13c>
   120b0:	460c      	mov	r4, r1
   120b2:	f107 050b 	add.w	r5, r7, #11
   120b6:	4680      	mov	r8, r0
   120b8:	f7ff ffdc 	bl	12074 <__malloc_lock>
   120bc:	2d16      	cmp	r5, #22
   120be:	f854 1c04 	ldr.w	r1, [r4, #-4]
   120c2:	d85b      	bhi.n	1217c <_realloc_r+0xd8>
   120c4:	2510      	movs	r5, #16
   120c6:	462a      	mov	r2, r5
   120c8:	42af      	cmp	r7, r5
   120ca:	d85c      	bhi.n	12186 <_realloc_r+0xe2>
   120cc:	f021 0603 	bic.w	r6, r1, #3
   120d0:	4296      	cmp	r6, r2
   120d2:	f1a4 0908 	sub.w	r9, r4, #8
   120d6:	da62      	bge.n	1219e <_realloc_r+0xfa>
   120d8:	4bbc      	ldr	r3, [pc, #752]	; (123cc <_realloc_r+0x328>)
   120da:	f8d3 c008 	ldr.w	ip, [r3, #8]
   120de:	eb09 0006 	add.w	r0, r9, r6
   120e2:	4584      	cmp	ip, r0
   120e4:	f000 8097 	beq.w	12216 <_realloc_r+0x172>
   120e8:	f8d0 c004 	ldr.w	ip, [r0, #4]
   120ec:	f02c 0301 	bic.w	r3, ip, #1
   120f0:	4403      	add	r3, r0
   120f2:	685b      	ldr	r3, [r3, #4]
   120f4:	07db      	lsls	r3, r3, #31
   120f6:	d468      	bmi.n	121ca <_realloc_r+0x126>
   120f8:	f02c 0c03 	bic.w	ip, ip, #3
   120fc:	eb06 030c 	add.w	r3, r6, ip
   12100:	4293      	cmp	r3, r2
   12102:	da47      	bge.n	12194 <_realloc_r+0xf0>
   12104:	07cb      	lsls	r3, r1, #31
   12106:	d410      	bmi.n	1212a <_realloc_r+0x86>
   12108:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1210c:	eba9 0a03 	sub.w	sl, r9, r3
   12110:	f8da 3004 	ldr.w	r3, [sl, #4]
   12114:	f023 0103 	bic.w	r1, r3, #3
   12118:	448c      	add	ip, r1
   1211a:	44b4      	add	ip, r6
   1211c:	4594      	cmp	ip, r2
   1211e:	f280 8111 	bge.w	12344 <_realloc_r+0x2a0>
   12122:	1873      	adds	r3, r6, r1
   12124:	4293      	cmp	r3, r2
   12126:	f280 80e8 	bge.w	122fa <_realloc_r+0x256>
   1212a:	4639      	mov	r1, r7
   1212c:	4640      	mov	r0, r8
   1212e:	f7ff fcf1 	bl	11b14 <_malloc_r>
   12132:	4607      	mov	r7, r0
   12134:	b1e0      	cbz	r0, 12170 <_realloc_r+0xcc>
   12136:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1213a:	f023 0301 	bic.w	r3, r3, #1
   1213e:	444b      	add	r3, r9
   12140:	f1a0 0208 	sub.w	r2, r0, #8
   12144:	4293      	cmp	r3, r2
   12146:	f000 80d2 	beq.w	122ee <_realloc_r+0x24a>
   1214a:	1f32      	subs	r2, r6, #4
   1214c:	2a24      	cmp	r2, #36	; 0x24
   1214e:	f200 80f5 	bhi.w	1233c <_realloc_r+0x298>
   12152:	2a13      	cmp	r2, #19
   12154:	f200 80ac 	bhi.w	122b0 <_realloc_r+0x20c>
   12158:	4603      	mov	r3, r0
   1215a:	4622      	mov	r2, r4
   1215c:	6811      	ldr	r1, [r2, #0]
   1215e:	6019      	str	r1, [r3, #0]
   12160:	6851      	ldr	r1, [r2, #4]
   12162:	6059      	str	r1, [r3, #4]
   12164:	6892      	ldr	r2, [r2, #8]
   12166:	609a      	str	r2, [r3, #8]
   12168:	4621      	mov	r1, r4
   1216a:	4640      	mov	r0, r8
   1216c:	f000 fc3a 	bl	129e4 <_free_r>
   12170:	4640      	mov	r0, r8
   12172:	f7ff ff85 	bl	12080 <__malloc_unlock>
   12176:	4638      	mov	r0, r7
   12178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1217c:	f025 0507 	bic.w	r5, r5, #7
   12180:	2d00      	cmp	r5, #0
   12182:	462a      	mov	r2, r5
   12184:	daa0      	bge.n	120c8 <_realloc_r+0x24>
   12186:	230c      	movs	r3, #12
   12188:	f8c8 3000 	str.w	r3, [r8]
   1218c:	2700      	movs	r7, #0
   1218e:	4638      	mov	r0, r7
   12190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12194:	461e      	mov	r6, r3
   12196:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1219a:	60d3      	str	r3, [r2, #12]
   1219c:	609a      	str	r2, [r3, #8]
   1219e:	1b73      	subs	r3, r6, r5
   121a0:	2b0f      	cmp	r3, #15
   121a2:	d822      	bhi.n	121ea <_realloc_r+0x146>
   121a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   121a8:	f003 0301 	and.w	r3, r3, #1
   121ac:	4333      	orrs	r3, r6
   121ae:	444e      	add	r6, r9
   121b0:	f8c9 3004 	str.w	r3, [r9, #4]
   121b4:	6873      	ldr	r3, [r6, #4]
   121b6:	f043 0301 	orr.w	r3, r3, #1
   121ba:	6073      	str	r3, [r6, #4]
   121bc:	4640      	mov	r0, r8
   121be:	4627      	mov	r7, r4
   121c0:	f7ff ff5e 	bl	12080 <__malloc_unlock>
   121c4:	4638      	mov	r0, r7
   121c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121ca:	07c9      	lsls	r1, r1, #31
   121cc:	d4ad      	bmi.n	1212a <_realloc_r+0x86>
   121ce:	f854 3c08 	ldr.w	r3, [r4, #-8]
   121d2:	eba9 0a03 	sub.w	sl, r9, r3
   121d6:	f8da 1004 	ldr.w	r1, [sl, #4]
   121da:	f021 0103 	bic.w	r1, r1, #3
   121de:	e7a0      	b.n	12122 <_realloc_r+0x7e>
   121e0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121e4:	4611      	mov	r1, r2
   121e6:	f7ff bc95 	b.w	11b14 <_malloc_r>
   121ea:	f8d9 2004 	ldr.w	r2, [r9, #4]
   121ee:	eb09 0105 	add.w	r1, r9, r5
   121f2:	f002 0201 	and.w	r2, r2, #1
   121f6:	444e      	add	r6, r9
   121f8:	f043 0301 	orr.w	r3, r3, #1
   121fc:	432a      	orrs	r2, r5
   121fe:	f8c9 2004 	str.w	r2, [r9, #4]
   12202:	604b      	str	r3, [r1, #4]
   12204:	6873      	ldr	r3, [r6, #4]
   12206:	f043 0301 	orr.w	r3, r3, #1
   1220a:	3108      	adds	r1, #8
   1220c:	6073      	str	r3, [r6, #4]
   1220e:	4640      	mov	r0, r8
   12210:	f000 fbe8 	bl	129e4 <_free_r>
   12214:	e7d2      	b.n	121bc <_realloc_r+0x118>
   12216:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1221a:	f020 0b03 	bic.w	fp, r0, #3
   1221e:	eb06 0c0b 	add.w	ip, r6, fp
   12222:	f105 0010 	add.w	r0, r5, #16
   12226:	4584      	cmp	ip, r0
   12228:	da4d      	bge.n	122c6 <_realloc_r+0x222>
   1222a:	07c9      	lsls	r1, r1, #31
   1222c:	f53f af7d 	bmi.w	1212a <_realloc_r+0x86>
   12230:	f854 1c08 	ldr.w	r1, [r4, #-8]
   12234:	eba9 0a01 	sub.w	sl, r9, r1
   12238:	f8da 1004 	ldr.w	r1, [sl, #4]
   1223c:	f021 0103 	bic.w	r1, r1, #3
   12240:	448b      	add	fp, r1
   12242:	44b3      	add	fp, r6
   12244:	4558      	cmp	r0, fp
   12246:	f73f af6c 	bgt.w	12122 <_realloc_r+0x7e>
   1224a:	4657      	mov	r7, sl
   1224c:	f8da 100c 	ldr.w	r1, [sl, #12]
   12250:	f857 0f08 	ldr.w	r0, [r7, #8]!
   12254:	1f32      	subs	r2, r6, #4
   12256:	2a24      	cmp	r2, #36	; 0x24
   12258:	60c1      	str	r1, [r0, #12]
   1225a:	6088      	str	r0, [r1, #8]
   1225c:	f200 80db 	bhi.w	12416 <_realloc_r+0x372>
   12260:	2a13      	cmp	r2, #19
   12262:	f240 80d6 	bls.w	12412 <_realloc_r+0x36e>
   12266:	6821      	ldr	r1, [r4, #0]
   12268:	f8ca 1008 	str.w	r1, [sl, #8]
   1226c:	6861      	ldr	r1, [r4, #4]
   1226e:	f8ca 100c 	str.w	r1, [sl, #12]
   12272:	2a1b      	cmp	r2, #27
   12274:	f200 80df 	bhi.w	12436 <_realloc_r+0x392>
   12278:	3408      	adds	r4, #8
   1227a:	f10a 0210 	add.w	r2, sl, #16
   1227e:	6821      	ldr	r1, [r4, #0]
   12280:	6011      	str	r1, [r2, #0]
   12282:	6861      	ldr	r1, [r4, #4]
   12284:	6051      	str	r1, [r2, #4]
   12286:	68a1      	ldr	r1, [r4, #8]
   12288:	6091      	str	r1, [r2, #8]
   1228a:	eb0a 0105 	add.w	r1, sl, r5
   1228e:	ebab 0205 	sub.w	r2, fp, r5
   12292:	f042 0201 	orr.w	r2, r2, #1
   12296:	6099      	str	r1, [r3, #8]
   12298:	604a      	str	r2, [r1, #4]
   1229a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1229e:	f003 0301 	and.w	r3, r3, #1
   122a2:	432b      	orrs	r3, r5
   122a4:	4640      	mov	r0, r8
   122a6:	f8ca 3004 	str.w	r3, [sl, #4]
   122aa:	f7ff fee9 	bl	12080 <__malloc_unlock>
   122ae:	e76e      	b.n	1218e <_realloc_r+0xea>
   122b0:	6823      	ldr	r3, [r4, #0]
   122b2:	6003      	str	r3, [r0, #0]
   122b4:	6863      	ldr	r3, [r4, #4]
   122b6:	6043      	str	r3, [r0, #4]
   122b8:	2a1b      	cmp	r2, #27
   122ba:	d868      	bhi.n	1238e <_realloc_r+0x2ea>
   122bc:	f104 0208 	add.w	r2, r4, #8
   122c0:	f100 0308 	add.w	r3, r0, #8
   122c4:	e74a      	b.n	1215c <_realloc_r+0xb8>
   122c6:	eb09 0205 	add.w	r2, r9, r5
   122ca:	609a      	str	r2, [r3, #8]
   122cc:	ebac 0305 	sub.w	r3, ip, r5
   122d0:	f043 0301 	orr.w	r3, r3, #1
   122d4:	6053      	str	r3, [r2, #4]
   122d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   122da:	f003 0301 	and.w	r3, r3, #1
   122de:	432b      	orrs	r3, r5
   122e0:	4640      	mov	r0, r8
   122e2:	f844 3c04 	str.w	r3, [r4, #-4]
   122e6:	f7ff fecb 	bl	12080 <__malloc_unlock>
   122ea:	4627      	mov	r7, r4
   122ec:	e74f      	b.n	1218e <_realloc_r+0xea>
   122ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
   122f2:	f023 0303 	bic.w	r3, r3, #3
   122f6:	441e      	add	r6, r3
   122f8:	e751      	b.n	1219e <_realloc_r+0xfa>
   122fa:	4657      	mov	r7, sl
   122fc:	f8da 100c 	ldr.w	r1, [sl, #12]
   12300:	f857 0f08 	ldr.w	r0, [r7, #8]!
   12304:	1f32      	subs	r2, r6, #4
   12306:	2a24      	cmp	r2, #36	; 0x24
   12308:	60c1      	str	r1, [r0, #12]
   1230a:	6088      	str	r0, [r1, #8]
   1230c:	d84c      	bhi.n	123a8 <_realloc_r+0x304>
   1230e:	2a13      	cmp	r2, #19
   12310:	d948      	bls.n	123a4 <_realloc_r+0x300>
   12312:	6821      	ldr	r1, [r4, #0]
   12314:	f8ca 1008 	str.w	r1, [sl, #8]
   12318:	6861      	ldr	r1, [r4, #4]
   1231a:	f8ca 100c 	str.w	r1, [sl, #12]
   1231e:	2a1b      	cmp	r2, #27
   12320:	d856      	bhi.n	123d0 <_realloc_r+0x32c>
   12322:	3408      	adds	r4, #8
   12324:	f10a 0210 	add.w	r2, sl, #16
   12328:	461e      	mov	r6, r3
   1232a:	6823      	ldr	r3, [r4, #0]
   1232c:	6013      	str	r3, [r2, #0]
   1232e:	6863      	ldr	r3, [r4, #4]
   12330:	6053      	str	r3, [r2, #4]
   12332:	68a3      	ldr	r3, [r4, #8]
   12334:	6093      	str	r3, [r2, #8]
   12336:	46d1      	mov	r9, sl
   12338:	463c      	mov	r4, r7
   1233a:	e730      	b.n	1219e <_realloc_r+0xfa>
   1233c:	4621      	mov	r1, r4
   1233e:	f000 f8a3 	bl	12488 <memmove>
   12342:	e711      	b.n	12168 <_realloc_r+0xc4>
   12344:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   12348:	4657      	mov	r7, sl
   1234a:	60cb      	str	r3, [r1, #12]
   1234c:	6099      	str	r1, [r3, #8]
   1234e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   12352:	f8da 300c 	ldr.w	r3, [sl, #12]
   12356:	60cb      	str	r3, [r1, #12]
   12358:	1f32      	subs	r2, r6, #4
   1235a:	2a24      	cmp	r2, #36	; 0x24
   1235c:	6099      	str	r1, [r3, #8]
   1235e:	d82d      	bhi.n	123bc <_realloc_r+0x318>
   12360:	2a13      	cmp	r2, #19
   12362:	d929      	bls.n	123b8 <_realloc_r+0x314>
   12364:	6823      	ldr	r3, [r4, #0]
   12366:	f8ca 3008 	str.w	r3, [sl, #8]
   1236a:	6863      	ldr	r3, [r4, #4]
   1236c:	f8ca 300c 	str.w	r3, [sl, #12]
   12370:	2a1b      	cmp	r2, #27
   12372:	d842      	bhi.n	123fa <_realloc_r+0x356>
   12374:	3408      	adds	r4, #8
   12376:	f10a 0310 	add.w	r3, sl, #16
   1237a:	6822      	ldr	r2, [r4, #0]
   1237c:	601a      	str	r2, [r3, #0]
   1237e:	6862      	ldr	r2, [r4, #4]
   12380:	605a      	str	r2, [r3, #4]
   12382:	68a2      	ldr	r2, [r4, #8]
   12384:	609a      	str	r2, [r3, #8]
   12386:	4666      	mov	r6, ip
   12388:	46d1      	mov	r9, sl
   1238a:	463c      	mov	r4, r7
   1238c:	e707      	b.n	1219e <_realloc_r+0xfa>
   1238e:	68a3      	ldr	r3, [r4, #8]
   12390:	6083      	str	r3, [r0, #8]
   12392:	68e3      	ldr	r3, [r4, #12]
   12394:	60c3      	str	r3, [r0, #12]
   12396:	2a24      	cmp	r2, #36	; 0x24
   12398:	d026      	beq.n	123e8 <_realloc_r+0x344>
   1239a:	f104 0210 	add.w	r2, r4, #16
   1239e:	f100 0310 	add.w	r3, r0, #16
   123a2:	e6db      	b.n	1215c <_realloc_r+0xb8>
   123a4:	463a      	mov	r2, r7
   123a6:	e7bf      	b.n	12328 <_realloc_r+0x284>
   123a8:	4621      	mov	r1, r4
   123aa:	4638      	mov	r0, r7
   123ac:	461e      	mov	r6, r3
   123ae:	46d1      	mov	r9, sl
   123b0:	f000 f86a 	bl	12488 <memmove>
   123b4:	463c      	mov	r4, r7
   123b6:	e6f2      	b.n	1219e <_realloc_r+0xfa>
   123b8:	463b      	mov	r3, r7
   123ba:	e7de      	b.n	1237a <_realloc_r+0x2d6>
   123bc:	4621      	mov	r1, r4
   123be:	4638      	mov	r0, r7
   123c0:	4666      	mov	r6, ip
   123c2:	46d1      	mov	r9, sl
   123c4:	f000 f860 	bl	12488 <memmove>
   123c8:	463c      	mov	r4, r7
   123ca:	e6e8      	b.n	1219e <_realloc_r+0xfa>
   123cc:	1fff93b4 	.word	0x1fff93b4
   123d0:	68a1      	ldr	r1, [r4, #8]
   123d2:	f8ca 1010 	str.w	r1, [sl, #16]
   123d6:	68e1      	ldr	r1, [r4, #12]
   123d8:	f8ca 1014 	str.w	r1, [sl, #20]
   123dc:	2a24      	cmp	r2, #36	; 0x24
   123de:	d020      	beq.n	12422 <_realloc_r+0x37e>
   123e0:	3410      	adds	r4, #16
   123e2:	f10a 0218 	add.w	r2, sl, #24
   123e6:	e79f      	b.n	12328 <_realloc_r+0x284>
   123e8:	6923      	ldr	r3, [r4, #16]
   123ea:	6103      	str	r3, [r0, #16]
   123ec:	6961      	ldr	r1, [r4, #20]
   123ee:	6141      	str	r1, [r0, #20]
   123f0:	f104 0218 	add.w	r2, r4, #24
   123f4:	f100 0318 	add.w	r3, r0, #24
   123f8:	e6b0      	b.n	1215c <_realloc_r+0xb8>
   123fa:	68a3      	ldr	r3, [r4, #8]
   123fc:	f8ca 3010 	str.w	r3, [sl, #16]
   12400:	68e3      	ldr	r3, [r4, #12]
   12402:	f8ca 3014 	str.w	r3, [sl, #20]
   12406:	2a24      	cmp	r2, #36	; 0x24
   12408:	d021      	beq.n	1244e <_realloc_r+0x3aa>
   1240a:	3410      	adds	r4, #16
   1240c:	f10a 0318 	add.w	r3, sl, #24
   12410:	e7b3      	b.n	1237a <_realloc_r+0x2d6>
   12412:	463a      	mov	r2, r7
   12414:	e733      	b.n	1227e <_realloc_r+0x1da>
   12416:	4621      	mov	r1, r4
   12418:	4638      	mov	r0, r7
   1241a:	f000 f835 	bl	12488 <memmove>
   1241e:	4b16      	ldr	r3, [pc, #88]	; (12478 <_realloc_r+0x3d4>)
   12420:	e733      	b.n	1228a <_realloc_r+0x1e6>
   12422:	6922      	ldr	r2, [r4, #16]
   12424:	f8ca 2018 	str.w	r2, [sl, #24]
   12428:	6962      	ldr	r2, [r4, #20]
   1242a:	f8ca 201c 	str.w	r2, [sl, #28]
   1242e:	3418      	adds	r4, #24
   12430:	f10a 0220 	add.w	r2, sl, #32
   12434:	e778      	b.n	12328 <_realloc_r+0x284>
   12436:	68a1      	ldr	r1, [r4, #8]
   12438:	f8ca 1010 	str.w	r1, [sl, #16]
   1243c:	68e1      	ldr	r1, [r4, #12]
   1243e:	f8ca 1014 	str.w	r1, [sl, #20]
   12442:	2a24      	cmp	r2, #36	; 0x24
   12444:	d00d      	beq.n	12462 <_realloc_r+0x3be>
   12446:	3410      	adds	r4, #16
   12448:	f10a 0218 	add.w	r2, sl, #24
   1244c:	e717      	b.n	1227e <_realloc_r+0x1da>
   1244e:	6923      	ldr	r3, [r4, #16]
   12450:	f8ca 3018 	str.w	r3, [sl, #24]
   12454:	6963      	ldr	r3, [r4, #20]
   12456:	f8ca 301c 	str.w	r3, [sl, #28]
   1245a:	3418      	adds	r4, #24
   1245c:	f10a 0320 	add.w	r3, sl, #32
   12460:	e78b      	b.n	1237a <_realloc_r+0x2d6>
   12462:	6922      	ldr	r2, [r4, #16]
   12464:	f8ca 2018 	str.w	r2, [sl, #24]
   12468:	6962      	ldr	r2, [r4, #20]
   1246a:	f8ca 201c 	str.w	r2, [sl, #28]
   1246e:	3418      	adds	r4, #24
   12470:	f10a 0220 	add.w	r2, sl, #32
   12474:	e703      	b.n	1227e <_realloc_r+0x1da>
   12476:	bf00      	nop
   12478:	1fff93b4 	.word	0x1fff93b4

0001247c <__cxa_atexit>:
   1247c:	4613      	mov	r3, r2
   1247e:	460a      	mov	r2, r1
   12480:	4601      	mov	r1, r0
   12482:	2002      	movs	r0, #2
   12484:	f000 ba0a 	b.w	1289c <__register_exitproc>

00012488 <memmove>:
   12488:	4288      	cmp	r0, r1
   1248a:	d90d      	bls.n	124a8 <memmove+0x20>
   1248c:	188b      	adds	r3, r1, r2
   1248e:	4283      	cmp	r3, r0
   12490:	d90a      	bls.n	124a8 <memmove+0x20>
   12492:	eb00 0c02 	add.w	ip, r0, r2
   12496:	b1ba      	cbz	r2, 124c8 <memmove+0x40>
   12498:	4662      	mov	r2, ip
   1249a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1249e:	f802 cd01 	strb.w	ip, [r2, #-1]!
   124a2:	4299      	cmp	r1, r3
   124a4:	d1f9      	bne.n	1249a <memmove+0x12>
   124a6:	4770      	bx	lr
   124a8:	2a0f      	cmp	r2, #15
   124aa:	d80e      	bhi.n	124ca <memmove+0x42>
   124ac:	4603      	mov	r3, r0
   124ae:	f102 3cff 	add.w	ip, r2, #4294967295
   124b2:	b14a      	cbz	r2, 124c8 <memmove+0x40>
   124b4:	f10c 0c01 	add.w	ip, ip, #1
   124b8:	3b01      	subs	r3, #1
   124ba:	448c      	add	ip, r1
   124bc:	f811 2b01 	ldrb.w	r2, [r1], #1
   124c0:	f803 2f01 	strb.w	r2, [r3, #1]!
   124c4:	4561      	cmp	r1, ip
   124c6:	d1f9      	bne.n	124bc <memmove+0x34>
   124c8:	4770      	bx	lr
   124ca:	ea40 0301 	orr.w	r3, r0, r1
   124ce:	079b      	lsls	r3, r3, #30
   124d0:	d150      	bne.n	12574 <memmove+0xec>
   124d2:	f1a2 0310 	sub.w	r3, r2, #16
   124d6:	b570      	push	{r4, r5, r6, lr}
   124d8:	f101 0c20 	add.w	ip, r1, #32
   124dc:	f023 050f 	bic.w	r5, r3, #15
   124e0:	f101 0e10 	add.w	lr, r1, #16
   124e4:	f100 0410 	add.w	r4, r0, #16
   124e8:	44ac      	add	ip, r5
   124ea:	091b      	lsrs	r3, r3, #4
   124ec:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   124f0:	f844 5c10 	str.w	r5, [r4, #-16]
   124f4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   124f8:	f844 5c0c 	str.w	r5, [r4, #-12]
   124fc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   12500:	f844 5c08 	str.w	r5, [r4, #-8]
   12504:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   12508:	f844 5c04 	str.w	r5, [r4, #-4]
   1250c:	f10e 0e10 	add.w	lr, lr, #16
   12510:	45e6      	cmp	lr, ip
   12512:	f104 0410 	add.w	r4, r4, #16
   12516:	d1e9      	bne.n	124ec <memmove+0x64>
   12518:	3301      	adds	r3, #1
   1251a:	f012 0f0c 	tst.w	r2, #12
   1251e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   12522:	f002 040f 	and.w	r4, r2, #15
   12526:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   1252a:	d027      	beq.n	1257c <memmove+0xf4>
   1252c:	3c04      	subs	r4, #4
   1252e:	f024 0603 	bic.w	r6, r4, #3
   12532:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   12536:	441e      	add	r6, r3
   12538:	1f1c      	subs	r4, r3, #4
   1253a:	468e      	mov	lr, r1
   1253c:	f85e 5b04 	ldr.w	r5, [lr], #4
   12540:	f844 5f04 	str.w	r5, [r4, #4]!
   12544:	42b4      	cmp	r4, r6
   12546:	d1f9      	bne.n	1253c <memmove+0xb4>
   12548:	f10c 0401 	add.w	r4, ip, #1
   1254c:	f002 0203 	and.w	r2, r2, #3
   12550:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12554:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   12558:	f102 3cff 	add.w	ip, r2, #4294967295
   1255c:	b14a      	cbz	r2, 12572 <memmove+0xea>
   1255e:	f10c 0c01 	add.w	ip, ip, #1
   12562:	3b01      	subs	r3, #1
   12564:	448c      	add	ip, r1
   12566:	f811 2b01 	ldrb.w	r2, [r1], #1
   1256a:	f803 2f01 	strb.w	r2, [r3, #1]!
   1256e:	4561      	cmp	r1, ip
   12570:	d1f9      	bne.n	12566 <memmove+0xde>
   12572:	bd70      	pop	{r4, r5, r6, pc}
   12574:	f102 3cff 	add.w	ip, r2, #4294967295
   12578:	4603      	mov	r3, r0
   1257a:	e79b      	b.n	124b4 <memmove+0x2c>
   1257c:	4622      	mov	r2, r4
   1257e:	e7eb      	b.n	12558 <memmove+0xd0>

00012580 <memset>:
   12580:	0783      	lsls	r3, r0, #30
   12582:	b530      	push	{r4, r5, lr}
   12584:	d048      	beq.n	12618 <memset+0x98>
   12586:	1e54      	subs	r4, r2, #1
   12588:	2a00      	cmp	r2, #0
   1258a:	d03f      	beq.n	1260c <memset+0x8c>
   1258c:	b2ca      	uxtb	r2, r1
   1258e:	4603      	mov	r3, r0
   12590:	e001      	b.n	12596 <memset+0x16>
   12592:	3c01      	subs	r4, #1
   12594:	d33a      	bcc.n	1260c <memset+0x8c>
   12596:	f803 2b01 	strb.w	r2, [r3], #1
   1259a:	079d      	lsls	r5, r3, #30
   1259c:	d1f9      	bne.n	12592 <memset+0x12>
   1259e:	2c03      	cmp	r4, #3
   125a0:	d92d      	bls.n	125fe <memset+0x7e>
   125a2:	b2cd      	uxtb	r5, r1
   125a4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   125a8:	2c0f      	cmp	r4, #15
   125aa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   125ae:	d936      	bls.n	1261e <memset+0x9e>
   125b0:	f1a4 0210 	sub.w	r2, r4, #16
   125b4:	f022 0c0f 	bic.w	ip, r2, #15
   125b8:	f103 0e20 	add.w	lr, r3, #32
   125bc:	44e6      	add	lr, ip
   125be:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   125c2:	f103 0210 	add.w	r2, r3, #16
   125c6:	e942 5504 	strd	r5, r5, [r2, #-16]
   125ca:	e942 5502 	strd	r5, r5, [r2, #-8]
   125ce:	3210      	adds	r2, #16
   125d0:	4572      	cmp	r2, lr
   125d2:	d1f8      	bne.n	125c6 <memset+0x46>
   125d4:	f10c 0201 	add.w	r2, ip, #1
   125d8:	f014 0f0c 	tst.w	r4, #12
   125dc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   125e0:	f004 0c0f 	and.w	ip, r4, #15
   125e4:	d013      	beq.n	1260e <memset+0x8e>
   125e6:	f1ac 0304 	sub.w	r3, ip, #4
   125ea:	f023 0303 	bic.w	r3, r3, #3
   125ee:	3304      	adds	r3, #4
   125f0:	4413      	add	r3, r2
   125f2:	f842 5b04 	str.w	r5, [r2], #4
   125f6:	4293      	cmp	r3, r2
   125f8:	d1fb      	bne.n	125f2 <memset+0x72>
   125fa:	f00c 0403 	and.w	r4, ip, #3
   125fe:	b12c      	cbz	r4, 1260c <memset+0x8c>
   12600:	b2c9      	uxtb	r1, r1
   12602:	441c      	add	r4, r3
   12604:	f803 1b01 	strb.w	r1, [r3], #1
   12608:	429c      	cmp	r4, r3
   1260a:	d1fb      	bne.n	12604 <memset+0x84>
   1260c:	bd30      	pop	{r4, r5, pc}
   1260e:	4664      	mov	r4, ip
   12610:	4613      	mov	r3, r2
   12612:	2c00      	cmp	r4, #0
   12614:	d1f4      	bne.n	12600 <memset+0x80>
   12616:	e7f9      	b.n	1260c <memset+0x8c>
   12618:	4603      	mov	r3, r0
   1261a:	4614      	mov	r4, r2
   1261c:	e7bf      	b.n	1259e <memset+0x1e>
   1261e:	461a      	mov	r2, r3
   12620:	46a4      	mov	ip, r4
   12622:	e7e0      	b.n	125e6 <memset+0x66>

00012624 <strncmp>:
   12624:	2a00      	cmp	r2, #0
   12626:	d03e      	beq.n	126a6 <strncmp+0x82>
   12628:	ea40 0301 	orr.w	r3, r0, r1
   1262c:	079b      	lsls	r3, r3, #30
   1262e:	b530      	push	{r4, r5, lr}
   12630:	4684      	mov	ip, r0
   12632:	d12f      	bne.n	12694 <strncmp+0x70>
   12634:	2a03      	cmp	r2, #3
   12636:	d92d      	bls.n	12694 <strncmp+0x70>
   12638:	460b      	mov	r3, r1
   1263a:	e008      	b.n	1264e <strncmp+0x2a>
   1263c:	3a04      	subs	r2, #4
   1263e:	4684      	mov	ip, r0
   12640:	4619      	mov	r1, r3
   12642:	d025      	beq.n	12690 <strncmp+0x6c>
   12644:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   12648:	d122      	bne.n	12690 <strncmp+0x6c>
   1264a:	2a03      	cmp	r2, #3
   1264c:	d922      	bls.n	12694 <strncmp+0x70>
   1264e:	6804      	ldr	r4, [r0, #0]
   12650:	4619      	mov	r1, r3
   12652:	f853 5b04 	ldr.w	r5, [r3], #4
   12656:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   1265a:	42ac      	cmp	r4, r5
   1265c:	4684      	mov	ip, r0
   1265e:	ea2e 0e04 	bic.w	lr, lr, r4
   12662:	f100 0004 	add.w	r0, r0, #4
   12666:	d0e9      	beq.n	1263c <strncmp+0x18>
   12668:	f89c 0000 	ldrb.w	r0, [ip]
   1266c:	780c      	ldrb	r4, [r1, #0]
   1266e:	42a0      	cmp	r0, r4
   12670:	d11b      	bne.n	126aa <strncmp+0x86>
   12672:	46e6      	mov	lr, ip
   12674:	b168      	cbz	r0, 12692 <strncmp+0x6e>
   12676:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   1267a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1267e:	eba2 030e 	sub.w	r3, r2, lr
   12682:	42a0      	cmp	r0, r4
   12684:	f103 33ff 	add.w	r3, r3, #4294967295
   12688:	d10f      	bne.n	126aa <strncmp+0x86>
   1268a:	eb1c 0303 	adds.w	r3, ip, r3
   1268e:	d1f1      	bne.n	12674 <strncmp+0x50>
   12690:	2000      	movs	r0, #0
   12692:	bd30      	pop	{r4, r5, pc}
   12694:	f89c 0000 	ldrb.w	r0, [ip]
   12698:	780c      	ldrb	r4, [r1, #0]
   1269a:	4284      	cmp	r4, r0
   1269c:	d105      	bne.n	126aa <strncmp+0x86>
   1269e:	2a01      	cmp	r2, #1
   126a0:	d0f6      	beq.n	12690 <strncmp+0x6c>
   126a2:	46e6      	mov	lr, ip
   126a4:	e7e6      	b.n	12674 <strncmp+0x50>
   126a6:	4610      	mov	r0, r2
   126a8:	4770      	bx	lr
   126aa:	1b00      	subs	r0, r0, r4
   126ac:	bd30      	pop	{r4, r5, pc}
   126ae:	bf00      	nop

000126b0 <strncpy>:
   126b0:	ea40 0301 	orr.w	r3, r0, r1
   126b4:	079b      	lsls	r3, r3, #30
   126b6:	b530      	push	{r4, r5, lr}
   126b8:	d101      	bne.n	126be <strncpy+0xe>
   126ba:	2a03      	cmp	r2, #3
   126bc:	d80f      	bhi.n	126de <strncpy+0x2e>
   126be:	4684      	mov	ip, r0
   126c0:	f101 3eff 	add.w	lr, r1, #4294967295
   126c4:	e007      	b.n	126d6 <strncpy+0x26>
   126c6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   126ca:	f803 1b01 	strb.w	r1, [r3], #1
   126ce:	1e54      	subs	r4, r2, #1
   126d0:	b1c1      	cbz	r1, 12704 <strncpy+0x54>
   126d2:	469c      	mov	ip, r3
   126d4:	4622      	mov	r2, r4
   126d6:	4663      	mov	r3, ip
   126d8:	2a00      	cmp	r2, #0
   126da:	d1f4      	bne.n	126c6 <strncpy+0x16>
   126dc:	bd30      	pop	{r4, r5, pc}
   126de:	460b      	mov	r3, r1
   126e0:	4684      	mov	ip, r0
   126e2:	4619      	mov	r1, r3
   126e4:	f853 5b04 	ldr.w	r5, [r3], #4
   126e8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   126ec:	ea24 0405 	bic.w	r4, r4, r5
   126f0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   126f4:	d1e4      	bne.n	126c0 <strncpy+0x10>
   126f6:	3a04      	subs	r2, #4
   126f8:	2a03      	cmp	r2, #3
   126fa:	f84c 5b04 	str.w	r5, [ip], #4
   126fe:	4619      	mov	r1, r3
   12700:	d8ef      	bhi.n	126e2 <strncpy+0x32>
   12702:	e7dd      	b.n	126c0 <strncpy+0x10>
   12704:	4494      	add	ip, r2
   12706:	2c00      	cmp	r4, #0
   12708:	d0e8      	beq.n	126dc <strncpy+0x2c>
   1270a:	f803 1b01 	strb.w	r1, [r3], #1
   1270e:	4563      	cmp	r3, ip
   12710:	d1fb      	bne.n	1270a <strncpy+0x5a>
   12712:	bd30      	pop	{r4, r5, pc}

00012714 <_sbrk_r>:
   12714:	b538      	push	{r3, r4, r5, lr}
   12716:	4d07      	ldr	r5, [pc, #28]	; (12734 <_sbrk_r+0x20>)
   12718:	2200      	movs	r2, #0
   1271a:	4604      	mov	r4, r0
   1271c:	4608      	mov	r0, r1
   1271e:	602a      	str	r2, [r5, #0]
   12720:	f7fb ffb4 	bl	e68c <_sbrk>
   12724:	1c43      	adds	r3, r0, #1
   12726:	d000      	beq.n	1272a <_sbrk_r+0x16>
   12728:	bd38      	pop	{r3, r4, r5, pc}
   1272a:	682b      	ldr	r3, [r5, #0]
   1272c:	2b00      	cmp	r3, #0
   1272e:	d0fb      	beq.n	12728 <_sbrk_r+0x14>
   12730:	6023      	str	r3, [r4, #0]
   12732:	bd38      	pop	{r3, r4, r5, pc}
   12734:	1fffa2ac 	.word	0x1fffa2ac

00012738 <__errno>:
   12738:	4b01      	ldr	r3, [pc, #4]	; (12740 <__errno+0x8>)
   1273a:	6818      	ldr	r0, [r3, #0]
   1273c:	4770      	bx	lr
   1273e:	bf00      	nop
   12740:	1fff98e8 	.word	0x1fff98e8

00012744 <__libc_init_array>:
   12744:	b570      	push	{r4, r5, r6, lr}
   12746:	4e0d      	ldr	r6, [pc, #52]	; (1277c <__libc_init_array+0x38>)
   12748:	4d0d      	ldr	r5, [pc, #52]	; (12780 <__libc_init_array+0x3c>)
   1274a:	1b76      	subs	r6, r6, r5
   1274c:	10b6      	asrs	r6, r6, #2
   1274e:	d006      	beq.n	1275e <__libc_init_array+0x1a>
   12750:	2400      	movs	r4, #0
   12752:	f855 3b04 	ldr.w	r3, [r5], #4
   12756:	3401      	adds	r4, #1
   12758:	4798      	blx	r3
   1275a:	42a6      	cmp	r6, r4
   1275c:	d1f9      	bne.n	12752 <__libc_init_array+0xe>
   1275e:	4e09      	ldr	r6, [pc, #36]	; (12784 <__libc_init_array+0x40>)
   12760:	4d09      	ldr	r5, [pc, #36]	; (12788 <__libc_init_array+0x44>)
   12762:	1b76      	subs	r6, r6, r5
   12764:	f003 fc4e 	bl	16004 <_init>
   12768:	10b6      	asrs	r6, r6, #2
   1276a:	d006      	beq.n	1277a <__libc_init_array+0x36>
   1276c:	2400      	movs	r4, #0
   1276e:	f855 3b04 	ldr.w	r3, [r5], #4
   12772:	3401      	adds	r4, #1
   12774:	4798      	blx	r3
   12776:	42a6      	cmp	r6, r4
   12778:	d1f9      	bne.n	1276e <__libc_init_array+0x2a>
   1277a:	bd70      	pop	{r4, r5, r6, pc}
   1277c:	00016010 	.word	0x00016010
   12780:	00016010 	.word	0x00016010
   12784:	00016028 	.word	0x00016028
   12788:	00016010 	.word	0x00016010

0001278c <__retarget_lock_acquire_recursive>:
   1278c:	4770      	bx	lr
   1278e:	bf00      	nop

00012790 <__retarget_lock_release_recursive>:
   12790:	4770      	bx	lr
   12792:	bf00      	nop
   12794:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12798:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1279c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   127a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   127a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   127a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   127ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   127b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   127b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   127b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   127bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000127c0 <strlen>:
   127c0:	f890 f000 	pld	[r0]
   127c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   127c8:	f020 0107 	bic.w	r1, r0, #7
   127cc:	f06f 0c00 	mvn.w	ip, #0
   127d0:	f010 0407 	ands.w	r4, r0, #7
   127d4:	f891 f020 	pld	[r1, #32]
   127d8:	f040 8049 	bne.w	1286e <strlen+0xae>
   127dc:	f04f 0400 	mov.w	r4, #0
   127e0:	f06f 0007 	mvn.w	r0, #7
   127e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   127e8:	f891 f040 	pld	[r1, #64]	; 0x40
   127ec:	f100 0008 	add.w	r0, r0, #8
   127f0:	fa82 f24c 	uadd8	r2, r2, ip
   127f4:	faa4 f28c 	sel	r2, r4, ip
   127f8:	fa83 f34c 	uadd8	r3, r3, ip
   127fc:	faa2 f38c 	sel	r3, r2, ip
   12800:	bb4b      	cbnz	r3, 12856 <strlen+0x96>
   12802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12806:	fa82 f24c 	uadd8	r2, r2, ip
   1280a:	f100 0008 	add.w	r0, r0, #8
   1280e:	faa4 f28c 	sel	r2, r4, ip
   12812:	fa83 f34c 	uadd8	r3, r3, ip
   12816:	faa2 f38c 	sel	r3, r2, ip
   1281a:	b9e3      	cbnz	r3, 12856 <strlen+0x96>
   1281c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   12820:	fa82 f24c 	uadd8	r2, r2, ip
   12824:	f100 0008 	add.w	r0, r0, #8
   12828:	faa4 f28c 	sel	r2, r4, ip
   1282c:	fa83 f34c 	uadd8	r3, r3, ip
   12830:	faa2 f38c 	sel	r3, r2, ip
   12834:	b97b      	cbnz	r3, 12856 <strlen+0x96>
   12836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1283a:	f101 0120 	add.w	r1, r1, #32
   1283e:	fa82 f24c 	uadd8	r2, r2, ip
   12842:	f100 0008 	add.w	r0, r0, #8
   12846:	faa4 f28c 	sel	r2, r4, ip
   1284a:	fa83 f34c 	uadd8	r3, r3, ip
   1284e:	faa2 f38c 	sel	r3, r2, ip
   12852:	2b00      	cmp	r3, #0
   12854:	d0c6      	beq.n	127e4 <strlen+0x24>
   12856:	2a00      	cmp	r2, #0
   12858:	bf04      	itt	eq
   1285a:	3004      	addeq	r0, #4
   1285c:	461a      	moveq	r2, r3
   1285e:	ba12      	rev	r2, r2
   12860:	fab2 f282 	clz	r2, r2
   12864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1286c:	4770      	bx	lr
   1286e:	e9d1 2300 	ldrd	r2, r3, [r1]
   12872:	f004 0503 	and.w	r5, r4, #3
   12876:	f1c4 0000 	rsb	r0, r4, #0
   1287a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1287e:	f014 0f04 	tst.w	r4, #4
   12882:	f891 f040 	pld	[r1, #64]	; 0x40
   12886:	fa0c f505 	lsl.w	r5, ip, r5
   1288a:	ea62 0205 	orn	r2, r2, r5
   1288e:	bf1c      	itt	ne
   12890:	ea63 0305 	ornne	r3, r3, r5
   12894:	4662      	movne	r2, ip
   12896:	f04f 0400 	mov.w	r4, #0
   1289a:	e7a9      	b.n	127f0 <strlen+0x30>

0001289c <__register_exitproc>:
   1289c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   128a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 12918 <__register_exitproc+0x7c>
   128a4:	4606      	mov	r6, r0
   128a6:	f8da 0000 	ldr.w	r0, [sl]
   128aa:	4698      	mov	r8, r3
   128ac:	460f      	mov	r7, r1
   128ae:	4691      	mov	r9, r2
   128b0:	f7ff ff6c 	bl	1278c <__retarget_lock_acquire_recursive>
   128b4:	4b19      	ldr	r3, [pc, #100]	; (1291c <__register_exitproc+0x80>)
   128b6:	681c      	ldr	r4, [r3, #0]
   128b8:	b324      	cbz	r4, 12904 <__register_exitproc+0x68>
   128ba:	6865      	ldr	r5, [r4, #4]
   128bc:	2d1f      	cmp	r5, #31
   128be:	dc24      	bgt.n	1290a <__register_exitproc+0x6e>
   128c0:	b95e      	cbnz	r6, 128da <__register_exitproc+0x3e>
   128c2:	1c6b      	adds	r3, r5, #1
   128c4:	3502      	adds	r5, #2
   128c6:	f8da 0000 	ldr.w	r0, [sl]
   128ca:	6063      	str	r3, [r4, #4]
   128cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   128d0:	f7ff ff5e 	bl	12790 <__retarget_lock_release_recursive>
   128d4:	2000      	movs	r0, #0
   128d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   128da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   128de:	2301      	movs	r3, #1
   128e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   128e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   128e8:	40ab      	lsls	r3, r5
   128ea:	431a      	orrs	r2, r3
   128ec:	2e02      	cmp	r6, #2
   128ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   128f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   128f6:	d1e4      	bne.n	128c2 <__register_exitproc+0x26>
   128f8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   128fc:	431a      	orrs	r2, r3
   128fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   12902:	e7de      	b.n	128c2 <__register_exitproc+0x26>
   12904:	4c06      	ldr	r4, [pc, #24]	; (12920 <__register_exitproc+0x84>)
   12906:	601c      	str	r4, [r3, #0]
   12908:	e7d7      	b.n	128ba <__register_exitproc+0x1e>
   1290a:	f8da 0000 	ldr.w	r0, [sl]
   1290e:	f7ff ff3f 	bl	12790 <__retarget_lock_release_recursive>
   12912:	f04f 30ff 	mov.w	r0, #4294967295
   12916:	e7de      	b.n	128d6 <__register_exitproc+0x3a>
   12918:	1fff98ec 	.word	0x1fff98ec
   1291c:	1fffa448 	.word	0x1fffa448
   12920:	1fffa2b8 	.word	0x1fffa2b8

00012924 <register_fini>:
   12924:	4b02      	ldr	r3, [pc, #8]	; (12930 <register_fini+0xc>)
   12926:	b113      	cbz	r3, 1292e <register_fini+0xa>
   12928:	4802      	ldr	r0, [pc, #8]	; (12934 <register_fini+0x10>)
   1292a:	f000 b805 	b.w	12938 <atexit>
   1292e:	4770      	bx	lr
   12930:	00000000 	.word	0x00000000
   12934:	00012bf1 	.word	0x00012bf1

00012938 <atexit>:
   12938:	2300      	movs	r3, #0
   1293a:	4601      	mov	r1, r0
   1293c:	461a      	mov	r2, r3
   1293e:	4618      	mov	r0, r3
   12940:	f7ff bfac 	b.w	1289c <__register_exitproc>

00012944 <_malloc_trim_r>:
   12944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12946:	4f24      	ldr	r7, [pc, #144]	; (129d8 <_malloc_trim_r+0x94>)
   12948:	460c      	mov	r4, r1
   1294a:	4606      	mov	r6, r0
   1294c:	f7ff fb92 	bl	12074 <__malloc_lock>
   12950:	68bb      	ldr	r3, [r7, #8]
   12952:	685d      	ldr	r5, [r3, #4]
   12954:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   12958:	310f      	adds	r1, #15
   1295a:	f025 0503 	bic.w	r5, r5, #3
   1295e:	194b      	adds	r3, r1, r5
   12960:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   12964:	f023 030f 	bic.w	r3, r3, #15
   12968:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1296c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   12970:	db07      	blt.n	12982 <_malloc_trim_r+0x3e>
   12972:	2100      	movs	r1, #0
   12974:	4630      	mov	r0, r6
   12976:	f7ff fecd 	bl	12714 <_sbrk_r>
   1297a:	68bb      	ldr	r3, [r7, #8]
   1297c:	442b      	add	r3, r5
   1297e:	4298      	cmp	r0, r3
   12980:	d004      	beq.n	1298c <_malloc_trim_r+0x48>
   12982:	4630      	mov	r0, r6
   12984:	f7ff fb7c 	bl	12080 <__malloc_unlock>
   12988:	2000      	movs	r0, #0
   1298a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1298c:	4261      	negs	r1, r4
   1298e:	4630      	mov	r0, r6
   12990:	f7ff fec0 	bl	12714 <_sbrk_r>
   12994:	3001      	adds	r0, #1
   12996:	d00d      	beq.n	129b4 <_malloc_trim_r+0x70>
   12998:	4a10      	ldr	r2, [pc, #64]	; (129dc <_malloc_trim_r+0x98>)
   1299a:	68bb      	ldr	r3, [r7, #8]
   1299c:	1b2d      	subs	r5, r5, r4
   1299e:	f045 0501 	orr.w	r5, r5, #1
   129a2:	605d      	str	r5, [r3, #4]
   129a4:	6813      	ldr	r3, [r2, #0]
   129a6:	4630      	mov	r0, r6
   129a8:	1b1b      	subs	r3, r3, r4
   129aa:	6013      	str	r3, [r2, #0]
   129ac:	f7ff fb68 	bl	12080 <__malloc_unlock>
   129b0:	2001      	movs	r0, #1
   129b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   129b4:	2100      	movs	r1, #0
   129b6:	4630      	mov	r0, r6
   129b8:	f7ff feac 	bl	12714 <_sbrk_r>
   129bc:	68ba      	ldr	r2, [r7, #8]
   129be:	1a83      	subs	r3, r0, r2
   129c0:	2b0f      	cmp	r3, #15
   129c2:	ddde      	ble.n	12982 <_malloc_trim_r+0x3e>
   129c4:	f043 0301 	orr.w	r3, r3, #1
   129c8:	6053      	str	r3, [r2, #4]
   129ca:	4b05      	ldr	r3, [pc, #20]	; (129e0 <_malloc_trim_r+0x9c>)
   129cc:	4903      	ldr	r1, [pc, #12]	; (129dc <_malloc_trim_r+0x98>)
   129ce:	681b      	ldr	r3, [r3, #0]
   129d0:	1ac0      	subs	r0, r0, r3
   129d2:	6008      	str	r0, [r1, #0]
   129d4:	e7d5      	b.n	12982 <_malloc_trim_r+0x3e>
   129d6:	bf00      	nop
   129d8:	1fff93b4 	.word	0x1fff93b4
   129dc:	1fffa140 	.word	0x1fffa140
   129e0:	1fff97bc 	.word	0x1fff97bc

000129e4 <_free_r>:
   129e4:	2900      	cmp	r1, #0
   129e6:	d061      	beq.n	12aac <_free_r+0xc8>
   129e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129ea:	460c      	mov	r4, r1
   129ec:	4606      	mov	r6, r0
   129ee:	f7ff fb41 	bl	12074 <__malloc_lock>
   129f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   129f6:	4f7b      	ldr	r7, [pc, #492]	; (12be4 <_free_r+0x200>)
   129f8:	f1a4 0508 	sub.w	r5, r4, #8
   129fc:	f022 0101 	bic.w	r1, r2, #1
   12a00:	eb05 0c01 	add.w	ip, r5, r1
   12a04:	68b8      	ldr	r0, [r7, #8]
   12a06:	f8dc 3004 	ldr.w	r3, [ip, #4]
   12a0a:	4560      	cmp	r0, ip
   12a0c:	f023 0303 	bic.w	r3, r3, #3
   12a10:	f000 808b 	beq.w	12b2a <_free_r+0x146>
   12a14:	07d2      	lsls	r2, r2, #31
   12a16:	f8cc 3004 	str.w	r3, [ip, #4]
   12a1a:	d432      	bmi.n	12a82 <_free_r+0x9e>
   12a1c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12a20:	1aad      	subs	r5, r5, r2
   12a22:	4411      	add	r1, r2
   12a24:	68aa      	ldr	r2, [r5, #8]
   12a26:	f107 0008 	add.w	r0, r7, #8
   12a2a:	4282      	cmp	r2, r0
   12a2c:	d06a      	beq.n	12b04 <_free_r+0x120>
   12a2e:	eb0c 0403 	add.w	r4, ip, r3
   12a32:	f8d4 e004 	ldr.w	lr, [r4, #4]
   12a36:	68ec      	ldr	r4, [r5, #12]
   12a38:	60d4      	str	r4, [r2, #12]
   12a3a:	f01e 0f01 	tst.w	lr, #1
   12a3e:	60a2      	str	r2, [r4, #8]
   12a40:	f000 8097 	beq.w	12b72 <_free_r+0x18e>
   12a44:	f041 0301 	orr.w	r3, r1, #1
   12a48:	606b      	str	r3, [r5, #4]
   12a4a:	f8cc 1000 	str.w	r1, [ip]
   12a4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12a52:	d235      	bcs.n	12ac0 <_free_r+0xdc>
   12a54:	6878      	ldr	r0, [r7, #4]
   12a56:	08cb      	lsrs	r3, r1, #3
   12a58:	2201      	movs	r2, #1
   12a5a:	0949      	lsrs	r1, r1, #5
   12a5c:	3301      	adds	r3, #1
   12a5e:	408a      	lsls	r2, r1
   12a60:	4302      	orrs	r2, r0
   12a62:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   12a66:	607a      	str	r2, [r7, #4]
   12a68:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   12a6c:	3a08      	subs	r2, #8
   12a6e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   12a72:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   12a76:	60cd      	str	r5, [r1, #12]
   12a78:	4630      	mov	r0, r6
   12a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12a7e:	f7ff baff 	b.w	12080 <__malloc_unlock>
   12a82:	eb0c 0203 	add.w	r2, ip, r3
   12a86:	6852      	ldr	r2, [r2, #4]
   12a88:	07d0      	lsls	r0, r2, #31
   12a8a:	d410      	bmi.n	12aae <_free_r+0xca>
   12a8c:	4419      	add	r1, r3
   12a8e:	f107 0008 	add.w	r0, r7, #8
   12a92:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12a96:	4283      	cmp	r3, r0
   12a98:	d073      	beq.n	12b82 <_free_r+0x19e>
   12a9a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   12a9e:	60da      	str	r2, [r3, #12]
   12aa0:	6093      	str	r3, [r2, #8]
   12aa2:	f041 0301 	orr.w	r3, r1, #1
   12aa6:	606b      	str	r3, [r5, #4]
   12aa8:	5069      	str	r1, [r5, r1]
   12aaa:	e7d0      	b.n	12a4e <_free_r+0x6a>
   12aac:	4770      	bx	lr
   12aae:	f041 0301 	orr.w	r3, r1, #1
   12ab2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12ab6:	f844 3c04 	str.w	r3, [r4, #-4]
   12aba:	f8cc 1000 	str.w	r1, [ip]
   12abe:	d3c9      	bcc.n	12a54 <_free_r+0x70>
   12ac0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12ac4:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12ac8:	d248      	bcs.n	12b5c <_free_r+0x178>
   12aca:	098b      	lsrs	r3, r1, #6
   12acc:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12ad0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12ad4:	00c3      	lsls	r3, r0, #3
   12ad6:	18f8      	adds	r0, r7, r3
   12ad8:	58fb      	ldr	r3, [r7, r3]
   12ada:	3808      	subs	r0, #8
   12adc:	4298      	cmp	r0, r3
   12ade:	d059      	beq.n	12b94 <_free_r+0x1b0>
   12ae0:	685a      	ldr	r2, [r3, #4]
   12ae2:	f022 0203 	bic.w	r2, r2, #3
   12ae6:	428a      	cmp	r2, r1
   12ae8:	d902      	bls.n	12af0 <_free_r+0x10c>
   12aea:	689b      	ldr	r3, [r3, #8]
   12aec:	4298      	cmp	r0, r3
   12aee:	d1f7      	bne.n	12ae0 <_free_r+0xfc>
   12af0:	68d8      	ldr	r0, [r3, #12]
   12af2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   12af6:	6085      	str	r5, [r0, #8]
   12af8:	60dd      	str	r5, [r3, #12]
   12afa:	4630      	mov	r0, r6
   12afc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12b00:	f7ff babe 	b.w	12080 <__malloc_unlock>
   12b04:	eb0c 0203 	add.w	r2, ip, r3
   12b08:	6852      	ldr	r2, [r2, #4]
   12b0a:	07d2      	lsls	r2, r2, #31
   12b0c:	d463      	bmi.n	12bd6 <_free_r+0x1f2>
   12b0e:	440b      	add	r3, r1
   12b10:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12b14:	60ca      	str	r2, [r1, #12]
   12b16:	6091      	str	r1, [r2, #8]
   12b18:	f043 0201 	orr.w	r2, r3, #1
   12b1c:	606a      	str	r2, [r5, #4]
   12b1e:	4630      	mov	r0, r6
   12b20:	50eb      	str	r3, [r5, r3]
   12b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12b26:	f7ff baab 	b.w	12080 <__malloc_unlock>
   12b2a:	440b      	add	r3, r1
   12b2c:	07d1      	lsls	r1, r2, #31
   12b2e:	d407      	bmi.n	12b40 <_free_r+0x15c>
   12b30:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12b34:	1aad      	subs	r5, r5, r2
   12b36:	4413      	add	r3, r2
   12b38:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   12b3c:	60ca      	str	r2, [r1, #12]
   12b3e:	6091      	str	r1, [r2, #8]
   12b40:	f043 0201 	orr.w	r2, r3, #1
   12b44:	606a      	str	r2, [r5, #4]
   12b46:	4a28      	ldr	r2, [pc, #160]	; (12be8 <_free_r+0x204>)
   12b48:	60bd      	str	r5, [r7, #8]
   12b4a:	6812      	ldr	r2, [r2, #0]
   12b4c:	429a      	cmp	r2, r3
   12b4e:	d893      	bhi.n	12a78 <_free_r+0x94>
   12b50:	4b26      	ldr	r3, [pc, #152]	; (12bec <_free_r+0x208>)
   12b52:	4630      	mov	r0, r6
   12b54:	6819      	ldr	r1, [r3, #0]
   12b56:	f7ff fef5 	bl	12944 <_malloc_trim_r>
   12b5a:	e78d      	b.n	12a78 <_free_r+0x94>
   12b5c:	2b14      	cmp	r3, #20
   12b5e:	d90a      	bls.n	12b76 <_free_r+0x192>
   12b60:	2b54      	cmp	r3, #84	; 0x54
   12b62:	d81f      	bhi.n	12ba4 <_free_r+0x1c0>
   12b64:	0b0b      	lsrs	r3, r1, #12
   12b66:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   12b6a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   12b6e:	00c3      	lsls	r3, r0, #3
   12b70:	e7b1      	b.n	12ad6 <_free_r+0xf2>
   12b72:	4419      	add	r1, r3
   12b74:	e78d      	b.n	12a92 <_free_r+0xae>
   12b76:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   12b7a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   12b7e:	00c3      	lsls	r3, r0, #3
   12b80:	e7a9      	b.n	12ad6 <_free_r+0xf2>
   12b82:	f041 0301 	orr.w	r3, r1, #1
   12b86:	e9c7 5504 	strd	r5, r5, [r7, #16]
   12b8a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   12b8e:	606b      	str	r3, [r5, #4]
   12b90:	5069      	str	r1, [r5, r1]
   12b92:	e771      	b.n	12a78 <_free_r+0x94>
   12b94:	6879      	ldr	r1, [r7, #4]
   12b96:	1092      	asrs	r2, r2, #2
   12b98:	2401      	movs	r4, #1
   12b9a:	fa04 f202 	lsl.w	r2, r4, r2
   12b9e:	430a      	orrs	r2, r1
   12ba0:	607a      	str	r2, [r7, #4]
   12ba2:	e7a6      	b.n	12af2 <_free_r+0x10e>
   12ba4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12ba8:	d806      	bhi.n	12bb8 <_free_r+0x1d4>
   12baa:	0bcb      	lsrs	r3, r1, #15
   12bac:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12bb0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12bb4:	00c3      	lsls	r3, r0, #3
   12bb6:	e78e      	b.n	12ad6 <_free_r+0xf2>
   12bb8:	f240 5254 	movw	r2, #1364	; 0x554
   12bbc:	4293      	cmp	r3, r2
   12bbe:	d806      	bhi.n	12bce <_free_r+0x1ea>
   12bc0:	0c8b      	lsrs	r3, r1, #18
   12bc2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12bc6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   12bca:	00c3      	lsls	r3, r0, #3
   12bcc:	e783      	b.n	12ad6 <_free_r+0xf2>
   12bce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12bd2:	227e      	movs	r2, #126	; 0x7e
   12bd4:	e77f      	b.n	12ad6 <_free_r+0xf2>
   12bd6:	f041 0301 	orr.w	r3, r1, #1
   12bda:	606b      	str	r3, [r5, #4]
   12bdc:	f8cc 1000 	str.w	r1, [ip]
   12be0:	e74a      	b.n	12a78 <_free_r+0x94>
   12be2:	bf00      	nop
   12be4:	1fff93b4 	.word	0x1fff93b4
   12be8:	1fff97c0 	.word	0x1fff97c0
   12bec:	1fffa170 	.word	0x1fffa170

00012bf0 <__libc_fini_array>:
   12bf0:	b538      	push	{r3, r4, r5, lr}
   12bf2:	4d07      	ldr	r5, [pc, #28]	; (12c10 <__libc_fini_array+0x20>)
   12bf4:	4c07      	ldr	r4, [pc, #28]	; (12c14 <__libc_fini_array+0x24>)
   12bf6:	1b2c      	subs	r4, r5, r4
   12bf8:	10a4      	asrs	r4, r4, #2
   12bfa:	d005      	beq.n	12c08 <__libc_fini_array+0x18>
   12bfc:	3c01      	subs	r4, #1
   12bfe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   12c02:	4798      	blx	r3
   12c04:	2c00      	cmp	r4, #0
   12c06:	d1f9      	bne.n	12bfc <__libc_fini_array+0xc>
   12c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12c0c:	f003 ba0c 	b.w	16028 <__init_array_end>
	...

00012c18 <teensy::inplace_function<void (), 16u, 8u>::inplace_function<void (&)(), void (*)(), void>(void (&)())::vt>:
   12c18:	0591 0000 0595 0000 059d 0000 05a5 0000     ................

00012c28 <majAdd9Hmz>:
   12c28:	fffb ffff fff8 ffff fff6 ffff fffa ffff     ................
   12c38:	fff8 ffff fff6 ffff fffd ffff fffb ffff     ................
   12c48:	fff9 ffff fffd ffff fff9 ffff fff7 ffff     ................
   12c58:	fffe ffff fffc ffff fff7 ffff fffb ffff     ................
   12c68:	fff8 ffff fff6 ffff fffc ffff fffa ffff     ................
   12c78:	fff6 ffff fffd ffff fffb ffff fff9 ffff     ................
   12c88:	fffc ffff fffa ffff fff6 ffff fffe ffff     ................
   12c98:	fffc ffff fff7 ffff fffb ffff fff8 ffff     ................
   12ca8:	fff6 ffff fffe ffff fffc ffff fff7 ffff     ................

00012cb8 <vibMaxList>:
   12cb8:	012c 0113 00fa 00e1 00c8 00af 0096 007d     ,.............}.
   12cc8:	0064 004b 0032 0019                         d.K.2...

00012cd0 <majGosDomHmz>:
   12cd0:	fffb ffff fff8 ffff fff4 ffff fffa ffff     ................
   12ce0:	fff7 ffff fff4 ffff fffd ffff fff9 ffff     ................
   12cf0:	fff4 ffff fffa ffff fff7 ffff fff4 ffff     ................
   12d00:	fffc ffff fff7 ffff fff4 ffff fffb ffff     ................
   12d10:	fff8 ffff fff4 ffff fffd ffff fffa ffff     ................
   12d20:	fff4 ffff fffb ffff fff8 ffff fff4 ffff     ................
   12d30:	fffd ffff fff8 ffff fff4 ffff fffc ffff     ................
   12d40:	fff7 ffff fff4 ffff fffb ffff fff8 ffff     ................
   12d50:	fff4 ffff fffc ffff fff7 ffff fff4 ffff     ................

00012d60 <majGosRootHmz>:
   12d60:	fffb ffff fff8 ffff fff4 ffff fffa ffff     ................
   12d70:	fff7 ffff fff4 ffff fffd ffff fff9 ffff     ................
   12d80:	fff4 ffff fffa ffff fff7 ffff fff4 ffff     ................
   12d90:	fffc ffff fff7 ffff fff4 ffff fffb ffff     ................
   12da0:	fff8 ffff fff4 ffff fffd ffff fffa ffff     ................
   12db0:	fff4 ffff fffd ffff fff9 ffff fff4 ffff     ................
   12dc0:	fffd ffff fff8 ffff fff4 ffff fffc ffff     ................
   12dd0:	fff7 ffff fff4 ffff fffb ffff fff8 ffff     ................
   12de0:	fff4 ffff fffc ffff fff7 ffff fff4 ffff     ................

00012df0 <harmonicResult>:
   12df0:	0000 0000 0007 0000 000c 0000 0010 0000     ................
   12e00:	0013 0000 0018 0000 001c 0000 0000 0000     ................
   12e10:	0007 0000 000c 0000 0010 0000 0013 0000     ................
   12e20:	0016 0000 0018 0000 0000 0000 0007 0000     ................
   12e30:	000c 0000 0013 0000 0018 0000 001f 0000     ................
   12e40:	0024 0000 0000 0000 000c 0000 0018 0000     $...............
   12e50:	0024 0000 0030 0000 003c 0000 0048 0000     $...0...<...H...
   12e60:	0000 0000 0007 0000 000c 0000 0010 0000     ................
   12e70:	0013 0000 0018 0000 001c 0000 0000 0000     ................
   12e80:	0007 0000 000c 0000 0010 0000 0013 0000     ................
   12e90:	0016 0000 0018 0000 0000 0000 0007 0000     ................
   12ea0:	000c 0000 0013 0000 0018 0000 001f 0000     ................
   12eb0:	0024 0000 0000 0000 000c 0000 0018 0000     $...............
   12ec0:	0024 0000 0030 0000 003c 0000 0048 0000     $...0...<...H...

00012ed0 <saxFingerMatch>:
   12ed0:	0201 0101 0100 0101 0102 0201 0101 0101     ................
   12ee0:	0101 0102 0201 0101 0102 0101 0000 0201     ................
   12ef0:	0101 0102 0101 0001 0201 0101 0102 0001     ................
   12f00:	0202 0201 0101 0102 0200 0202 0201 0101     ................
   12f10:	0002 0201 0202 0201 0101 0000 0200 0202     ................
   12f20:	0201 0101 0001 0200 0202 0201 0001 0202     ................
   12f30:	0202 0202 0201 0200 0102 0202 0202 0201     ................
   12f40:	0200 0202 0201 0202 0101 0200 0202 0202     ................
   12f50:	0202 0001 0200 0002 0202 0202 0200 0201     ................
   12f60:	0202 0202 0202 0200 0200 0202 0202 0202     ................

00012f70 <vibMaxBiteList>:
   12f70:	0640 0578 04b0 03e8 0384 0320 02bc 0258     @.x....... ...X.
   12f80:	01f4 0190 012c 00fa 00c8 0096 0064 0032     ....,.......d.2.
   12f90:	0019 ffff                                   ....

00012f94 <waveformsTable>:
   12f94:	07ff 0000 086a 0000 08d5 0000 093f 0000     ....j.......?...
   12fa4:	09a9 0000 0a11 0000 0a78 0000 0add 0000     ........x.......
   12fb4:	0b40 0000 0ba1 0000 0bff 0000 0c5a 0000     @...........Z...
   12fc4:	0cb2 0000 0d08 0000 0d59 0000 0da7 0000     ........Y.......
   12fd4:	0df1 0000 0e36 0000 0e77 0000 0eb4 0000     ....6...w.......
   12fe4:	0eec 0000 0f1f 0000 0f4d 0000 0f77 0000     ........M...w...
   12ff4:	0f9a 0000 0fb9 0000 0fd2 0000 0fe5 0000     ................
   13004:	0ff3 0000 0ffc 0000 0fff 0000 0ffc 0000     ................
   13014:	0ff3 0000 0fe5 0000 0fd2 0000 0fb9 0000     ................
   13024:	0f9a 0000 0f77 0000 0f4d 0000 0f1f 0000     ....w...M.......
   13034:	0eec 0000 0eb4 0000 0e77 0000 0e36 0000     ........w...6...
   13044:	0df1 0000 0da7 0000 0d59 0000 0d08 0000     ........Y.......
   13054:	0cb2 0000 0c5a 0000 0bff 0000 0ba1 0000     ....Z...........
   13064:	0b40 0000 0add 0000 0a78 0000 0a11 0000     @.......x.......
   13074:	09a9 0000 093f 0000 08d5 0000 086a 0000     ....?.......j...
   13084:	07ff 0000 0794 0000 0729 0000 06bf 0000     ........).......
   13094:	0655 0000 05ed 0000 0586 0000 0521 0000     U...........!...
   130a4:	04be 0000 045d 0000 03ff 0000 03a4 0000     ....]...........
   130b4:	034c 0000 02f6 0000 02a5 0000 0257 0000     L...........W...
   130c4:	020d 0000 01c8 0000 0187 0000 014a 0000     ............J...
   130d4:	0112 0000 00df 0000 00b1 0000 0087 0000     ................
   130e4:	0064 0000 0045 0000 002c 0000 0019 0000     d...E...,.......
   130f4:	000b 0000 0002 0000 0000 0000 0002 0000     ................
   13104:	000b 0000 0019 0000 002c 0000 0045 0000     ........,...E...
   13114:	0064 0000 0087 0000 00b1 0000 00df 0000     d...............
   13124:	0112 0000 014a 0000 0187 0000 01c8 0000     ....J...........
   13134:	020d 0000 0257 0000 02a5 0000 02f6 0000     ....W...........
   13144:	034c 0000 03a4 0000 03ff 0000 045d 0000     L...........]...
   13154:	04be 0000 0521 0000 0586 0000 05ed 0000     ....!...........
   13164:	0655 0000 06bf 0000 0729 0000 0794 0000     U.......).......

00013174 <timeDividerList>:
   13174:	0000 0000 00de 0000 00c8 0000 00b5 0000     ................
   13184:	00a7 0000 0098 0000 008f 0000 0082 0000     ................
   13194:	007d 0000                                   }...

00013198 <brHarmonicResult>:
   13198:	0000 0000 0007 0000 000c 0000 0010 0000     ................
   131a8:	0013 0000 0018 0000 001c 0000 0000 0000     ................
   131b8:	0007 0000 000c 0000 0010 0000 0013 0000     ................
   131c8:	0016 0000 0018 0000 0000 0000 0007 0000     ................
   131d8:	000c 0000 0013 0000 0018 0000 001f 0000     ................
   131e8:	0024 0000 0000 0000 000c 0000 0018 0000     $...............
   131f8:	0024 0000 0030 0000 003c 0000 0048 0000     $...0...<...H...

00013208 <curveM1>:
   13208:	0000 0578 0b22 1004 14b4 1932 1db0 21fc     ..x.".....2....!
   13218:	2648 29fe 2d82 3138 3426 3746 3a66 3d22     H&.).-81&4F7f:"=
   13228:	3fff ffff                                   .?..

0001322c <curveM2>:
   1322c:	0000 07d0 0e10 1388 1932 1eaa 2328 2774     ........2...(#t'
   1323c:	2b5c 2f44 3264 3584 3840 3a66 3c8c 3e80     \+D/d2.5@8f:.<.>
   1324c:	3fff ffff                                   .?..

00013250 <curveM3>:
   13250:	0000 0b54 13ec 19fa 2008 251c 2936 2cec     ..T...... .%6).,
   13260:	300c 332c 35e8 3872 3a66 3bf6 3d86 3f16     .0,3.5r8f:.;.=.?
   13270:	3fff ffff                                   .?..

00013274 <curveM4>:
   13274:	0000 10cc 1b58 21fc 26ac 2ac6 2e7c 3138     ....X..!.&.*|.81
   13284:	33f4 364c 38a4 3a98 3c5a 3d54 3e80 3f7a     .3L6.8.:Z<T=.>z?
   13294:	3fff ffff                                   .?..

00013298 <curveP1>:
   13298:	0000 0258 0546 0866 0b54 0ed8 125c 15e0     ..X.F.f.T...\...
   132a8:	19fa 1e14 2260 26ac 2b5c 300c 34bc 3a02     ....`".&\+.0.4.:
   132b8:	3fff ffff                                   .?..

000132bc <curveP2>:
   132bc:	0000 0190 0320 0514 07d0 0a5a 0dac 10cc     .... .....Z.....
   132cc:	14b4 186a 1ce8 2134 2580 2b2a 3070 3714     ..j...4!.%*+p0.7
   132dc:	3fff ffff                                   .?..

000132e0 <curveP3>:
   132e0:	0000 00c8 01f4 0384 0514 0708 092e 0c1c     ................
   132f0:	0ed8 11f8 15ae 1996 1f40 251c 2bf2 3458     ........@..%.+X4
   13300:	3fff ffff                                   .?..

00013304 <curveP4>:
   13304:	0000 0064 00c8 0190 02bc 041a 05dc 079e     ..d.............
   13314:	09f6 0c80 0fa0 1324 17a2 1d4c 2454 2f44     ......$...L.T$D/
   13324:	3fff ffff                                   .?..

00013328 <curveS1>:
   13328:	0000 0258 0546 0866 0b54 0ed8 125c 1770     ..X.F.f.T...\.p.
   13338:	21fc 2af8 3070 3458 37dc 3a66 3c8c 3e80     .!.*p0X4.7f:.<.>
   13348:	3fff ffff                                   .?..

0001334c <curveS2>:
   1334c:	0000 0258 0546 0866 0b54 0fa0 17d4 2328     ..X.F.f.T.....(#
   1335c:	2af8 2f44 3264 3584 3840 3a66 3c8c 3e80     .*D/d2.5@8f:.<.>
   1336c:	3fff ffff                                   .?..

00013370 <curveZ1>:
   13370:	0000 0578 0834 0b54 0c80 0f3c 125c 15e0     ..x.4.T...<.\...
   13380:	19fa 1e14 2260 26ac 2b5c 300c 34bc 3a02     ....`".&\+.0.4.:
   13390:	3fff ffff                                   .?..

00013394 <curveZ2>:
   13394:	0000 07d0 0c80 0ed8 1000 12c0 13ec 170c     ................
   133a4:	19fa 1e14 2260 26ac 2b5c 300c 34bc 3a02     ....`".&\+.0.4.:
   133b4:	3fff ffff                                   .?..

000133b8 <blockFWC>:
   133b8:	fffd ffff fffb ffff fff8 ffff fffd ffff     ................
   133c8:	fffb ffff fff8 ffff fffd ffff fffa ffff     ................
   133d8:	fff7 ffff fffd ffff fffb ffff fff7 ffff     ................
   133e8:	fffc ffff fffb ffff fff7 ffff fffd ffff     ................
   133f8:	fffa ffff fff7 ffff fffd ffff fffb ffff     ................
   13408:	fff8 ffff fffd ffff fffb ffff fff8 ffff     ................
   13418:	fffd ffff fffa ffff fff7 ffff fffc ffff     ................
   13428:	fffb ffff fff7 ffff fffd ffff fffb ffff     ................
   13438:	fff7 ffff fffd ffff fffa ffff fff7 ffff     ................
   13448:	fffd ffff fffb ffff fff7 ffff fffd ffff     ................
   13458:	fffb ffff fff7 ffff fffd ffff fffa ffff     ................
   13468:	fff7 ffff fffd ffff fffa ffff fff8 ffff     ................
   13478:	fffd ffff fffa ffff fff7 ffff fffd ffff     ................
   13488:	fffa ffff fff7 ffff fffd ffff fffa ffff     ................
   13498:	fff8 ffff fffd ffff fffa ffff fff8 ffff     ................
   134a8:	fffd ffff fffa ffff fff7 ffff fffc ffff     ................
   134b8:	fffb ffff fff7 ffff fffd ffff fffa ffff     ................
   134c8:	fff7 ffff fffd ffff fffa ffff fff7 ffff     ................
   134d8:	fffe ffff fffb ffff fff8 ffff fffe ffff     ................
   134e8:	fffb ffff fff8 ffff fffd ffff fffa ffff     ................
   134f8:	fff7 ffff fffc ffff fffa ffff fff7 ffff     ................
   13508:	fffc ffff fffa ffff fff7 ffff fffd ffff     ................
   13518:	fffa ffff fff7 ffff fffd ffff fff9 ffff     ................
   13528:	fff7 ffff fffd ffff fff9 ffff fff7 ffff     ................
   13538:	fffd ffff fffa ffff fff7 ffff fffd ffff     ................
   13548:	fffa ffff fff7 ffff fffd ffff fffa ffff     ................
   13558:	fff6 ffff fffd ffff fffa ffff fff7 ffff     ................
   13568:	fffe ffff fffb ffff fff7 ffff fffe ffff     ................
   13578:	fffb ffff fff7 ffff fffd ffff fffa ffff     ................
   13588:	fff7 ffff fffd ffff fffb ffff fff8 ffff     ................
   13598:	fffd ffff fffb ffff fff8 ffff fffd ffff     ................
   135a8:	fffa ffff fff7 ffff fffc ffff fff9 ffff     ................
   135b8:	fff7 ffff fffc ffff fff9 ffff fff7 ffff     ................
   135c8:	fffd ffff fffa ffff fff7 ffff fffd ffff     ................
   135d8:	fffa ffff fff7 ffff fffd ffff fff9 ffff     ................
   135e8:	fff6 ffff fffd ffff fffa ffff fff7 ffff     ................

000135f8 <vibDepth>:
   135f8:	0000 0000 cccd 3d4c cccd 3dcc 999a 3e19     ......L=...=...>
   13608:	cccd 3e4c 0000 3e80 999a 3e99 3333 3eb3     ..L>...>...>33.>
   13618:	cccd 3ecc 6666 3ee6                         ...>ff.>

00013620 <minAeoHmz>:
   13620:	fffb ffff fff7 ffff fff4 ffff fffb ffff     ................
   13630:	fff7 ffff fff4 ffff fffd ffff fff7 ffff     ................
   13640:	fff4 ffff fffd ffff fff8 ffff fff4 ffff     ................
   13650:	fffa ffff fff7 ffff fff4 ffff fffb ffff     ................
   13660:	fff7 ffff fff4 ffff fffb ffff fff7 ffff     ................
   13670:	fff4 ffff fffb ffff fff7 ffff fff4 ffff     ................
   13680:	fffd ffff fff8 ffff fff4 ffff fffd ffff     ................
   13690:	fff8 ffff fff4 ffff fffd ffff fff8 ffff     ................
   136a0:	fff4 ffff fffa ffff fff8 ffff fff4 ffff     ................

000136b0 <minDorHmz>:
   136b0:	fffb ffff fff7 ffff fff4 ffff fffb ffff     ................
   136c0:	fff7 ffff fff4 ffff fffb ffff fff7 ffff     ................
   136d0:	fff4 ffff fffd ffff fff8 ffff fff4 ffff     ................
   136e0:	fffd ffff fff8 ffff fff4 ffff fffd ffff     ................
   136f0:	fff8 ffff fff4 ffff fffb ffff fff7 ffff     ................
   13700:	fff4 ffff fffb ffff fff7 ffff fff4 ffff     ................
   13710:	fffb ffff fff8 ffff fff4 ffff fffc ffff     ................
   13720:	fff9 ffff fff4 ffff fffd ffff fff8 ffff     ................
   13730:	fff4 ffff fffc ffff fff7 ffff fff4 ffff     ................

00013740 <minHipHmz>:
   13740:	fffb ffff fff7 ffff fff6 ffff fffb ffff     ................
   13750:	fff7 ffff fff6 ffff fffb ffff fff7 ffff     ................
   13760:	fff6 ffff fffd ffff fffc ffff fff8 ffff     ................
   13770:	fffd ffff fffc ffff fff8 ffff fffd ffff     ................
   13780:	fffc ffff fff8 ffff fffb ffff fff7 ffff     ................
   13790:	fff6 ffff fffb ffff fff7 ffff fff6 ffff     ................
   137a0:	fffb ffff fffa ffff fff8 ffff fffc ffff     ................
   137b0:	fff9 ffff fff8 ffff fffd ffff fffc ffff     ................
   137c0:	fff8 ffff fffc ffff fffa ffff fff7 ffff     ................

000137d0 <curveIn>:
   137d0:	0000 03ff 07ff 0bff 0fff 13ff 17ff 1bff     ................
   137e0:	1fff 23ff 27ff 2bff 2fff 33ff 37ff 3bff     ...#.'.+./.3.7.;
   137f0:	3fff ffff                                   .?..

000137f4 <curves>:
   137f4:	3274 0001 3250 0001 322c 0001 3208 0001     t2..P2..,2...2..
   13804:	37d0 0001 3298 0001 32bc 0001 32e0 0001     .7...2...2...2..
   13814:	3304 0001 3328 0001 334c 0001 3370 0001     .3..(3..L3..p3..
   13824:	3394 0001 4854 0052 4e53 0053 414d 0058     .3..THR.SNS.MAX.
   13834:	007c ffff 5541 4f54 4143 004c 454c 4556     |...AUTOCAL.LEVE
   13844:	0052 0000 4f54 4355 0048 0000 494c 2f50     R...TOUCH...LIP/
   13854:	4345 0000 4542 444e 0000 0000 4942 4554     EC..BEND....BITE
   13864:	0000 0000 5242 4145 4854 ff00               ....BREATH..

00013870 <leverAdjustMenu>:
   13870:	3840 0001 9b28 1fff 0578 07d0 9b1c 1fff     @8..(...x.......
   13880:	0578 07d0 5169 0000                         x...iQ..

00013888 <breathAdjustMenu>:
   13888:	3868 0001 9a4e 1fff 0000 0fff 9a4c 1fff     h8..N.......L...
   13898:	0000 0fff 51e5 0000                         .....Q..

000138a0 <ctouchAdjustMenu>:
   138a0:	3848 0001 9a66 1fff 0032 015e 0000 0000     H8..f...2.^.....
   138b0:	0000 0000 5185 0000                         .....Q..

000138b8 <pitchBendAdjustMenu>:
   138b8:	3858 0001 9b78 1fff 01f4 0fa0 9b76 1fff     X8..x.......v...
   138c8:	01f4 0fa0 51ad 0000                         .....Q..

000138d0 <portamentoAdjustMenu>:
   138d0:	3860 0001 9b88 1fff 02bc 125c 9b86 1fff     `8........\.....
   138e0:	02bc 125c 51c9 0000                         ..\..Q..

000138e8 <extraSensorAdjustMenu>:
   138e8:	3850 0001 9a9c 1fff 01f4 0fa0 9a9a 1fff     P8..............
   138f8:	01f4 0fa0 5191 0000 0036 0000 366d 0000     .....Q..6...m6..
   13908:	0037 0000 376d ff00 2343 0000 2344 0000     7...m7..C#..D#..
   13918:	0046 0000 2346 0000 2347 0000 6242 ff00     F...F#..G#..Bb..
   13928:	4e4f 0000 464f 0046 474d 0052 474d 0044     ON..OFF.MGR.MGD.
   13938:	414d 0039 4e4d 0044 4e4d 0041 4e4d 0048     MA9.MND.MNA.MNH.
   13948:	5746 0043 5452 0041 5452 0042 5452 0043     FWC.RTA.RTB.RTC.
   13958:	3e43 0000 2343 003e 3e44 0000 2344 003e     C>..C#>.D>..D#>.
   13968:	3e45 0000 3e46 0000 2346 003e 3e47 0000     E>..F>..F#>.G>..
   13978:	2347 003e 3e41 0000 6242 003e 3e42 0000     G#>.A>..Bb>.B>..
   13988:	433e 003c 433c 0023 443c 0000 443c 0023     >C<.<C#.<D..<D#.
   13998:	453c 0000 463c 0000 463c 0023 473c 0000     <E..<F..<F#.<G..
   139a8:	473c 0023 413c 0000 423c 0062 423c 0000     <G#.<A..<Bb.<B..
   139b8:	433c ff00 4142 0054 4f4c 2057 0000 0000     <C..BAT.LOW ....
   139c8:	5355 0042 454d 554e 2020 2020 2020 2020     USB.MENU        
   139d8:	5820 5858 5920 592e 0056 ffff 4f4c 0000      XXX Y.YV...LO..
   139e8:	4948 ff00 454e 0047 4f50 0053 524e 004d     HI..NEG.POS.NRM.
   139f8:	4552 0056 5242 4854 0000 0000 5450 4843     REV.BRTH....PTCH
   13a08:	ff00 ffff 4250 0044 4345 0042 4345 0053     ....PBD.ECB.ECS.
   13a18:	564c 004c 564c 0050 4c47 0044 4345 0048     LVL.LVP.GLD.ECH.
   13a28:	5451 004e 4f4d 0044 0058 ffff 5441 ff00     QTN.MOD.X...AT..
   13a38:	5944 004e 736d ff00 2f31 ff00 2e76 0000     DYN.ms..1/..v...
   13a48:	7731 7337 0031 ffff 4553 0054 4c43 0052     1w7s1...SET.CLR.
   13a58:	4957 4944 ff00 ffff 4f44 274e 0054 0000     WIDI....DON'T...
   13a68:	4150 494e 0043 ffff 754e 4152 0044 0000     PANIC...NuRAD...
   13a78:	6966 6d72 6177 6572 7620 002e 5355 2042     firmware v..USB 
   13a88:	6f70 6577 0072 0000 6c41 616b 696c 656e     power...Alkaline
   13a98:	6220 7461 6574 7972 0000 0000 2030 2025      battery....0 % 
   13aa8:	7461 0020 694e 484d 6220 7461 6574 7972     at .NiMH battery
   13ab8:	0000 0000 694c 6f50 6220 7461 6574 7972     ....LiPo battery
   13ac8:	ff00 ffff 4956 0042 4343 0000 4c47 0053     ....VIB.CC..GLS.
   13ad8:	5753 0000 4553 004c 4553 0045 5753 004f     SW..SEL.SEE.SWO.
   13ae8:	574d 0000 5046 0000 4643 0000 5053 0000     MW..FP..CF..SP..
   13af8:	4d48 0031 4d48 0032 5435 0048 434f 0054     HM1.HM2.5TH.OCT.
   13b08:	3148 0052 3248 0052 5435 0052 434f 0052     H1R.H2R.5TR.OCR.
   13b18:	5745 0049 5745 0058 4153 0058 5645 0052     EWI.EWX.SAX.EVR.
   13b28:	5658 0049 5658 0052 5242 0000 4c56 0000     XVI.XVR.BR..VL..
   13b38:	5845 0000 574d 002b 5242 002b 4c56 002b     EX..MW+.BR+.VL+.
   13b48:	5845 002b 4e55 004f 342d 0000 332d 0000     EX+.UNO.-4..-3..
   13b58:	322d 0000 312d 0000 494c 004e 312b 0000     -2..-1..LIN.+1..
   13b68:	322b 0000 332b 0000 342b 0000 3153 0000     +2..+3..+4..S1..
   13b78:	3253 0000 315a 0000 325a 0000 4c41 004b     S2..Z1..Z2..ALK.
   13b88:	4d4e 0048 494c 0050 4956 5242 5441 004f     NMH.LIP.VIBRATO.
   13b98:	4956 3242 5242 4d41 0054 0000 4d41 554f     VIB2BRAMT...AMOU
   13ba8:	544e 0000 4956 3242 5242 4944 0052 0000     NT..VIB2BRDIR...
   13bb8:	4944 4552 5443 4f49 004e 0000 5153 4555     DIRECTION...SQUE
   13bc8:	434c 2048 0042 0000 4553 534e 2045 5442     LCH B...SENSE BT
   13bd8:	0045 0000 5153 4555 434c 2048 004c 0000     E...SQUELCH L...
   13be8:	4553 534e 2045 564c 0052 0000 4552 5554     SENSE LVR...RETU
   13bf8:	4e52 0000 4544 5450 0048 0000 4553 5554     RN..DEPTH...SETU
   13c08:	2050 5443 4c52 0053 5845 5254 2041 454b     P CTRLS.EXTRA KE
   13c18:	0059 0000 5845 5254 2041 4b50 5945 0000     Y...EXTRA PKEY..
   13c28:	4f52 4c4c 4d52 444f 0045 0000 4946 474e     ROLLRMODE...FING
   13c38:	5245 4e49 0047 0000 454c 4556 204c 4343     ERING...LEVEL CC
   13c48:	0000 0000 4f4d 2044 454b 0059 4544 4c47     ....MOD KEY.DEGL
   13c58:	5449 4843 0000 0000 4c47 5349 0053 0000     ITCH....GLISS...
   13c68:	4c47 5349 2053 4954 454d 0000 4148 4d52     GLISS TIME..HARM
   13c78:	5320 4c45 0000 0000 4553 4952 5345 0000      SEL....SERIES..
   13c88:	5845 5443 4820 5241 004d 0000 4148 4d52     EXCT HARM...HARM
   13c98:	5220 4e41 4547 0000 5845 5443 4320 2043      RANGE..EXCT CC 
   13ca8:	0042 0000 5845 5443 4320 2043 0041 0000     B...EXCT CC A...
   13cb8:	4950 4354 4248 4e45 0044 0000 4c47 4449     PITCHBEND...GLID
   13cc8:	2045 4d4c 0054 0000 414d 2058 454c 4556     E LMT...MAX LEVE
   13cd8:	004c 0000 4c47 4449 2045 4f4d 0044 0000     L...GLIDE MOD...
   13ce8:	4f50 5452 472f 444c 0000 0000 454c 4556     PORT/GLD....LEVE
   13cf8:	2052 4343 0000 0000 4343 4e20 4d55 4542     R CC....CC NUMBE
   13d08:	0052 0000 454c 4556 2052 5443 004c 0000     R...LEVER CTL...
   13d18:	454c 4556 2052 4544 5453 0000 4942 4554     LEVER DEST..BITE
   13d28:	4320 0043 4942 4554 4320 4c54 0000 0000      CC.BITE CTL....
   13d38:	4942 4554 4420 5345 0054 0000 4553 5554     BITE DEST...SETU
   13d48:	2050 5242 4145 4854 0000 0000 5242 4920     P BREATH....BR I
   13d58:	544e 5245 0056 0000 4343 4920 544e 5245     NTERV...CC INTER
   13d68:	0056 0000 4556 204c 4f42 534f 0054 0000     V...VEL BOOST...
   13d78:	4556 204c 4544 414c 0059 0000 5543 5652     VEL DELAY...CURV
   13d88:	0045 0000 4556 4f4c 4943 5954 0000 0000     E...VELOCITY....
   13d98:	5242 4145 4854 4120 0054 0000 4343 4220     BREATH AT...CC B
   13da8:	5220 5349 0045 0000 5242 4854 4320 2043      RISE...BRTH CC 
   13db8:	0042 0000 5242 4854 4320 2043 0041 0000     B...BRTH CC A...
   13dc8:	4241 554f 0054 0000 5845 5254 5341 0000     ABOUT...EXTRAS..
   13dd8:	4f50 594c 5020 414c 0059 0000 4553 5554     POLY PLAY...SETU
   13de8:	2050 5443 004c 0000 4553 5554 2050 5242     P CTL...SETUP BR
   13df8:	0000 0000 4441 554a 5453 0000 494d 4944     ....ADJUST..MIDI
   13e08:	4320 0048 494d 4944 4320 4e48 004c 0000      CH.MIDI CHNL...
   13e18:	4142 2054 5954 4550 0000 0000 4c57 4320     BAT TYPE....WL C
   13e28:	4148 004e 4c57 5020 574f 5245 0000 0000     HAN.WL POWER....
   13e38:	5643 4520 2043 464c 004f 0000 4152 4554     CV EC LFO...RATE
   13e48:	0000 0000 5643 5320 4143 454c 0000 0000     ....CV SCALE....
   13e58:	4353 4c41 4e49 0047 5643 5420 4e55 0045     SCALING.CV TUNE.
   13e68:	5554 494e 474e 0000 4146 5453 4220 4f4f     TUNING..FAST BOO
   13e78:	0054 0000 4144 2043 554f 0054 4147 4554     T...DAC OUT.GATE
   13e88:	4820 4c4f 0044 0000 454c 4147 5943 4220      HOLD...LEGACY B
   13e98:	0052 0000 454c 4147 5943 5020 0042 0000     R...LEGACY PB...
   13ea8:	434f 4154 4556 0000 5254 4e41 5053 534f     OCTAVE..TRANSPOS
   13eb8:	0045 0000 4f50 594c 5020 414c 2059 4553     E...POLY PLAY SE
   13ec8:	5554 0050 4f52 4154 4f54 2052 0043 0000     TUP.ROTATOR C...
   13ed8:	4f52 4154 4f54 2052 0042 0000 4f52 4154     ROTATOR B...ROTA
   13ee8:	4f54 2052 0041 0000 544f 2046 454b 0059     TOR A...OTF KEY.
   13ef8:	544f 2046 454b 5359 0057 0000 4d48 205a     OTF KEYSW...HMZ 
   13f08:	494c 494d 0054 0000 4f56 4349 5345 0000     LIMIT...VOICES..
   13f18:	4f50 594c 4d20 444f 0045 0000 4553 454c     POLY MODE...SELE
   13f28:	5443 0000 4d48 205a 454b 0059 454b 2059     CT..HMZ KEY.KEY 
   13f38:	4c50 5941 4445 0000 5746 2043 5244 504f     PLAYED..FWC DROP
   13f48:	0032 0000 5244 504f 3220 0000 5746 2043     2...DROP 2..FWC 
   13f58:	4f4c 4b43 0048 0000 484c 4d20 4c45 444f     LOCKH...LH MELOD
   13f68:	0059 0000 5746 2043 5954 4550 0000 0000     Y...FWC TYPE....
   13f78:	4843 524f 0044 0000 5250 4f49 4952 5954     CHORD...PRIORITY
   13f88:	0000 0000 4f4d 4f4e 5020 4952 004f 0000     ....MONO PRIO...
   13f98:	5452 2043 4f52 2054 0034 0000 4553 494d     RTC ROT 4...SEMI
   13fa8:	4f54 454e 0053 0000 5452 2043 4f52 2054     TONES...RTC ROT 
   13fb8:	0033 0000 5452 2043 4f52 2054 0032 0000     3...RTC ROT 2...
   13fc8:	5452 2043 4f52 2054 0031 0000 5452 2043     RTC ROT 1...RTC 
   13fd8:	4150 4152 004c 0000 5452 2042 4f52 2054     PARAL...RTB ROT 
   13fe8:	0034 0000 5452 2042 4f52 2054 0033 0000     4...RTB ROT 3...
   13ff8:	5452 2042 4f52 2054 0032 0000 5452 2042     RTB ROT 2...RTB 
   14008:	4f52 2054 0031 0000 5452 2042 4150 4152     ROT 1...RTB PARA
   14018:	004c 0000 5452 2041 4f52 2054 0034 0000     L...RTA ROT 4...
   14028:	5452 2041 4f52 2054 0033 0000 5452 2041     RTA ROT 3...RTA 
   14038:	4f52 2054 0032 0000 5452 2041 4f52 2054     ROT 2...RTA ROT 
   14048:	0031 0000 5452 2041 4150 4152 004c ffff     1...RTA PARAL...
   14058:	3b18 0001 3b1c 0001 3b20 0001 5224 0001     .;...;.. ;..$R..
   14068:	3b24 0001 3b28 0001 3b2c 0001 3af8 0001     $;..(;..,;...:..
   14078:	3afc 0001 3b00 0001 3b04 0001 3b08 0001     .:...;...;...;..
   14088:	3b0c 0001 3b10 0001 3b14 0001 392c 0001     .;...;...;..,9..
   14098:	3ae8 0001 3aec 0001 3af0 0001 3af4 0001     .:...:...:...:..
   140a8:	392c 0001 3928 0001 3ad8 0001 3adc 0001     ,9..(9...:...:..
   140b8:	3ae0 0001 3ae4 0001 392c 0001 3acc 0001     .:...:..,9...:..
   140c8:	3a20 0001 3ad0 0001 392c 0001 3acc 0001      :...:..,9...:..
   140d8:	3a20 0001 3ad0 0001 3ad4 0001 392c 0001      :...:...:..,9..
   140e8:	3ae8 0001 3b30 0001 3b34 0001 3b38 0001     .:..0;..4;..8;..
   140f8:	3b3c 0001 3b40 0001 3b44 0001 3b48 0001     <;..@;..D;..H;..
   14108:	3af0 0001 3b4c 0001 3b84 0001 3b88 0001     .:..L;...;...;..
   14118:	3b8c 0001 3b50 0001 3b54 0001 3b58 0001     .;..P;..T;..X;..
   14128:	3b5c 0001 3b60 0001 3b64 0001 3b68 0001     \;..`;..d;..h;..
   14138:	3b6c 0001 3b70 0001 3b74 0001 3b78 0001     l;..p;..t;..x;..
   14148:	3b7c 0001 3b80 0001                         |;...;..

00014150 <adjustMenu>:
   14150:	0001 0000 3dfc 0001 0003 0000               .....=......

0001415c <biteCCMenu>:
   1415c:	0000 0000 3d24 0001 3d00 0001 9a08 1fff     ....$=...=......
   1416c:	0000 007f 0001 0000 734d 0000 63e5 0000     ........Ms...c..
   1417c:	0000 0000                                   ....

00014180 <breathMenu>:
   14180:	0001 0000 3df0 0001 0004 0000               .....=......

0001418c <cvTuneMenu>:
   1418c:	0000 0000 3e60 0001 3e68 0001 9a80 1fff     ....`>..h>......
   1419c:	0001 00c7 0000 0000 6fb5 0000 6245 0000     .........o..Eb..
   141ac:	0000 0000                                   ....

000141b0 <extrasMenu>:
   141b0:	0001 0000 3dd0 0001 0009 0000               .....=......

000141bc <hmzKeyMenu>:
   141bc:	0000 0000 3f2c 0001 3f34 0001 9aec 1fff     ....,?..4?......
   141cc:	0000 000b 0001 0000 64dd 0000 6215 0000     .........d...b..
   141dc:	0000 0000                                   ....

000141e0 <octaveMenu>:
   141e0:	0000 0000 3ea8 0001 3ea8 0001 9b36 1fff     .....>...>..6...
   141f0:	0000 0006 0000 0000 6fc9 0000 6275 0000     .........o..ub..
   14200:	0000 0000                                   ....

00014204 <otfKeyMenu>:
   14204:	0000 0000 3ef0 0001 3ef8 0001 9b5e 1fff     .....>...>..^...
   14214:	0000 0001 0001 0000 7029 0000 6205 0000     ........)p...b..
   14224:	0000 0000                                   ....

00014228 <rollerMenu>:
   14228:	0000 0000 3c28 0001 3c28 0001 9b9c 1fff     ....(<..(<......
   14238:	0000 0003 0001 0000 75b5 0000 6315 0000     .........u...c..
   14248:	0000 0000                                   ....

0001424c <vibDirMenu>:
   1424c:	0000 0000 3bb8 0001 3bb8 0001 9bfc 1fff     .....;...;......
   1425c:	0000 0001 0001 0000 6abd 0000 6465 0000     .........j..ed..
   1426c:	0000 0000                                   ....

00014270 <biteCtlMenu>:
   14270:	0000 0000 3d2c 0001 3d38 0001 9a0a 1fff     ....,=..8=......
   14280:	0000 0004 0001 0000 6c35 0000 63f5 0000     ........5l...c..
   14290:	0000 0000                                   ....

00014294 <controlMenu>:
   14294:	0001 0000 3de4 0001 0005 0000               .....=......

000142a0 <cvEcVibMenu>:
   142a0:	0000 0000 3e38 0001 3e44 0001 9a82 1fff     ....8>..D>......
   142b0:	0000 0008 0001 0000 7731 0000 6d81 0000     ........1w...m..
   142c0:	0000 0000                                   ....

000142c4 <cvScaleMenu>:
   142c4:	0000 0000 3e4c 0001 3e58 0001 9a76 1fff     ....L>..X>..v...
   142d4:	0001 00c7 0000 0000 6fa1 0000 6235 0000     .........o..5b..
   142e4:	0000 0000                                   ....

000142e8 <dacModeMenu>:
   142e8:	0000 0000 3e7c 0001 3e7c 0001 9a84 1fff     ....|>..|>......
   142f8:	0000 0001 0000 0000 6dc5 0000 6255 0000     .........m..Ub..
   14308:	0000 0000                                   ....

0001430c <fwcTypeMenu>:
   1430c:	0000 0000 3f6c 0001 3f78 0001 9abe 1fff     ....l?..x?......
   1431c:	0000 0003 0001 0000 6495 0000 61e5 0000     .........d...a..
   1432c:	0000 0000                                   ....

00014330 <leverCCMenu>:
   14330:	0000 0000 3cf4 0001 3d00 0001 9b16 1fff     .....<...=......
   14340:	0000 007f 0001 0000 7455 0000 63c5 0000     ........Ut...c..
   14350:	0000 0000                                   ....

00014354 <lpinky3Menu>:
   14354:	0000 0000 3c10 0001 3c1c 0001 9b2a 1fff     .....<...<..*...
   14364:	0000 0019 0000 0000 6f55 0000 6335 0000     ........Uo..5c..
   14374:	0000 0000                                   ....

00014378 <rotSubAMenu>:
   14378:	0001 0000 3ee4 0001 000a 0000               .....>......

00014384 <rotSubBMenu>:
   14384:	0001 0000 3ed8 0001 000b 0000               .....>......

00014390 <rotSubCMenu>:
   14390:	0001 0000 3ecc 0001 000c 0000               .....>......

0001439c <rotatorMenu>:
   1439c:	0001 0000 3dd8 0001 0006 0000               .....=......

000143a8 <velBiasMenu>:
   143a8:	0000 0000 3d6c 0001 3d6c 0001 9bf0 1fff     ....l=..l=......
   143b8:	0000 0009 0001 0000 79a1 0000 62a5 0000     .........y...b..
   143c8:	0000 0000                                   ....

000143cc <vibRetnMenu>:
   143cc:	0000 0000 3bf4 0001 3cd4 0001 8e76 1fff     .....;...<..v...
   143dc:	0000 0004 0000 0000 73a5 0000 6475 0000     .........s..ud..
   143ec:	0000 0000                                   ....

000143f0 <wlPowerMenu>:
   143f0:	0000 0000 3e2c 0001 3e2c 0001 9c30 1fff     ....,>..,>..0...
   14400:	0000 0003 0000 0000 6f89 0000 6875 0000     .........o..uh..
   14410:	0000 0000                                   ....

00014414 <breathATMenu>:
   14414:	0000 0000 3d98 0001 3d98 0001 9a1c 1fff     .....=...=......
   14424:	0000 0001 0001 0000 663d 0000 6c75 0000     ........=f..ul..
   14434:	0000 0000                                   ....

00014438 <breathCCMenu>:
   14438:	0000 0000 3dbc 0001 3dbc 0001 9a1e 1fff     .....=...=......
   14448:	0000 000a 0001 0000 6ce1 0000 6cbd 0000     .........l...l..
   14458:	0000 0000                                   ....

0001445c <deglitchMenu>:
   1445c:	0000 0000 3c54 0001 3c54 0001 9a86 1fff     ....T<..T<......
   1446c:	0000 0046 0000 0000 7a7d 0000 6365 0000     ..F.....}z..ec..
   1447c:	0000 0000                                   ....

00014480 <extraCC2Menu>:
   14480:	0000 0000 3ca0 0001 3ca0 0001 9a96 1fff     .....<...<......
   14490:	0000 007f 0001 0000 7939 0000 6385 0000     ........9y...c..
   144a0:	0000 0000                                   ....

000144a4 <fastBootMenu>:
   144a4:	0000 0000 3e70 0001 3e70 0001 9a9e 1fff     ....p>..p>......
   144b4:	0000 0001 0000 0000 658d 0000 6da1 0000     .........e...m..
   144c4:	0000 0000                                   ....

000144c8 <fwcDrop2Menu>:
   144c8:	0000 0000 3f40 0001 3f4c 0001 9aba 1fff     ....@?..L?......
   144d8:	0000 0001 0001 0000 6a05 0000 61c5 0000     .........j...a..
   144e8:	0000 0000                                   ....

000144ec <fwcLockHMenu>:
   144ec:	0000 0000 3f54 0001 3f60 0001 9abc 1fff     ....T?..`?......
   144fc:	0000 0001 0001 0000 704d 0000 61d5 0000     ........Mp...a..
   1450c:	0000 0000                                   ....

00014510 <gateOpenMenu>:
   14510:	0000 0000 3e84 0001 3e84 0001 9ac2 1fff     .....>...>......
   14520:	0000 0001 0001 0000 65b9 0000 6df9 0000     .........e...m..
   14530:	0000 0000                                   ....

00014534 <hmzLimitMenu>:
   14534:	0000 0000 3f04 0001 3f10 0001 9aee 1fff     .....?...?......
   14544:	0002 0005 0001 0000 7675 0000 61f5 0000     ........uv...a..
   14554:	0000 0000                                   ....

00014558 <idleMenuPage>:
   14558:	0000 0000 0001 0000 70c9 0000               .........p..

00014564 <legacyBRMenu>:
   14564:	0000 0000 3e90 0001 3e90 0001 9b10 1fff     .....>...>......
   14574:	0000 0001 0001 0000 65e5 0000 6e1d 0000     .........e...n..
   14584:	0000 0000                                   ....

00014588 <legacyPBMenu>:
   14588:	0000 0000 3e9c 0001 3e9c 0001 9b0e 1fff     .....>...>......
   14598:	0000 0001 0001 0000 6611 0000 6e41 0000     .........f..An..
   145a8:	0000 0000                                   ....

000145ac <leverCtlMenu>:
   145ac:	0000 0000 3d0c 0001 3d18 0001 9b18 1fff     .....=...=......
   145bc:	0000 0003 0001 0000 6c01 0000 63d5 0000     .........l...c..
   145cc:	0000 0000                                   ....

000145d0 <rotator1Menu>:
   145d0:	0000 0000 4040 0001 3fa4 0001 9ba2 1fff     ....@@...?......
   145e0:	0000 0030 0000 0000 7019 0000 7071 0000     ..0......p..qp..
   145f0:	0000 0000                                   ....

000145f4 <rotator2Menu>:
   145f4:	0000 0000 4034 0001 3fa4 0001 9ba4 1fff     ....4@...?......
   14604:	0000 0030 0000 0000 7019 0000 7071 0000     ..0......p..qp..
   14614:	0000 0000                                   ....

00014618 <rotator3Menu>:
   14618:	0000 0000 4028 0001 3fa4 0001 9ba6 1fff     ....(@...?......
   14628:	0000 0030 0000 0000 7019 0000 7071 0000     ..0......p..qp..
   14638:	0000 0000                                   ....

0001463c <rotator4Menu>:
   1463c:	0000 0000 401c 0001 3fa4 0001 9ba8 1fff     .....@...?......
   1464c:	0000 0030 0000 0000 7019 0000 7071 0000     ..0......p..qp..
   1465c:	0000 0000                                   ....

00014660 <velSmpDlMenu>:
   14660:	0000 0000 3d78 0001 3d78 0001 9bf2 1fff     ....x=..x=......
   14670:	0000 001e 0001 0000 7a09 0000 62b5 0000     .........z...b..
   14680:	0000 0000                                   ....

00014684 <velocityMenu>:
   14684:	0000 0000 3d8c 0001 3d8c 0001 9bf4 1fff     .....=...=......
   14694:	0000 007f 0001 0000 7869 0000 62d5 0000     ........ix...b..
   146a4:	0000 0000                                   ....

000146a8 <vibDepthMenu>:
   146a8:	0000 0000 3bfc 0001 3cd4 0001 9c1c 1fff     .....;...<......
   146b8:	0000 0009 0000 0000 76c9 0000 6485 0000     .........v...d..
   146c8:	0000 0000                                   ....

000146cc <vibSenseMenu>:
   146cc:	0000 0000 3be8 0001 3cd4 0001 8e78 1fff     .....;...<..x...
   146dc:	0001 000c 0000 0000 73fd 0000 6455 0000     .........s..Ud..
   146ec:	0000 0000                                   ....

000146f0 <aboutMenuPage>:
   146f0:	0000 0000 0001 0000 8b71 0000               ........q...

000146fc <breathCC2Menu>:
   146fc:	0000 0000 3db0 0001 3db0 0001 9a20 1fff     .....=...=.. ...
   1470c:	0000 007f 0001 0000 78d1 0000 6c99 0000     .........x...l..
   1471c:	0000 0000                                   ....

00014720 <fingeringMenu>:
   14720:	0000 0000 3c34 0001 3c34 0001 9ab8 1fff     ....4<..4<......
   14730:	0000 0006 0001 0000 6ae1 0000 6325 0000     .........j..%c..
   14740:	0000 0000                                   ....

00014744 <glissandoMenu>:
   14744:	0000 0000 3c60 0001 3c68 0001 9ad4 1fff     ....`<..h<......
   14754:	0007 007f 0001 0000 7af1 0000 62f5 0000     .........z...b..
   14764:	0000 0000                                   ....

00014768 <harmonicsMenu>:
   14768:	0000 0000 3c88 0001 3c94 0001 9ae4 1fff     .....<...<......
   14778:	0000 0006 0001 0000 7801 0000 6375 0000     .........x..uc..
   14788:	0000 0000                                   ....

0001478c <lvlCtrlCCMenu>:
   1478c:	0000 0000 3c40 0001 3c40 0001 9b12 1fff     ....@<..@<......
   1479c:	0000 007f 0001 0000 7799 0000 6345 0000     .........w..Ec..
   147ac:	0000 0000                                   ....

000147b0 <patchMenuPage>:
   147b0:	0000 0000 0001 0000 82b9 0000               ............

000147bc <pitchBendMenu>:
   147bc:	0000 0000 3cb8 0001 3cb8 0001 991a 1fff     .....<...<......
   147cc:	0000 000c 0000 0000 7b69 0000 6305 0000     ........i{...c..
   147dc:	0000 0000                                   ....

000147e0 <portLimitMenu>:
   147e0:	0000 0000 3cc4 0001 3cd0 0001 9b84 1fff     .....<...<......
   147f0:	0001 007f 0001 0000 7245 0000 63a5 0000     ........Er...c..
   14800:	0000 0000                                   ....

00014804 <rotatorB1Menu>:
   14804:	0000 0000 4004 0001 3fa4 0001 9bae 1fff     .....@...?......
   14814:	0000 0030 0000 0000 7019 0000 709d 0000     ..0......p...p..
   14824:	0000 0000                                   ....

00014828 <rotatorB2Menu>:
   14828:	0000 0000 3ff8 0001 3fa4 0001 9bb0 1fff     .....?...?......
   14838:	0000 0030 0000 0000 7019 0000 709d 0000     ..0......p...p..
   14848:	0000 0000                                   ....

0001484c <rotatorB3Menu>:
   1484c:	0000 0000 3fec 0001 3fa4 0001 9bb2 1fff     .....?...?......
   1485c:	0000 0030 0000 0000 7019 0000 709d 0000     ..0......p...p..
   1486c:	0000 0000                                   ....

00014870 <rotatorB4Menu>:
   14870:	0000 0000 3fe0 0001 3fa4 0001 9bb4 1fff     .....?...?......
   14880:	0000 0030 0000 0000 7019 0000 709d 0000     ..0......p...p..
   14890:	0000 0000                                   ....

00014894 <rotatorC1Menu>:
   14894:	0000 0000 3fc8 0001 3fa4 0001 9bba 1fff     .....?...?......
   148a4:	0000 0030 0000 0000 7019 0000 6159 0000     ..0......p..Ya..
   148b4:	0000 0000                                   ....

000148b8 <rotatorC2Menu>:
   148b8:	0000 0000 3fbc 0001 3fa4 0001 9bbc 1fff     .....?...?......
   148c8:	0000 0030 0000 0000 7019 0000 6159 0000     ..0......p..Ya..
   148d8:	0000 0000                                   ....

000148dc <rotatorC3Menu>:
   148dc:	0000 0000 3fb0 0001 3fa4 0001 9bbe 1fff     .....?...?......
   148ec:	0000 0030 0000 0000 7019 0000 6159 0000     ..0......p..Ya..
   148fc:	0000 0000                                   ....

00014900 <rotatorC4Menu>:
   14900:	0000 0000 3f98 0001 3fa4 0001 9bc0 1fff     .....?...?......
   14910:	0000 0030 0000 0000 7019 0000 6159 0000     ..0......p..Ya..
   14920:	0000 0000                                   ....

00014924 <transposeMenu>:
   14924:	0000 0000 3eb0 0001 3eb0 0001 9bec 1fff     .....>...>......
   14934:	0000 0018 0000 0000 670d 0000 6285 0000     .........g...b..
   14944:	0000 0000                                   ....

00014948 <vib2BrAmtMenu>:
   14948:	0000 0000 3b98 0001 3ba4 0001 8e74 1fff     .....;...;..t...
   14958:	0000 000a 0000 0000 729d 0000 6405 0000     .........r...d..
   14968:	0000 0000                                   ....

0001496c <vib2BrDirMenu>:
   1496c:	0000 0000 3bac 0001 3bb8 0001 9bf8 1fff     .....;...;......
   1497c:	0000 0001 0001 0000 6a99 0000 6415 0000     .........j...d..
   1498c:	0000 0000                                   ....

00014990 <wlChannelMenu>:
   14990:	0000 0000 3e24 0001 3e24 0001 8e9e 1fff     ....$>..$>......
   149a0:	0004 0050 0000 0000 71ed 0000 6869 0000     ..P......q..ih..
   149b0:	0000 0000                                   ....

000149b4 <adjustMenuPage>:
   149b4:	0000 0000 0001 0000 695d 0000               ........]i..

000149c0 <breathMenuPage>:
   149c0:	3d44 0001 0000 0101 0009 0000 8ea0 1fff     D=..............

000149d0 <extrasMenuPage>:
   149d0:	3dd0 0001 0000 0105 000b 0000 8f10 1fff     .=..............

000149e0 <harmSelectMenu>:
   149e0:	0000 0000 3c74 0001 3c80 0001 9ae2 1fff     ....t<...<......
   149f0:	0000 0007 0001 0000 6b41 0000 6b21 0000     ........Ak..!k..
   14a00:	0000 0000                                   ....

00014a04 <nurad_logo_bmp>:
	...
   14b28:	7f00 ffff 0000 f903 ffff 00fc 0000 0000     ................
   14b38:	7f00 ffff 0080 f907 ffff 00fe 0000 0000     ................
   14b48:	6000 0100 00c0 190e 0080 0007 0000 0000     .`..............
   14b58:	6f00 fcff 00c0 d91d ffbf 00f3 0000 0000     .o..............
   14b68:	6f00 feff 00c0 d93b ffbf 00fb 0000 0000     .o....;.........
   14b78:	6c00 0600 00c0 d977 00b0 001b 0000 0000     .l....w.........
   14b88:	6c00 0600 00c0 d9ee 00b0 001b 0000 0000     .l..............
   14b98:	6c00 0600 01c0 d9dc 00b0 001b 0000 0008     .l..............
   14ba8:	6c00 0600 03c0 d9b8 00b0 001b 0000 0018     .l..............
   14bb8:	6f00 feff 07c0 d97f 00b0 001b 0000 0018     .o..............
   14bc8:	6f00 fcff 0ec0 d9ff 00b0 001b c000 0018     .o..............
   14bd8:	6000 0100 1cc0 1900 00b0 001b c000 0038     .`............8.
   14be8:	6f00 fffb 3b80 d9ff 00b0 001b c000 0030     .o...;........0.
   14bf8:	6f00 fffd 7700 d9ff 00b0 001b e001 0030     .o...w........0.
   14c08:	6c00 e00e ee00 d900 00b0 001b e001 0030     .l............0.
   14c18:	6c00 7007 dc01 d900 00b0 001b b001 0030     .l.p..........0.
   14c28:	6c00 b803 b803 d900 00b0 001b b001 0030     .l............0.
   14c38:	6c00 dc01 7007 d900 00b0 001b 9801 c020     .l...p........ .
   14c48:	6c40 ee00 e00e d900 00b0 001b 0c03 c020     @l............ .
   14c58:	6cc0 7700 c01d d900 ffbf 00fb 0c03 c020     .l.w.......... .
   14c68:	6cc0 3b00 80bb d900 ffbf 00f3 0603 c120     .l.;.......... .
   14c78:	6cc0 1d00 00f7 d900 0080 0007 0303 8320     .l............ .
   14c88:	6c80 0e00 00ee d900 ffff 00fe 0303 83b1     .l..............
   14c98:	6c80 0700 005c d900 ffff 00fc 0103 87f1     .l..\...........
   14ca8:	0080 0000 0000 0000 0000 0000 0003 8df1     ................
   14cb8:	0080 0000 0000 0000 0000 0000 0003 b971     ..............q.
   14cc8:	0080 0000 0000 0000 0000 0000 0003 f131     ..............1.
   14cd8:	0080 0000 0000 0000 0000 0000 0003 c100     ................
   14ce8:	0080 0000 0000 0000 0000 0000 0003 0000     ................
	...
   14d04:	0003 0000 0000 0000 0000 0000 0000 0000     ................
   14d14:	0002 0000 0000 0000 0000 0000 0000 0000     ................
	...

00014e04 <polySelectMenu>:
   14e04:	0000 0000 3f18 0001 3f24 0001 9b80 1fff     .....?..$?......
   14e14:	0000 000a 0001 0000 6669 0000 6225 0000     ........if..%b..
   14e24:	0000 0000                                   ....

00014e28 <vibSquelchMenu>:
   14e28:	0000 0000 3bdc 0001 3cd4 0001 8e7c 1fff     .....;...<..|...
   14e38:	0001 001e 0000 0000 7505 0000 6445 0000     .........u..Ed..
   14e48:	0000 0000                                   ....

00014e4c <vibratoSubMenu>:
   14e4c:	0001 0000 3b90 0001 0007 0000               .....;......

00014e58 <batteryTypeMenu>:
   14e58:	0000 0000 3e18 0001 3e18 0001 9a04 1fff     .....>...>......
   14e68:	0000 0002 0001 0000 6d49 0000 6d29 0000     ........Im..)m..
   14e78:	0000 0000                                   ....

00014e7c <controlMenuPage>:
   14e7c:	3c04 0001 0000 0102 0013 0000 8ec4 1fff     .<..............

00014e8c <rotSubAMenuPage>:
   14e8c:	3ee4 0001 0000 0606 0005 0000 8f60 1fff     .>..........`...

00014e9c <rotSubBMenuPage>:
   14e9c:	3ed8 0001 0000 0607 0005 0000 8f74 1fff     .>..........t...

00014eac <rotSubCMenuPage>:
   14eac:	3ecc 0001 0000 0608 0005 0000 8f88 1fff     .>..............

00014ebc <rotatorMenuPage>:
   14ebc:	3ebc 0001 0000 0103 000b 0000 8f9c 1fff     .>..............

00014ecc <rotatorParaMenu>:
   14ecc:	0000 0000 404c 0001 3fa4 0001 9ba0 1fff     ....L@...?......
   14edc:	0000 0030 0000 0000 7005 0000 6185 0000     ..0......p...a..
   14eec:	0000 0000                                   ....

00014ef0 <rotatorPrioMenu>:
   14ef0:	0000 0000 3f80 0001 3f8c 0001 9b90 1fff     .....?...?......
   14f00:	0000 0001 0001 0000 69e1 0000 61b5 0000     .........i...a..
   14f10:	0000 0000                                   ....

00014f14 <vibratoMenuPage>:
   14f14:	3b90 0001 0000 0504 0009 0000 8fc8 1fff     .;..............

00014f24 <rotatorParaBMenu>:
   14f24:	0000 0000 4010 0001 3fa4 0001 9bac 1fff     .....@...?......
   14f34:	0000 0030 0000 0000 6ff1 0000 6195 0000     ..0......o...a..
   14f44:	0000 0000                                   ....

00014f48 <rotatorParaCMenu>:
   14f48:	0000 0000 3fd4 0001 3fa4 0001 9bb8 1fff     .....?...?......
   14f58:	0000 0030 0000 0000 6fdd 0000 61a5 0000     ..0......o...a..
   14f68:	0000 0000                                   ....

00014f6c <vibSenseBiteMenu>:
   14f6c:	0000 0000 3bd0 0001 3cd4 0001 8e7a 1fff     .....;...<..z...
   14f7c:	0001 0011 0000 0000 755d 0000 6435 0000     ........]u..5d..
   14f8c:	0000 0000                                   ....

00014f90 <breathCC2RiseMenu>:
   14f90:	0000 0000 3da4 0001 3da4 0001 9a22 1fff     .....=...=.."...
   14fa0:	0001 000a 0001 0000 7611 0000 62e5 0000     .........v...b..
   14fb0:	0000 0000                                   ....

00014fb4 <breathIntervalMenu>:
   14fb4:	0000 0000 3d54 0001 3d60 0001 8d3a 1fff     ....T=..`=..:...
   14fc4:	0003 000f 0000 0000 72f5 0000 6295 0000     .........r...b..
   14fd4:	0000 0000                                   ....

00014fd8 <vibSquelchBiteMenu>:
   14fd8:	0000 0000 3bc4 0001 3cd4 0001 8e7e 1fff     .....;...<..~...
   14fe8:	0001 001e 0000 0000 74ad 0000 6425 0000     .........t..%d..
   14ff8:	0000 0000                                   ....

00014ffc <midiMenu>:
   14ffc:	0000 0000 3e04 0001 3e0c 0001 9918 1fff     .....>...>......
   1500c:	0001 0010 0006 0000 8125 0000 6265 0000     ........%...eb..
   1501c:	6a29 0000                                   )j..

00015020 <portMenu>:
   15020:	0000 0000 3cdc 0001 3ce8 0001 9b8a 1fff     .....<...<......
   15030:	0000 0005 0001 0000 6bc1 0000 63b5 0000     .........k...c..
   15040:	0000 0000                                   ....

00015044 <aboutMenu>:
   15044:	0001 0000 3dc8 0001 0008 0000               .....=......

00015050 <curveMenu>:
   15050:	0000 0000 3d84 0001 3d84 0001 9a6c 1fff     .....=...=..l...
   15060:	0000 000c 0003 0000 7f25 0000 62c5 0000     ........%....b..
   15070:	0000 0000                                   ....

00015074 <extraMenu>:
   15074:	0000 0000 3cac 0001 3cac 0001 9a94 1fff     .....<...<......
   15084:	0000 0004 0001 0000 6b81 0000 6395 0000     .........k...c..
   15094:	0000 0000                                   ....

00015098 <pinkyMenu>:
   15098:	0000 0000 3c4c 0001 3c4c 0001 9b74 1fff     ....L<..L<..t...
   150a8:	0000 001f 0000 0000 6ec5 0000 6355 0000     .........n..Uc..
   150b8:	0000 0000                                   ....

000150bc <cursorBlinkInterval>:
   150bc:	012c 0000                                   ,...

000150c0 <mainMenuPage>:
   150c0:	6881 0000 0006 0000 0009 0000 8f3c 1fff     .h..........<...
   150d0:	2100 0211 0002 0000 2100 0211 0405 ffff     .!.......!......
   150e0:	754e 5645 6349 3130 ff00 ffff 7676 4e76     NuEVIc01....vvvN
   150f0:	4575 4956 6363 0063 7676 4e76 4575 4956     uEVIccc.vvvNuEVI
   15100:	3063 6534 7665 7676 7676 7676 0076 ffff     c04eevvvvvvvv...
   15110:	6e49 6176 696c 2064 6863 6365 736b 6d75     Invalid checksum
   15120:	0000 0000 6e49 6176 696c 2064 6f63 666e     ....Invalid conf
   15130:	6769 7320 7a69 0065 6e49 6176 696c 2064     ig size.Invalid 
   15140:	6f63 666e 6769 7620 7265 6973 6e6f ff00     config version..
   15150:	6e49 6176 696c 2064 6f63 666e 6769 6620     Invalid config f
   15160:	726f 616d 0074 ffff 754e 5645 0049 0000     ormat...NuEVI...
   15170:	6e49 6176 696c 2064 656d 7373 6761 2e65     Invalid message.
   15180:	0000 0000 3065 0030 3063 0030 6553 646e     ....e00.c00.Send
   15190:	6e69 2067 6f63 666e 6769 2e2e 002e 0000     ing config......
   151a0:	6f43 666e 6769 7320 6e65 2e74 0000 0000     Config sent.....
   151b0:	3063 0033 6553 646e 6e69 2067 6576 7372     c03.Sending vers
   151c0:	6f69 2e6e 0000 0000 3063 0032 6552 6563     ion.....c02.Rece
   151d0:	7669 6e69 2067 6f63 666e 6769 2e2e 002e     iving config....
   151e0:	654e 2077 6f63 666e 6769 7320 7661 6465     New config saved
   151f0:	002e 0000 6e55 6e6b 776f 206e 656d 7373     ....Unknown mess
   15200:	6761 2e65 0000 0000 3065 0031 6f43 666e     age.....e01.Conf
   15210:	6769 6d20 6d67 0074 6f50 6577 2072 666f     ig mgmt.Power of
   15220:	2066 754e 5645 0049 6f74 6520 6978 0074     f NuEVI.to exit.
   15230:	6552 6461 2e79 ff00 3e00 ff7f               Ready....>..

0001523c <TwoWire::i2c1_hardware>:
   1523c:	8034 4004 0080 0000 ff1e ffff 02ff 0000     4..@............
   1524c:	0000 ff1d ffff 02ff 0000 0000 0019 0000     ................

0001525c <TwoWire::i2c0_hardware>:
   1525c:	8034 4004 0040 0000 1112 ffff 02ff 0002     4..@@...........
   1526c:	0000 1013 ffff 02ff 0002 0000 0018 0000     ................

0001527c <vtable for TwoWire>:
	...
   15284:	ae61 0000 ae89 0000 ae15 0000 ae5d 0000     a...........]...
   15294:	ae19 0000 ae25 0000 ae45 0000               ....%...E...

000152a0 <splash1_data>:
   152a0:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   152b0:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   152c0:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   152d0:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   152e0:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   152f0:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   15308:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   15318:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   15328:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   15338:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   15348:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   15358:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   15368:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   15378:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   15388:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   15398:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   153a8:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   153b8:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   153c8:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   153d8:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   153e8:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   153f8:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   15408:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   15418:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   15430:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   15448:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   15458:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   15468:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   15478:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   15488:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   15498:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   154a8:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   154b8:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   154c8:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   154d8:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   154e8:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   154f8:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   15508:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   15518:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   15528:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   15538:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   15548:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   15558:	fdff 5b6b 6adb c0fd                         ..k[.j..

00015560 <splash2_data>:
   15560:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   15570:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   15580:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   1559c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   155ac:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   155bc:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   155cc:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   155dc:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   155ec:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   155fc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   1560c:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   1561c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   1562c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   1563c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   1564c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   1565c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   1566c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   1567c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   1568c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   1569c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   156ac:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   156bc:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   156cc:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   156dc:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   156f4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   15704:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   15714:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   15724:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   15734:	7f00 ffff feff adb5 b5ed e07e               ..........~.

00015740 <vtable for Adafruit_SSD1306>:
	...
   15748:	d8e1 0000 dfa5 0000 ae15 0000 c1d1 0000     ................
   15758:	c1d5 0000 cf69 0000 cf6d 0000 cfa1 0000     ....i...m.......
   15768:	cf79 0000 cf8d 0000 d2a9 0000 cf69 0000     y...........i...
   15778:	cfdd 0000 c679 0000 c511 0000 c4a1 0000     ....y...........
   15788:	d149 0000 cfb9 0000 d0a5 0000 d1dd 0000     I...............

00015798 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::premask>:
   15798:	8000 e0c0 f8f0 fefc                         ........

000157a0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::postmask>:
   157a0:	0100 0703 1f0f 7f3f                         ......?.

000157a8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1>:
   157a8:	d5ae a880                                   ....

000157ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2>:
   157ac:	00d3 8d40                                   ..@.

000157b0 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3>:
   157b0:	0020 c8a1                                    ...

000157b4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5>:
   157b4:	40db a6a4 af2e ffff                         .@......

000157bc <Adafruit_SSD1306::display()::dlist1>:
   157bc:	0022 21ff ff00 ffff                         "..!....

000157c4 <font>:
   157c4:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   157d4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   157e4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   157f4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   15804:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   15814:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   15824:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   15834:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   15844:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   15854:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   15864:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   15874:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   15884:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   15894:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   158a4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   158b4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   158c4:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   158d4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   158e4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   158f4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   15904:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   15914:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   15924:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   15934:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   15944:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   15954:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   15964:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   15974:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   15984:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   15994:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   159a4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   159b4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   159c4:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   159d4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   159e4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   159f4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   15a04:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   15a14:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   15a24:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   15a34:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   15a44:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   15a54:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   15a64:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   15a74:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   15a84:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   15a94:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   15aa4:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   15ab4:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   15ac4:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   15ad4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   15ae4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   15af4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   15b04:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   15b14:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   15b24:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   15b34:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   15b44:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   15b54:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   15b64:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   15b74:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   15b84:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   15b94:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   15ba4:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   15bb4:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   15bc4:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   15bd4:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   15be4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   15bf4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   15c04:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   15c14:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   15c24:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   15c34:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   15c44:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   15c54:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   15c64:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   15c74:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   15c84:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   15c94:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   15ca4:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   15cb4:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

00015cc4 <vtable for Adafruit_GFX>:
	...
   15ccc:	d8e1 0000 dfa5 0000 ae15 0000 c1d1 0000     ................
   15cdc:	e6b9 0000 cf69 0000 cf6d 0000 cfa1 0000     ....i...m.......
   15cec:	cf79 0000 cf8d 0000 d2a9 0000 cf69 0000     y...........i...
   15cfc:	cfdd 0000 cfd9 0000 cff9 0000 d051 0000     ............Q...
   15d0c:	d149 0000 cfb9 0000 d0a5 0000 d1dd 0000     I...............

00015d1c <_serialEvent_default>:
   15d1c:	ff00 ffff                                   ....

00015d20 <vtable for HardwareSerial2>:
	...
   15d28:	daad 0000 dad1 0000 db61 0000 db5d 0000     ........a...]...
   15d38:	db59 0000 db55 0000 db51 0000 da75 0000     Y...U...Q...u...
   15d48:	db31 0000 db2d 0000 db25 0000 db1d 0000     1...-...%.......
   15d58:	db15 0000 db05 0000 daf5 0000 daf1 0000     ................
   15d68:	dae9 0000 dae1 0000 db85 0000 dba5 0000     ................
   15d78:	dbc5 0000 db65 0000 dab9 0000 daa1 0000     ....e...........

00015d88 <vtable for HardwareSerial3>:
	...
   15d90:	dc1d 0000 dc41 0000 dcd1 0000 dccd 0000     ....A...........
   15da0:	dcc9 0000 dcc5 0000 dcc1 0000 dbe5 0000     ................
   15db0:	dca1 0000 dc9d 0000 dc95 0000 dc8d 0000     ................
   15dc0:	dc85 0000 dc75 0000 dc65 0000 dc61 0000     ....u...e...a...
   15dd0:	dc59 0000 dc51 0000 dcf5 0000 dd15 0000     Y...Q...........
   15de0:	dd35 0000 dcd5 0000 dc29 0000 dc11 0000     5.......).......

00015df0 <teensy::inplace_function_detail::empty_vtable<void>>:
   15df0:	dd59 0000 dd5d 0000 dd61 0000 dd65 0000     Y...]...a...e...

00015e00 <pin2sc1a>:
   15e00:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
   15e10:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
   15e20:	ffff 1300 9303 921a ff17 ffff f06f 037f     ............o...
   15e30:	7003 7803 f013 0f80 d0fb 4770               .p.x......pG

00015e3c <CSWTCH.39>:
   15e3c:	0008 0000 000c 0000 000a 0000 0009 0000     ................
   15e4c:	000b 0000                                   ....

00015e50 <digital_pin_to_info_PGM>:
   15e50:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
   15e60:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
   15e70:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
   15e80:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
   15e90:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
   15ea0:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
   15eb0:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
   15ec0:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
   15ed0:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
   15ee0:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
   15ef0:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
   15f00:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
   15f10:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
   15f20:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
   15f30:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
   15f40:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
   15f50:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@

00015f60 <pin2tsi>:
   15f60:	0a09 ffff ffff ffff ffff ffff ffff 0dff     ................
   15f70:	0600 0708 ffff 0f0e 0cff ffff ffff ffff     ................
   15f80:	050b ffff                                   ....

00015f84 <usb_descriptor_list>:
   15f84:	0100 0000 935c 1fff 0012 0000 0200 0000     ....\...........
   15f94:	92c4 1fff 0095 0000 0305 0409 938c 1fff     ................
   15fa4:	0000 0000 0300 0000 9370 1fff 0000 0000     ........p.......
   15fb4:	0301 0409 9374 1fff 0000 0000 0302 0409     ....t...........
   15fc4:	8fec 1fff 0000 0000 0303 0409 939c 1fff     ................
	...

00015fe4 <usb_endpoint_config_table>:
   15fe4:	1915 1515 ff19 ffff 0000 3f00 0000 bf00     ...........?....
   15ff4:	7180 3f31 7180 bf31 f7d1 3717 f7d1 b717     .q1?.q1....7....

00016004 <_init>:
   16004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16006:	bf00      	nop
   16008:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1600a:	bc08      	pop	{r3}
   1600c:	469e      	mov	lr, r3
   1600e:	4770      	bx	lr

00016010 <__init_array_start>:
   16010:	00012925 	.word	0x00012925

00016014 <__frame_dummy_init_array_entry>:
   16014:	00000435 00005111 00007c65 0000aa81     5....Q..e|......
   16024:	0000df6d                                m...

Disassembly of section .fini:

00016028 <_fini>:
   16028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1602a:	bf00      	nop

Disassembly of section .data:

1fff8c30 <port_E_isr>:
PORT_ISR_FUNCTION_CLZ(E)
1fff8c30:	b538      	push	{r3, r4, r5, lr}
1fff8c32:	4b0a      	ldr	r3, [pc, #40]	; (1fff8c5c <port_E_isr+0x2c>)
1fff8c34:	4d0a      	ldr	r5, [pc, #40]	; (1fff8c60 <port_E_isr+0x30>)
1fff8c36:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8c3a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8c3e:	e005      	b.n	1fff8c4c <port_E_isr+0x1c>
1fff8c40:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8c44:	4798      	blx	r3
1fff8c46:	1e63      	subs	r3, r4, #1
1fff8c48:	401c      	ands	r4, r3
1fff8c4a:	d005      	beq.n	1fff8c58 <port_E_isr+0x28>
1fff8c4c:	fa94 f3a4 	rbit	r3, r4
1fff8c50:	fab3 f383 	clz	r3, r3
1fff8c54:	2c00      	cmp	r4, #0
1fff8c56:	d1f3      	bne.n	1fff8c40 <port_E_isr+0x10>
1fff8c58:	bd38      	pop	{r3, r4, r5, pc}
1fff8c5a:	bf00      	nop
1fff8c5c:	4004d000 	.word	0x4004d000
1fff8c60:	1fff9288 	.word	0x1fff9288

1fff8c64 <port_D_isr>:
PORT_ISR_FUNCTION_CLZ(D)
1fff8c64:	b538      	push	{r3, r4, r5, lr}
1fff8c66:	4b0a      	ldr	r3, [pc, #40]	; (1fff8c90 <port_D_isr+0x2c>)
1fff8c68:	4d0a      	ldr	r5, [pc, #40]	; (1fff8c94 <port_D_isr+0x30>)
1fff8c6a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8c6e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8c72:	e005      	b.n	1fff8c80 <port_D_isr+0x1c>
1fff8c74:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8c78:	4798      	blx	r3
1fff8c7a:	1e63      	subs	r3, r4, #1
1fff8c7c:	401c      	ands	r4, r3
1fff8c7e:	d005      	beq.n	1fff8c8c <port_D_isr+0x28>
1fff8c80:	fa94 f3a4 	rbit	r3, r4
1fff8c84:	fab3 f383 	clz	r3, r3
1fff8c88:	2c00      	cmp	r4, #0
1fff8c8a:	d1f3      	bne.n	1fff8c74 <port_D_isr+0x10>
1fff8c8c:	bd38      	pop	{r3, r4, r5, pc}
1fff8c8e:	bf00      	nop
1fff8c90:	4004c000 	.word	0x4004c000
1fff8c94:	1fff9268 	.word	0x1fff9268

1fff8c98 <port_C_isr>:
PORT_ISR_FUNCTION_CLZ(C)
1fff8c98:	b538      	push	{r3, r4, r5, lr}
1fff8c9a:	4b0a      	ldr	r3, [pc, #40]	; (1fff8cc4 <port_C_isr+0x2c>)
1fff8c9c:	4d0a      	ldr	r5, [pc, #40]	; (1fff8cc8 <port_C_isr+0x30>)
1fff8c9e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8ca2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8ca6:	e005      	b.n	1fff8cb4 <port_C_isr+0x1c>
1fff8ca8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8cac:	4798      	blx	r3
1fff8cae:	1e63      	subs	r3, r4, #1
1fff8cb0:	401c      	ands	r4, r3
1fff8cb2:	d005      	beq.n	1fff8cc0 <port_C_isr+0x28>
1fff8cb4:	fa94 f3a4 	rbit	r3, r4
1fff8cb8:	fab3 f383 	clz	r3, r3
1fff8cbc:	2c00      	cmp	r4, #0
1fff8cbe:	d1f3      	bne.n	1fff8ca8 <port_C_isr+0x10>
1fff8cc0:	bd38      	pop	{r3, r4, r5, pc}
1fff8cc2:	bf00      	nop
1fff8cc4:	4004b000 	.word	0x4004b000
1fff8cc8:	1fff9238 	.word	0x1fff9238

1fff8ccc <port_B_isr>:
PORT_ISR_FUNCTION_CLZ(B)
1fff8ccc:	b538      	push	{r3, r4, r5, lr}
1fff8cce:	4b0a      	ldr	r3, [pc, #40]	; (1fff8cf8 <port_B_isr+0x2c>)
1fff8cd0:	4d0a      	ldr	r5, [pc, #40]	; (1fff8cfc <port_B_isr+0x30>)
1fff8cd2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8cd6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8cda:	e005      	b.n	1fff8ce8 <port_B_isr+0x1c>
1fff8cdc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8ce0:	4798      	blx	r3
1fff8ce2:	1e63      	subs	r3, r4, #1
1fff8ce4:	401c      	ands	r4, r3
1fff8ce6:	d005      	beq.n	1fff8cf4 <port_B_isr+0x28>
1fff8ce8:	fa94 f3a4 	rbit	r3, r4
1fff8cec:	fab3 f383 	clz	r3, r3
1fff8cf0:	2c00      	cmp	r4, #0
1fff8cf2:	d1f3      	bne.n	1fff8cdc <port_B_isr+0x10>
1fff8cf4:	bd38      	pop	{r3, r4, r5, pc}
1fff8cf6:	bf00      	nop
1fff8cf8:	4004a000 	.word	0x4004a000
1fff8cfc:	1fff91e8 	.word	0x1fff91e8

1fff8d00 <port_A_isr>:
PORT_ISR_FUNCTION_CLZ(A)
1fff8d00:	b538      	push	{r3, r4, r5, lr}
1fff8d02:	4b0a      	ldr	r3, [pc, #40]	; (1fff8d2c <port_A_isr+0x2c>)
1fff8d04:	4d0a      	ldr	r5, [pc, #40]	; (1fff8d30 <port_A_isr+0x30>)
1fff8d06:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8d0a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8d0e:	e005      	b.n	1fff8d1c <port_A_isr+0x1c>
1fff8d10:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8d14:	4798      	blx	r3
1fff8d16:	1e63      	subs	r3, r4, #1
1fff8d18:	401c      	ands	r4, r3
1fff8d1a:	d005      	beq.n	1fff8d28 <port_A_isr+0x28>
1fff8d1c:	fa94 f3a4 	rbit	r3, r4
1fff8d20:	fab3 f383 	clz	r3, r3
1fff8d24:	2c00      	cmp	r4, #0
1fff8d26:	d1f3      	bne.n	1fff8d10 <port_A_isr+0x10>
1fff8d28:	bd38      	pop	{r3, r4, r5, pc}
1fff8d2a:	bf00      	nop
1fff8d2c:	40049000 	.word	0x40049000
1fff8d30:	1fff91b0 	.word	0x1fff91b0

1fff8d34 <__dso_handle>:
1fff8d34:	00000000                                ....

1fff8d38 <addedIntervals>:
1fff8d38:	                                         ..

1fff8d3a <breathInterval>:
1fff8d3a:	                                         ..

1fff8d3c <calOffsetLH>:
1fff8d3c:	0000005a fffffff3 ffffffdf ffffffa3     Z...............
1fff8d4c:	ffffffae 00000073 00000076 00000002     ....s...v.......
1fff8d5c:	00000004 ffffffd8 ffffffb5 ffffffa2     ................

1fff8d6c <calOffsetRH>:
1fff8d6c:	ffffffa8 ffffffbc ffffffe1 0000000d     ................
1fff8d7c:	00000004 00000078 00000079 ffffffbc     ....x...y.......
1fff8d8c:	ffffffab ffffffde 00000017 00000057     ............W...

1fff8d9c <calOffsetRollers>:
1fff8d9c:	00000010 0000000a 00000008 00000015     ................
1fff8dac:	00000018 00000029                       ....)...

1fff8db4 <ccList>:
1fff8db4:	07020100 0702010b                        .........J.

1fff8dbf <currentRotation>:
1fff8dbf:	                                         .

1fff8dc0 <filterFreq>:
1fff8dc0:	41f00000                                ...A

1fff8dc4 <glissTime>:
1fff8dc4:	0000001e                                ....

1fff8dc8 <oldpb>:
1fff8dc8:	00002000                                . ..

1fff8dcc <pbDepthList>:
1fff8dcc:	00002000 00002000 00001000 00000aab     . ... ..........
1fff8ddc:	00000800 00000666 00000555 00000492     ....f...U.......
1fff8dec:	00000400 0000038e 00000333 000002e8     ........3.......
1fff8dfc:	000002ab                                ....

1fff8e00 <pbSend>:
1fff8e00:	00002000                                . ..

1fff8e04 <pitchBend>:
1fff8e04:	00002000                                . ..

1fff8e08 <saxFingerResult>:
1fff8e08:	fffffff3 fffffff4 fffffff5 fffffff6     ................
1fff8e18:	fffffff7 fffffff8 fffffff9 fffffffa     ................
1fff8e28:	fffffffb fffffffc fffffffd fffffffd     ................
1fff8e38:	fffffffd fffffffe ffffffff 00000000     ................

1fff8e48 <slurInterval>:
1fff8e48:	fffffffb 00000000 00000000 00000000     ................
	...

1fff8e6c <startNote>:
1fff8e6c:	00000024                                $...

1fff8e70 <touch_Thr>:
1fff8e70:	00000514                                ....

1fff8e74 <vib2BreathAmount>:
1fff8e74:	                                         ..

1fff8e76 <vibRetn>:
1fff8e76:	                                         ..

1fff8e78 <vibSens>:
1fff8e78:	                                         ..

1fff8e7a <vibSensBite>:
1fff8e7a:	                                         ..

1fff8e7c <vibSquelch>:
1fff8e7c:	                                         ..

1fff8e7e <vibSquelchBite>:
1fff8e7e:	                                         ..

1fff8e80 <sensorPixelPos1>:
1fff8e80:	                                         ..

1fff8e82 <sensorPixelPos2>:
1fff8e82:	                                         ..

1fff8e84 <adjustMenuEntries>:
1fff8e84:	00013888 000138d0 000138b8 000138e8     .8...8...8...8..
1fff8e94:	000138a0 00013870                       .8..p8..

1fff8e9c <stateFirstRun>:
1fff8e9c:	                                         ..

1fff8e9e <wireless_channel>:
1fff8e9e:	                                         ..

1fff8ea0 <breathMenuEntries>:
1fff8ea0:	00014438 000146fc 00014f90 00014414     8D...F...O...D..
1fff8eb0:	00014684 00015050 00014660 000143a8     .F..PP..`F...C..
1fff8ec0:	00014fb4                                .O..

1fff8ec4 <controlMenuEntries>:
1fff8ec4:	00014270 0001415c 000145ac 00014330     pB..\A...E..0C..
1fff8ed4:	00015020 000147e0 00014e4c 00015074      P...G..LN..tP..
1fff8ee4:	00014480 00014768 000149e0 0001445c     .D..hG...I..\D..
1fff8ef4:	00015098 0001478c 00014354 00014720     .P...G..TC.. G..
1fff8f04:	00014228 000147bc 00014744              (B...G..DG..

1fff8f10 <extrasMenuEntries>:
1fff8f10:	00014588 00014564 00014510 000142e8     .E..dE...E...B..
1fff8f20:	00014e58 000144a4 0001418c 000142c4     XN...D...A...B..
1fff8f30:	000142a0 000143f0 00014990              .B...C...I..

1fff8f3c <mainMenuEntries>:
1fff8f3c:	00014924 000141e0 00014ffc 0001439c     $I...A...O...C..
1fff8f4c:	00014180 00014294 00014150 000141b0     .A...B..PA...A..
1fff8f5c:	00015044                                DP..

1fff8f60 <rotSubAMenuEntries>:
1fff8f60:	00014ecc 000145d0 000145f4 00014618     .N...E...E...F..
1fff8f70:	0001463c                                <F..

1fff8f74 <rotSubBMenuEntries>:
1fff8f74:	00014f24 00014804 00014828 0001484c     $O...H..(H..LH..
1fff8f84:	00014870                                pH..

1fff8f88 <rotSubCMenuEntries>:
1fff8f88:	00014f48 00014894 000148b8 000148dc     HO...H...H...H..
1fff8f98:	00014900                                .I..

1fff8f9c <rotatorMenuEntries>:
1fff8f9c:	00014e04 000141bc 00014204 00014534     .N...A...B..4E..
1fff8fac:	0001430c 000144ec 000144c8 00014ef0     .C...D...D...N..
1fff8fbc:	00014378 00014384 00014390              xC...C...C..

1fff8fc8 <vibratorMenuEntries>:
1fff8fc8:	000146a8 000143cc 0001424c 000146cc     .F...C..LB...F..
1fff8fd8:	00014e28 00014f6c 00014fd8 0001496c     (N..lO...O..lI..
1fff8fe8:	00014948                                HI..

1fff8fec <usb_string_product_name>:
1fff8fec:	004e0316 00450075 00490056 004d0020     ..N.u.E.V.I. .M.
1fff8ffc:	00440049 00000049                       I.D.I...

1fff9004 <Wire>:
1fff9004:	00015284 00000000 000003e8 00000000     .R..............
1fff9014:	40066000 0001525c 00000000 00000000     .`.@\R..........
	...

1fff90c0 <Wire1>:
1fff90c0:	00015284 00000000 000003e8 00000000     .R..............
1fff90d0:	40067000 0001523c 00000000 00000000     .p.@<R..........
	...

1fff917c <Serial2>:
1fff917c:	00015d28 00000000 000003e8 00000000     (]..............
1fff918c:	0000ff01                                ....

1fff9190 <Serial3>:
1fff9190:	00015d90 00000000 000003e8 00000000     .]..............
1fff91a0:	0000ff05                                ....

1fff91a4 <analog_config_bits>:
1fff91a4:	                                         .

1fff91a5 <analog_num_average>:
1fff91a5:	                                         ...

1fff91a8 <__brkval>:
1fff91a8:	1fffa44c                                L...

1fff91ac <analog_write_res>:
1fff91ac:	00000008                                ....

1fff91b0 <isr_table_portA>:
1fff91b0:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff91c0:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff91d0:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff91e0:	0000e765 0000e765                       e...e...

1fff91e8 <isr_table_portB>:
1fff91e8:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff91f8:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff9208:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff9218:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff9228:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...

1fff9238 <isr_table_portC>:
1fff9238:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff9248:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff9258:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...

1fff9268 <isr_table_portD>:
1fff9268:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...
1fff9278:	0000e765 0000e765 0000e765 0000e765     e...e...e...e...

1fff9288 <isr_table_portE>:
1fff9288:	0000e765 0000e765                       e...e...

1fff9290 <rts_high_watermark_>:
1fff9290:	00000028                                (...

1fff9294 <rts_low_watermark_>:
1fff9294:	0000001a                                ....

1fff9298 <rx_buffer_total_size_>:
1fff9298:	00000040                                @...

1fff929c <rx_pin_num>:
1fff929c:	00000009                                ....

1fff92a0 <tx_buffer_total_size_>:
1fff92a0:	00000028                                (...

1fff92a4 <tx_pin_num>:
1fff92a4:	0000000a                                ....

1fff92a8 <rts_high_watermark_>:
1fff92a8:	00000028                                (...

1fff92ac <rts_low_watermark_>:
1fff92ac:	0000001a                                ....

1fff92b0 <rx_buffer_total_size_>:
1fff92b0:	00000040                                @...

1fff92b4 <tx_buffer_total_size_>:
1fff92b4:	00000028                                (...

1fff92b8 <tx_pin_num>:
1fff92b8:	                                         .

1fff92b9 <_serialEvent2_default>:
1fff92b9:	                                         .

1fff92ba <_serialEvent3_default>:
1fff92ba:	                                         ..

1fff92bc <usb_buffer_available>:
1fff92bc:	ffffffff                                ....

1fff92c0 <yield_active_check_flags>:
1fff92c0:	00000001                                ....

1fff92c4 <config_descriptor>:
1fff92c4:	00950209 c0000103 000b0832 01020202     ........2.......
1fff92d4:	00040900 02020100 24050001 05011000     ...........$....
1fff92e4:	01010124 06022404 00062405 81050701     $....$...$......
1fff92f4:	40001003 00010409 00000a02 02050700     ...@............
1fff9304:	00004002 02830507 09000040 02000204     .@......@.......
1fff9314:	00000301 00012407 06002501 01010224     .....$...%..$...
1fff9324:	02240605 09050202 03010324 05010201     ..$.....$.......
1fff9334:	02032409 01010104 05050905 00004002     .$...........@..
1fff9344:	25050000 09010101 40028405 00000000     ...%.......@....
1fff9354:	01012505 00000003                       .%......

1fff935c <device_descriptor>:
1fff935c:	01100112 40000000 048916c0 02010275     .......@....u...
1fff936c:	00000103                                ....

1fff9370 <string0>:
1fff9370:	04090304                                ....

1fff9374 <usb_string_manufacturer_name_default>:
1fff9374:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff9384:	00690075 006f006e                       u.i.n.o.

1fff938c <usb_string_midi_port1_default>:
1fff938c:	0050030e 0072006f 00200074 00000031     ..P.o.r.t. .1...

1fff939c <usb_string_serial_number_default>:
1fff939c:	0000030c 00000000 00000000 00000000     ................
	...

1fff93b4 <__malloc_av_>:
	...
1fff93bc:	1fff93b4 1fff93b4 1fff93bc 1fff93bc     ................
1fff93cc:	1fff93c4 1fff93c4 1fff93cc 1fff93cc     ................
1fff93dc:	1fff93d4 1fff93d4 1fff93dc 1fff93dc     ................
1fff93ec:	1fff93e4 1fff93e4 1fff93ec 1fff93ec     ................
1fff93fc:	1fff93f4 1fff93f4 1fff93fc 1fff93fc     ................
1fff940c:	1fff9404 1fff9404 1fff940c 1fff940c     ................
1fff941c:	1fff9414 1fff9414 1fff941c 1fff941c     ................
1fff942c:	1fff9424 1fff9424 1fff942c 1fff942c     $...$...,...,...
1fff943c:	1fff9434 1fff9434 1fff943c 1fff943c     4...4...<...<...
1fff944c:	1fff9444 1fff9444 1fff944c 1fff944c     D...D...L...L...
1fff945c:	1fff9454 1fff9454 1fff945c 1fff945c     T...T...\...\...
1fff946c:	1fff9464 1fff9464 1fff946c 1fff946c     d...d...l...l...
1fff947c:	1fff9474 1fff9474 1fff947c 1fff947c     t...t...|...|...
1fff948c:	1fff9484 1fff9484 1fff948c 1fff948c     ................
1fff949c:	1fff9494 1fff9494 1fff949c 1fff949c     ................
1fff94ac:	1fff94a4 1fff94a4 1fff94ac 1fff94ac     ................
1fff94bc:	1fff94b4 1fff94b4 1fff94bc 1fff94bc     ................
1fff94cc:	1fff94c4 1fff94c4 1fff94cc 1fff94cc     ................
1fff94dc:	1fff94d4 1fff94d4 1fff94dc 1fff94dc     ................
1fff94ec:	1fff94e4 1fff94e4 1fff94ec 1fff94ec     ................
1fff94fc:	1fff94f4 1fff94f4 1fff94fc 1fff94fc     ................
1fff950c:	1fff9504 1fff9504 1fff950c 1fff950c     ................
1fff951c:	1fff9514 1fff9514 1fff951c 1fff951c     ................
1fff952c:	1fff9524 1fff9524 1fff952c 1fff952c     $...$...,...,...
1fff953c:	1fff9534 1fff9534 1fff953c 1fff953c     4...4...<...<...
1fff954c:	1fff9544 1fff9544 1fff954c 1fff954c     D...D...L...L...
1fff955c:	1fff9554 1fff9554 1fff955c 1fff955c     T...T...\...\...
1fff956c:	1fff9564 1fff9564 1fff956c 1fff956c     d...d...l...l...
1fff957c:	1fff9574 1fff9574 1fff957c 1fff957c     t...t...|...|...
1fff958c:	1fff9584 1fff9584 1fff958c 1fff958c     ................
1fff959c:	1fff9594 1fff9594 1fff959c 1fff959c     ................
1fff95ac:	1fff95a4 1fff95a4 1fff95ac 1fff95ac     ................
1fff95bc:	1fff95b4 1fff95b4 1fff95bc 1fff95bc     ................
1fff95cc:	1fff95c4 1fff95c4 1fff95cc 1fff95cc     ................
1fff95dc:	1fff95d4 1fff95d4 1fff95dc 1fff95dc     ................
1fff95ec:	1fff95e4 1fff95e4 1fff95ec 1fff95ec     ................
1fff95fc:	1fff95f4 1fff95f4 1fff95fc 1fff95fc     ................
1fff960c:	1fff9604 1fff9604 1fff960c 1fff960c     ................
1fff961c:	1fff9614 1fff9614 1fff961c 1fff961c     ................
1fff962c:	1fff9624 1fff9624 1fff962c 1fff962c     $...$...,...,...
1fff963c:	1fff9634 1fff9634 1fff963c 1fff963c     4...4...<...<...
1fff964c:	1fff9644 1fff9644 1fff964c 1fff964c     D...D...L...L...
1fff965c:	1fff9654 1fff9654 1fff965c 1fff965c     T...T...\...\...
1fff966c:	1fff9664 1fff9664 1fff966c 1fff966c     d...d...l...l...
1fff967c:	1fff9674 1fff9674 1fff967c 1fff967c     t...t...|...|...
1fff968c:	1fff9684 1fff9684 1fff968c 1fff968c     ................
1fff969c:	1fff9694 1fff9694 1fff969c 1fff969c     ................
1fff96ac:	1fff96a4 1fff96a4 1fff96ac 1fff96ac     ................
1fff96bc:	1fff96b4 1fff96b4 1fff96bc 1fff96bc     ................
1fff96cc:	1fff96c4 1fff96c4 1fff96cc 1fff96cc     ................
1fff96dc:	1fff96d4 1fff96d4 1fff96dc 1fff96dc     ................
1fff96ec:	1fff96e4 1fff96e4 1fff96ec 1fff96ec     ................
1fff96fc:	1fff96f4 1fff96f4 1fff96fc 1fff96fc     ................
1fff970c:	1fff9704 1fff9704 1fff970c 1fff970c     ................
1fff971c:	1fff9714 1fff9714 1fff971c 1fff971c     ................
1fff972c:	1fff9724 1fff9724 1fff972c 1fff972c     $...$...,...,...
1fff973c:	1fff9734 1fff9734 1fff973c 1fff973c     4...4...<...<...
1fff974c:	1fff9744 1fff9744 1fff974c 1fff974c     D...D...L...L...
1fff975c:	1fff9754 1fff9754 1fff975c 1fff975c     T...T...\...\...
1fff976c:	1fff9764 1fff9764 1fff976c 1fff976c     d...d...l...l...
1fff977c:	1fff9774 1fff9774 1fff977c 1fff977c     t...t...|...|...
1fff978c:	1fff9784 1fff9784 1fff978c 1fff978c     ................
1fff979c:	1fff9794 1fff9794 1fff979c 1fff979c     ................
1fff97ac:	1fff97a4 1fff97a4 1fff97ac 1fff97ac     ................

1fff97bc <__malloc_sbrk_base>:
1fff97bc:	ffffffff                                ....

1fff97c0 <__malloc_trim_threshold>:
1fff97c0:	00020000 00000000                       ........

1fff97c8 <_impure_data>:
1fff97c8:	00000000 1fffa174 1fffa1dc 1fffa244     ....t.......D...
	...
1fff9860:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff9870:	0005deec 0000000b 00000000 00000000     ................
	...

1fff98e8 <_impure_ptr>:
1fff98e8:	1fff97c8                                ....

1fff98ec <__atexit_recursive_mutex>:
1fff98ec:	1fffa2b0                                ....
